// -------- setup-emcc-node.js --------
// Set up console as expected by CoffeeScript code
this.console = console;
var Module = {
'preRun': [
function () {
if (typeof ENV !== 'undefined') {
ENV.PWD = process.cwd();
}
},
function() {
if (typeof FS !== 'undefined' && typeof fs !== 'undefined') {
var rootents = fs.readdirSync("/");
rootents.forEach(
ent => {
var pat = "/"+ent;
try {
if (fs.statSync(pat).isDirectory()) {
// console.warn("Entry: "+pat+" is a directory");
try {
FS.lookupPath(pat);
// console.warn("Skipping "+pat+" as exists already");
} catch (e) {
// console.warn("Mounting "+pat);
FS.mkdir(pat);
FS.mount(NODEFS, { root: pat }, pat);
}
}
} catch (e) {
// console.warn(e);
}
});
cwd = process.cwd();
FS.chdir(cwd);
// console.warn("Tried to chdir to "+cwd);
} else {
console.warn("Either FS or fs or both are undefined");
}
}
]
};
// Closure to hide resolve function
(function() {
var promres;
Module['EMCCInitialised'] = new Promise(function(resolve, reject) {
promres = resolve;
// console.log("EMCCInitialised promise created");
});
Module['onRuntimeInitialized'] = function() {
// console.log("Emscripten Runtime initialised");
promres();
// console.log("EMCCInitialised promise resolve called");
}
}).call();
// Module['EMCCInitialised'].then( () => { console.log("EMCCInitialised then resolved - From Setup code"); } );
// -------- CWAEnv.js --------
// Generated by CoffeeScript 2.6.1
(function() {
// CoffeeScript WebGL ARP Environment set up.
var CWAEnv, navigator;
navigator = this.navigator;
CWAEnv = (function() {
//-----------
class CWAEnv {
//-----------
constructor() {
throw "CWAEnv is not instantiatable.";
}
static add(cls, cname) {
var ref;
this._mod[cname] = cls;
if (cname === "Logger") {
this._lggr = cls.get("CWAEnv"); // , "trace", "stderr"
}
return (ref = this._lggr) != null ? typeof ref.trace === "function" ? ref.trace(`CWAEnv add for ${cname}`) : void 0 : void 0;
}
static get(cname) {
var ref, ref1, res;
if ((ref = this._lggr) != null) {
if (typeof ref.trace === "function") {
ref.trace(`CWAEnv get for ${cname}`);
}
}
res = this._mod[cname];
if (res != null) {
return res;
} else {
return (ref1 = this._lggr) != null ? ref1.warn(`No CWAEnv entry for ${cname}`) : void 0;
}
}
static fixRef(aname, bname) {
return this._mod[aname][`set${bname}`](this._mod[bname]);
}
static _setEnvTags() {
var avlc, ref, uaHas, ualc;
//---------
[avlc, ualc, this.platTag] = navigator != null ? [navigator.appVersion.toLowerCase(), navigator.userAgent.toLowerCase(), navigator.platform] : ["node", "node", "node"];
uaHas = function(str) {
return (ualc.indexOf(`${str}/`)) !== -1;
};
// OPR can be with Chrome
// Chrome can be with Safari
// iOS version of Opera has no browser except Mobile
this.browTag = uaHas("opr") ? "Opera" : (uaHas("edge")) || (uaHas("edgios")) ? "Edge" : (uaHas("firefox")) || (uaHas("fxios")) ? "Firefox" : (uaHas("chrome")) || (uaHas("crios")) ? "Chrome" : uaHas("safari") ? "Safari" : uaHas("trident") ? "IE" : uaHas("mobile") ? "Opera" : `Unknown browser \"${ualc}\"`;
// Seems javaEnabled is unreliable on IE and Edge
// Testing mime types works generally but not on IE
// IE and Edge always report javaEnabled so fail safe
if (this.browTag === "IE") {
// Was: @hasJava = do navigator?.javaEnabled
return this.hasJava = navigator != null ? navigator.javaEnabled() : void 0;
} else {
return this.hasJava = (navigator != null ? (ref = navigator.mimeTypes) != null ? ref['application/x-java-applet'] : void 0 : void 0) != null;
}
}
};
// Static
CWAEnv._mod = {};
CWAEnv._lggr = null;
CWAEnv.platTag = null;
CWAEnv.browTag = null;
CWAEnv.hasJava = false;
CWAEnv._setEnvTags();
return CWAEnv;
}).call(this);
// CWASA will report settings from environment
// Export
this.getCWAEnv = function() {
return CWAEnv;
};
// Make methods available in the normal way as well
CWAEnv.add(CWAEnv, "CWAEnv");
// (End CWAEnv.coffee)
}).call(this);
// -------- Logger.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var Logger, console, cwaenv;
cwaenv = this.getCWAEnv();
console = this.console;
Logger = (function() {
var base;
class Logger {
// Class Statics
static _nullLogger() {}
static _baseLogger(lev) {
return console[lev].bind(console);
}
static _tagLogger(lev, nom, tag, force) {
var lfn, lgr, tagstr;
lgr = force === "stderr" ? this.OrigWarnLogger : this._defaultLogger[lev].logger;
while (nom.length < 6) {
nom += " ";
}
if (tag !== "") {
while (tag.length < 5) {
tag += " ";
}
nom += " " + tag;
}
tagstr = nom + ": ";
return lfn = (msg, ...args) => {
return lgr(`${((new Date()).toISOString()).substr(11, 12)} ${tagstr}${msg}`, ...args);
};
}
// List names of installed Loggers as string
static list() {
var i, ix, len, lgr, msg, ref;
msg = "";
ref = this._loggers;
for (ix = i = 0, len = ref.length; i < len; ix = ++i) {
lgr = ref[ix];
if (ix > 0) {
msg += ", ";
}
msg += lgr.modName;
}
return msg;
}
// Object Methods
_setLoggers(newMaxLog, force) {
var lgr, lgrObj, newMaxLogLev, ref, ref1, ref2, results;
newMaxLogLev = Logger._defaultLogger[newMaxLog].lev;
if (force === "noforce") {
newMaxLogLev = Math.min(newMaxLogLev, Logger._buildMaxLogLev);
}
this.maxLog = newMaxLog;
this.maxLogLev = newMaxLogLev;
this.force = force;
ref = Logger._defaultLogger;
results = [];
for (lgr in ref) {
lgrObj = ref[lgr];
if (lgrObj.lev > this.maxLogLev) {
if ((ref1 = Logger._modLogger) != null) {
if (typeof ref1.trace === "function") {
ref1.trace(`Ignoring ${lgr} (lev ${lgrObj.lev}) for ${this.modName}`);
}
}
results.push(this[lgr] = null);
} else {
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`Setting ${lgr} (lev ${Logger._defaultLogger[lgr].lev}) for ${this.modName}`);
}
}
if (force === "stderr") {
// Tag all to stderr with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, lgr, force));
} else {
// Tag debug and trace with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, (lgrObj.lev > 500 ? lgr : ""), force));
}
}
}
return results;
}
// Constructor for Logger
constructor(modName = "anon", newMaxLog, force) {
var ref;
this.modName = modName;
this._setLoggers(newMaxLog, force);
// Note: Logger._modLogger will not be defined when this is first called by this module
if ((ref = Logger._modLogger) != null) {
if (typeof ref.trace === "function") {
ref.trace(`${this.modName} created: ${this.maxLog} (${this.maxLogLev}) ${this.force}`);
}
}
Logger._loggers.push(this);
}
// Find or create named Logger
// Uses Logger._defaultMaxLog if maxLog not set
static get(lgr = "anon", maxLog = "default", force = "default") {
var i, len, lg, ref, ref1, ref2, ref3, stat, theLogger;
theLogger = null;
ref = Logger._loggers;
for (i = 0, len = ref.length; i < len; i++) {
lg = ref[i];
if (lg.modName === lgr) {
if (theLogger == null) {
theLogger = lg;
}
}
}
stat = theLogger != null ? "Updated" : "Created";
if (theLogger != null) {
if (maxLog === "default") {
maxLog = theLogger.maxLog;
}
if (force === "default") {
force = theLogger.force;
}
if ((ref1 = Logger._modLogger) != null) {
if (typeof ref1.trace === "function") {
ref1.trace(`get: Updating ${theLogger.modName} Logger. MaxLog ${theLogger.maxLog} -> ${maxLog}`);
}
}
theLogger._setLoggers(maxLog, force);
} else {
if (maxLog === "default") {
maxLog = Logger._defaultMaxLog;
}
if (force === "default") {
force = "noforce";
}
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`get: Create ${lgr} logger`);
}
}
theLogger = new Logger(lgr, maxLog, force);
}
if ((ref3 = Logger._modLogger) != null) {
if (typeof ref3.debug === "function") {
ref3.debug(`${theLogger.modName} ${stat}: ${theLogger.maxLog} (${theLogger.maxLogLev}) ${theLogger.force}`);
}
}
return theLogger;
}
static _listHooks() {
var base, base1, hk, i, j, len, len1, ref, rep, results, ty, typs;
typs = Object.keys(this._hooks);
if (typeof (base = this._hookLog).trace === "function") {
base.trace(`Listing hooks. Types ${typs}`);
}
results = [];
for (i = 0, len = typs.length; i < len; i++) {
ty = typs[i];
rep = `Hooks for ${ty} (${this._hooks[ty].length}):`;
ref = this._hooks[ty];
for (j = 0, len1 = ref.length; j < len1; j++) {
hk = ref[j];
rep += ` ${hk.typ}/${hk.av}`;
}
results.push(typeof (base1 = this._hookLog).trace === "function" ? base1.trace(rep) : void 0);
}
return results;
}
static addHook(typ, fun, av = "*") {
var base, base1, hook;
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
hook = {
typ: typ,
fun: fun,
av: av
};
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Adding ${hook.typ} hook [${hook.av}]`);
}
Logger._hooks[typ].push(hook);
return Logger._listHooks();
}
static callHook(typ, msg, av = "*") {
var base, base1, base2, doCall, evt, hk, i, len, ref, results;
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
evt = {
typ: typ,
msg: msg,
av: av
};
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Calling ${typ} hook for ${av} [${JSON.stringify(msg)}] (${Logger._hooks[typ].length} hooks)`);
}
ref = Logger._hooks[typ];
results = [];
for (i = 0, len = ref.length; i < len; i++) {
hk = ref[i];
doCall = av === "*" || hk.av === "*" || av === hk.av;
if (typeof (base2 = Logger._hookLog).trace === "function") {
base2.trace(`Try ${hk.typ} hook for ${hk.av}: ${doCall ? '' : 'No '}Match`);
}
if (doCall) {
results.push(hk.fun(evt));
} else {
results.push(void 0);
}
}
return results;
}
};
Logger.OrigErrorLogger = Logger._baseLogger("error");
Logger.OrigWarnLogger = Logger._baseLogger("warn");
Logger.OrigLogLogger = Logger._baseLogger("log");
Logger.OrigInfoLogger = Logger._baseLogger("info");
Logger._defaultLogger = {
error: {
lev: 200,
logger: Logger.OrigErrorLogger
},
warn: {
lev: 300,
logger: Logger.OrigWarnLogger
},
log: {
lev: 400,
logger: Logger.OrigLogLogger
},
info: {
lev: 500,
logger: Logger.OrigInfoLogger
},
debug: {
lev: 600,
logger: Logger.OrigInfoLogger
},
trace: {
lev: 700,
logger: Logger.OrigInfoLogger
}
};
// Absolute maximum and default set according to (last character of) version
Logger._buildVersion = "loc2022";
// Treat an unmapped parameter as a production release
[Logger._buildMaxLog, Logger._defaultMaxLog] = (function() {
switch (Logger._buildVersion.slice(-1)) {
case "t":
case "u":
case "v":
return ["trace", "debug"];
case "w":
case "x":
case "y":
return ["trace", "info"];
case "z":
return ["info", "info"];
default:
return ["log", "log"];
}
}).call(this);
Logger._buildMaxLogLev = Logger._defaultLogger[Logger._buildMaxLog].lev;
Logger._loggers = [];
// console.log "Logger testing with multiple arguments. First. %s. %s.", "Second", "Third"
// Override console logs to trap any remaining uses
console.error = function(msg, ...args) {
return Logger.OrigErrorLogger((((new Date()).toISOString()).substr(11, 12)) + " Error: " + msg, ...args);
};
console.warn = function(msg, ...args) {
return Logger.OrigWarnLogger((((new Date()).toISOString()).substr(11, 12)) + " Warn: " + msg, ...args);
};
console.log = function(msg, ...args) {
return Logger.OrigLogLogger((((new Date()).toISOString()).substr(11, 12)) + " Log: " + msg, ...args);
};
console.info = function(msg, ...args) {
return Logger.OrigInfoLogger((((new Date()).toISOString()).substr(11, 12)) + " Info: " + msg, ...args);
};
// Logger for the Logger module
Logger._modLogger = Logger.get("Logger"); // , "debug" # , "stderr"
// Hooks for status reporting
Logger._hookLog = Logger.get("Hooks");
Logger._hooks = {};
if (typeof (base = Logger._modLogger).info === "function") {
base.info(`Build Version ${Logger._buildVersion}. Build MaxLog ${Logger._buildMaxLog}. Build MaxLogLev ${Logger._buildMaxLogLev}. Default MaxLog ${Logger._defaultMaxLog}`);
}
return Logger;
}).call(this);
// Object Methods
// Export
cwaenv.add(Logger, "Logger");
// (End Logger.coffee)
}).call(this);
// -------- animgen.js --------
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};
// See https://caniuse.com/mdn-javascript_builtins_object_assign
// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);
var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
throw toThrow;
};
// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).
// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
if (Module['locateFile']) {
return Module['locateFile'](path, scriptDirectory);
}
return scriptDirectory + path;
}
// Hooks that are implemented differently in different runtime environments.
var read_,
readAsync,
readBinary,
setWindowTitle;
// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
if (e instanceof ExitStatus) return;
let toLog = e;
err('exiting due to exception: ' + toLog);
}
var fs;
var nodePath;
var requireNodeFS;
if (ENVIRONMENT_IS_NODE) {
if (ENVIRONMENT_IS_WORKER) {
scriptDirectory = require('path').dirname(scriptDirectory) + '/';
} else {
scriptDirectory = __dirname + '/';
}
// include: node_shell_read.js
requireNodeFS = () => {
// Use nodePath as the indicator for these not being initialized,
// since in some environments a global fs may have already been
// created.
if (!nodePath) {
fs = require('fs');
nodePath = require('path');
}
};
read_ = function shell_read(filename, binary) {
var ret = tryParseAsDataURI(filename);
if (ret) {
return binary ? ret : ret.toString();
}
requireNodeFS();
filename = nodePath['normalize'](filename);
return fs.readFileSync(filename, binary ? undefined : 'utf8');
};
readBinary = (filename) => {
var ret = read_(filename, true);
if (!ret.buffer) {
ret = new Uint8Array(ret);
}
return ret;
};
readAsync = (filename, onload, onerror) => {
var ret = tryParseAsDataURI(filename);
if (ret) {
onload(ret);
}
requireNodeFS();
filename = nodePath['normalize'](filename);
fs.readFile(filename, function(err, data) {
if (err) onerror(err);
else onload(data.buffer);
});
};
// end include: node_shell_read.js
if (process['argv'].length > 1) {
thisProgram = process['argv'][1].replace(/\\/g, '/');
}
arguments_ = process['argv'].slice(2);
if (typeof module != 'undefined') {
module['exports'] = Module;
}
process['on']('uncaughtException', function(ex) {
// suppress ExitStatus exceptions from showing an error
if (!(ex instanceof ExitStatus)) {
throw ex;
}
});
// Without this older versions of node (< v15) will log unhandled rejections
// but return 0, which is not normally the desired behaviour.  This is
// not be needed with node v15 and about because it is now the default
// behaviour:
// See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
process['on']('unhandledRejection', function(reason) { throw reason; });
quit_ = (status, toThrow) => {
if (keepRuntimeAlive()) {
process['exitCode'] = status;
throw toThrow;
}
logExceptionOnExit(toThrow);
process['exit'](status);
};
Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
scriptDirectory = self.location.href;
} else if (typeof document != 'undefined' && document.currentScript) { // web
scriptDirectory = document.currentScript.src;
}
// blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
// otherwise, slice off the final part of the url to find the script directory.
// if scriptDirectory does not contain a slash, lastIndexOf will return -1,
// and scriptDirectory will correctly be replaced with an empty string.
// If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
// they are removed because they could contain a slash.
if (scriptDirectory.indexOf('blob:') !== 0) {
scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
} else {
scriptDirectory = '';
}
// Differentiate the Web Worker from the Node Worker case, as reading must
// be done differently.
{
// include: web_or_worker_shell_read.js
read_ = (url) => {
try {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
xhr.send(null);
return xhr.responseText;
} catch (err) {
var data = tryParseAsDataURI(url);
if (data) {
return intArrayToString(data);
}
throw err;
}
}
if (ENVIRONMENT_IS_WORKER) {
readBinary = (url) => {
try {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
xhr.responseType = 'arraybuffer';
xhr.send(null);
return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
} catch (err) {
var data = tryParseAsDataURI(url);
if (data) {
return data;
}
throw err;
}
};
}
readAsync = (url, onload, onerror) => {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, true);
xhr.responseType = 'arraybuffer';
xhr.onload = () => {
if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
onload(xhr.response);
return;
}
var data = tryParseAsDataURI(url);
if (data) {
onload(data.buffer);
return;
}
onerror();
};
xhr.onerror = onerror;
xhr.send(null);
}
// end include: web_or_worker_shell_read.js
}
setWindowTitle = (title) => document.title = title;
} else
{
}
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);
// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];
// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
var STACK_ALIGN = 16;
var POINTER_SIZE = 4;
function getNativeTypeSize(type) {
switch (type) {
case 'i1': case 'i8': case 'u8': return 1;
case 'i16': case 'u16': return 2;
case 'i32': case 'u32': return 4;
case 'i64': case 'u64': return 8;
case 'float': return 4;
case 'double': return 8;
default: {
if (type[type.length - 1] === '*') {
return POINTER_SIZE;
} else if (type[0] === 'i') {
const bits = Number(type.substr(1));
assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
return bits / 8;
} else {
return 0;
}
}
}
}
function warnOnce(text) {
if (!warnOnce.shown) warnOnce.shown = {};
if (!warnOnce.shown[text]) {
warnOnce.shown[text] = 1;
err(text);
}
}
// include: runtime_functions.js
// This gives correct answers for everything less than 2^{14} = 16384
// I hope nobody is contemplating functions with 16384 arguments...
function uleb128Encode(n) {
if (n < 128) {
return [n];
}
return [(n % 128) | 128, n >> 7];
}
// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
return func;
}
var freeTableIndexes = [];
// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;
function getEmptyTableSlot() {
// Reuse a free index if there is one, otherwise grow.
if (freeTableIndexes.length) {
return freeTableIndexes.pop();
}
// Grow the table
try {
wasmTable.grow(1);
} catch (err) {
if (!(err instanceof RangeError)) {
throw err;
}
throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
}
return wasmTable.length - 1;
}
function updateTableMap(offset, count) {
for (var i = offset; i < offset + count; i++) {
var item = getWasmTableEntry(i);
// Ignore null values.
if (item) {
functionsInTableMap.set(item, i);
}
}
}
/**
* Add a function to the table.
* 'sig' parameter is required if the function being added is a JS function.
* @param {string=} sig
*/
function addFunction(func, sig) {
// Check if the function is already in the table, to ensure each function
// gets a unique index. First, create the map if this is the first use.
if (!functionsInTableMap) {
functionsInTableMap = new WeakMap();
updateTableMap(0, wasmTable.length);
}
if (functionsInTableMap.has(func)) {
return functionsInTableMap.get(func);
}
// It's not in the table, add it now.
var ret = getEmptyTableSlot();
// Set the new value.
try {
// Attempting to call this with JS function will cause of table.set() to fail
setWasmTableEntry(ret, func);
} catch (err) {
if (!(err instanceof TypeError)) {
throw err;
}
var wrapped = convertJsFunctionToWasm(func, sig);
setWasmTableEntry(ret, wrapped);
}
functionsInTableMap.set(func, ret);
return ret;
}
function removeFunction(index) {
functionsInTableMap.delete(getWasmTableEntry(index));
freeTableIndexes.push(index);
}
// end include: runtime_functions.js
// include: runtime_debug.js
// end include: runtime_debug.js
var tempRet0 = 0;
var setTempRet0 = (value) => { tempRet0 = value; };
var getTempRet0 = () => tempRet0;
// === Preamble library stuff ===
// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime = Module['noExitRuntime'] || true;
// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.
// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
// Note that we do not use closure quoting (this['buffer'], etc.) on these
// functions, as they are just meant for internal use. In other words, this is
// not a fully general polyfill.
/** @constructor */
Memory: function(opts) {
this.buffer = new ArrayBuffer(opts['initial'] * 65536);
},
Module: function(binary) {
// TODO: use the binary and info somehow - right now the wasm2js output is embedded in
// the main JS
},
/** @constructor */
Instance: function(module, info) {
// TODO: use the module and info somehow - right now the wasm2js output is embedded in
// the main JS
// This will be replaced by the actual wasm2js code.
this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg) {
function Table(ret) {
// grow method not included; table is not growable
ret.set = function(i, func) {
this[i] = func;
};
ret.get = function(i) {
return this[i];
};
return ret;
}
var bufferView;
var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
for (var i = 25; i >= 0; --i) {
base64ReverseLookup[48+i] = 52+i; // '0-9'
base64ReverseLookup[65+i] = i; // 'A-Z'
base64ReverseLookup[97+i] = 26+i; // 'a-z'
}
base64ReverseLookup[43] = 62; // '+'
base64ReverseLookup[47] = 63; // '/'
/** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
for (; i < bLength; i += 4) {
b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
}
}
function initActiveSegments(imports) {
base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 48998, "gD8AAIC/");
base64DecodeToExistingUint8Array(bufferView, 49038, "gD8AAIC/CgAAAAkAAAAI");
base64DecodeToExistingUint8Array(bufferView, 49064, "CtcjPAAAAAAUAAAAFQAAABYAAAAXAAAAAwAAAAUAAAAFAAAABAAAAAUAAAAFAAAAdWZtcwIAAAABAAAABAAAAAMAAAAxNkNvbXBvdW5kTW92ZW1lbnQAAAAAAAABAAAAAgAAAAAAAAAJAAAACQAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAxM0Jhc2ljTW92ZW1lbnQAMThBYnN0cmFjdFRpbWVkTW9ycGgAMTZBdG9taWNUaW1lZE1vcnBoADEzUGFyVGltZWRNb3JwaAAxM1NlcVRpbWVkTW9ycGgAMTdOb25tYW51YWxNb3ZlbWVudAAxNkRpcmVjdGVkTW92ZW1lbnQAMTZDaXJjdWxhck1vdmVtZW50ADEwTm9Nb3ZlbWVudAAxM1dyaXN0TW92ZW1lbnQAMThGaW5nZXJQbGF5TW92ZW1lbnQAMTRSZXBlYXRNb3ZlbWVudAAxMVBhck1vdmVtZW50ADExU2VxTW92ZW1lbnQAMTNTcGxpdE1vdmVtZW50ADE3VGFyZ2V0dGVkTW92ZW1lbnQ=");
base64DecodeToExistingUint8Array(bufferView, 49504, "AwACAAMAAgACAAIAAQABAAEAAQABAAAAAQAAAAEAAAACAAAAAwAAADEwWE1MV3JhcHBlcgAxMkV4cGF0V3JhcHBlcgBpaWkAaWlpaQBpaWlkZABpaWQAaWlkZGRkZGRkAGk=");
base64DecodeToExistingUint8Array(bufferView, 49616, "eG1sPWh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZQBDREFUQQBJRABJRFJFRgBJRFJFRlMARU5USVRZAEVOVElUSUVTAE5NVE9LRU4ATk1UT0tFTlMATk9UQVRJT04oAHwAKAAAAGh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZQ==");
base64DecodeToExistingUint8Array(bufferView, 49776, "aHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8ARE9DVFlQRQBTWVNURU0AUFVCTElDAEVOVElUWQBBVFRMSVNUAEVMRU1FTlQATk9UQVRJT04ATkRBVEEAQ0RBVEEASUQASURSRUYASURSRUZTAEVOVElUSUVTAE5NVE9LRU4ATk1UT0tFTlMASU1QTElFRABSRVFVSVJFRABGSVhFRABFTVBUWQBBTlkAUENEQVRB");
base64DecodeToExistingUint8Array(bufferView, 50000, "//////////////////////////////////////////8AAAAAAAAABP7//4f+//8HAAAAAAAAAAD//3////9///////////N//v3//////3///////////w/g/////zH8////AAAAAAAAAP//////////////AQD4Aw==");
base64DecodeToExistingUint8Array(bufferView, 50144, "QNf///v/////f39U/f8PAP7f///////////+3/////8DAP///////58Z////zz8DAAAAAAAA/v///38C/v///38=");
base64DecodeToExistingUint8Array(bufferView, 50218, "////BwcAAAAAAP7//wf+BwAAAAD+//////////98/38vAGAAAADg////////IwAAAP8DAAAA4J/5///9xQMAAACwAwADAOCH+f///W0DAAAAXgAAHADgr/v///3tIwAAAAABAAAA4J/5///9zSMAAACwAwAAAODHPdYYx78DAAAAAAAAAADg3/3///3vAwAAAAADAAAA4N/9///97wMAAABAAwAAAODf/f///f8DAAAAAAM=");
base64DecodeToExistingUint8Array(bufferView, 50416, "/v////9/DQA/AAAAAAAAAJYl8P6ubA0gHw==");
base64DecodeToExistingUint8Array(bufferView, 50456, "//7///8D");
base64DecodeToExistingUint8Array(bufferView, 50500, "/////z8A/////38A7doHAAAAAFABUDGCq2IsAAAAAEAAyYD1BwAAAAAIAQL/////////////////////////D///////////////A///Pz//////Pz//qv///z/////////fX9wfzw//H9wfAAAAAEBM");
base64DecodeToExistingUint8Array(bufferView, 50624, "Bw==");
base64DecodeToExistingUint8Array(bufferView, 50640, "gAAAAP4DAAD+////////////HwD+/////////////wfg/////x8=");
base64DecodeToExistingUint8Array(bufferView, 50704, "//////////////////////////8/");
base64DecodeToExistingUint8Array(bufferView, 50736, "//////////////////////////8P");
base64DecodeToExistingUint8Array(bufferView, 50773, "YP8H/v//h/7//wcAAAAAAACAAP//f////3//////AAAAAAAAAP//////////////AQD4AwADAAAAAAD//////////z8AAAADAAAAwNf///v/////f39U/f8PAP7f///////////+3/////97AP///////58Z////zz8DAAAAAAAA/v///38C/v///38A/v/7//+7FgD///8HBwAAAAAA/v//B///BwD/A////////////3z/f+///z3/A+7////////z/z8e/8//AADun/n///3F0585gLDP/wMA5If5///9bdOHOQBewP8fAO6v+////e3zvzsAAMH/AADun/n///3N8485wLDD/wAA7Mc91hjHv8PHPYAAgP8AAO7f/f///e/D3z1gAMP/AADs3/3///3vw989YEDD/wAA7N/9///9/8PPPYAAw/8=");
base64DecodeToExistingUint8Array(bufferView, 51120, "/v////9//wf/f/8DAAAAAJYl8P6ubP87Xz//AwAAAAAAAAAD/wOgwv/+////A/7/3w+//v8//gI=");
base64DecodeToExistingUint8Array(bufferView, 51210, "/x8CAAAAoAAAAP7/PgD+////////////H2b+/////////////3cCAwQFBgcIAAAJCgsMDQ4PEBE=");
base64DecodeToExistingUint8Array(bufferView, 51278, "EhMAFA==");
base64DecodeToExistingUint8Array(bufferView, 51296, "FRY=");
base64DecodeToExistingUint8Array(bufferView, 51326, "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBFw==");
base64DecodeToExistingUint8Array(bufferView, 51420, "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBARg=");
base64DecodeToExistingUint8Array(bufferView, 51504, "GQMaGxwdHgAAHyAhIiMkJRAR");
base64DecodeToExistingUint8Array(bufferView, 51534, "EhMmFA==");
base64DecodeToExistingUint8Array(bufferView, 51552, "JxY=");
base64DecodeToExistingUint8Array(bufferView, 51582, "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBFw==");
base64DecodeToExistingUint8Array(bufferView, 51676, "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBARg=");
base64DecodeToExistingUint8Array(bufferView, 51760, "Q0RBVEFbSVNPLTg4NTktMQBVUy1BU0NJSQBVVEYtOABVVEYtMTYAVVRGLTE2QkUAVVRGLTE2TEUAdmVyc2lvbgBlbmNvZGluZwBzdGFuZGFsb25lAHllcwBubwDbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwAAAAAA4Y+0+2g9JP16Yez/aD8k/aTesMWghIjO0DxQzaCGiMwMAAAAEAAAABAAAAAYAAACD+aIARE5uAPwpFQDRVycA3TT1AGLbwAA8mZUAQZBDAGNR/gC73qsAt2HFADpuJADSTUIASQbgAAnqLgAcktEA6x3+ACmxHADoPqcA9TWCAES7LgCc6YQAtCZwAEF+XwDWkTkAU4M5AJz0OQCLX4QAKPm9APgfOwDe/5cAD5gFABEv7wAKWosAbR9tAM9+NgAJyycARk+3AJ5mPwAt6l8Auid1AOXrxwA9e/EA9zkHAJJSigD7a+oAH7FfAAhdjQAwA1YAe/xGAPCrawAgvM8ANvSaAOOpHQBeYZEACBvmAIWZZQCgFF8AjUBoAIDY/wAnc00ABgYxAMpWFQDJqHMAe+JgAGuMwAAZxEcAzWfDAAno3ABZgyoAi3bEAKYclgBEr90AGVfRAKU+BQAFB/8AM34/AMIy6ACYT94Au30yACY9wwAea+8An/heADUfOgB/8soA8YcdAHyQIQBqJHwA1W76ADAtdwAVO0MAtRTGAMMZnQCtxMIALE1BAAwAXQCGfUYA43EtAJvGmgAzYgAAtNJ8ALSnlwA3VdUA1z72AKMQGABNdvwAZJ0qAHDXqwBjfPgAerBXABcV5wDASVYAO9bZAKeEOAAkI8sA1op3AFpUIwAAH7kA8QobABnO3wCfMf8AZh5qAJlXYQCs+0cAfn/YACJltwAy6IkA5r9gAO/EzQBsNgkAXT/UABbe1wBYO94A3puSANIiKAAohugA4lhNAMbKMgAI4xYA4H3LABfAUADzHacAGOBbAC4TNACDEmIAg0gBAPWOWwCtsH8AHunyAEhKQwAQZ9MAqt3YAK5fQgBqYc4ACiikANOZtAAGpvIAXHd/AKPCgwBhPIgAinN4AK+MWgBv170ALaZjAPS/ywCNge8AJsFnAFXKRQDK2TYAKKjSAMJhjQASyXcABCYUABJGmwDEWcQAyMVEAE2ykQAAF/MA1EOtAClJ5QD91RAAAL78AB6UzABwzu4AEz71AOzxgACz58MAx/goAJMFlADBcT4ALgmzAAtF8wCIEpwAqyB7AC61nwBHksIAezIvAAxVbQByp5AAa+cfADHLlgB5FkoAQXniAPTfiQDolJcA4uaEAJkxlwCI7WsAX182ALv9DgBImrQAZ6RsAHFyQgCNXTIAnxW4ALzlCQCNMSUA93Q5ADAFHAANDAEASwhoACzuWABHqpAAdOcCAL3WJAD3faYAbkhyAJ8W7wCOlKYAtJH2ANFTUQDPCvIAIJgzAPVLfgCyY2gA3T5fAEBdAwCFiX8AVVIpADdkwABt2BAAMkgyAFtMdQBOcdQARVRuAAsJwQAq9WkAFGbVACcHnQBdBFAAtDvbAOp2xQCH+RcASWt9AB0nugCWaSkAxsysAK0UVACQ4moAiNmJACxyUAAEpL4AdweUAPMwcAAA/CcA6nGoAGbCSQBk4D0Al92DAKM/lwBDlP0ADYaMADFB3gCSOZ0A3XCMABe35wAI3zsAFTcrAFyAoABagJMAEBGSAA/o2ABsgK8A2/9LADiQDwBZGHYAYqUVAGHLuwDHibkAEEC9ANLyBABJdScA67b2ANsiuwAKFKoAiSYvAGSDdgAJOzMADpQaAFE6qgAdo8IAr+2uAFwmEgBtwk0ALXqcAMBWlwADP4MACfD2ACtAjABtMZkAObQHAAwgFQDYw1sA9ZLEAMatSwBOyqUApzfNAOapNgCrkpQA3UJoABlj3gB2jO8AaItSAPzbNwCuoasA3xUxAACuoQAM+9oAZE1mAO0FtwApZTAAV1a/AEf/OgBq+bkAdb7zACiT3wCrgDAAZoz2AATLFQD6IgYA2eQdAD2zpABXG48ANs0JAE5C6QATvqQAMyO1APCqGgBPZagA0sGlAAs/DwBbeM0AI/l2AHuLBACJF3IAxqZTAG9u4gDv6wAAm0pYAMTatwCqZroAds/PANECHQCx8S0AjJnBAMOtdwCGSNoA912gAMaA9ACs8C8A3eyaAD9cvADQ3m0AkMcfACrbtgCjJToAAK+aAK1TkwC2VwQAKS20AEuAfgDaB6cAdqoOAHtZoQAWEioA3LctAPrl/QCJ2/4Aib79AOR2bAAGqfwAPoBwAIVuFQD9h/8AKD4HAGFnMwAqGIYATb3qALPnrwCPbW4AlWc5ADG/WwCE10gAMN8WAMctQwAlYTUAyXDOADDLuAC/bP0ApACiAAVs5ABa3aAAIW9HAGIS0gC5XIQAcGFJAGtW4ACZUgEAUFU3AB7VtwAz8cQAE25fAF0w5ACFLqkAHbLDAKEyNgAIt6QA6rHUABb3IQCPaeQAJ/93AAwDgACNQC0AT82gACClmQCzotMAL10KALT5QgAR2ssAfb7QAJvbwQCrF70AyqKBAAhqXAAuVRcAJwBVAH8U8ADhB4YAFAtkAJZBjQCHvt4A2v0qAGsltgB7iTQABfP+ALm/ngBoak8ASiqoAE/EWgAt+LwA11qYAPTHlQANTY0AIDqmAKRXXwAUP7EAgDiVAMwgAQBx3YYAyd62AL9g9QBNZREAAQdrAIywrACywNAAUVVIAB77DgCVcsMAowY7AMBANQAG3HsA4EXMAE4p+gDWysgA6PNBAHxk3gCbZNgA2b4xAKSXwwB3WNQAaePFAPDaEwC6OjwARhhGAFV1XwDSvfUAbpLGAKwuXQAORO0AHD5CAGHEhwAp/ekA59bzACJ8ygBvkTUACODFAP/XjQBuauIAsP3GAJMIwQB8XXQAa62yAM1unQA+cnsAxhFqAPfPqQApc98Atcm6ALcAUQDisg0AdLokAOV9YAB02IoADRUsAIEYDAB+ZpQAASkWAJ96dgD9/b4AVkXvANl+NgDs2RMAi7q5AMSX/AAxqCcA8W7DAJTFNgDYqFYAtKi1AM/MDgASiS0Ab1c0ACxWiQCZzuMA1iC5AGteqgA+KpwAEV/MAP0LSgDh9PsAjjttAOKGLADp1IQA/LSpAO/u0QAuNckALzlhADghRAAb2cgAgfwKAPtKagAvHNgAU7SEAE6ZjABUIswAKlXcAMDG1gALGZYAGnC4AGmVZAAmWmAAP1LuAH8RDwD0tREA/Mv1ADS8LQA0vO4A6F3MAN1eYABnjpsAkjPvAMkXuABhWJsA4Ve8AFGDxgDYPhAA3XFIAC0c3QCvGKEAISxGAFnz1wDZepgAnlTAAE+G+gBWBvwA5XmuAIkiNgA4rSIAZ5PcAFXoqgCCJjgAyuebAFENpACZM7EAqdcOAGkFSABlsvAAf4inAIhMlwD50TYAIZKzAHuCSgCYzyEAQJ/cANxHVQDhdDoAZ+tCAP6d3wBe1F8Ae2ekALqsegBV9qIAK4gjAEG6VQBZbggAISqGADlHgwCJ4+YA5Z7UAEn7QAD/VukAHA/KAMVZigCU+isA08HFAA/FzwDbWq4AR8WGAIVDYgAhhjsALHmUABBhhwAqTHsAgCwaAEO/EgCIJpAAeDyJAKjE5ADl23sAxDrCACb06gD3Z4oADZK/AGWjKwA9k7EAvXwLAKRR3AAn3WMAaeHdAJqUGQCoKZUAaM4oAAnttABEnyAATpjKAHCCYwB+fCMAD7kyAKf1jgAUVucAIfEIALWdKgBvfk0ApRlRALX5qwCC39YAlt1hABY2AgDEOp8Ag6KhAHLtbQA5jXoAgripAGsyXABGJ1sAADTtANIAdwD89FUAAVlNAOBxgA==");
base64DecodeToExistingUint8Array(bufferView, 54707, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNfAAAQ==");
base64DecodeToExistingUint8Array(bufferView, 54784, "GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk=");
base64DecodeToExistingUint8Array(bufferView, 54865, "DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
base64DecodeToExistingUint8Array(bufferView, 54923, "DA==");
base64DecodeToExistingUint8Array(bufferView, 54935, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
base64DecodeToExistingUint8Array(bufferView, 54981, "EA==");
base64DecodeToExistingUint8Array(bufferView, 54993, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
base64DecodeToExistingUint8Array(bufferView, 55039, "Eg==");
base64DecodeToExistingUint8Array(bufferView, 55051, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
base64DecodeToExistingUint8Array(bufferView, 55106, "GgAAABoaGgAAAAAAAAk=");
base64DecodeToExistingUint8Array(bufferView, 55155, "FA==");
base64DecodeToExistingUint8Array(bufferView, 55167, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
base64DecodeToExistingUint8Array(bufferView, 55213, "Fg==");
base64DecodeToExistingUint8Array(bufferView, 55225, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG");
base64DecodeToExistingUint8Array(bufferView, 55300, "gwM=");
base64DecodeToExistingUint8Array(bufferView, 55340, "//////////8=");
base64DecodeToExistingUint8Array(bufferView, 55408, "0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMNAADTDgAAww8AAMMAAAy7AQAMwwIADMMDAAzDBAAM2wAAAAAc2wAAjwMAAJADAACRAwAAkgMAAJMDAACUAwAAlQMAAAAAAADw2gAAjgMAAJYDAACXAwAATlN0M19fMjhpb3NfYmFzZTdmYWlsdXJlRQAAAOzkAADU2gAAqOMAAE5TdDNfXzIxOV9faW9zdHJlYW1fY2F0ZWdvcnlFAAAA7OQAAPzaAADw4wAATm8gZXJyb3IgaW5mb3JtYXRpb24ASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgZG93bgBIb3N0IGlzIHVucmVhY2hhYmxlAEFkZHJlc3MgaW4gdXNlAEJyb2tlbiBwaXBlAEkvTyBlcnJvcgBObyBzdWNoIGRldmljZSBvciBhZGRyZXNzAEJsb2NrIGRldmljZSByZXF1aXJlZABObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAERldmljZSBub3QgYSBzdHJlYW0ATm8gZGF0YSBhdmFpbGFibGUARGV2aWNlIHRpbWVvdXQAT3V0IG9mIHN0cmVhbXMgcmVzb3VyY2VzAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBGaWxlIGRlc2NyaXB0b3IgaW4gYmFkIHN0YXRlAE5vdCBhIHNvY2tldABEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkAE1lc3NhZ2UgdG9vIGxhcmdlAFByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldABQcm90b2NvbCBub3QgYXZhaWxhYmxlAFByb3RvY29sIG5vdCBzdXBwb3J0ZWQAU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAFByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAENhbm5vdCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93bgBPcGVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcwBPcGVyYXRpb24gaW4gcHJvZ3Jlc3MAU3RhbGUgZmlsZSBoYW5kbGUAUmVtb3RlIEkvTyBlcnJvcgBRdW90YSBleGNlZWRlZABObyBtZWRpdW0gZm91bmQAV3JvbmcgbWVkaXVtIHR5cGUATXVsdGlob3AgYXR0ZW1wdGVk");
base64DecodeToExistingUint8Array(bufferView, 57938, "pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB");
base64DecodeToExistingUint8Array(bufferView, 58136, "IQQAAAAAAAAAAC8C");
base64DecodeToExistingUint8Array(bufferView, 58168, "NQRHBFYE");
base64DecodeToExistingUint8Array(bufferView, 58190, "oAQ=");
base64DecodeToExistingUint8Array(bufferView, 58210, "RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYAAAAAqOMAAKMDAACkAwAAlwMAAE5TdDNfXzIxMnN5c3RlbV9lcnJvckUAAOzkAACQ4wAAhOYAAE5TdDNfXzIxNGVycm9yX2NhdGVnb3J5RQAAAADE5AAAtOMAAE5TdDNfXzIxMl9fZG9fbWVzc2FnZUUAAOzkAADY4wAA0OMAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAOzkAAD84wAAtOYAAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAOzkAAAs5AAAIOQAAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAOzkAABc5AAAIOQAAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAOzkAACM5AAAgOQAAAAAAABQ5AAApwMAAKgDAACpAwAAqgMAAKsDAACsAwAArQMAAK4DAAAAAAAANOUAAKcDAACvAwAAqQMAAKoDAACrAwAAsAMAALEDAACyAwAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAOzkAAAM5QAAUOQAAAAAAACQ5QAApwMAALMDAACpAwAAqgMAAKsDAAC0AwAAtQMAALYDAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAA7OQAAGjlAABQ5AAAAAAAAOzlAACeAwAAtwMAALgDAAAAAAAA1OUAAJ4DAAC5AwAAugMAAFN0OWV4Y2VwdGlvbgAAAADE5AAAxOUAAFN0OWJhZF9hbGxvYwAAAADs5AAA3OUAANTlAAAAAAAAMOYAABEAAAC7AwAAvAMAAAAAAACE5gAAvQMAAL4DAACXAwAAU3QxMWxvZ2ljX2Vycm9yAOzkAAAg5gAA1OUAAAAAAABk5gAAEQAAAL8DAAC8AwAAU3QxMmxlbmd0aF9lcnJvcgAAAADs5AAAUOYAADDmAABTdDEzcnVudGltZV9lcnJvcgAAAOzkAABw5gAA1OUAAAAAAADI5gAAiwMAAMADAADBAwAAU3Q5dHlwZV9pbmZvAAAAAMTkAACk5gAAU3Q4YmFkX2Nhc3QA7OQAALzmAADU5Q==");
base64DecodeToExistingUint8Array(bufferView, 59108, "8OYAABMAAAAUAAAAxOQAAAAEAAAAAAAACOcAABUAAAAWAAAAxOQAAJS9AAAAAAAAIOcAABcAAAAYAAAAxOQAAJ29AAABAAAAxOQAAKa9AAAFAAAAAAAAAFjnAAA5AAAAOgAAADsAAAA8AAAAxOQAAMe9AABI5QAAtb0AAAAAAAABAAAAUOc=");
base64DecodeToExistingUint8Array(bufferView, 59252, "JOgAAFsAAABcAAAAUQAAAF0AAABSAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAAAAAADjoAABnAAAAaAAAAEkAAABpAAAASwAAAGoAAABrAAAATAAAAGwAAABtAAAAbgAAAAAAAABM6AAAbwAAAHAAAABNAAAAcQAAAE8AAAByAAAAcwAAAFAAAAB0AAAAdQAAAHYAAAB3AAAAxOQAAPa9AADs5AAA4L0AABzoAADE5AAADr4AAOzkAAAuvgAAMOgAAMTkAABZvgAA7OQAAEK+AABE6AAAAAAAABzoAAB4AAAAeQAAAHoAAAB7AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAAAAAAAw6AAAfAAAAH0AAAB6AAAAfgAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAAAAAAAROgAAH8AAACAAAAAegAAAIEAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAAAAAAEjpAACZAAAAmgAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAxOQAAH6+AAAAAAAArOkAAJkAAACbAAAAnAAAAJ0AAACeAAAAnwAAAKAAAAChAAAAogAAAKMAAACkAAAApQAAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAACtAAAArgAAAOzkAACOvgAASOkAAAAAAAAU6gAAmQAAAK8AAACwAAAAsQAAALIAAACzAAAAtAAAALUAAAC2AAAAtwAAALgAAAC5AAAAugAAALsAAAC8AAAAvQAAAL4AAAC/AAAAwAAAAMEAAADCAAAA7OQAAKO+AABI6QAAAAAAAHzqAACZAAAAwwAAAMQAAADFAAAAxgAAAMcAAADIAAAAyQAAAMoAAADLAAAAzAAAAM0AAADOAAAAzwAAANAAAADRAAAA0gAAANMAAADUAAAA1QAAANYAAADs5AAAub4AAEjpAAAAAAAA5OoAAJkAAADXAAAA2AAAANkAAADaAAAA2wAAANwAAADdAAAA3gAAAN8AAADgAAAA4QAAAOIAAADjAAAA5AAAAOUAAADmAAAA5wAAAOgAAADpAAAA6gAAAOzkAADTvgAASOkAAAAAAABM6wAAmQAAAOsAAADsAAAA7QAAAO4AAADvAAAA8AAAAPEAAADyAAAA8wAAAPQAAAD1AAAA9gAAAPcAAAD4AAAA+QAAAPoAAAD7AAAA/AAAAP0AAAD+AAAA7OQAAOy+AABI6Q==");
base64DecodeToExistingUint8Array(bufferView, 60258, "wD/NzIw/zczMPwAAAADD9cg/16PwP65HoT8AAAAAexTOPx+F6z97FK4/AAAAAMP1yD/2KNw/hevRPwAAAADD9cg/w/XIP8P1yD8AAAAAAAAAAI/C9b0AAAAAKVyPPXsULj4=");
base64DecodeToExistingUint8Array(bufferView, 60372, "PQpXPgAAAABcj0K+pHC9vg==");
base64DecodeToExistingUint8Array(bufferView, 60416, "zcxMPc3MzD0K16M9AAAAAM3MTD3NzMw9CtejPQAAAADNzEw9zczMPQrXoz0AAAAAzcxMPc3MzD0K16M9AAAAAAAAgD/E5AAAAL8AAAAAAABjLgAANi8AAOAwAADjLAAA7ysAACMyAADoMQAAtTEAAArXozy4MQAA3y8AANovAAAwMAAAMDA=");
base64DecodeToExistingUint8Array(bufferView, 60564, "HwAsACQA//8AAAAALAAeACQA//8AAAAAAwBDAEAA//8AAAAABAADAEEA//8AAAAAAwBAAEEA//8AAAAABABBAAUA//8AAAAAQQBCAAUA//8AAAAABQBCAEQA//8AAAAADAAPADcA//8AAAAADwAOADcA//8AAAAADgA1ADcA//8AAAAADQA1AA4A//8AAAAACwA1AA0A//8DAAAARQBGAEcASAD//0kASgBLAEwA//8DAAAAUQBSAFMAVAD//00ATgBPAFAA//8CAAAARQAKACMAJgBGAP//AgAAAE0ATgAlACIACQD//wIAAAAoACQAHgAiACUA//8CAAAAKQAmACMAHwAkAP//AgAAAAgAAQAHAAAAPgABAP//AgAAAAIAHgAsAB8AGwAdADcANAAzADUAHAAaAB4A//8AAAAAMQAzADQAMgD//wIAAAA7ADUAMwAxADgANQD//wIAAAA8ADcAOgAyADQANwD//wIAAAA2ADUAOAAxADIAOgA3AP//AgAAACEANwAdABsAHwAjAAoA//8CAAAAIAAJACIAHgAaABwANQD//wIAAAAvAC4ABwABAEgARwBGACYAKwAnAC4A//8CAAAALQAuACcAKgAlAE4ATwBQAAAABwAuAP//AgAAAAoARQBJAEoASwBMAEgA//8CAAAACQBQAFQAUwBSAFEATQD//wIAAAA+AAAAQwADAAQABQBEAAEA//8CAAAACgBIACEA//8CAAAACQAgAFAA//8CAAAADAA3AFUARABCABIA//8CAAAAVQA3ACEASAABAEQA//8CAAAACwAQAEAAQwBWADUA//8CAAAAVgBDAAAAUAAgADUA//8CAAAAEQASAEIAQQBAABAA//8CAAAABgAkACgAJQAqACcAKwAmACkAJAD//wMAAQAMABUAFAATAAsA//8PAA4ADQD//wMAAQASABEAEAD//wwAGAAXABYACwD/////AAAAAFDnAABOAQAATwEAAHoAAAAAAIA/AAAAAAAAAAByHQAAehMAAIIaAAC0GgAAdBM=");
base64DecodeToExistingUint8Array(bufferView, 61360, "mRAAAOgKAAAeCwAA5AoAABoL");
base64DecodeToExistingUint8Array(bufferView, 61392, "ch0AACocAADHIgAAeRkAAMwTAADdGgAA7AwAAOgDAABSuH4/AAAAAFTwAACaAQAAmwEAAHoAAACcAQAAnQEAAJ4BAACfAQAAoAEAAKEBAACiAQAAowEAAKQBAAClAQAApgEAAKcBAACoAQAAqQEAAKoBAACrAQAArAEAAHoAAACtAQAA7OQAAOy/AAA09QAAACsAAJAGAAAuJQAAZBwAAHYFAAAAAAAAhPUAAAwCAAANAgAADgIAAA8CAAAQAgAAEQIAABICAAATAgAAFAIAABUCAAAWAgAAFwIAABgCAAAZAgAAAAAAADT1AAAaAgAAGwIAAHoAAACcAQAAnQEAAJ4BAACfAQAAoAEAAKEBAACiAQAAowEAAKQBAAClAQAApgEAAKcBAACoAQAAqQEAAKoBAACrAQAArAEAAHoAAACtAQ==");
base64DecodeToExistingUint8Array(bufferView, 61728, "bhIAAMMZAAC1GQAA6AoAAB4LAABcGwAAAAAAACj2AAAcAgAAHQIAAB4CAAAfAgAAIAIAAAAAAAAw9gAAGgIAACECAAAiAgAAIwIAACQCAAAlAgAAJgIAAKABAAChAQAAogEAAKMBAACkAQAApQEAACcCAACnAQAAKAIAAKkBAACqAQAAKQIAAKwBAAAqAgAAKwIAAAAAAAA89gAALAIAAC0CAAAuAgAALwIAADACAAAxAgAAnwEAAKABAAChAQAAogEAAKMBAAAyAgAApQEAADMCAACnAQAANAIAAKkBAACqAQAANQIAAKwBAAA2AgAANwIAAAAAAABI9gAAGgIAADgCAAA5AgAAnAEAADoCAAA7AgAAnwEAAKABAAChAQAAogEAADwCAACkAQAApQEAAKYBAACnAQAAqAEAAKkBAACqAQAAPQIAAKwBAAA+AgAAPwIAAAAAAABU9gAAGgIAAEACAABBAgAAnAEAAEICAABDAgAAnwEAAKABAAChAQAAogEAAKMBAABEAgAApQEAAEUCAACnAQAARgIAAKkBAACqAQAARwIAAKwBAABIAgAASQIAAAAAAABg9gAAGgIAAEoCAABLAgAAnAEAAEwCAABNAgAAnwEAAKABAAChAQAAogEAAKMBAABOAgAApQEAAE8CAACnAQAAUAIAAKkBAACqAQAAUQIAAKwBAABSAgAAUwIAAAAAAABs9gAAVAIAAFUCAABWAgAAVwIAAFgCAABZAgAAWgIAAFsCAABcAgAAXQIAAKMBAACkAQAApQEAAKYBAACnAQAAXgIAAF8CAACqAQAAYAIAAKwBAABhAgAAYgIAAAAAAACc9gAAYwIAAGQCAABlAgAAZgIAAGcCAABoAgAAaQIAAKABAABqAgAAawIAAKMBAACkAQAApQEAAKYBAACnAQAAbAIAAKkBAACqAQAAbQIAAKwBAABuAgAAbwIAAAAAAAB49gAAmgEAAHACAABxAgAAcgIAAHMCAAB0AgAAdQIAAHYCAAB3AgAAeAIAAKMBAAB5AgAApQEAAHoCAACnAQAAewIAAHwCAACqAQAAfQIAAKwBAAB+AgAAfwI=");
base64DecodeToExistingUint8Array(bufferView, 62560, "7goAAAUhAAAeIQAAEyEAAIETAAAAAAAAhPYAAIACAACBAgAAggIAAIMCAACEAgAAhQIAAIYCAACHAgAAiAIAAIkCAACKAgAAiwIAAKUBAACMAgAApwEAAI0CAACOAgAAqgEAAI8CAACQAgAAkQIAAJICAAAAAAAAkPYAAJMCAACUAgAAlQIAAJYCAACdAQAAlwIAAJgCAACZAgAAmgIAAJsCAACcAgAAnQIAAKUBAACeAgAApwEAAJ8CAACgAgAAqgEAAKECAACsAQAAogIAAKMCAADE5AAAQMAAAAAAAAB89QAADAIAAKQCAAB6AAAAegAAAHoAAAARAgAAegAAAKUCAACmAgAApwIAAHoAAAB6AAAAGAIAABkCAADE5AAAUMAAAOzkAABlwAAAfPUAAAAAAADQ9QAAqAIAAKkCAACqAgAAqwIAAKwCAAARAgAArQIAAK4CAACmAgAArwIAALACAACxAgAAGAIAABkCAADs5AAAeMAAAHz1AAAAAAAAHPYAALICAACzAgAAtAIAALUCAAC2AgAAEQIAALcCAAC4AgAApgIAALkCAAC6AgAAuwIAABgCAAAZAgAA7OQAAIjAAAB89QAAxOQAAJjAAADs5AAArMAAADT1AADs5AAAv8AAADT1AADs5AAA0sAAADT1AADs5AAA38AAADT1AADs5AAA78AAADT1AADs5AAABMEAADT1AADs5AAAFcEAAFTwAADs5AAAI8EAAFTwAADs5AAAMcEAADT1AADs5AAAQcEAADT1AAAAAAAAMzMzPzMzM78=");
base64DecodeToExistingUint8Array(bufferView, 63168, "HTIAAOIxAACqMQAAoDEAAI8xAAAAAAAABPcAAN4CAADfAgAAegAAAHoAAAAAAAAADPcAAOACAADhAgAA4gIAAOMCAADE5AAAiMEAAOzkAACVwQAABPcAAOKEAAAQrAAAF68AAFwZAABAMgAAggUAAMAaAAD1MQAAhDEAAIQxAAAK1yM9");
base64DecodeToExistingUint8Array(bufferView, 63316, "VgUAAEcRAAAUJwAAOTkAAE0ZAAD9EQAASB0AAIohAAAECgAA/yUAAOIEAABQJgAAKQQAAKUSAAAOBAAAYCEAALMEAACqHAAALAsAAGMXAAAiJgAA6yMAAAIIAABjBAAA/QsAALgVAADzBQAA2QUAAD0EAAC2KAAAlSgAAMEnAAAYKQAAAykAAO0nAADgKAAAhwQAACkkAAAZKAAAbQ8=");
base64DecodeToExistingUint8Array(bufferView, 63488, "ysIAANDCAADTwgAA2cIAAKTCAADgwgAA6cIAAPHCAABAAwAAQQMAAEIDAABDAwAARAMAAEUDAABGAwAARwMAAEgDAABJAwAASgMAAEsDAABMAwAATQMAAE4DAABPAwAAAQ==");
base64DecodeToExistingUint8Array(bufferView, 63601, "FQoAAAk=");
base64DecodeToExistingUint8Array(bufferView, 63624, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");
base64DecodeToExistingUint8Array(bufferView, 63884, "QAMAAEEDAABCAwAAQwMAAEQDAABFAwAARgMAAEcDAABIAwAASQMAAEoDAABLAwAATAMAAE0DAABQAwAAUQMAAAEAAAAB");
base64DecodeToExistingUint8Array(bufferView, 63965, "FQoAABU=");
base64DecodeToExistingUint8Array(bufferView, 63988, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBgYGBgYGBgYGBgYGBgYGBgcHBwcH");
base64DecodeToExistingUint8Array(bufferView, 64210, "AQFSAwAAUwMAAFQDAABVAwAAVgMAAFQDAABXAwAAWAMAAFkD");
base64DecodeToExistingUint8Array(bufferView, 64256, "NsoAAEHKAABKygAAUMoAAFfKAABgyg==");
base64DecodeToExistingUint8Array(bufferView, 64288, "IPgAAID/AAA8+wAAqPwAAKj8AAAU/gAAPPsAAEADAABBAwAAQgMAAEMDAABEAwAARQMAAEYDAABHAwAASAMAAEkDAABKAwAASwMAAEwDAABNAwAAUAMAAFEDAAABAAAAAQ==");
base64DecodeToExistingUint8Array(bufferView, 64397, "FQoAAAk=");
base64DecodeToExistingUint8Array(bufferView, 64420, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBgYGBgYGBgYGBgYGBgYGBgcHBwcH");
base64DecodeToExistingUint8Array(bufferView, 64642, "AQFSAwAAUwMAAFQDAABVAwAAVgMAAFQDAABXAwAAWAMAAFkDAABaAwAAWwMAAFwDAABdAwAAXgMAAF8DAABgAwAAYQMAAGIDAABjAwAAZAMAAGUDAABmAwAAZwMAAGgDAABpAwAAAg==");
base64DecodeToExistingUint8Array(bufferView, 64761, "FQoAAAk=");
base64DecodeToExistingUint8Array(bufferView, 64784, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");
base64DecodeToExistingUint8Array(bufferView, 65044, "agMAAGsDAABsAwAAbQMAAG4DAABvAwAAcAMAAHEDAAByAwAAcwMAAHQDAAB1AwAAdgMAAHcDAAB4AwAAeQMAAAI=");
base64DecodeToExistingUint8Array(bufferView, 65125, "FQoAAAk=");
base64DecodeToExistingUint8Array(bufferView, 65148, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcFhwcHBwcHBwcHBwWHBocHBYcHBwcHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWHBYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYcFhYWFhYWFhY=");
base64DecodeToExistingUint8Array(bufferView, 65408, "QAMAAEEDAABCAwAAQwMAAEQDAABFAwAARgMAAEcDAABIAwAASQMAAEoDAABLAwAATAMAAE0DAAB6AwAATwMAAAEAAAAB");
base64DecodeToExistingUint8Array(bufferView, 65489, "FQoAAAk=");
base64DecodeToExistingUint8Array(bufferView, 65512, "FRAMExweAw0fICEiIxsaERkZGRkZGRkZGRkWEgIOCw8cGBgYGBgYFhYWFhYWFhYWFhYWFhYWFhYWFhYUHAQcFhwYGBgYGBgWFhYWFhYWFhYWFhYWFhYWFhYWFhwkHBwc");
base64DecodeToExistingUint8Array(bufferView, 65776, "BQ==");
base64DecodeToExistingUint8Array(bufferView, 65788, "fgM=");
base64DecodeToExistingUint8Array(bufferView, 65812, "fAMAAHsDAAB8KAE=");
base64DecodeToExistingUint8Array(bufferView, 65836, "Ag==");
base64DecodeToExistingUint8Array(bufferView, 65852, "//////////8=");
base64DecodeToExistingUint8Array(bufferView, 65920, "8AABAAAAAAAF");
base64DecodeToExistingUint8Array(bufferView, 65940, "fwM=");
base64DecodeToExistingUint8Array(bufferView, 65964, "fAMAAIADAACIKAEAAAQ=");
base64DecodeToExistingUint8Array(bufferView, 65988, "AQ==");
base64DecodeToExistingUint8Array(bufferView, 66004, "/////wo=");
base64DecodeToExistingUint8Array(bufferView, 66072, "iAEBAPAuUQCk2gAApQM=");
}
var scratchBuffer = new ArrayBuffer(16);
var i32ScratchView = new Int32Array(scratchBuffer);
var f32ScratchView = new Float32Array(scratchBuffer);
var f64ScratchView = new Float64Array(scratchBuffer);
function wasm2js_scratch_load_i32(index) {
return i32ScratchView[index];
}
function wasm2js_scratch_store_i32(index, value) {
i32ScratchView[index] = value;
}
function wasm2js_scratch_load_f64() {
return f64ScratchView[0];
}
function wasm2js_scratch_store_f64(value) {
f64ScratchView[0] = value;
}
function wasm2js_scratch_store_f32(value) {
f32ScratchView[2] = value;
}
function wasm2js_scratch_load_f32() {
return f32ScratchView[2];
}
function asmFunc(env) {
var memory = env.memory;
var buffer = memory.buffer;
memory.grow = __wasm_memory_grow;
var HEAP8 = new Int8Array(buffer);
var HEAP16 = new Int16Array(buffer);
var HEAP32 = new Int32Array(buffer);
var HEAPU8 = new Uint8Array(buffer);
var HEAPU16 = new Uint16Array(buffer);
var HEAPU32 = new Uint32Array(buffer);
var HEAPF32 = new Float32Array(buffer);
var HEAPF64 = new Float64Array(buffer);
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_abs = Math.abs;
var Math_clz32 = Math.clz32;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_floor = Math.floor;
var Math_ceil = Math.ceil;
var Math_trunc = Math.trunc;
var Math_sqrt = Math.sqrt;
var abort = env.abort;
var nan = NaN;
var infinity = Infinity;
var invoke_ii = env.invoke_ii;
var __cxa_find_matching_catch_2 = env.__cxa_find_matching_catch_2;
var getTempRet0 = env.getTempRet0;
var __resumeException = env.__resumeException;
var invoke_iii = env.invoke_iii;
var invoke_iiif = env.invoke_iiif;
var invoke_iiifffffff = env.invoke_iiifffffff;
var invoke_iiii = env.invoke_iiii;
var __cxa_find_matching_catch_3 = env.__cxa_find_matching_catch_3;
var invoke_vii = env.invoke_vii;
var invoke_viii = env.invoke_viii;
var __cxa_allocate_exception = env.__cxa_allocate_exception;
var __cxa_throw = env.__cxa_throw;
var __cxa_free_exception = env.__cxa_free_exception;
var strftime = env.strftime;
var invoke_iiiiiii = env.invoke_iiiiiii;
var __cxa_begin_catch = env.__cxa_begin_catch;
var invoke_vi = env.invoke_vi;
var __cxa_end_catch = env.__cxa_end_catch;
var invoke_v = env.invoke_v;
var invoke_iiiii = env.invoke_iiiii;
var invoke_iiiif = env.invoke_iiiif;
var invoke_viiiiiiff = env.invoke_viiiiiiff;
var invoke_vif = env.invoke_vif;
var invoke_i = env.invoke_i;
var emscripten_asm_const_int = env.emscripten_asm_const_int;
var invoke_fiif = env.invoke_fiif;
var invoke_iifff = env.invoke_iifff;
var invoke_iiffff = env.invoke_iiffff;
var exit = env.exit;
var invoke_viiiii = env.invoke_viiiii;
var invoke_viiiiiii = env.invoke_viiiiiii;
var invoke_viiii = env.invoke_viiii;
var invoke_iif = env.invoke_iif;
var invoke_viiiiiiii = env.invoke_viiiiiiii;
var invoke_fi = env.invoke_fi;
var invoke_vifiii = env.invoke_vifiii;
var invoke_fii = env.invoke_fii;
var invoke_iiifffi = env.invoke_iiifffi;
var invoke_viifi = env.invoke_viifi;
var invoke_viiiiii = env.invoke_viiiiii;
var invoke_vifi = env.invoke_vifi;
var invoke_iiiiiiiiiiiiiiii = env.invoke_iiiiiiiiiiiiiiii;
var __cxa_find_matching_catch_5 = env.__cxa_find_matching_catch_5;
var llvm_eh_typeid_for = env.llvm_eh_typeid_for;
var _tzset_js = env._tzset_js;
var _localtime_js = env._localtime_js;
var _emscripten_date_now = env._emscripten_date_now;
var __syscall_openat = env.__syscall_openat;
var __syscall_fcntl64 = env.__syscall_fcntl64;
var __syscall_ioctl = env.__syscall_ioctl;
var __wasi_fd_write = env.fd_write;
var __wasi_fd_read = env.fd_read;
var __wasi_fd_close = env.fd_close;
var __syscall_fstat64 = env.__syscall_fstat64;
var __syscall_stat64 = env.__syscall_stat64;
var __syscall_newfstatat = env.__syscall_newfstatat;
var __syscall_lstat64 = env.__syscall_lstat64;
var emscripten_resize_heap = env.emscripten_resize_heap;
var __cxa_rethrow = env.__cxa_rethrow;
var __cxa_uncaught_exceptions = env.__cxa_uncaught_exceptions;
var invoke_iiiiii = env.invoke_iiiiii;
var invoke_iiiiid = env.invoke_iiiiid;
var abort = env.abort;
var setTempRet0 = env.setTempRet0;
var legalimport$__wasi_fd_seek = env.fd_seek;
var __stack_pointer = 5320432;
var i64toi32_i32$HIGH_BITS = 0;
// EMSCRIPTEN_START_FUNCS
function ArmHandConstellation__ArmHandConstellation_28SiGMLConstellation_2c_20ArmHandConstellation_20const__2c_20SET_OF_HANDS_2c_20Mirroring_2c_20bool_29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$11 = __stack_pointer - 256 | 0;
__stack_pointer = $11;
$0 = SiteIDPair__SiteIDPair_28_29($0);
HEAP32[19359] = 0;
$9 = invoke_ii(344, $0 + 12 | 0) | 0;
$13 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
if (($13 | 0) != 1) {
HEAP32[19359] = 0;
$10 = invoke_ii(344, $0 + 24 | 0) | 0;
$14 = HEAP32[19359];
HEAP32[19359] = 0;
if (($14 | 0) == 1) {
break label$5;
}
$13 = SiteID__SiteID_28_29($0 + 36 | 0);
$14 = SiteID__SiteID_28_29($0 + 40 | 0);
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 48 | 0) | 0;
$12 = HEAP32[19359];
HEAP32[19359] = 0;
label$7: {
if (($12 | 0) == 1) {
break label$7;
}
HEAP32[$0 + 60 >> 2] = 0;
HEAP8[$0 - -64 | 0] = 0;
if (!HEAPU8[67560]) {
break label$4;
}
HEAP32[19359] = 0;
HEAP32[$11 + 160 >> 2] = $0;
HEAP32[$11 + 164 >> 2] = $3;
invoke_vii(71, 48393, $11 + 160 | 0);
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$12 = HEAP32[16886];
invoke_vii(345, $4 | 0, $12 | 0);
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_vi(340, 15542);
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$12 = HEAP32[16886];
invoke_vii(346, $1 | 0, $12 | 0);
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) == 1) {
break label$7;
}
if (!$2) {
break label$4;
}
HEAP32[19359] = 0;
$12 = HEAP32[16886];
invoke_vii(347, $2 | 0, $12 | 0);
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) != 1) {
break label$4;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
HEAP32[19359] = 0;
$12 = $1 + 68 | 0;
$15 = invoke_ii(348, $12 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
if (($6 | 0) == 1) {
break label$14;
}
label$15: {
label$16: {
label$17: {
if (!$15) {
break label$17;
}
if (HaveNondomHand_28SET_OF_HANDS_29($3)) {
break label$17;
}
HEAP32[19359] = 0;
invoke_vii(71, 33984, 0);
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
HEAP16[$1 >> 1] = HEAPU16[$12 >> 1];
HEAP8[$1 + 2 | 0] = HEAPU8[$12 + 2 | 0];
SiteID__setUndefined_28_29($1 + 4 | 0);
SiteID__setUndefined_28_29($12);
HEAP8[$1 + 14 | 0] = HEAPU8[$1 + 66 | 0];
HEAP16[$1 + 12 >> 1] = HEAPU16[$1 + 64 >> 1];
$6 = $1 - -64 | 0;
break label$16;
}
HEAP32[19359] = 0;
$8 = $1 - -64 | 0;
$7 = invoke_ii(348, $8 | 0) | 0;
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
if (!$7) {
break label$15;
}
if (HaveDomHand_28SET_OF_HANDS_29($3)) {
break label$15;
}
HEAP32[19359] = 0;
invoke_vii(71, 33947, 0);
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
HEAP16[$1 >> 1] = HEAPU16[$8 >> 1];
HEAP8[$1 + 2 | 0] = HEAPU8[$8 + 2 | 0];
SiteID__setUndefined_28_29($1 + 4 | 0);
HEAP8[$1 + 14 | 0] = HEAPU8[$12 + 2 | 0];
HEAP16[$1 + 12 >> 1] = HEAPU16[$12 >> 1];
SiteID__setUndefined_28_29($8);
$6 = $12;
}
SiteID__setUndefined_28_29($6);
$6 = HEAP32[$0 + 44 >> 2];
if ($6) {
$15 = $1 + 2 | 0;
HEAP8[$15 | 0] = (HEAPU8[$1 + 2 | 0] << 16 & 9371648 | $6 << 20 & 7340032) >>> 16;
$6 = $1 + 14 | 0;
HEAP8[$6 | 0] = (HEAP32[$0 + 44 >> 2] << 20 & 7340032 | HEAPU8[$1 + 14 | 0] << 16 & 9371648) >>> 16;
HEAP32[$0 + 44 >> 2] = 0;
}
if (!HEAPU8[67600]) {
break label$15;
}
HEAP32[19359] = 0;
$8 = $1 + 72 | 0;
$7 = invoke_ii(349, $8 | 0) | 0;
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
if (!$7) {
break label$15;
}
HEAP32[19359] = 0;
invoke_vii(71, 21191, 0);
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
HEAP32[19359] = 0;
$15 = HEAP32[16886];
invoke_vii(350, $8 | 0, $15 | 0);
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
}
HEAP32[19359] = 0;
$7 = $1 + 72 | 0;
$8 = invoke_ii(348, $7 | 0) | 0;
$15 = HEAP32[19359];
HEAP32[19359] = 0;
if (($15 | 0) == 1) {
break label$14;
}
if ($8) {
$7 = $1;
$8 = HEAP32[$7 + 72 >> 2];
$6 = HEAP32[$7 + 76 >> 2];
HEAP32[$0 >> 2] = $8;
HEAP32[$0 + 4 >> 2] = $6;
HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 80 >> 2];
}
HEAP32[19359] = 0;
$15 = $1 - -64 | 0;
$8 = invoke_ii(348, $15 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$14;
}
if ($8) {
HEAP16[$13 >> 1] = HEAPU16[$15 >> 1];
HEAP8[$13 + 2 | 0] = HEAPU8[$15 + 2 | 0];
}
HEAP32[19359] = 0;
$8 = invoke_ii(348, $12 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$14;
}
if ($8) {
HEAP16[$14 >> 1] = HEAPU16[$12 >> 1];
HEAP8[$14 + 2 | 0] = HEAPU8[$12 + 2 | 0];
}
HEAP32[19359] = 0;
$8 = $1 + 16 | 0;
$16 = invoke_ii(348, $8 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
$6 = 0;
label$22: {
if (!$16) {
break label$22;
}
$7 = $1;
$6 = HEAP32[$7 + 16 >> 2];
$8 = HEAP32[$7 + 20 >> 2];
HEAP32[$9 >> 2] = $6;
HEAP32[$9 + 4 >> 2] = $8;
HEAP32[$9 + 8 >> 2] = HEAP32[$7 + 24 >> 2];
HEAP8[$13 + 2 | 0] = HEAPU8[$1 + 42 | 0];
HEAP16[$13 >> 1] = HEAPU16[$1 + 40 >> 1];
HEAP32[19359] = 0;
$8 = invoke_ii(351, $9 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
$6 = 0;
if (!$8) {
break label$22;
}
$17 = 1;
$6 = short_20maxScalar_short__28short_2c_20short_29(0, HEAPU8[$9 + 2 | 0] >>> 4 & 7);
}
HEAP32[19359] = 0;
$8 = $1 + 28 | 0;
$16 = invoke_ii(348, $8 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
$18 = $6;
label$23: {
if (!$16) {
break label$23;
}
$7 = $1;
$8 = HEAP32[$7 + 28 >> 2];
$6 = HEAP32[$7 + 32 >> 2];
HEAP32[$10 >> 2] = $8;
HEAP32[$10 + 4 >> 2] = $6;
HEAP32[$10 + 8 >> 2] = HEAP32[$7 + 36 >> 2];
HEAP8[$14 + 2 | 0] = HEAPU8[$1 + 46 | 0];
HEAP16[$14 >> 1] = HEAPU16[$1 + 44 >> 1];
HEAP32[19359] = 0;
$8 = invoke_ii(351, $10 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
if (!$8) {
break label$23;
}
$6 = $10 + 2 | 0;
$7 = short_20maxScalar_short__28short_2c_20short_29($18, HEAPU8[$6 | 0] >>> 4 & 7);
if (!$17) {
break label$23;
}
HEAP32[$0 + 44 >> 2] = $7 ? $7 : 3;
$7 = $9 + 2 | 0;
HEAP8[$7 | 0] = (HEAPU8[$9 + 2 | 0] << 16 & 9371648 | 1048576) >>> 16;
HEAP8[$10 + 2 | 0] = (HEAPU8[$10 + 2 | 0] << 16 & 9371648 | 1048576) >>> 16;
if (!HEAPU8[67570]) {
break label$23;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
$7 = HEAP32[$0 + 44 >> 2];
HEAP32[19359] = 0;
HEAP32[$11 + 144 >> 2] = $7;
invoke_vii(71, 44182, $11 + 144 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$8 = invoke_ii(348, $1 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
label$24: {
if (!$8) {
break label$24;
}
if (Mirroring__defined_28_29_20const($4)) {
HEAP32[19359] = 0;
$7 = invoke_ii(351, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if ($7) {
HEAP32[19359] = 0;
$4 = $1 + 12 | 0;
$8 = invoke_ii(348, $4 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
label$27: {
label$28: {
if ($8) {
$8 = HEAP32[$1 + 4 >> 2];
$6 = HEAP32[$1 >> 2];
HEAP32[$9 >> 2] = $6;
HEAP32[$9 + 4 >> 2] = $8;
HEAP32[$9 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP8[$13 + 2 | 0] = HEAPU8[$4 + 2 | 0];
HEAP16[$13 >> 1] = HEAPU16[$4 >> 1];
wasm2js_i32$0 = $13, wasm2js_i32$1 = DomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$13 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
$6 = HEAPU16[$9 >> 1];
$7 = $9 + 2 | 0;
$8 = $6 | HEAPU8[$7 | 0] << 16;
HEAP32[$0 + 44 >> 2] = $8 >>> 20 & 7;
HEAP8[$9 + 2 | 0] = ($8 & 9437183 | 1048576) >>> 16;
HEAP16[$9 >> 1] = $6;
HEAP32[19359] = 0;
$8 = $0 + 16 | 0;
$16 = invoke_ii(348, $8 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
if ($16) {
$6 = $8 + 2 | 0;
HEAP8[$6 | 0] = ((HEAPU16[$8 >> 1] | HEAPU8[$8 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
if (!HEAPU8[67570]) {
break label$27;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17934, 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$7 = HEAP32[16886];
invoke_vii(350, $1 | 0, $7 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17811, 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$7 = HEAP32[16886];
invoke_vii(276, $4 | 0, $7 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 41983, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 15864, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(350, $9 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18700, 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
$4 = $13;
if (($7 | 0) != 1) {
break label$28;
}
break label$8;
}
HEAP16[$13 >> 1] = HEAPU16[$1 >> 1];
$6 = $1 + 2 | 0;
HEAP8[$13 + 2 | 0] = HEAPU8[$6 | 0];
wasm2js_i32$0 = $13, wasm2js_i32$1 = DomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$13 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
HEAP8[$14 + 2 | 0] = HEAPU8[$1 + 2 | 0];
HEAP16[$14 >> 1] = HEAPU16[$1 >> 1];
wasm2js_i32$0 = $14, wasm2js_i32$1 = NondomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$14 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
if (!HEAPU8[67570]) {
break label$27;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17934, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(350, $1 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 35752, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18700, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(276, $13 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18679, 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
$4 = $14;
if (($7 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$7 = HEAP32[16886];
invoke_vii(276, $4 | 0, $7 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
}
$4 = HEAPU8[$13 + 2 | 0] >>> 4 & 7;
$6 = HEAP32[$0 + 44 >> 2];
if (($4 | 0) > ($6 | 0)) {
HEAP32[$0 + 44 >> 2] = $4;
$6 = $4;
}
$4 = HEAPU8[$14 + 2 | 0] >>> 4 & 7;
if (($6 | 0) >= ($4 | 0)) {
break label$24;
}
HEAP32[$0 + 44 >> 2] = $4;
break label$24;
}
$6 = HEAP32[$1 + 4 >> 2];
$8 = HEAP32[$1 >> 2];
HEAP32[$9 >> 2] = $8;
HEAP32[$9 + 4 >> 2] = $6;
$6 = $1 + 8 | 0;
HEAP32[$9 + 8 >> 2] = HEAP32[$6 >> 2];
$8 = HEAP32[$1 + 4 >> 2];
$6 = HEAP32[$1 >> 2];
HEAP32[$10 >> 2] = $6;
HEAP32[$10 + 4 >> 2] = $8;
HEAP32[$10 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$4 = HEAPU8[$10 + 1 | 0] | HEAPU8[$10 + 2 | 0] << 8;
HEAP32[19359] = 0;
$7 = invoke_ii(352, $4 & 15) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP16[$10 >> 1] = HEAPU16[$10 >> 1] & 61695 | $7 << 8 & 3840;
$4 = HEAPU8[$0 + 29 | 0] | HEAPU8[$0 + 30 | 0] << 8;
HEAP32[19359] = 0;
$7 = invoke_ii(352, $4 & 15) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP16[$0 + 28 >> 1] = HEAPU16[$0 + 28 >> 1] & 61695 | $7 << 8 & 3840;
HEAP8[$13 + 2 | 0] = HEAPU8[$1 + 14 | 0];
HEAP16[$13 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP32[19359] = 0;
$7 = invoke_ii(353, $13 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if ($7) {
HEAP16[$13 >> 1] = HEAPU16[$15 >> 1];
HEAP8[$13 + 2 | 0] = HEAPU8[$15 + 2 | 0];
}
HEAP16[$14 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP8[$14 + 2 | 0] = HEAPU8[$1 + 14 | 0];
HEAP32[19359] = 0;
$7 = invoke_ii(353, $14 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if ($7) {
HEAP16[$14 >> 1] = HEAPU16[$12 >> 1];
HEAP8[$14 + 2 | 0] = HEAPU8[$12 + 2 | 0];
}
if (HEAPU16[$14 >> 1] & 3840) {
wasm2js_i32$0 = $14, wasm2js_i32$1 = NondomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$14 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
}
if (!HEAPU8[67570]) {
break label$24;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17917, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(350, $1 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 35828, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 15864, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(350, $9 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18700, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(276, $13 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 15845, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(350, $10 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18679, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(276, $14 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
break label$24;
}
break label$8;
}
if (($3 | 0) == 2) {
$6 = HEAP32[$1 + 4 >> 2];
$8 = HEAP32[$1 >> 2];
HEAP32[$10 >> 2] = $8;
HEAP32[$10 + 4 >> 2] = $6;
HEAP32[$10 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[19359] = 0;
$8 = $1 + 12 | 0;
$7 = invoke_ii(348, $8 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if ($7) {
HEAP16[$14 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP8[$14 + 2 | 0] = HEAPU8[$1 + 14 | 0];
wasm2js_i32$0 = $14, wasm2js_i32$1 = NondomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$14 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
}
HEAP32[19359] = 0;
$7 = invoke_ii(351, $10 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if (!$7) {
break label$24;
}
$6 = HEAPU16[$10 >> 1];
$4 = $10 + 2 | 0;
$7 = $6 | HEAPU8[$4 | 0] << 16;
HEAP32[$0 + 44 >> 2] = $7 >>> 20 & 7;
HEAP8[$10 + 2 | 0] = ($7 & 9437183 | 1048576) >>> 16;
HEAP16[$10 >> 1] = $6;
HEAP32[19359] = 0;
$7 = $0 + 28 | 0;
$8 = invoke_ii(348, $7 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if (!$8) {
break label$24;
}
$6 = $7 + 2 | 0;
HEAP8[$6 | 0] = ((HEAPU16[$7 >> 1] | HEAPU8[$7 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
break label$24;
}
$8 = HEAP32[$1 + 4 >> 2];
$6 = HEAP32[$1 >> 2];
HEAP32[$9 >> 2] = $6;
HEAP32[$9 + 4 >> 2] = $8;
HEAP32[$9 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[19359] = 0;
$8 = $1 + 12 | 0;
$7 = invoke_ii(348, $8 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if ($7) {
HEAP16[$13 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP8[$13 + 2 | 0] = HEAPU8[$1 + 14 | 0];
wasm2js_i32$0 = $13, wasm2js_i32$1 = DomSide_28bool_29($5) << 8 & 3840 | HEAPU16[$13 >> 1] & 61695, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
}
HEAP32[19359] = 0;
$7 = invoke_ii(351, $9 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if (!$7) {
break label$24;
}
$6 = HEAPU16[$9 >> 1];
$4 = $9 + 2 | 0;
$7 = $6 | HEAPU8[$4 | 0] << 16;
HEAP32[$0 + 44 >> 2] = $7 >>> 20 & 7;
HEAP8[$9 + 2 | 0] = ($7 & 9437183 | 1048576) >>> 16;
HEAP16[$9 >> 1] = $6;
HEAP32[19359] = 0;
$7 = $0 + 16 | 0;
$8 = invoke_ii(348, $7 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$8;
}
if (!$8) {
break label$24;
}
$6 = $7 + 2 | 0;
HEAP8[$6 | 0] = ((HEAPU16[$7 >> 1] | HEAPU8[$7 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
$6 = HEAP32[$1 + 48 >> 2];
if ($6) {
if (HEAPU8[67560]) {
$7 = HEAP32[$0 + 44 >> 2];
HEAP32[19359] = 0;
HEAP32[$11 + 128 >> 2] = $0;
HEAP32[$11 + 132 >> 2] = $7;
HEAP32[$11 + 136 >> 2] = $6;
invoke_vii(71, 30686, $11 + 128 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$8;
}
$6 = HEAP32[$1 + 48 >> 2];
}
HEAP32[$0 + 44 >> 2] = $6;
}
HEAP32[19359] = 0;
invoke_vii(354, $13 | 0, $5 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(354, $14 | 0, $5 ^ 1);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
$1 = 1;
if (($5 | 0) == 1) {
break label$8;
}
label$40: {
if ($6) {
break label$40;
}
$1 = 0;
HEAP32[19359] = 0;
$4 = invoke_ii(349, $0 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$8;
}
if (!$4) {
break label$40;
}
$1 = HaveDomHand_28SET_OF_HANDS_29($3);
}
HEAP8[$0 + 60 | 0] = $1;
HEAP32[19359] = 0;
$6 = invoke_ii(349, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
$1 = 1;
if (($5 | 0) == 1) {
break label$8;
}
label$41: {
if ($6) {
break label$41;
}
$1 = 0;
HEAP32[19359] = 0;
$4 = invoke_ii(349, $0 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$8;
}
if (!$4) {
break label$41;
}
$1 = HaveNondomHand_28SET_OF_HANDS_29($3);
}
HEAP8[$0 + 61 | 0] = $1;
HEAP8[$0 + 62 | 0] = HEAP32[$0 + 44 >> 2] != 0;
label$42: {
if (!$2) {
break label$42;
}
if (HEAPU8[67570]) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 20497, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP16[33801] = HEAPU16[33801] + 1;
$5 = HEAP32[16886];
invoke_vii(347, $0 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP16[33801] = HEAPU16[33801] - 1;
invoke_vii(71, 20580, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP16[33801] = HEAPU16[33801] + 1;
$5 = HEAP32[16886];
invoke_vii(347, $2 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP16[33801] = HEAPU16[33801] - 1;
}
$1 = HEAP32[$2 + 36 >> 2];
HEAP32[19359] = 0;
HEAP32[$11 + 248 >> 2] = $1;
HEAP32[$11 + 124 >> 2] = $1;
invoke_vii(355, $13 | 0, $11 + 124 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$8;
}
$1 = HEAP32[$2 + 40 >> 2];
HEAP32[19359] = 0;
HEAP32[$11 + 240 >> 2] = $1;
HEAP32[$11 + 120 >> 2] = $1;
invoke_vii(355, $14 | 0, $11 + 120 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$44: {
if ($6) {
break label$44;
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
if ($6) {
break label$44;
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $0 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
if ($6) {
break label$44;
}
$6 = HEAP32[$2 + 16 >> 2];
$8 = HEAP32[$2 + 12 >> 2];
HEAP32[$9 >> 2] = $8;
HEAP32[$9 + 4 >> 2] = $6;
HEAP32[$9 + 8 >> 2] = HEAP32[$2 + 20 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
$8 = HEAP32[$2 + 28 >> 2];
$6 = HEAP32[$2 + 24 >> 2];
HEAP32[$10 >> 2] = $6;
HEAP32[$10 + 4 >> 2] = $8;
HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$6 = HEAP32[$2 + 4 >> 2];
$8 = HEAP32[$2 >> 2];
HEAP32[$0 >> 2] = $8;
HEAP32[$0 + 4 >> 2] = $6;
if (!HEAPU8[67570]) {
break label$44;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 38934, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(340, 21803);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $9 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(340, 16076);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $10 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(340, 21812);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $0 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $0 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$45: {
if (!$6) {
break label$45;
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$46: {
if ($6) {
break label$46;
}
$8 = HEAP32[$0 + 4 >> 2];
$6 = HEAP32[$0 >> 2];
HEAP32[$9 >> 2] = $6;
HEAP32[$9 + 4 >> 2] = $8;
HEAP32[$9 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
if (!HEAPU8[67570]) {
break label$46;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16244, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $9 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
if ($6) {
break label$45;
}
$6 = HEAP32[$0 + 4 >> 2];
$8 = HEAP32[$0 >> 2];
HEAP32[$10 >> 2] = $8;
HEAP32[$10 + 4 >> 2] = $6;
HEAP32[$10 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
if (!HEAPU8[67570]) {
break label$45;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16198, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $10 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$47: {
if ($6) {
break label$47;
}
$8 = HEAP32[$2 + 16 >> 2];
$6 = HEAP32[$2 + 12 >> 2];
HEAP32[$9 >> 2] = $6;
HEAP32[$9 + 4 >> 2] = $8;
HEAP32[$9 + 8 >> 2] = HEAP32[$2 + 20 >> 2];
if (!HEAPU8[67570]) {
break label$47;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16085, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $9 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$48: {
if ($6) {
break label$48;
}
$6 = HEAP32[$2 + 4 >> 2];
$8 = HEAP32[$2 >> 2];
HEAP32[$9 >> 2] = $8;
HEAP32[$9 + 4 >> 2] = $6;
HEAP32[$9 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
if (!HEAPU8[67570]) {
break label$48;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16326, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $9 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$49: {
if ($6) {
break label$49;
}
$8 = HEAP32[$2 + 28 >> 2];
$6 = HEAP32[$2 + 24 >> 2];
HEAP32[$10 >> 2] = $6;
HEAP32[$10 + 4 >> 2] = $8;
HEAP32[$10 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
if (!HEAPU8[67570]) {
break label$49;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16037, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $10 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$6 = invoke_ii(349, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
label$50: {
if ($6) {
break label$50;
}
$6 = HEAP32[$2 + 4 >> 2];
$8 = HEAP32[$2 >> 2];
HEAP32[$10 >> 2] = $8;
HEAP32[$10 + 4 >> 2] = $6;
HEAP32[$10 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
if (!HEAPU8[67570]) {
break label$50;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 16288, 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(350, $10 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
}
if (!HEAP32[$0 + 44 >> 2]) {
HEAP32[$0 + 44 >> 2] = HEAP32[$2 + 44 >> 2];
}
if (!HEAPU8[67570]) {
break label$42;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 20596, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(347, $0 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
HEAP32[$11 + 232 >> 2] = HEAP32[$9 + 8 >> 2];
$8 = HEAP32[$9 + 4 >> 2];
$6 = HEAP32[$9 >> 2];
HEAP32[$11 + 224 >> 2] = $6;
HEAP32[$11 + 228 >> 2] = $8;
HEAP32[$11 + 216 >> 2] = HEAP32[$10 + 8 >> 2];
$6 = HEAP32[$10 + 4 >> 2];
$8 = HEAP32[$10 >> 2];
HEAP32[$11 + 208 >> 2] = $8;
HEAP32[$11 + 212 >> 2] = $6;
label$52: {
label$53: {
if (!operator___28SiteIDPair_2c_20SiteIDPair_29($11 + 224 | 0, $11 + 208 | 0)) {
break label$53;
}
HEAP32[19359] = 0;
$5 = invoke_ii(349, $9 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$13;
}
if (($5 ^ 1) & ($3 | 0) != 5) {
break label$53;
}
HEAP32[19359] = 0;
$5 = invoke_ii(349, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$13;
}
SiteIDPair___SiteIDPair_28_29($11 + 208 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 224 | 0);
if ($5) {
break label$52;
}
$8 = HEAP32[$9 + 4 >> 2];
$6 = HEAP32[$9 >> 2];
HEAP32[$0 >> 2] = $6;
HEAP32[$0 + 4 >> 2] = $8;
HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
if (!HEAP32[$0 + 44 >> 2]) {
HEAP32[$0 + 44 >> 2] = HEAPU8[$9 + 2 | 0] >>> 4 & 7;
}
SiteIDPair__setUndefined_28_29($9);
SiteIDPair__setUndefined_28_29($10);
if (!HEAPU8[67570]) {
break label$52;
}
HEAP32[19359] = 0;
$5 = invoke_ii(349, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$5) {
break label$52;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17871, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(350, $0 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 43571, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$52;
}
break label$8;
}
SiteIDPair___SiteIDPair_28_29($11 + 208 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 224 | 0);
}
HEAP32[$11 + 200 >> 2] = HEAP32[$9 + 8 >> 2];
$6 = HEAP32[$9 + 4 >> 2];
$8 = HEAP32[$9 >> 2];
HEAP32[$11 + 192 >> 2] = $8;
HEAP32[$11 + 196 >> 2] = $6;
HEAP32[$11 + 184 >> 2] = HEAP32[$10 + 8 >> 2];
$8 = HEAP32[$10 + 4 >> 2];
$6 = HEAP32[$10 >> 2];
HEAP32[$11 + 176 >> 2] = $6;
HEAP32[$11 + 180 >> 2] = $8;
label$55: {
label$56: {
label$57: {
if (!operator___28SiteIDPair_2c_20SiteIDPair_29($11 + 192 | 0, $11 + 176 | 0)) {
HEAP32[19359] = 0;
$5 = invoke_ii(349, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$57;
}
if (!$5) {
break label$56;
}
}
SiteIDPair___SiteIDPair_28_29($11 + 176 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 192 | 0);
if (HEAP32[$0 + 44 >> 2] | ($3 | 0) != 5) {
break label$55;
}
HEAP32[$0 + 44 >> 2] = 3;
if (!HEAPU8[67570]) {
break label$55;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 38597, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$55;
}
break label$8;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($11 + 176 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 192 | 0);
break label$3;
}
SiteIDPair___SiteIDPair_28_29($11 + 176 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 192 | 0);
}
HEAP32[19359] = 0;
$5 = invoke_ii(351, $9 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
label$59: {
if (!$5) {
break label$59;
}
HEAP32[19359] = 0;
$5 = invoke_ii(351, $10 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$5) {
break label$59;
}
$1 = $10 + 2 | 0;
wasm2js_i32$0 = $0, wasm2js_i32$1 = int_20maxScalar_int__28int_2c_20int_29(int_20maxScalar_int__28int_2c_20int_29(HEAPU8[$9 + 2 | 0] >>> 4 & 7, HEAPU8[$1 | 0] >>> 4 & 7), HEAP32[$0 + 44 >> 2]), 
HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
HEAP8[$13 + 2 | 0] = HEAPU8[$10 + 2 | 0];
HEAP16[$13 >> 1] = HEAPU16[$10 >> 1];
HEAP32[19359] = 0;
$5 = invoke_ii(348, $13 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$12;
}
if ($5) {
$1 = $13 + 2 | 0;
HEAP8[$1 | 0] = ((HEAPU16[$13 >> 1] | HEAPU8[$13 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
HEAP16[$14 >> 1] = HEAPU16[$9 >> 1];
HEAP8[$14 + 2 | 0] = HEAPU8[$9 + 2 | 0];
HEAP32[19359] = 0;
$5 = invoke_ii(348, $14 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$12;
}
if ($5) {
$1 = $14 + 2 | 0;
HEAP8[$1 | 0] = ((HEAPU16[$14 >> 1] | HEAPU8[$14 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
HEAP16[$9 >> 1] = HEAPU16[35152];
HEAP8[$9 + 2 | 0] = HEAPU8[70306];
HEAP8[$0 + 18 | 0] = HEAPU8[70306];
HEAP16[$0 + 16 >> 1] = HEAPU16[35152];
HEAP8[$10 + 2 | 0] = HEAPU8[70306];
HEAP16[$10 >> 1] = HEAPU16[35152];
HEAP8[$0 + 30 | 0] = HEAPU8[70306];
HEAP16[$0 + 28 >> 1] = HEAPU16[35152];
if (!HEAPU8[67570]) {
break label$59;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$12;
}
$2 = HEAP32[$0 + 44 >> 2];
HEAP32[19359] = 0;
HEAP32[$11 + 112 >> 2] = $2;
invoke_vii(71, 44089, $11 + 112 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$12;
}
}
if (HEAPU8[67560]) {
HEAP32[19359] = 0;
HEAP32[$11 + 96 >> 2] = $3;
HEAP32[$11 + 100 >> 2] = 5;
invoke_vii(71, 30716, $11 + 96 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
$1 = HEAP32[$0 + 44 >> 2];
if (!(!$1 | ($3 | 0) == 5)) {
label$64: {
if (HaveDomHand_28SET_OF_HANDS_29($3)) {
HEAP32[19359] = 0;
$5 = invoke_ii(348, $15 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
label$66: {
if (!$5) {
break label$66;
}
HEAP32[19359] = 0;
$5 = invoke_ii(348, $12 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$5) {
break label$66;
}
if (HEAPU8[67570]) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 39780, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 18017, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(350, $9 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17735, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(276, $12 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 14999, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(276, $15 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 45645, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
HEAP16[$9 >> 1] = HEAPU16[$12 >> 1];
HEAP8[$9 + 2 | 0] = HEAPU8[$12 + 2 | 0];
SiteID__setUndefined_28_29($0 + 16 | 0);
HEAP8[$13 + 2 | 0] = HEAPU8[$15 + 2 | 0];
HEAP16[$13 >> 1] = HEAPU16[$15 >> 1];
break label$64;
}
if (HEAPU8[67570]) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$2 = HEAP32[$0 + 44 >> 2];
HEAP32[19359] = 0;
$12 = HEAP32[18218];
$12 = invoke_iii(356, $12 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$2 = HEAPU8[$9 | 0];
HEAP32[19359] = 0;
$5 = HEAP32[18213];
$5 = invoke_iii(356, $5 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 + 64 >> 2] = $12;
HEAP32[$11 + 68 >> 2] = $5;
invoke_vii(71, 36294, $11 - -64 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$12 = invoke_ii(348, $9 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if ($12) {
$1 = $9 + 2 | 0;
HEAP8[$1 | 0] = (HEAP32[$0 + 44 >> 2] << 20 & 7340032 | HEAPU8[$9 + 2 | 0] << 16 & 9371648) >>> 16;
}
HEAP32[19359] = 0;
$5 = $0 + 16 | 0;
$12 = invoke_ii(348, $5 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$12) {
break label$64;
}
$1 = $5 + 2 | 0;
HEAP8[$1 | 0] = (HEAP32[$0 + 44 >> 2] << 20 & 7340032 | HEAPU8[$5 + 2 | 0] << 16 & 9371648) >>> 16;
break label$64;
}
if (!HaveNondomHand_28SET_OF_HANDS_29($3)) {
break label$64;
}
HEAP32[19359] = 0;
$5 = invoke_ii(348, $15 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
label$70: {
if (!$5) {
break label$70;
}
HEAP32[19359] = 0;
$5 = invoke_ii(348, $12 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$5) {
break label$70;
}
if (HEAPU8[67570]) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 39688, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17989, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(350, $10 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 17735, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(276, $15 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 14999, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[16886];
invoke_vii(276, $12 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(71, 45645, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
HEAP16[$10 >> 1] = HEAPU16[$15 >> 1];
HEAP8[$10 + 2 | 0] = HEAPU8[$15 + 2 | 0];
SiteID__setUndefined_28_29($0 + 28 | 0);
HEAP8[$14 + 2 | 0] = HEAPU8[$12 + 2 | 0];
HEAP16[$14 >> 1] = HEAPU16[$12 >> 1];
break label$64;
}
if (HEAPU8[67570]) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$2 = HEAP32[$0 + 44 >> 2];
HEAP32[19359] = 0;
$12 = HEAP32[18218];
$12 = invoke_iii(356, $12 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$2 = HEAPU8[$10 | 0];
HEAP32[19359] = 0;
$5 = HEAP32[18213];
$5 = invoke_iii(356, $5 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 + 80 >> 2] = $12;
HEAP32[$11 + 84 >> 2] = $5;
invoke_vii(71, 36294, $11 + 80 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
HEAP32[19359] = 0;
$12 = invoke_ii(348, $10 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if ($12) {
$1 = $10 + 2 | 0;
HEAP8[$1 | 0] = (HEAP32[$0 + 44 >> 2] << 20 & 7340032 | HEAPU8[$10 + 2 | 0] << 16 & 9371648) >>> 16;
}
HEAP32[19359] = 0;
$5 = $0 + 28 | 0;
$12 = invoke_ii(348, $5 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$12) {
break label$64;
}
$1 = $5 + 2 | 0;
HEAP8[$1 | 0] = (HEAP32[$0 + 44 >> 2] << 20 & 7340032 | HEAPU8[$5 + 2 | 0] << 16 & 9371648) >>> 16;
}
HEAP32[$0 + 44 >> 2] = 0;
break label$11;
}
if (!$1 | ($3 | 0) != 5) {
break label$11;
}
HEAP32[19359] = 0;
$12 = invoke_ii(351, $9 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$12) {
HEAP32[19359] = 0;
$12 = invoke_ii(351, $10 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
if (!$12) {
break label$11;
}
}
HEAP32[$0 + 44 >> 2] = 0;
if (!HEAPU8[67560]) {
break label$9;
}
$2 = 25202;
break label$10;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($11 + 208 | 0);
SiteIDPair___SiteIDPair_28_29($11 + 224 | 0);
break label$3;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
if (!HEAPU8[67560]) {
break label$9;
}
$2 = 25254;
}
HEAP32[19359] = 0;
invoke_vii(71, $2 | 0, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
}
label$75: {
if (!HaveDomHand_28SET_OF_HANDS_29($3)) {
break label$75;
}
$1 = HEAPU8[$13 + 2 | 0];
if (!HEAPU8[67570] | ($1 << 16 & 7340032) == 1048576) {
break label$75;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$2 = HEAPU8[$13 + 2 | 0] >>> 4 & 7;
if (!$2) {
HEAP32[19359] = 0;
$13 = HEAP32[18218];
$2 = invoke_iii(356, $13 | 0, 1) | 0;
$13 = HEAP32[19359];
HEAP32[19359] = 0;
if (($13 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 + 32 >> 2] = $2;
invoke_vii(71, 45806, $11 + 32 | 0);
$13 = HEAP32[19359];
HEAP32[19359] = 0;
if (($13 | 0) == 1) {
break label$8;
}
break label$75;
}
HEAP32[19359] = 0;
$1 = HEAP32[18218];
$1 = invoke_iii(356, $1 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$2 = HEAP32[18218];
$12 = invoke_iii(356, $2 | 0, 1) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 + 48 >> 2] = $1;
HEAP32[$11 + 52 >> 2] = $12;
invoke_vii(71, 45701, $11 + 48 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
$1 = $13 + 2 | 0;
HEAP8[$1 | 0] = ((HEAPU16[$13 >> 1] | HEAPU8[$13 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
label$77: {
if (!HaveNondomHand_28SET_OF_HANDS_29($3)) {
break label$77;
}
$1 = HEAPU8[$14 + 2 | 0];
if (!HEAPU8[67570] | ($1 << 16 & 7340032) == 1048576) {
break label$77;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
$3 = HEAPU8[$14 + 2 | 0] >>> 4 & 7;
if (!$3) {
HEAP32[19359] = 0;
$3 = HEAP32[18218];
$13 = invoke_iii(356, $3 | 0, 1) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 >> 2] = $13;
invoke_vii(71, 45750, $11 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
break label$77;
}
HEAP32[19359] = 0;
$13 = HEAP32[18218];
$13 = invoke_iii(356, $13 | 0, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$3 = HEAP32[18218];
$2 = invoke_iii(356, $3 | 0, 1) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
HEAP32[$11 + 16 >> 2] = $13;
HEAP32[$11 + 20 >> 2] = $2;
invoke_vii(71, 45649, $11 + 16 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
$1 = $14 + 2 | 0;
HEAP8[$1 | 0] = ((HEAPU16[$14 >> 1] | HEAPU8[$14 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
if (HEAPU8[67560]) {
HEAP32[19359] = 0;
invoke_vii(71, 32444, 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$3 = HEAP32[16886];
invoke_vii(347, $0 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
}
__stack_pointer = $11 + 256 | 0;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
SiteIDPair___SiteIDPair_28_29($10);
}
SiteIDPair___SiteIDPair_28_29($9);
}
SiteIDPair___SiteIDPair_28_29($0);
__resumeException($1 | 0);
abort();
}
function CreateSiGMLTables_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 5024 | 0;
__stack_pointer = $0;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(283, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($4 | 0) != 1) {
HEAP32[18864] = $2;
HEAP32[18862] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(283, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[18865] = $2;
HEAP32[18863] = $2;
HEAP32[$0 + 4944 >> 2] = 3;
HEAP32[$0 + 4948 >> 2] = 6430;
HEAP32[$0 + 4952 >> 2] = 4;
HEAP32[$0 + 4956 >> 2] = 6374;
HEAP32[$0 + 4960 >> 2] = 5;
HEAP32[$0 + 4964 >> 2] = 2289;
$1 = $0 + 4968 | 0;
HEAP32[$1 >> 2] = 6;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 4928 >> 2] = 1;
HEAP32[$0 + 4936 >> 2] = 2;
HEAP32[$0 + 4932 >> 2] = 6392;
HEAP32[$0 + 4940 >> 2] = 6410;
wasm2js_i32$0 = 75124, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 4881, $0 + 4928 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4912 >> 2] = 1;
HEAP32[$0 + 4916 >> 2] = 7249;
HEAP32[$0 + 4920 >> 2] = 2;
HEAP32[$0 + 4924 >> 2] = 0;
wasm2js_i32$0 = 75136, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(7238, $0 + 4912 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4896 >> 2] = 1;
HEAP32[$0 + 4900 >> 2] = 1033;
HEAP32[$0 + 4904 >> 2] = 2;
HEAP32[$0 + 4908 >> 2] = 0;
wasm2js_i32$0 = 75140, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(7489, $0 + 4896 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4832 >> 2] = 1734;
HEAP32[$0 + 4836 >> 2] = 6;
HEAP32[$0 + 4840 >> 2] = 8909;
HEAP32[$0 + 4844 >> 2] = 7;
HEAP32[$0 + 4848 >> 2] = 2006;
HEAP32[$0 + 4852 >> 2] = 8;
HEAP32[$0 + 4856 >> 2] = 2704;
HEAP32[$0 + 4860 >> 2] = 1;
HEAP32[$0 + 4864 >> 2] = 1692;
HEAP32[$0 + 4868 >> 2] = 9;
HEAP32[$0 + 4872 >> 2] = 2911;
HEAP32[$0 + 4876 >> 2] = 10;
HEAP32[$0 + 4880 >> 2] = 2923;
HEAP32[$0 + 4884 >> 2] = 11;
HEAP32[$0 + 4888 >> 2] = 5072;
HEAP32[$0 + 4892 >> 2] = 0;
HEAP32[$0 + 4816 >> 2] = 10211;
HEAP32[$0 + 4820 >> 2] = 4;
HEAP32[$0 + 4824 >> 2] = 2031;
HEAP32[$0 + 4828 >> 2] = 5;
wasm2js_i32$0 = 75144, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayA_28short_2c_20short_2c_20____29(0, 3, $0 + 4816 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4800 >> 2] = 3;
HEAP32[$0 + 4804 >> 2] = 7485;
$1 = $0 + 4808 | 0;
HEAP32[$1 >> 2] = 4;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 4784 >> 2] = 1;
HEAP32[$0 + 4788 >> 2] = 6661;
HEAP32[$0 + 4792 >> 2] = 2;
HEAP32[$0 + 4796 >> 2] = 6521;
wasm2js_i32$0 = 75148, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(6657, $0 + 4784 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4736 >> 2] = 3;
HEAP32[$0 + 4740 >> 2] = 6588;
HEAP32[$0 + 4744 >> 2] = 7;
HEAP32[$0 + 4748 >> 2] = 8526;
HEAP32[$0 + 4752 >> 2] = 5;
HEAP32[$0 + 4756 >> 2] = 6819;
HEAP32[$0 + 4760 >> 2] = 6;
HEAP32[$0 + 4764 >> 2] = 8664;
HEAP32[$0 + 4768 >> 2] = 4;
HEAP32[$0 + 4772 >> 2] = 5234;
$1 = $0 + 4776 | 0;
HEAP32[$1 >> 2] = 8;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 4720 >> 2] = 1;
HEAP32[$0 + 4724 >> 2] = 6801;
HEAP32[$0 + 4728 >> 2] = 2;
HEAP32[$0 + 4732 >> 2] = 5279;
wasm2js_i32$0 = 75152, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(2101, $0 + 4720 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4688 >> 2] = 3;
HEAP32[$0 + 4692 >> 2] = 1767;
HEAP32[$0 + 4696 >> 2] = 4;
HEAP32[$0 + 4700 >> 2] = 1774;
$1 = $0 + 4704 | 0;
HEAP32[$1 >> 2] = 5;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 4672 >> 2] = 1;
HEAP32[$0 + 4676 >> 2] = 7329;
HEAP32[$0 + 4680 >> 2] = 2;
HEAP32[$0 + 4684 >> 2] = 7229;
wasm2js_i32$0 = 75156, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(7379, $0 + 4672 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4656 >> 2] = 1;
HEAP32[$0 + 4660 >> 2] = 9525;
HEAP32[$0 + 4664 >> 2] = 2;
HEAP32[$0 + 4668 >> 2] = 0;
wasm2js_i32$0 = 75160, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 9462, $0 + 4656 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4640 >> 2] = 1;
HEAP32[$0 + 4644 >> 2] = 10603;
HEAP32[$0 + 4648 >> 2] = 2;
HEAP32[$0 + 4652 >> 2] = 0;
wasm2js_i32$0 = 75172, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 1476, $0 + 4640 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4624 >> 2] = 1;
HEAP32[$0 + 4628 >> 2] = 9043;
HEAP32[$0 + 4632 >> 2] = 2;
HEAP32[$0 + 4636 >> 2] = 0;
wasm2js_i32$0 = 75176, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 4726, $0 + 4624 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 4288 >> 2] = 7;
HEAP32[$0 + 4292 >> 2] = 6246;
HEAP32[$0 + 4296 >> 2] = 6;
HEAP32[$0 + 4300 >> 2] = 5903;
HEAP32[$0 + 4304 >> 2] = 8;
HEAP32[$0 + 4308 >> 2] = 4623;
HEAP32[$0 + 4312 >> 2] = 9;
HEAP32[$0 + 4316 >> 2] = 5856;
HEAP32[$0 + 4320 >> 2] = 5;
HEAP32[$0 + 4324 >> 2] = 8265;
HEAP32[$0 + 4328 >> 2] = 16;
HEAP32[$0 + 4332 >> 2] = 4871;
HEAP32[$0 + 4336 >> 2] = 15;
HEAP32[$0 + 4340 >> 2] = 4844;
HEAP32[$0 + 4344 >> 2] = 17;
HEAP32[$0 + 4348 >> 2] = 8233;
HEAP32[$0 + 4352 >> 2] = 18;
HEAP32[$0 + 4356 >> 2] = 2821;
HEAP32[$0 + 4360 >> 2] = 19;
HEAP32[$0 + 4364 >> 2] = 8194;
HEAP32[$0 + 4368 >> 2] = 20;
HEAP32[$0 + 4372 >> 2] = 4825;
HEAP32[$0 + 4376 >> 2] = 21;
HEAP32[$0 + 4380 >> 2] = 8209;
HEAP32[$0 + 4384 >> 2] = 22;
HEAP32[$0 + 4388 >> 2] = 3748;
HEAP32[$0 + 4392 >> 2] = 23;
HEAP32[$0 + 4396 >> 2] = 3171;
HEAP32[$0 + 4400 >> 2] = 24;
HEAP32[$0 + 4404 >> 2] = 8422;
HEAP32[$0 + 4408 >> 2] = 26;
HEAP32[$0 + 4412 >> 2] = 6029;
HEAP32[$0 + 4416 >> 2] = 27;
HEAP32[$0 + 4420 >> 2] = 8302;
HEAP32[$0 + 4424 >> 2] = 28;
HEAP32[$0 + 4428 >> 2] = 8258;
HEAP32[$0 + 4432 >> 2] = 29;
HEAP32[$0 + 4436 >> 2] = 3164;
HEAP32[$0 + 4440 >> 2] = 25;
HEAP32[$0 + 4444 >> 2] = 8279;
HEAP32[$0 + 4448 >> 2] = 30;
HEAP32[$0 + 4452 >> 2] = 10066;
HEAP32[$0 + 4456 >> 2] = 33;
HEAP32[$0 + 4460 >> 2] = 2105;
HEAP32[$0 + 4464 >> 2] = 34;
HEAP32[$0 + 4468 >> 2] = 4864;
HEAP32[$0 + 4472 >> 2] = 31;
HEAP32[$0 + 4476 >> 2] = 9347;
HEAP32[$0 + 4480 >> 2] = 32;
HEAP32[$0 + 4484 >> 2] = 3755;
HEAP32[$0 + 4488 >> 2] = 35;
HEAP32[$0 + 4492 >> 2] = 3308;
HEAP32[$0 + 4496 >> 2] = 36;
HEAP32[$0 + 4500 >> 2] = 6047;
HEAP32[$0 + 4504 >> 2] = 37;
HEAP32[$0 + 4508 >> 2] = 8485;
HEAP32[$0 + 4512 >> 2] = 38;
HEAP32[$0 + 4516 >> 2] = 6054;
HEAP32[$0 + 4520 >> 2] = 39;
HEAP32[$0 + 4524 >> 2] = 8291;
HEAP32[$0 + 4528 >> 2] = 40;
HEAP32[$0 + 4532 >> 2] = 8315;
HEAP32[$0 + 4536 >> 2] = 41;
HEAP32[$0 + 4540 >> 2] = 5896;
HEAP32[$0 + 4544 >> 2] = 42;
HEAP32[$0 + 4548 >> 2] = 2031;
HEAP32[$0 + 4552 >> 2] = 10;
HEAP32[$0 + 4556 >> 2] = 1734;
HEAP32[$0 + 4560 >> 2] = 11;
HEAP32[$0 + 4564 >> 2] = 8909;
HEAP32[$0 + 4568 >> 2] = 12;
HEAP32[$0 + 4572 >> 2] = 2006;
HEAP32[$0 + 4576 >> 2] = 13;
HEAP32[$0 + 4580 >> 2] = 2704;
HEAP32[$0 + 4584 >> 2] = 14;
HEAP32[$0 + 4588 >> 2] = 6151;
HEAP32[$0 + 4592 >> 2] = 43;
HEAP32[$0 + 4596 >> 2] = 9533;
HEAP32[$0 + 4600 >> 2] = 44;
HEAP32[$0 + 4604 >> 2] = 10481;
$1 = $0 + 4608 | 0;
HEAP32[$1 >> 2] = 45;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 4272 >> 2] = 2;
HEAP32[$0 + 4276 >> 2] = 7387;
HEAP32[$0 + 4280 >> 2] = 1;
HEAP32[$0 + 4284 >> 2] = 5910;
wasm2js_i32$0 = 75132, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 4272 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 3824 >> 2] = 3;
HEAP32[$0 + 3828 >> 2] = 6410;
HEAP32[$0 + 3832 >> 2] = 4;
HEAP32[$0 + 3836 >> 2] = 6430;
HEAP32[$0 + 3840 >> 2] = 5;
HEAP32[$0 + 3844 >> 2] = 6374;
HEAP32[$0 + 3848 >> 2] = 6;
HEAP32[$0 + 3852 >> 2] = 2289;
HEAP32[$0 + 3856 >> 2] = 7;
HEAP32[$0 + 3860 >> 2] = 6774;
HEAP32[$0 + 3864 >> 2] = 8;
HEAP32[$0 + 3868 >> 2] = 7474;
HEAP32[$0 + 3872 >> 2] = 9;
HEAP32[$0 + 3876 >> 2] = 7468;
HEAP32[$0 + 3880 >> 2] = 10;
HEAP32[$0 + 3884 >> 2] = 6318;
HEAP32[$0 + 3888 >> 2] = 11;
HEAP32[$0 + 3892 >> 2] = 10070;
HEAP32[$0 + 3896 >> 2] = 12;
HEAP32[$0 + 3900 >> 2] = 6528;
HEAP32[$0 + 3904 >> 2] = 13;
HEAP32[$0 + 3908 >> 2] = 9245;
HEAP32[$0 + 3912 >> 2] = 14;
HEAP32[$0 + 3916 >> 2] = 6231;
HEAP32[$0 + 3920 >> 2] = 15;
HEAP32[$0 + 3924 >> 2] = 6160;
HEAP32[$0 + 3928 >> 2] = 16;
HEAP32[$0 + 3932 >> 2] = 5832;
HEAP32[$0 + 3936 >> 2] = 18;
HEAP32[$0 + 3940 >> 2] = 5867;
HEAP32[$0 + 3944 >> 2] = 19;
HEAP32[$0 + 3948 >> 2] = 5878;
HEAP32[$0 + 3952 >> 2] = 20;
HEAP32[$0 + 3956 >> 2] = 5845;
HEAP32[$0 + 3960 >> 2] = 21;
HEAP32[$0 + 3964 >> 2] = 5821;
HEAP32[$0 + 3968 >> 2] = 22;
HEAP32[$0 + 3972 >> 2] = 7452;
HEAP32[$0 + 3976 >> 2] = 17;
HEAP32[$0 + 3980 >> 2] = 5806;
HEAP32[$0 + 3984 >> 2] = 23;
HEAP32[$0 + 3988 >> 2] = 5782;
HEAP32[$0 + 3992 >> 2] = 24;
HEAP32[$0 + 3996 >> 2] = 5758;
HEAP32[$0 + 4e3 >> 2] = 25;
HEAP32[$0 + 4004 >> 2] = 5770;
HEAP32[$0 + 4008 >> 2] = 26;
HEAP32[$0 + 4012 >> 2] = 1465;
HEAP32[$0 + 4016 >> 2] = 27;
HEAP32[$0 + 4020 >> 2] = 8981;
HEAP32[$0 + 4024 >> 2] = 28;
HEAP32[$0 + 4028 >> 2] = 5889;
HEAP32[$0 + 4032 >> 2] = 29;
HEAP32[$0 + 4036 >> 2] = 5797;
HEAP32[$0 + 4040 >> 2] = 30;
HEAP32[$0 + 4044 >> 2] = 6759;
HEAP32[$0 + 4048 >> 2] = 31;
HEAP32[$0 + 4052 >> 2] = 4656;
HEAP32[$0 + 4056 >> 2] = 32;
HEAP32[$0 + 4060 >> 2] = 4913;
HEAP32[$0 + 4064 >> 2] = 39;
HEAP32[$0 + 4068 >> 2] = 2323;
HEAP32[$0 + 4072 >> 2] = 46;
HEAP32[$0 + 4076 >> 2] = 4630;
HEAP32[$0 + 4080 >> 2] = 33;
HEAP32[$0 + 4084 >> 2] = 4888;
HEAP32[$0 + 4088 >> 2] = 40;
HEAP32[$0 + 4092 >> 2] = 2309;
HEAP32[$0 + 4096 >> 2] = 47;
HEAP32[$0 + 4100 >> 2] = 4697;
HEAP32[$0 + 4104 >> 2] = 34;
HEAP32[$0 + 4108 >> 2] = 4961;
HEAP32[$0 + 4112 >> 2] = 41;
HEAP32[$0 + 4116 >> 2] = 2341;
HEAP32[$0 + 4120 >> 2] = 48;
HEAP32[$0 + 4124 >> 2] = 4684;
HEAP32[$0 + 4128 >> 2] = 35;
HEAP32[$0 + 4132 >> 2] = 4953;
HEAP32[$0 + 4136 >> 2] = 42;
HEAP32[$0 + 4140 >> 2] = 8427;
HEAP32[$0 + 4144 >> 2] = 49;
HEAP32[$0 + 4148 >> 2] = 3154;
HEAP32[$0 + 4152 >> 2] = 50;
HEAP32[$0 + 4156 >> 2] = 4203;
HEAP32[$0 + 4160 >> 2] = 51;
HEAP32[$0 + 4164 >> 2] = 4640;
HEAP32[$0 + 4168 >> 2] = 36;
HEAP32[$0 + 4172 >> 2] = 4897;
HEAP32[$0 + 4176 >> 2] = 43;
HEAP32[$0 + 4180 >> 2] = 8898;
HEAP32[$0 + 4184 >> 2] = 52;
HEAP32[$0 + 4188 >> 2] = 4670;
HEAP32[$0 + 4192 >> 2] = 37;
HEAP32[$0 + 4196 >> 2] = 4940;
HEAP32[$0 + 4200 >> 2] = 44;
HEAP32[$0 + 4204 >> 2] = 9007;
HEAP32[$0 + 4208 >> 2] = 53;
HEAP32[$0 + 4212 >> 2] = 9021;
HEAP32[$0 + 4216 >> 2] = 54;
HEAP32[$0 + 4220 >> 2] = 11028;
HEAP32[$0 + 4224 >> 2] = 55;
HEAP32[$0 + 4228 >> 2] = 4707;
HEAP32[$0 + 4232 >> 2] = 38;
HEAP32[$0 + 4236 >> 2] = 4970;
HEAP32[$0 + 4240 >> 2] = 45;
HEAP32[$0 + 4244 >> 2] = 2355;
HEAP32[$0 + 4248 >> 2] = 58;
HEAP32[$0 + 4252 >> 2] = 6793;
HEAP32[$0 + 4256 >> 2] = 56;
HEAP32[$0 + 4260 >> 2] = 7157;
$1 = $0 + 4264 | 0;
HEAP32[$1 >> 2] = 57;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 3808 >> 2] = 1;
HEAP32[$0 + 3812 >> 2] = 4881;
HEAP32[$0 + 3816 >> 2] = 2;
HEAP32[$0 + 3820 >> 2] = 6392;
wasm2js_i32$0 = 75128, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(6651, $0 + 3808 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = dlmalloc(13);
HEAP32[18208] = $2;
$1 = $0 + 3712 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 3;
$1 = $0 + 3720 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 4;
$1 = $0 + 3728 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 5;
$1 = $0 + 3736 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 6;
$1 = $0 + 3744 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 8;
$1 = $0 + 3752 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 7;
$1 = $0 + 3760 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 9;
$1 = $0 + 3768 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 11;
$1 = $0 + 3776 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 10;
$1 = $0 + 3784 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 12;
$1 = $0 + 3792 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = -1;
HEAP32[$0 + 3696 >> 2] = 0;
HEAP32[$0 + 3700 >> 2] = 1;
HEAP32[$0 + 3704 >> 2] = 1;
HEAP32[$0 + 3708 >> 2] = 2;
void_20SetArrayX_bool__28bool__2c_20short_2c_20____29($2, 0, $0 + 3696 | 0);
$2 = dlmalloc(52);
HEAP32[18209] = $2;
$1 = $0 + 3616 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 3;
$1 = $0 + 3624 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 4;
$1 = $0 + 3632 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 5;
$1 = $0 + 3640 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 6;
$1 = $0 + 3648 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 7;
$1 = $0 + 3656 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 8;
$1 = $0 + 3664 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = 9;
$1 = $0 + 3672 | 0;
HEAP32[$1 >> 2] = 3;
HEAP32[$1 + 4 >> 2] = 10;
$1 = $0 + 3680 | 0;
HEAP32[$1 >> 2] = 11;
HEAP32[$1 + 4 >> 2] = -1;
HEAP32[$0 + 3600 >> 2] = 0;
HEAP32[$0 + 3604 >> 2] = 1;
HEAP32[$0 + 3608 >> 2] = 3;
HEAP32[$0 + 3612 >> 2] = 2;
void_20SetArrayX_Manner__28Manner__2c_20short_2c_20____29($2, 0, $0 + 3600 | 0);
wasm2js_i32$0 = 72840, wasm2js_i32$1 = dlmalloc(52), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20DigitIndex_29($0 + 5016 | 0, 7, 0, 0, 1);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0 + 5008 | 0, 7, 0, 0, MakeDigits_28char_20const__29(12744));
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0 + 5e3 | 0, 7, 0, 0, MakeDigits_28char_20const__29(12812));
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0 + 4992 | 0, 8, 0, 2, MakeDigits_28char_20const__29(12812));
MakeSiteID_28Location_29($0 + 4984 | 0, 1);
$5 = HEAP32[18210];
HEAP16[$5 >> 1] = HEAPU16[35152];
HEAP8[$5 + 2 | 0] = HEAPU8[70306];
$2 = HEAP32[18210];
HEAP16[$2 + 4 >> 1] = HEAPU16[$0 + 4984 >> 1];
HEAP8[$2 + 6 | 0] = HEAPU8[$0 + 4986 | 0];
HEAP8[$2 + 10 | 0] = HEAPU8[$0 + 4986 | 0];
HEAP16[$2 + 8 >> 1] = HEAPU16[$0 + 4984 >> 1];
HEAP8[$2 + 14 | 0] = HEAPU8[$0 + 5018 | 0];
HEAP16[$2 + 12 >> 1] = HEAPU16[$0 + 5016 >> 1];
HEAP16[$2 + 16 >> 1] = HEAPU16[$0 + 5008 >> 1];
HEAP8[$2 + 18 | 0] = HEAPU8[$0 + 5010 | 0];
HEAP16[$2 + 20 >> 1] = HEAPU16[$0 + 5008 >> 1];
HEAP8[$2 + 22 | 0] = HEAPU8[$0 + 5010 | 0];
HEAP16[$2 + 24 >> 1] = HEAPU16[$0 + 4984 >> 1];
HEAP8[$2 + 26 | 0] = HEAPU8[$0 + 4986 | 0];
HEAP16[$2 + 32 >> 1] = HEAPU16[$0 + 4992 >> 1];
HEAP8[$2 + 34 | 0] = HEAPU8[$0 + 4994 | 0];
HEAP8[$2 + 30 | 0] = HEAPU8[$0 + 4994 | 0];
HEAP16[$2 + 28 >> 1] = HEAPU16[$0 + 4992 >> 1];
HEAP16[$2 + 36 >> 1] = HEAPU16[$0 + 4992 >> 1];
HEAP8[$2 + 38 | 0] = HEAPU8[$0 + 4994 | 0];
HEAP16[$2 + 44 >> 1] = HEAPU16[$0 + 5e3 >> 1];
HEAP8[$2 + 46 | 0] = HEAPU8[$0 + 5002 | 0];
HEAP16[$2 + 40 >> 1] = HEAPU16[$0 + 5e3 >> 1];
HEAP8[$2 + 42 | 0] = HEAPU8[$0 + 5002 | 0];
HEAP16[$2 + 48 >> 1] = HEAPU16[$0 + 5e3 >> 1];
HEAP8[$2 + 50 | 0] = HEAPU8[$0 + 5002 | 0];
$2 = dlmalloc(28);
HEAP32[18211] = $2;
$1 = $0 + 3504 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 3512 >> 2] = 6;
$1 = $0 + 3520 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 3528 >> 2] = 1;
$1 = $0 + 3536 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 3544 >> 2] = 2;
$1 = $0 + 3552 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 1071644672;
HEAP32[$0 + 3560 >> 2] = 3;
$1 = $0 + 3568 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 1072693248;
HEAP32[$0 + 3576 >> 2] = 4;
$1 = $0 + 3584 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 1073741824;
HEAP32[$0 + 3592 >> 2] = -1;
HEAP32[$0 + 3488 >> 2] = 0;
HEAP32[$0 + 3492 >> 2] = 0;
HEAP32[$0 + 3496 >> 2] = 5;
SetREALArray_28float__2c_20int_2c_20____29($2, 0, $0 + 3488 | 0);
HEAP32[$0 + 3476 >> 2] = 0;
HEAP32[$0 + 3472 >> 2] = 3;
HEAP32[$0 + 3468 >> 2] = 10070;
HEAP32[$0 + 3464 >> 2] = 2;
HEAP32[$0 + 3460 >> 2] = 6528;
HEAP32[$0 + 3456 >> 2] = 1;
wasm2js_i32$0 = 72848, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6318, $0 + 3456 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 3120 >> 2] = 1;
HEAP32[$0 + 3124 >> 2] = 6910;
HEAP32[$0 + 3128 >> 2] = 3;
HEAP32[$0 + 3132 >> 2] = 9705;
HEAP32[$0 + 3136 >> 2] = 4;
HEAP32[$0 + 3140 >> 2] = 9632;
HEAP32[$0 + 3144 >> 2] = 5;
HEAP32[$0 + 3148 >> 2] = 5180;
HEAP32[$0 + 3152 >> 2] = 7;
HEAP32[$0 + 3156 >> 2] = 6693;
HEAP32[$0 + 3160 >> 2] = 8;
HEAP32[$0 + 3164 >> 2] = 2215;
HEAP32[$0 + 3168 >> 2] = 9;
HEAP32[$0 + 3172 >> 2] = 8976;
HEAP32[$0 + 3176 >> 2] = 10;
HEAP32[$0 + 3180 >> 2] = 9722;
HEAP32[$0 + 3184 >> 2] = 11;
HEAP32[$0 + 3188 >> 2] = 6545;
HEAP32[$0 + 3192 >> 2] = 12;
HEAP32[$0 + 3196 >> 2] = 1761;
HEAP32[$0 + 3200 >> 2] = 13;
HEAP32[$0 + 3204 >> 2] = 9658;
HEAP32[$0 + 3208 >> 2] = 14;
HEAP32[$0 + 3212 >> 2] = 6554;
HEAP32[$0 + 3216 >> 2] = 15;
HEAP32[$0 + 3220 >> 2] = 10619;
HEAP32[$0 + 3224 >> 2] = 17;
HEAP32[$0 + 3228 >> 2] = 6889;
HEAP32[$0 + 3232 >> 2] = 18;
HEAP32[$0 + 3236 >> 2] = 5129;
HEAP32[$0 + 3240 >> 2] = 19;
HEAP32[$0 + 3244 >> 2] = 3630;
HEAP32[$0 + 3248 >> 2] = 20;
HEAP32[$0 + 3252 >> 2] = 2011;
HEAP32[$0 + 3256 >> 2] = 21;
HEAP32[$0 + 3260 >> 2] = 7221;
HEAP32[$0 + 3264 >> 2] = 22;
HEAP32[$0 + 3268 >> 2] = 7216;
HEAP32[$0 + 3272 >> 2] = 23;
HEAP32[$0 + 3276 >> 2] = 7190;
HEAP32[$0 + 3280 >> 2] = 24;
HEAP32[$0 + 3284 >> 2] = 5143;
HEAP32[$0 + 3288 >> 2] = 16;
HEAP32[$0 + 3292 >> 2] = 10594;
HEAP32[$0 + 3296 >> 2] = 25;
HEAP32[$0 + 3300 >> 2] = 3145;
HEAP32[$0 + 3304 >> 2] = 26;
HEAP32[$0 + 3308 >> 2] = 3871;
HEAP32[$0 + 3312 >> 2] = 27;
HEAP32[$0 + 3316 >> 2] = 10161;
HEAP32[$0 + 3320 >> 2] = 28;
HEAP32[$0 + 3324 >> 2] = 10147;
HEAP32[$0 + 3328 >> 2] = 29;
HEAP32[$0 + 3332 >> 2] = 8898;
HEAP32[$0 + 3336 >> 2] = 30;
HEAP32[$0 + 3340 >> 2] = 3739;
HEAP32[$0 + 3344 >> 2] = 31;
HEAP32[$0 + 3348 >> 2] = 3642;
HEAP32[$0 + 3352 >> 2] = 32;
HEAP32[$0 + 3356 >> 2] = 5197;
HEAP32[$0 + 3360 >> 2] = 33;
HEAP32[$0 + 3364 >> 2] = 5186;
HEAP32[$0 + 3368 >> 2] = 34;
HEAP32[$0 + 3372 >> 2] = 8537;
HEAP32[$0 + 3376 >> 2] = 35;
HEAP32[$0 + 3380 >> 2] = 7110;
HEAP32[$0 + 3384 >> 2] = 36;
HEAP32[$0 + 3388 >> 2] = 7097;
HEAP32[$0 + 3392 >> 2] = 37;
HEAP32[$0 + 3396 >> 2] = 7084;
HEAP32[$0 + 3400 >> 2] = 38;
HEAP32[$0 + 3404 >> 2] = 6349;
HEAP32[$0 + 3408 >> 2] = 39;
HEAP32[$0 + 3412 >> 2] = 6337;
HEAP32[$0 + 3416 >> 2] = 40;
HEAP32[$0 + 3420 >> 2] = 5097;
HEAP32[$0 + 3424 >> 2] = 41;
HEAP32[$0 + 3428 >> 2] = 9945;
HEAP32[$0 + 3432 >> 2] = 42;
HEAP32[$0 + 3436 >> 2] = 6871;
HEAP32[$0 + 3440 >> 2] = 43;
HEAP32[$0 + 3444 >> 2] = 7444;
HEAP32[$0 + 3448 >> 2] = 44;
HEAP32[$0 + 3452 >> 2] = 0;
HEAP32[$0 + 3104 >> 2] = 6;
HEAP32[$0 + 3108 >> 2] = 6683;
HEAP32[$0 + 3112 >> 2] = 2;
HEAP32[$0 + 3116 >> 2] = 6623;
wasm2js_i32$0 = 72852, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(6900, $0 + 3104 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 3088 >> 2] = 4;
HEAP32[$0 + 3092 >> 2] = 9680;
HEAP32[$0 + 3096 >> 2] = 3;
HEAP32[$0 + 3100 >> 2] = 0;
HEAP32[$0 + 3072 >> 2] = 2;
HEAP32[$0 + 3076 >> 2] = 3126;
HEAP32[$0 + 3080 >> 2] = 1;
HEAP32[$0 + 3084 >> 2] = 9693;
wasm2js_i32$0 = 72856, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3135, $0 + 3072 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 3008 >> 2] = 1;
HEAP32[$0 + 3012 >> 2] = 6786;
HEAP32[$0 + 3016 >> 2] = 2;
HEAP32[$0 + 3020 >> 2] = 6836;
HEAP32[$0 + 3024 >> 2] = 3;
HEAP32[$0 + 3028 >> 2] = 4980;
HEAP32[$0 + 3032 >> 2] = 4;
HEAP32[$0 + 3036 >> 2] = 3135;
HEAP32[$0 + 3040 >> 2] = 3;
HEAP32[$0 + 3044 >> 2] = 3126;
HEAP32[$0 + 3048 >> 2] = 4;
HEAP32[$0 + 3052 >> 2] = 9693;
HEAP32[$0 + 3056 >> 2] = 3;
HEAP32[$0 + 3060 >> 2] = 9680;
HEAP32[$0 + 3064 >> 2] = 4;
HEAP32[$0 + 3068 >> 2] = 0;
HEAP32[$0 + 2992 >> 2] = 1;
HEAP32[$0 + 2996 >> 2] = 6914;
HEAP32[$0 + 3e3 >> 2] = 2;
HEAP32[$0 + 3004 >> 2] = 4986;
wasm2js_i32$0 = 72860, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2191, $0 + 2992 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2928 >> 2] = 1;
HEAP32[$0 + 2932 >> 2] = 6786;
HEAP32[$0 + 2936 >> 2] = 2;
HEAP32[$0 + 2940 >> 2] = 6836;
HEAP32[$0 + 2944 >> 2] = 3;
HEAP32[$0 + 2948 >> 2] = 4980;
HEAP32[$0 + 2952 >> 2] = 4;
HEAP32[$0 + 2956 >> 2] = 3135;
HEAP32[$0 + 2960 >> 2] = 4;
HEAP32[$0 + 2964 >> 2] = 3126;
HEAP32[$0 + 2968 >> 2] = 3;
HEAP32[$0 + 2972 >> 2] = 9693;
HEAP32[$0 + 2976 >> 2] = 4;
HEAP32[$0 + 2980 >> 2] = 9680;
HEAP32[$0 + 2984 >> 2] = 3;
HEAP32[$0 + 2988 >> 2] = 0;
HEAP32[$0 + 2912 >> 2] = 1;
HEAP32[$0 + 2916 >> 2] = 6914;
HEAP32[$0 + 2920 >> 2] = 2;
HEAP32[$0 + 2924 >> 2] = 4986;
wasm2js_i32$0 = 72864, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2191, $0 + 2912 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 72868, wasm2js_i32$1 = dlmalloc(180), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$3 = 0;
while (1) {
label$5: {
$2 = HEAP32[18217];
if (($3 | 0) == 45) {
$1 = $2;
HEAP32[$1 + 36 >> 2] = 2;
HEAP32[$1 + 40 >> 2] = 2;
HEAP32[$1 + 28 >> 2] = 1;
HEAP32[$1 + 32 >> 2] = 2;
HEAP32[$0 + 2880 >> 2] = 1;
HEAP32[$0 + 2884 >> 2] = 8903;
HEAP32[$0 + 2888 >> 2] = 2;
HEAP32[$0 + 2892 >> 2] = 6521;
HEAP32[$0 + 2896 >> 2] = 3;
HEAP32[$0 + 2900 >> 2] = 10487;
$1 = $0 + 2904 | 0;
HEAP32[$1 >> 2] = 4;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2868 >> 2] = 3308;
HEAP32[$0 + 2872 >> 2] = 6;
HEAP32[$0 + 2876 >> 2] = 7210;
HEAP32[$0 + 2864 >> 2] = 5;
wasm2js_i32$0 = 72872, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(6877, $0 + 2864 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2848 >> 2] = 1;
HEAP32[$0 + 2852 >> 2] = 8921;
HEAP32[$0 + 2856 >> 2] = 0;
HEAP32[$0 + 2860 >> 2] = 0;
wasm2js_i32$0 = 72876, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 8491, $0 + 2848 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2816 >> 2] = 8981;
HEAP32[$0 + 2820 >> 2] = 5797;
HEAP32[$0 + 2824 >> 2] = 5867;
HEAP32[$0 + 2828 >> 2] = 5878;
HEAP32[$0 + 2832 >> 2] = 5832;
HEAP32[$0 + 2836 >> 2] = 5821;
HEAP32[$0 + 2840 >> 2] = 5845;
HEAP32[$0 + 2844 >> 2] = 0;
HEAP32[$0 + 2800 >> 2] = 5782;
HEAP32[$0 + 2804 >> 2] = 5758;
HEAP32[$0 + 2808 >> 2] = 5770;
HEAP32[$0 + 2812 >> 2] = 1465;
wasm2js_i32$0 = 72880, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeSet_28char_20const__2c_20____29(5806, $0 + 2800 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2752 >> 2] = 3;
HEAP32[$0 + 2756 >> 2] = 10457;
HEAP32[$0 + 2760 >> 2] = 4;
HEAP32[$0 + 2764 >> 2] = 2609;
HEAP32[$0 + 2768 >> 2] = 5;
HEAP32[$0 + 2772 >> 2] = 10454;
HEAP32[$0 + 2776 >> 2] = 6;
HEAP32[$0 + 2780 >> 2] = 2617;
$1 = $0 + 2784 | 0;
HEAP32[$1 >> 2] = 7;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2736 >> 2] = 1;
HEAP32[$0 + 2740 >> 2] = 2631;
HEAP32[$0 + 2744 >> 2] = 2;
HEAP32[$0 + 2748 >> 2] = 9998;
wasm2js_i32$0 = 72884, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(2798, $0 + 2736 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2704 >> 2] = 3;
HEAP32[$0 + 2708 >> 2] = 10243;
HEAP32[$0 + 2712 >> 2] = 4;
HEAP32[$0 + 2716 >> 2] = 2626;
$1 = $0 + 2720 | 0;
HEAP32[$1 >> 2] = 5;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2688 >> 2] = 1;
HEAP32[$0 + 2692 >> 2] = 1950;
HEAP32[$0 + 2696 >> 2] = 2;
HEAP32[$0 + 2700 >> 2] = 3307;
wasm2js_i32$0 = 72888, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(9670, $0 + 2688 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2608 >> 2] = 3;
HEAP32[$0 + 2612 >> 2] = 12738;
HEAP32[$0 + 2616 >> 2] = 4;
HEAP32[$0 + 2620 >> 2] = 10549;
HEAP32[$0 + 2624 >> 2] = 5;
HEAP32[$0 + 2628 >> 2] = 12693;
HEAP32[$0 + 2632 >> 2] = 6;
HEAP32[$0 + 2636 >> 2] = 12801;
HEAP32[$0 + 2640 >> 2] = 8;
HEAP32[$0 + 2644 >> 2] = 6667;
HEAP32[$0 + 2648 >> 2] = 7;
HEAP32[$0 + 2652 >> 2] = 6447;
HEAP32[$0 + 2656 >> 2] = 9;
HEAP32[$0 + 2660 >> 2] = 12809;
HEAP32[$0 + 2664 >> 2] = 11;
HEAP32[$0 + 2668 >> 2] = 6676;
HEAP32[$0 + 2672 >> 2] = 10;
HEAP32[$0 + 2676 >> 2] = 6459;
$1 = $0 + 2680 | 0;
HEAP32[$1 >> 2] = 12;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2592 >> 2] = 1;
HEAP32[$0 + 2596 >> 2] = 3121;
HEAP32[$0 + 2600 >> 2] = 2;
HEAP32[$0 + 2604 >> 2] = 12747;
wasm2js_i32$0 = 75104, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(2001, $0 + 2592 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2560 >> 2] = 5;
HEAP32[$0 + 2564 >> 2] = 6667;
HEAP32[$0 + 2568 >> 2] = 4;
HEAP32[$0 + 2572 >> 2] = 12809;
HEAP32[$0 + 2576 >> 2] = 7;
HEAP32[$0 + 2580 >> 2] = 6676;
$1 = $0 + 2584 | 0;
HEAP32[$1 >> 2] = 6;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2544 >> 2] = 1;
HEAP32[$0 + 2548 >> 2] = 3121;
HEAP32[$0 + 2552 >> 2] = 2;
HEAP32[$0 + 2556 >> 2] = 12801;
wasm2js_i32$0 = 75108, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2001, $0 + 2544 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2528 >> 2] = 1;
HEAP32[$0 + 2532 >> 2] = 6894;
HEAP32[$0 + 2536 >> 2] = 2;
HEAP32[$0 + 2540 >> 2] = 0;
wasm2js_i32$0 = 75112, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(2782, $0 + 2528 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 2512 >> 2] = 1;
HEAP32[$0 + 2516 >> 2] = 1390;
HEAP32[$0 + 2520 >> 2] = 2;
HEAP32[$0 + 2524 >> 2] = 0;
wasm2js_i32$0 = 75116, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(10884, $0 + 2512 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = operator_20new_28unsigned_20long_29(264);
HEAP32[19359] = 0;
$4 = invoke_ii(711, $2 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$5;
}
HEAP32[18780] = $4;
HEAP32[$0 + 2096 >> 2] = 1;
HEAP32[$0 + 2100 >> 2] = 6759;
HEAP32[$0 + 2104 >> 2] = 1;
HEAP32[$0 + 2108 >> 2] = 8427;
HEAP32[$0 + 2112 >> 2] = 0;
HEAP32[$0 + 2116 >> 2] = 6430;
HEAP32[$0 + 2120 >> 2] = 1;
HEAP32[$0 + 2124 >> 2] = 1465;
HEAP32[$0 + 2128 >> 2] = 0;
HEAP32[$0 + 2132 >> 2] = 6392;
HEAP32[$0 + 2136 >> 2] = 1;
HEAP32[$0 + 2140 >> 2] = 4953;
HEAP32[$0 + 2144 >> 2] = 0;
HEAP32[$0 + 2148 >> 2] = 4913;
HEAP32[$0 + 2152 >> 2] = 0;
HEAP32[$0 + 2156 >> 2] = 6410;
HEAP32[$0 + 2160 >> 2] = 0;
HEAP32[$0 + 2164 >> 2] = 5821;
HEAP32[$0 + 2168 >> 2] = 1;
HEAP32[$0 + 2172 >> 2] = 5832;
HEAP32[$0 + 2176 >> 2] = 1;
HEAP32[$0 + 2180 >> 2] = 6774;
HEAP32[$0 + 2184 >> 2] = 1;
HEAP32[$0 + 2188 >> 2] = 4203;
HEAP32[$0 + 2192 >> 2] = 0;
HEAP32[$0 + 2196 >> 2] = 3154;
HEAP32[$0 + 2200 >> 2] = 1;
HEAP32[$0 + 2204 >> 2] = 4897;
HEAP32[$0 + 2208 >> 2] = 0;
HEAP32[$0 + 2212 >> 2] = 8981;
HEAP32[$0 + 2216 >> 2] = 1;
HEAP32[$0 + 2220 >> 2] = 2323;
HEAP32[$0 + 2224 >> 2] = 0;
HEAP32[$0 + 2228 >> 2] = 6103;
HEAP32[$0 + 2232 >> 2] = 0;
HEAP32[$0 + 2236 >> 2] = 5845;
HEAP32[$0 + 2240 >> 2] = 1;
HEAP32[$0 + 2244 >> 2] = 6231;
HEAP32[$0 + 2248 >> 2] = 1;
HEAP32[$0 + 2252 >> 2] = 6793;
HEAP32[$0 + 2256 >> 2] = 0;
HEAP32[$0 + 2260 >> 2] = 11028;
HEAP32[$0 + 2264 >> 2] = 0;
HEAP32[$0 + 2268 >> 2] = 4656;
HEAP32[$0 + 2272 >> 2] = 0;
HEAP32[$0 + 2276 >> 2] = 7452;
HEAP32[$0 + 2280 >> 2] = 1;
HEAP32[$0 + 2284 >> 2] = 2289;
HEAP32[$0 + 2288 >> 2] = 0;
HEAP32[$0 + 2292 >> 2] = 2341;
HEAP32[$0 + 2296 >> 2] = 0;
HEAP32[$0 + 2300 >> 2] = 5782;
HEAP32[$0 + 2304 >> 2] = 1;
HEAP32[$0 + 2308 >> 2] = 7468;
HEAP32[$0 + 2312 >> 2] = 1;
HEAP32[$0 + 2316 >> 2] = 4630;
HEAP32[$0 + 2320 >> 2] = 0;
HEAP32[$0 + 2324 >> 2] = 8898;
HEAP32[$0 + 2328 >> 2] = 0;
HEAP32[$0 + 2332 >> 2] = 6160;
HEAP32[$0 + 2336 >> 2] = 1;
HEAP32[$0 + 2340 >> 2] = 5867;
HEAP32[$0 + 2344 >> 2] = 1;
HEAP32[$0 + 2348 >> 2] = 5797;
HEAP32[$0 + 2352 >> 2] = 1;
HEAP32[$0 + 2356 >> 2] = 9021;
HEAP32[$0 + 2360 >> 2] = 0;
HEAP32[$0 + 2364 >> 2] = 4940;
HEAP32[$0 + 2368 >> 2] = 0;
HEAP32[$0 + 2372 >> 2] = 7474;
HEAP32[$0 + 2376 >> 2] = 1;
HEAP32[$0 + 2380 >> 2] = 4684;
HEAP32[$0 + 2384 >> 2] = 0;
HEAP32[$0 + 2388 >> 2] = 4888;
HEAP32[$0 + 2392 >> 2] = 0;
HEAP32[$0 + 2396 >> 2] = 6651;
HEAP32[$0 + 2400 >> 2] = 1;
HEAP32[$0 + 2404 >> 2] = 4697;
HEAP32[$0 + 2408 >> 2] = 0;
HEAP32[$0 + 2412 >> 2] = 5770;
HEAP32[$0 + 2416 >> 2] = 0;
HEAP32[$0 + 2420 >> 2] = 5806;
HEAP32[$0 + 2424 >> 2] = 1;
HEAP32[$0 + 2428 >> 2] = 4670;
HEAP32[$0 + 2432 >> 2] = 0;
HEAP32[$0 + 2436 >> 2] = 4961;
HEAP32[$0 + 2440 >> 2] = 0;
HEAP32[$0 + 2444 >> 2] = 2309;
HEAP32[$0 + 2448 >> 2] = 0;
HEAP32[$0 + 2452 >> 2] = 4640;
HEAP32[$0 + 2456 >> 2] = 1;
HEAP32[$0 + 2460 >> 2] = 4707;
HEAP32[$0 + 2464 >> 2] = 1;
HEAP32[$0 + 2468 >> 2] = 4970;
HEAP32[$0 + 2472 >> 2] = 1;
HEAP32[$0 + 2476 >> 2] = 4881;
HEAP32[$0 + 2480 >> 2] = 0;
HEAP32[$0 + 2484 >> 2] = 10070;
HEAP32[$0 + 2488 >> 2] = 1;
HEAP32[$0 + 2492 >> 2] = 5878;
HEAP32[$0 + 2496 >> 2] = 1;
HEAP32[$0 + 2500 >> 2] = 9007;
$1 = $0 + 2504 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 2080 >> 2] = 1;
HEAP32[$0 + 2088 >> 2] = 1;
HEAP32[$0 + 2084 >> 2] = 6528;
HEAP32[$0 + 2092 >> 2] = 6374;
wasm2js_i32$0 = 75164, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6318, $0 + 2080 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1984 >> 2] = 1;
HEAP32[$0 + 1988 >> 2] = 9618;
HEAP32[$0 + 1992 >> 2] = 1;
HEAP32[$0 + 1996 >> 2] = 6215;
HEAP32[$0 + 2e3 >> 2] = 0;
HEAP32[$0 + 2004 >> 2] = 6271;
HEAP32[$0 + 2008 >> 2] = 1;
HEAP32[$0 + 2012 >> 2] = 9715;
HEAP32[$0 + 2016 >> 2] = 1;
HEAP32[$0 + 2020 >> 2] = 9642;
HEAP32[$0 + 2024 >> 2] = 1;
HEAP32[$0 + 2028 >> 2] = 9611;
HEAP32[$0 + 2032 >> 2] = 1;
HEAP32[$0 + 2036 >> 2] = 6264;
HEAP32[$0 + 2040 >> 2] = 0;
HEAP32[$0 + 2044 >> 2] = 10040;
HEAP32[$0 + 2048 >> 2] = 0;
HEAP32[$0 + 2052 >> 2] = 2955;
HEAP32[$0 + 2056 >> 2] = 1;
HEAP32[$0 + 2060 >> 2] = 2948;
$1 = $0 + 2064 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1968 >> 2] = 1;
HEAP32[$0 + 1972 >> 2] = 9722;
HEAP32[$0 + 1976 >> 2] = 1;
HEAP32[$0 + 1980 >> 2] = 9649;
wasm2js_i32$0 = 75180, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6318, $0 + 1968 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1952 >> 2] = 1;
HEAP32[$0 + 1956 >> 2] = 9556;
$1 = $0 + 1960 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1936 >> 2] = 1;
HEAP32[$0 + 1940 >> 2] = 10481;
HEAP32[$0 + 1944 >> 2] = 0;
HEAP32[$0 + 1948 >> 2] = 9571;
wasm2js_i32$0 = 75184, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3314, $0 + 1936 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75188, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1920 >> 2] = 0;
HEAP32[$0 + 1924 >> 2] = 0;
wasm2js_i32$0 = 75192, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6054, $0 + 1920 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1904 >> 2] = 1;
HEAP32[$0 + 1908 >> 2] = 9556;
$1 = $0 + 1912 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1888 >> 2] = 1;
HEAP32[$0 + 1892 >> 2] = 10481;
HEAP32[$0 + 1896 >> 2] = 0;
HEAP32[$0 + 1900 >> 2] = 9571;
wasm2js_i32$0 = 75196, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3314, $0 + 1888 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1856 >> 2] = 0;
HEAP32[$0 + 1860 >> 2] = 4623;
HEAP32[$0 + 1864 >> 2] = 0;
HEAP32[$0 + 1868 >> 2] = 5856;
$1 = $0 + 1872 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1840 >> 2] = 0;
HEAP32[$0 + 1844 >> 2] = 7387;
HEAP32[$0 + 1848 >> 2] = 0;
HEAP32[$0 + 1852 >> 2] = 7320;
wasm2js_i32$0 = 75200, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 1840 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1808 >> 2] = 0;
HEAP32[$0 + 1812 >> 2] = 9571;
HEAP32[$0 + 1816 >> 2] = 1;
HEAP32[$0 + 1820 >> 2] = 9556;
$1 = $0 + 1824 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1792 >> 2] = 1;
HEAP32[$0 + 1796 >> 2] = 10481;
HEAP32[$0 + 1800 >> 2] = 0;
HEAP32[$0 + 1804 >> 2] = 6939;
wasm2js_i32$0 = 75204, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3314, $0 + 1792 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75208, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75212, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1760 >> 2] = 0;
HEAP32[$0 + 1764 >> 2] = 9571;
HEAP32[$0 + 1768 >> 2] = 1;
HEAP32[$0 + 1772 >> 2] = 9556;
$1 = $0 + 1776 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1744 >> 2] = 1;
HEAP32[$0 + 1748 >> 2] = 6964;
HEAP32[$0 + 1752 >> 2] = 0;
HEAP32[$0 + 1756 >> 2] = 10481;
wasm2js_i32$0 = 75216, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3314, $0 + 1744 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1696 >> 2] = 1;
HEAP32[$0 + 1700 >> 2] = 7320;
HEAP32[$0 + 1704 >> 2] = 0;
HEAP32[$0 + 1708 >> 2] = 5903;
HEAP32[$0 + 1712 >> 2] = 1;
HEAP32[$0 + 1716 >> 2] = 4623;
HEAP32[$0 + 1720 >> 2] = 0;
HEAP32[$0 + 1724 >> 2] = 5856;
$1 = $0 + 1728 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1680 >> 2] = 0;
HEAP32[$0 + 1684 >> 2] = 7387;
HEAP32[$0 + 1688 >> 2] = 0;
HEAP32[$0 + 1692 >> 2] = 5910;
wasm2js_i32$0 = 75220, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 1680 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1648 >> 2] = 0;
HEAP32[$0 + 1652 >> 2] = 4623;
HEAP32[$0 + 1656 >> 2] = 0;
HEAP32[$0 + 1660 >> 2] = 5856;
$1 = $0 + 1664 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1632 >> 2] = 0;
HEAP32[$0 + 1636 >> 2] = 7387;
HEAP32[$0 + 1640 >> 2] = 0;
HEAP32[$0 + 1644 >> 2] = 7320;
wasm2js_i32$0 = 75224, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 1632 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1600 >> 2] = 1;
HEAP32[$0 + 1604 >> 2] = 4192;
HEAP32[$0 + 1608 >> 2] = 1;
HEAP32[$0 + 1612 >> 2] = 8954;
HEAP32[$0 + 1616 >> 2] = 0;
HEAP32[$0 + 1620 >> 2] = 6607;
$1 = $0 + 1624 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1584 >> 2] = 1;
HEAP32[$0 + 1588 >> 2] = 9909;
HEAP32[$0 + 1592 >> 2] = 0;
HEAP32[$0 + 1596 >> 2] = 6615;
wasm2js_i32$0 = 75228, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6599, $0 + 1584 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1568 >> 2] = 0;
HEAP32[$0 + 1572 >> 2] = 0;
wasm2js_i32$0 = 75232, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 1568 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1552 >> 2] = 1;
HEAP32[$0 + 1556 >> 2] = 0;
wasm2js_i32$0 = 75236, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 1552 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75240, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75244, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75248, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1504 >> 2] = 0;
HEAP32[$0 + 1508 >> 2] = 4623;
HEAP32[$0 + 1512 >> 2] = 0;
HEAP32[$0 + 1516 >> 2] = 4871;
HEAP32[$0 + 1520 >> 2] = 0;
HEAP32[$0 + 1524 >> 2] = 8915;
HEAP32[$0 + 1528 >> 2] = 0;
HEAP32[$0 + 1532 >> 2] = 10237;
HEAP32[$0 + 1536 >> 2] = 0;
HEAP32[$0 + 1540 >> 2] = 5856;
$1 = $0 + 1544 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1488 >> 2] = 0;
HEAP32[$0 + 1492 >> 2] = 7320;
HEAP32[$0 + 1496 >> 2] = 0;
HEAP32[$0 + 1500 >> 2] = 8265;
wasm2js_i32$0 = 75252, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 7387, $0 + 1488 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1456 >> 2] = 0;
HEAP32[$0 + 1460 >> 2] = 4623;
HEAP32[$0 + 1464 >> 2] = 0;
HEAP32[$0 + 1468 >> 2] = 5856;
$1 = $0 + 1472 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1440 >> 2] = 0;
HEAP32[$0 + 1444 >> 2] = 7387;
HEAP32[$0 + 1448 >> 2] = 0;
HEAP32[$0 + 1452 >> 2] = 7320;
wasm2js_i32$0 = 75256, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 1440 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75260, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75264, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1424 >> 2] = 0;
HEAP32[$0 + 1428 >> 2] = 0;
wasm2js_i32$0 = 75268, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 9064, $0 + 1424 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1408 >> 2] = 0;
HEAP32[$0 + 1412 >> 2] = 6084;
HEAP32[$0 + 1416 >> 2] = 0;
HEAP32[$0 + 1420 >> 2] = 0;
wasm2js_i32$0 = 75272, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6064, $0 + 1408 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75276, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = $0 + 1392 | 0;
HEAP32[$1 >> 2] = 1;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1376 >> 2] = 0;
HEAP32[$0 + 1380 >> 2] = 9571;
HEAP32[$0 + 1384 >> 2] = 1;
HEAP32[$0 + 1388 >> 2] = 9556;
wasm2js_i32$0 = 75280, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10481, $0 + 1376 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1360 >> 2] = 0;
HEAP32[$0 + 1364 >> 2] = 0;
wasm2js_i32$0 = 75284, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 1360 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1216 >> 2] = 0;
HEAP32[$0 + 1220 >> 2] = 8265;
HEAP32[$0 + 1224 >> 2] = 0;
HEAP32[$0 + 1228 >> 2] = 4623;
HEAP32[$0 + 1232 >> 2] = 0;
HEAP32[$0 + 1236 >> 2] = 4871;
HEAP32[$0 + 1240 >> 2] = 0;
HEAP32[$0 + 1244 >> 2] = 10237;
HEAP32[$0 + 1248 >> 2] = 0;
HEAP32[$0 + 1252 >> 2] = 3171;
HEAP32[$0 + 1256 >> 2] = 1;
HEAP32[$0 + 1260 >> 2] = 8422;
HEAP32[$0 + 1264 >> 2] = 1;
HEAP32[$0 + 1268 >> 2] = 6029;
HEAP32[$0 + 1272 >> 2] = 1;
HEAP32[$0 + 1276 >> 2] = 8302;
HEAP32[$0 + 1280 >> 2] = 1;
HEAP32[$0 + 1284 >> 2] = 8258;
HEAP32[$0 + 1288 >> 2] = 0;
HEAP32[$0 + 1292 >> 2] = 3164;
HEAP32[$0 + 1296 >> 2] = 1;
HEAP32[$0 + 1300 >> 2] = 8279;
HEAP32[$0 + 1304 >> 2] = 0;
HEAP32[$0 + 1308 >> 2] = 10066;
HEAP32[$0 + 1312 >> 2] = 1;
HEAP32[$0 + 1316 >> 2] = 2105;
HEAP32[$0 + 1320 >> 2] = 1;
HEAP32[$0 + 1324 >> 2] = 4864;
HEAP32[$0 + 1328 >> 2] = 0;
HEAP32[$0 + 1332 >> 2] = 9347;
HEAP32[$0 + 1336 >> 2] = 0;
HEAP32[$0 + 1340 >> 2] = 3755;
HEAP32[$0 + 1344 >> 2] = 1;
HEAP32[$0 + 1348 >> 2] = 5856;
$1 = $0 + 1352 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1200 >> 2] = 1;
HEAP32[$0 + 1204 >> 2] = 7387;
HEAP32[$0 + 1208 >> 2] = 0;
HEAP32[$0 + 1212 >> 2] = 7320;
wasm2js_i32$0 = 75288, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 3748, $0 + 1200 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75292, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1184 >> 2] = 0;
HEAP32[$0 + 1188 >> 2] = 6084;
HEAP32[$0 + 1192 >> 2] = 0;
HEAP32[$0 + 1196 >> 2] = 0;
wasm2js_i32$0 = 75296, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6064, $0 + 1184 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1168 >> 2] = 0;
HEAP32[$0 + 1172 >> 2] = 0;
wasm2js_i32$0 = 75300, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 1168 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1152 >> 2] = 1;
HEAP32[$0 + 1156 >> 2] = 0;
wasm2js_i32$0 = 75304, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2955, $0 + 1152 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1120 >> 2] = 0;
HEAP32[$0 + 1124 >> 2] = 4623;
HEAP32[$0 + 1128 >> 2] = 0;
HEAP32[$0 + 1132 >> 2] = 5856;
$1 = $0 + 1136 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 1104 >> 2] = 0;
HEAP32[$0 + 1108 >> 2] = 7387;
HEAP32[$0 + 1112 >> 2] = 0;
HEAP32[$0 + 1116 >> 2] = 7320;
wasm2js_i32$0 = 75308, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 1104 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75312, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 1088 >> 2] = 0;
HEAP32[$0 + 1092 >> 2] = 0;
wasm2js_i32$0 = 75316, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 9027, $0 + 1088 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75320, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 784 >> 2] = 0;
HEAP32[$0 + 788 >> 2] = 9722;
HEAP32[$0 + 792 >> 2] = 1;
HEAP32[$0 + 796 >> 2] = 9649;
HEAP32[$0 + 800 >> 2] = 1;
HEAP32[$0 + 804 >> 2] = 2111;
HEAP32[$0 + 808 >> 2] = 1;
HEAP32[$0 + 812 >> 2] = 9245;
HEAP32[$0 + 816 >> 2] = 0;
HEAP32[$0 + 820 >> 2] = 10251;
HEAP32[$0 + 824 >> 2] = 0;
HEAP32[$0 + 828 >> 2] = 9233;
HEAP32[$0 + 832 >> 2] = 0;
HEAP32[$0 + 836 >> 2] = 4461;
HEAP32[$0 + 840 >> 2] = 0;
HEAP32[$0 + 844 >> 2] = 3220;
HEAP32[$0 + 848 >> 2] = 1;
HEAP32[$0 + 852 >> 2] = 9182;
HEAP32[$0 + 856 >> 2] = 1;
HEAP32[$0 + 860 >> 2] = 4436;
HEAP32[$0 + 864 >> 2] = 0;
HEAP32[$0 + 868 >> 2] = 2935;
HEAP32[$0 + 872 >> 2] = 0;
HEAP32[$0 + 876 >> 2] = 9172;
HEAP32[$0 + 880 >> 2] = 1;
HEAP32[$0 + 884 >> 2] = 9078;
HEAP32[$0 + 888 >> 2] = 1;
HEAP32[$0 + 892 >> 2] = 3667;
HEAP32[$0 + 896 >> 2] = 1;
HEAP32[$0 + 900 >> 2] = 3660;
HEAP32[$0 + 904 >> 2] = 1;
HEAP32[$0 + 908 >> 2] = 7280;
HEAP32[$0 + 912 >> 2] = 0;
HEAP32[$0 + 916 >> 2] = 7273;
HEAP32[$0 + 920 >> 2] = 0;
HEAP32[$0 + 924 >> 2] = 10061;
HEAP32[$0 + 928 >> 2] = 1;
HEAP32[$0 + 932 >> 2] = 10054;
HEAP32[$0 + 936 >> 2] = 1;
HEAP32[$0 + 940 >> 2] = 4519;
HEAP32[$0 + 944 >> 2] = 0;
HEAP32[$0 + 948 >> 2] = 12829;
HEAP32[$0 + 952 >> 2] = 1;
HEAP32[$0 + 956 >> 2] = 1459;
HEAP32[$0 + 960 >> 2] = 0;
HEAP32[$0 + 964 >> 2] = 3546;
HEAP32[$0 + 968 >> 2] = 1;
HEAP32[$0 + 972 >> 2] = 12770;
HEAP32[$0 + 976 >> 2] = 1;
HEAP32[$0 + 980 >> 2] = 12714;
HEAP32[$0 + 984 >> 2] = 1;
HEAP32[$0 + 988 >> 2] = 12704;
HEAP32[$0 + 992 >> 2] = 1;
HEAP32[$0 + 996 >> 2] = 12687;
HEAP32[$0 + 1e3 >> 2] = 1;
HEAP32[$0 + 1004 >> 2] = 4568;
HEAP32[$0 + 1008 >> 2] = 1;
HEAP32[$0 + 1012 >> 2] = 4561;
HEAP32[$0 + 1016 >> 2] = 1;
HEAP32[$0 + 1020 >> 2] = 4535;
HEAP32[$0 + 1024 >> 2] = 0;
HEAP32[$0 + 1028 >> 2] = 4450;
HEAP32[$0 + 1032 >> 2] = 0;
HEAP32[$0 + 1036 >> 2] = 6500;
HEAP32[$0 + 1040 >> 2] = 1;
HEAP32[$0 + 1044 >> 2] = 10021;
HEAP32[$0 + 1048 >> 2] = 0;
HEAP32[$0 + 1052 >> 2] = 4577;
HEAP32[$0 + 1056 >> 2] = 0;
HEAP32[$0 + 1060 >> 2] = 10028;
HEAP32[$0 + 1064 >> 2] = 0;
HEAP32[$0 + 1068 >> 2] = 4584;
$1 = $0 + 1072 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$0 + 768 >> 2] = 1;
HEAP32[$0 + 772 >> 2] = 4472;
HEAP32[$0 + 776 >> 2] = 1;
HEAP32[$0 + 780 >> 2] = 4548;
wasm2js_i32$0 = 75324, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 4479, $0 + 768 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 752 >> 2] = 0;
HEAP32[$0 + 756 >> 2] = 6084;
HEAP32[$0 + 760 >> 2] = 0;
HEAP32[$0 + 764 >> 2] = 0;
wasm2js_i32$0 = 75328, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6064, $0 + 752 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75332, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75336, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 736 >> 2] = 0;
HEAP32[$0 + 740 >> 2] = 6084;
HEAP32[$0 + 744 >> 2] = 0;
HEAP32[$0 + 748 >> 2] = 0;
wasm2js_i32$0 = 75340, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6064, $0 + 736 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 704 >> 2] = 0;
HEAP32[$0 + 708 >> 2] = 4623;
HEAP32[$0 + 712 >> 2] = 0;
HEAP32[$0 + 716 >> 2] = 3308;
HEAP32[$0 + 720 >> 2] = 0;
HEAP32[$0 + 724 >> 2] = 5856;
HEAP32[$0 + 728 >> 2] = 0;
HEAP32[$0 + 732 >> 2] = 0;
HEAP32[$0 + 688 >> 2] = 0;
HEAP32[$0 + 692 >> 2] = 7387;
HEAP32[$0 + 696 >> 2] = 0;
HEAP32[$0 + 700 >> 2] = 7320;
wasm2js_i32$0 = 75344, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 688 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 576 >> 2] = 1;
HEAP32[$0 + 580 >> 2] = 7320;
HEAP32[$0 + 584 >> 2] = 0;
HEAP32[$0 + 588 >> 2] = 4623;
HEAP32[$0 + 592 >> 2] = 0;
HEAP32[$0 + 596 >> 2] = 8279;
HEAP32[$0 + 600 >> 2] = 0;
HEAP32[$0 + 604 >> 2] = 10237;
HEAP32[$0 + 608 >> 2] = 0;
HEAP32[$0 + 612 >> 2] = 8485;
HEAP32[$0 + 616 >> 2] = 1;
HEAP32[$0 + 620 >> 2] = 6054;
HEAP32[$0 + 624 >> 2] = 1;
HEAP32[$0 + 628 >> 2] = 8422;
HEAP32[$0 + 632 >> 2] = 1;
HEAP32[$0 + 636 >> 2] = 9347;
HEAP32[$0 + 640 >> 2] = 0;
HEAP32[$0 + 644 >> 2] = 4864;
HEAP32[$0 + 648 >> 2] = 0;
HEAP32[$0 + 652 >> 2] = 6029;
HEAP32[$0 + 656 >> 2] = 1;
HEAP32[$0 + 660 >> 2] = 5856;
HEAP32[$0 + 664 >> 2] = 0;
HEAP32[$0 + 668 >> 2] = 8291;
HEAP32[$0 + 672 >> 2] = 1;
HEAP32[$0 + 676 >> 2] = 8315;
HEAP32[$0 + 680 >> 2] = 1;
HEAP32[$0 + 684 >> 2] = 0;
HEAP32[$0 + 560 >> 2] = 0;
HEAP32[$0 + 564 >> 2] = 8258;
HEAP32[$0 + 568 >> 2] = 0;
HEAP32[$0 + 572 >> 2] = 6047;
wasm2js_i32$0 = 75348, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 7387, $0 + 560 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 544 >> 2] = 0;
HEAP32[$0 + 548 >> 2] = 0;
HEAP32[$0 + 528 >> 2] = 0;
HEAP32[$0 + 532 >> 2] = 6064;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 + 540 >> 2] = 6084;
wasm2js_i32$0 = 75352, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6740, $0 + 528 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75356, wasm2js_i32$1 = HashAny_char_20const__2c_20int___emptyHash_28int_29(-1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 512 >> 2] = 0;
HEAP32[$0 + 516 >> 2] = 0;
wasm2js_i32$0 = 75360, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 512 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 496 >> 2] = 0;
HEAP32[$0 + 500 >> 2] = 6084;
HEAP32[$0 + 504 >> 2] = 0;
HEAP32[$0 + 508 >> 2] = 0;
wasm2js_i32$0 = 75364, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6064, $0 + 496 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 480 >> 2] = 0;
HEAP32[$0 + 484 >> 2] = 9332;
HEAP32[$0 + 488 >> 2] = 0;
HEAP32[$0 + 492 >> 2] = 0;
wasm2js_i32$0 = 75368, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6949, $0 + 480 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 448 >> 2] = 0;
HEAP32[$0 + 452 >> 2] = 4623;
HEAP32[$0 + 456 >> 2] = 0;
HEAP32[$0 + 460 >> 2] = 5856;
HEAP32[$0 + 464 >> 2] = 0;
HEAP32[$0 + 468 >> 2] = 0;
HEAP32[$0 + 432 >> 2] = 0;
HEAP32[$0 + 436 >> 2] = 7387;
HEAP32[$0 + 440 >> 2] = 0;
HEAP32[$0 + 444 >> 2] = 7320;
wasm2js_i32$0 = 75372, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10237, $0 + 432 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 416 >> 2] = 0;
HEAP32[$0 + 420 >> 2] = 0;
$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 2361, $0 + 416 | 0);
HEAP32[18844] = $1;
$3 = HEAP32[18795];
$4 = HEAP32[18796];
$5 = HEAP32[18797];
$6 = HEAP32[18798];
$7 = HEAP32[18799];
$8 = HEAP32[18800];
$9 = HEAP32[18801];
$10 = HEAP32[18802];
$11 = HEAP32[18803];
$12 = HEAP32[18804];
$13 = HEAP32[18805];
$14 = HEAP32[18806];
$15 = HEAP32[18807];
$16 = HEAP32[18808];
$17 = HEAP32[18809];
$18 = HEAP32[18810];
$19 = HEAP32[18811];
$20 = HEAP32[18812];
$21 = HEAP32[18813];
$22 = HEAP32[18814];
$23 = HEAP32[18815];
$24 = HEAP32[18816];
$25 = HEAP32[18817];
$26 = HEAP32[18818];
$27 = HEAP32[18819];
$28 = HEAP32[18820];
$29 = HEAP32[18821];
$30 = HEAP32[18822];
$31 = HEAP32[18823];
$32 = HEAP32[18824];
$33 = HEAP32[18825];
$34 = HEAP32[18826];
$35 = HEAP32[18827];
$36 = HEAP32[18828];
$37 = HEAP32[18829];
$38 = HEAP32[18830];
$39 = HEAP32[18831];
$40 = HEAP32[18832];
$41 = HEAP32[18833];
$42 = HEAP32[18834];
$43 = HEAP32[18835];
$44 = HEAP32[18836];
$45 = HEAP32[18837];
$46 = HEAP32[18838];
$47 = HEAP32[18839];
$48 = HEAP32[18840];
$49 = HEAP32[18841];
$50 = HEAP32[18842];
$2 = HEAP32[18843];
HEAP32[$0 + 412 >> 2] = 0;
HEAP32[$0 + 408 >> 2] = $1;
HEAP32[$0 + 404 >> 2] = 9007;
HEAP32[$0 + 400 >> 2] = $2;
HEAP32[$0 + 396 >> 2] = 5878;
HEAP32[$0 + 392 >> 2] = $50;
HEAP32[$0 + 388 >> 2] = 4881;
HEAP32[$0 + 384 >> 2] = $49;
HEAP32[$0 + 380 >> 2] = 4640;
HEAP32[$0 + 376 >> 2] = $48;
HEAP32[$0 + 372 >> 2] = 2309;
HEAP32[$0 + 368 >> 2] = $47;
HEAP32[$0 + 364 >> 2] = 4961;
HEAP32[$0 + 360 >> 2] = $46;
HEAP32[$0 + 356 >> 2] = 4670;
HEAP32[$0 + 352 >> 2] = $45;
HEAP32[$0 + 348 >> 2] = 5806;
HEAP32[$0 + 344 >> 2] = $44;
HEAP32[$0 + 340 >> 2] = 5770;
HEAP32[$0 + 336 >> 2] = $43;
HEAP32[$0 + 332 >> 2] = 4697;
HEAP32[$0 + 328 >> 2] = $42;
HEAP32[$0 + 324 >> 2] = 6651;
HEAP32[$0 + 320 >> 2] = $41;
HEAP32[$0 + 316 >> 2] = 4888;
HEAP32[$0 + 312 >> 2] = $40;
HEAP32[$0 + 308 >> 2] = 4684;
HEAP32[$0 + 304 >> 2] = $39;
HEAP32[$0 + 300 >> 2] = 7474;
HEAP32[$0 + 296 >> 2] = $38;
HEAP32[$0 + 292 >> 2] = 4940;
HEAP32[$0 + 288 >> 2] = $37;
HEAP32[$0 + 284 >> 2] = 9021;
HEAP32[$0 + 280 >> 2] = $36;
HEAP32[$0 + 276 >> 2] = 5797;
HEAP32[$0 + 272 >> 2] = $35;
HEAP32[$0 + 268 >> 2] = 5867;
HEAP32[$0 + 264 >> 2] = $34;
HEAP32[$0 + 260 >> 2] = 6160;
HEAP32[$0 + 256 >> 2] = $33;
HEAP32[$0 + 252 >> 2] = 8898;
HEAP32[$0 + 248 >> 2] = $32;
HEAP32[$0 + 244 >> 2] = 4630;
HEAP32[$0 + 240 >> 2] = $31;
HEAP32[$0 + 236 >> 2] = 7468;
HEAP32[$0 + 232 >> 2] = $30;
HEAP32[$0 + 228 >> 2] = 5782;
HEAP32[$0 + 224 >> 2] = $29;
HEAP32[$0 + 220 >> 2] = 2341;
HEAP32[$0 + 216 >> 2] = $28;
HEAP32[$0 + 212 >> 2] = 2289;
HEAP32[$0 + 208 >> 2] = $27;
HEAP32[$0 + 204 >> 2] = 7452;
HEAP32[$0 + 200 >> 2] = $26;
HEAP32[$0 + 196 >> 2] = 4656;
HEAP32[$0 + 192 >> 2] = $25;
HEAP32[$0 + 188 >> 2] = 11028;
HEAP32[$0 + 184 >> 2] = $24;
HEAP32[$0 + 180 >> 2] = 6793;
HEAP32[$0 + 176 >> 2] = $23;
HEAP32[$0 + 172 >> 2] = 6231;
HEAP32[$0 + 168 >> 2] = $22;
HEAP32[$0 + 164 >> 2] = 5845;
HEAP32[$0 + 160 >> 2] = $21;
HEAP32[$0 + 156 >> 2] = 6103;
HEAP32[$0 + 152 >> 2] = $20;
HEAP32[$0 + 148 >> 2] = 2323;
HEAP32[$0 + 144 >> 2] = $19;
HEAP32[$0 + 140 >> 2] = 8981;
HEAP32[$0 + 136 >> 2] = $18;
HEAP32[$0 + 132 >> 2] = 4897;
HEAP32[$0 + 128 >> 2] = $17;
HEAP32[$0 + 124 >> 2] = 3154;
HEAP32[$0 + 120 >> 2] = $16;
HEAP32[$0 + 116 >> 2] = 4203;
HEAP32[$0 + 112 >> 2] = $15;
HEAP32[$0 + 108 >> 2] = 6774;
HEAP32[$0 + 104 >> 2] = $14;
HEAP32[$0 + 100 >> 2] = 5832;
HEAP32[$0 + 96 >> 2] = $13;
HEAP32[$0 + 92 >> 2] = 5821;
HEAP32[$0 + 88 >> 2] = $12;
HEAP32[$0 + 84 >> 2] = 6410;
HEAP32[$0 + 80 >> 2] = $11;
HEAP32[$0 + 76 >> 2] = 4913;
HEAP32[$0 + 72 >> 2] = $10;
HEAP32[$0 + 68 >> 2] = 4953;
HEAP32[$0 - -64 >> 2] = $9;
HEAP32[$0 + 60 >> 2] = 6392;
HEAP32[$0 + 56 >> 2] = $8;
HEAP32[$0 + 52 >> 2] = 1465;
HEAP32[$0 + 48 >> 2] = $7;
HEAP32[$0 + 44 >> 2] = 6430;
HEAP32[$0 + 40 >> 2] = $6;
HEAP32[$0 + 36 >> 2] = 8427;
HEAP32[$0 + 32 >> 2] = $5;
HEAP32[$0 + 28 >> 2] = 6759;
HEAP32[$0 + 24 >> 2] = $4;
HEAP32[$0 + 20 >> 2] = 6374;
HEAP32[$0 + 16 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = 10070;
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = 6528;
HEAP32[$0 >> 2] = $3;
wasm2js_i32$0 = 75168, wasm2js_i32$1 = HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____makeHash_28HashAny_char_20const__2c_20int___2c_20char_20const__2c_20____29(0, 6318, $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
CreateNonmanualTables_28_29();
__stack_pointer = $0 + 5024 | 0;
return;
} else {
HEAP32[($3 << 2) + $2 >> 2] = 0;
$3 = $3 + 1 | 0;
continue;
}
}
break;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
}
__resumeException($0 | 0);
abort();
}
function doProlog($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
$10 = __stack_pointer - 16 | 0;
__stack_pointer = $10;
HEAP32[$10 + 12 >> 2] = $5;
$5 = HEAP32[$0 + 340 >> 2];
label$1: {
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
$14 = $0 + 272 | 0;
$13 = $0 + 276 | 0;
break label$1;
}
$14 = HEAP32[$0 + 284 >> 2];
$13 = $14 + 4 | 0;
}
$15 = $5 + 80 | 0;
$12 = $0 + 400 | 0;
$16 = $0 + 252 | 0;
label$3: {
label$4: {
label$5: {
label$6: {
while (1) {
label$8: {
HEAP32[$14 >> 2] = $2;
$8 = HEAP32[$10 + 12 >> 2];
HEAP32[$13 >> 2] = $8;
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
if (($4 | 0) <= 0) {
if (!(!$7 | !$4)) {
HEAP32[$6 >> 2] = $2;
$9 = 0;
break label$3;
}
$9 = 3;
$11 = 5;
label$17: {
switch ($4 + 4 | 0) {
case 4:
HEAP32[$14 >> 2] = $8;
$9 = 4;
break label$3;
case 2:
break label$14;
case 0:
break label$3;
case 3:
break label$4;
default:
break label$17;
}
}
HEAP32[$10 + 12 >> 2] = $3;
$8 = $3;
$4 = 0 - $4 | 0;
}
$9 = 1;
$11 = 0;
label$19: {
label$20: {
label$21: {
label$22: {
label$23: {
label$24: {
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
label$31: {
label$32: {
label$33: {
label$34: {
label$35: {
label$36: {
label$37: {
label$38: {
label$39: {
label$40: {
label$41: {
label$42: {
label$43: {
label$44: {
label$45: {
label$46: {
label$47: {
label$48: {
label$49: {
label$50: {
label$51: {
label$52: {
label$53: {
label$54: {
label$55: {
label$56: {
label$57: {
label$58: {
label$59: {
label$60: {
label$61: {
label$62: {
label$63: {
label$64: {
label$65: {
label$66: {
label$67: {
label$68: {
label$69: {
label$70: {
label$71: {
label$72: {
label$73: {
label$74: {
label$75: {
label$76: {
label$77: {
$8 = FUNCTION_TABLE[HEAP32[$16 >> 2]]($16, $4, $2, $8, $1) | 0;
switch ($8 + 1 | 0) {
case 11:
break label$19;
case 40:
break label$21;
case 34:
break label$22;
case 18:
break label$23;
case 12:
break label$24;
case 4:
break label$25;
case 1:
break label$26;
case 57:
break label$27;
case 56:
break label$28;
case 46:
break label$29;
case 49:
break label$30;
case 47:
break label$31;
case 48:
break label$32;
case 52:
break label$34;
case 54:
break label$35;
case 55:
break label$36;
case 53:
break label$37;
case 44:
break label$38;
case 42:
case 43:
break label$39;
case 41:
break label$40;
case 58:
break label$41;
case 50:
break label$42;
case 51:
break label$43;
case 45:
break label$44;
case 0:
break label$45;
case 21:
break label$46;
case 20:
break label$47;
case 22:
break label$48;
case 19:
break label$49;
case 10:
break label$50;
case 17:
break label$51;
case 16:
break label$52;
case 14:
break label$53;
case 6:
break label$54;
case 13:
break label$55;
case 38:
case 39:
break label$56;
case 36:
case 37:
break label$57;
case 32:
case 33:
break label$58;
case 31:
break label$60;
case 30:
break label$61;
case 29:
break label$62;
case 28:
break label$63;
case 27:
break label$64;
case 26:
break label$65;
case 25:
break label$66;
case 24:
break label$67;
case 23:
break label$68;
case 35:
break label$69;
case 3:
break label$70;
case 9:
break label$71;
case 15:
break label$73;
case 7:
break label$74;
case 8:
break label$75;
case 5:
break label$76;
case 2:
break label$77;
default:
break label$10;
}
}
$11 = processXmlDecl($0, 0, $2, HEAP32[$10 + 12 >> 2]);
if ($11) {
break label$4;
}
$1 = HEAP32[$0 + 144 >> 2];
break label$9;
}
if (HEAP32[$0 + 84 >> 2]) {
$4 = poolStoreString($12, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[$0 + 304 >> 2] = $4;
if (!$4) {
break label$5;
}
HEAP32[$0 + 312 >> 2] = 0;
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$4 = 0;
} else {
$4 = 1;
}
HEAP32[$0 + 308 >> 2] = 0;
break label$11;
}
$4 = HEAP32[$0 + 84 >> 2];
if (!$4) {
break label$10;
}
FUNCTION_TABLE[$4 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$0 + 304 >> 2], HEAP32[$0 + 308 >> 2], HEAP32[$0 + 312 >> 2], 1);
HEAP32[$0 + 304 >> 2] = 0;
poolClear($12);
break label$9;
}
HEAP8[$5 + 129 | 0] = 1;
if (!HEAP32[$0 + 84 >> 2]) {
break label$73;
}
if (!(FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($1, $2, HEAP32[$10 + 12 >> 2], $14) | 0)) {
break label$6;
}
$4 = HEAP32[$1 + 64 >> 2];
$4 = poolStoreString($12, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
HEAP32[$0 + 312 >> 2] = $4;
if (!$4) {
break label$5;
}
normalizePublicId($4);
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$4 = 0;
break label$72;
}
$4 = 1;
if (!(FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($1, $2, HEAP32[$10 + 12 >> 2], $14) | 0)) {
break label$6;
}
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 300 >> 2]) {
break label$11;
}
$8 = HEAP32[$1 + 64 >> 2];
$8 = poolStoreString($15, $1, $8 + $2 | 0, HEAP32[$10 + 12 >> 2] - $8 | 0);
if (!$8) {
break label$5;
}
normalizePublicId($8);
HEAP32[HEAP32[$0 + 300 >> 2] + 24 >> 2] = $8;
HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 92 >> 2];
if (!HEAP32[$0 + 136 >> 2]) {
break label$11;
}
break label$9;
}
$8 = HEAP32[$0 + 304 >> 2];
if ($8) {
FUNCTION_TABLE[HEAP32[$0 + 84 >> 2]](HEAP32[$0 + 4 >> 2], $8, HEAP32[$0 + 308 >> 2], HEAP32[$0 + 312 >> 2], 0);
poolClear($12);
$4 = 0;
} else {
$4 = 1;
}
$8 = HEAP32[$0 + 88 >> 2];
if (!$8) {
break label$11;
}
FUNCTION_TABLE[$8 | 0](HEAP32[$0 + 4 >> 2]);
break label$9;
}
HEAP32[$0 + 264 >> 2] = 773;
$9 = contentProcessor($0, $2, $3, $6);
break label$3;
}
$4 = getElementType($0, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[$0 + 328 >> 2] = $4;
if (!$4) {
break label$5;
}
break label$59;
}
$4 = getAttributeId($0, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[$0 + 332 >> 2] = $4;
if (!$4) {
break label$5;
}
HEAP32[$0 + 316 >> 2] = 0;
HEAP16[$0 + 336 >> 1] = 0;
break label$59;
}
HEAP8[$0 + 336 | 0] = 1;
HEAP32[$0 + 316 >> 2] = 49657;
break label$59;
}
HEAP8[$0 + 337 | 0] = 1;
HEAP32[$0 + 316 >> 2] = 49663;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49666;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49672;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49679;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49686;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49695;
break label$59;
}
HEAP32[$0 + 316 >> 2] = 49703;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 132 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 132 >> 2]) {
break label$10;
}
$11 = 1;
$4 = HEAP32[$0 + 316 >> 2];
if (!poolAppendString($12, $4 ? 49722 : ($8 | 0) == 32 ? 49712 : 49724)) {
break label$4;
}
if (!poolAppend($12, $1, $2, HEAP32[$10 + 12 >> 2])) {
break label$4;
}
HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 416 >> 2];
break label$9;
}
if (!HEAPU8[$5 + 128 | 0]) {
break label$10;
}
$11 = 1;
if (!defineAttribute(HEAP32[$0 + 328 >> 2], HEAP32[$0 + 332 >> 2], HEAPU8[$0 + 336 | 0], HEAPU8[$0 + 337 | 0], 0, $0)) {
break label$4;
}
if (!HEAP32[$0 + 132 >> 2]) {
break label$10;
}
$4 = HEAP32[$0 + 316 >> 2];
if (!$4) {
break label$10;
}
$9 = HEAPU8[$4 | 0];
if (!(($9 | 0) != 40 & (($9 | 0) != 78 | HEAPU8[$4 + 1 | 0] != 79))) {
$4 = HEAP32[$0 + 412 >> 2];
if (($4 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($12)) {
break label$4;
}
$4 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $4 + 1;
HEAP8[$4 | 0] = 41;
$4 = HEAP32[$0 + 412 >> 2];
if (($4 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($12)) {
break label$4;
}
$4 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $4 + 1;
HEAP8[$4 | 0] = 0;
HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 416 >> 2];
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
}
HEAP32[$13 >> 2] = $2;
FUNCTION_TABLE[HEAP32[$0 + 132 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$0 + 328 >> 2] >> 2], HEAP32[HEAP32[$0 + 332 >> 2] >> 2], HEAP32[$0 + 316 >> 2], 0, ($8 | 0) == 36);
poolClear($12);
break label$9;
}
if (!HEAPU8[$5 + 128 | 0]) {
break label$10;
}
$4 = HEAP32[$1 + 64 >> 2];
$11 = storeAttributeValue($0, $1, HEAPU8[$0 + 336 | 0], $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0, $15);
if ($11) {
break label$4;
}
$4 = HEAP32[$5 + 96 >> 2];
HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 92 >> 2];
$11 = 1;
if (!defineAttribute(HEAP32[$0 + 328 >> 2], HEAP32[$0 + 332 >> 2], HEAPU8[$0 + 336 | 0], 0, $4, $0)) {
break label$4;
}
if (!HEAP32[$0 + 132 >> 2]) {
break label$10;
}
$9 = HEAP32[$0 + 316 >> 2];
if (!$9) {
break label$10;
}
$17 = HEAPU8[$9 | 0];
if (!(($17 | 0) != 40 & (($17 | 0) != 78 | HEAPU8[$9 + 1 | 0] != 79))) {
$9 = HEAP32[$0 + 412 >> 2];
if (($9 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($12)) {
break label$4;
}
$9 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $9 + 1;
HEAP8[$9 | 0] = 41;
$9 = HEAP32[$0 + 412 >> 2];
if (($9 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($12)) {
break label$4;
}
$9 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $9 + 1;
HEAP8[$9 | 0] = 0;
HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 416 >> 2];
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
}
HEAP32[$13 >> 2] = $2;
FUNCTION_TABLE[HEAP32[$0 + 132 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$0 + 328 >> 2] >> 2], HEAP32[HEAP32[$0 + 332 >> 2] >> 2], HEAP32[$0 + 316 >> 2], $4, ($8 | 0) == 38);
poolClear($12);
break label$9;
}
if (!HEAPU8[$5 + 128 | 0]) {
break label$10;
}
$4 = HEAP32[$1 + 64 >> 2];
$11 = storeEntityValue($0, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
$4 = HEAP32[$5 + 120 >> 2];
$8 = HEAP32[$0 + 300 >> 2];
label$90: {
label$91: {
if ($8) {
HEAP32[$8 + 4 >> 2] = $4;
HEAP32[HEAP32[$0 + 300 >> 2] + 8 >> 2] = HEAP32[$5 + 116 >> 2] - HEAP32[$5 + 120 >> 2];
HEAP32[$5 + 120 >> 2] = HEAP32[$5 + 116 >> 2];
if (!HEAP32[$0 + 136 >> 2]) {
break label$91;
}
HEAP32[$13 >> 2] = $2;
$8 = HEAP32[$0 + 300 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 136 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$8 >> 2], HEAPU8[$8 + 33 | 0], HEAP32[$8 + 4 >> 2], HEAP32[$8 + 8 >> 2], HEAP32[$0 + 344 >> 2], 0, 0, 0);
$4 = 0;
break label$90;
}
HEAP32[$5 + 116 >> 2] = $4;
}
$4 = 1;
}
if (!$11) {
break label$11;
}
break label$4;
}
$4 = 1;
HEAP8[$5 + 129 | 0] = 1;
if (HEAP32[$0 + 84 >> 2]) {
$4 = HEAP32[$1 + 64 >> 2];
$4 = poolStoreString($12, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
HEAP32[$0 + 308 >> 2] = $4;
if (!$4) {
break label$5;
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$4 = 0;
}
if (HEAPU8[$5 + 130 | 0]) {
break label$11;
}
$8 = HEAP32[$0 + 108 >> 2];
if (!$8) {
break label$11;
}
if (FUNCTION_TABLE[$8 | 0](HEAP32[$0 + 4 >> 2]) | 0) {
break label$11;
}
break label$8;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 300 >> 2]) {
break label$10;
}
$4 = HEAP32[$1 + 64 >> 2];
$4 = poolStoreString($15, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
HEAP32[HEAP32[$0 + 300 >> 2] + 16 >> 2] = $4;
$4 = HEAP32[$0 + 300 >> 2];
if (!HEAP32[$4 + 16 >> 2]) {
break label$5;
}
HEAP32[$4 + 20 >> 2] = HEAP32[$0 + 344 >> 2];
HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 92 >> 2];
if (!HEAP32[$0 + 136 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAP32[$0 + 136 >> 2] | (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 300 >> 2])) {
break label$10;
}
HEAP32[$13 >> 2] = $2;
$4 = HEAP32[$0 + 300 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 136 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$4 >> 2], HEAPU8[$4 + 33 | 0], 0, 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], 0);
break label$9;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 300 >> 2]) {
break label$10;
}
$4 = poolStoreString($15, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[HEAP32[$0 + 300 >> 2] + 28 >> 2] = $4;
if (!HEAP32[HEAP32[$0 + 300 >> 2] + 28 >> 2]) {
break label$5;
}
HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 92 >> 2];
if (HEAP32[$0 + 92 >> 2]) {
HEAP32[$13 >> 2] = $2;
$4 = HEAP32[$0 + 300 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 92 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$4 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2]);
break label$9;
}
if (!HEAP32[$0 + 136 >> 2]) {
break label$10;
}
HEAP32[$13 >> 2] = $2;
$4 = HEAP32[$0 + 300 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 136 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$4 >> 2], 0, 0, 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2]);
break label$9;
}
if (FUNCTION_TABLE[HEAP32[$1 + 44 >> 2]]($1, $2, HEAP32[$10 + 12 >> 2]) | 0) {
break label$19;
}
if (!HEAPU8[$5 + 128 | 0]) {
break label$20;
}
$11 = 1;
$4 = poolStoreString($15, $1, $2, HEAP32[$10 + 12 >> 2]);
if (!$4) {
break label$4;
}
$8 = lookup($5, $4, 36);
HEAP32[$0 + 300 >> 2] = $8;
if (!$8) {
break label$4;
}
if (HEAP32[$8 >> 2] != ($4 | 0)) {
break label$20;
}
HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 92 >> 2];
HEAP32[HEAP32[$0 + 300 >> 2] + 24 >> 2] = 0;
HEAP8[HEAP32[$0 + 300 >> 2] + 33 | 0] = 0;
$4 = 1;
$4 = HEAP32[$0 + 460 >> 2] ? $4 : HEAP32[$0 + 284 >> 2] != 0;
HEAP8[HEAP32[$0 + 300 >> 2] + 34 | 0] = $4 ^ 1;
if (!HEAP32[$0 + 136 >> 2]) {
break label$10;
}
break label$9;
}
HEAP32[$0 + 320 >> 2] = 0;
HEAP32[$0 + 324 >> 2] = 0;
if (!HEAP32[$0 + 96 >> 2]) {
break label$10;
}
$4 = poolStoreString($12, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[$0 + 320 >> 2] = $4;
if (!$4) {
break label$5;
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
break label$9;
}
if (!(FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($1, $2, HEAP32[$10 + 12 >> 2], $14) | 0)) {
break label$6;
}
if (!HEAP32[$0 + 320 >> 2]) {
break label$10;
}
$4 = HEAP32[$1 + 64 >> 2];
$4 = poolStoreString($12, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
if (!$4) {
break label$5;
}
normalizePublicId($4);
HEAP32[$0 + 324 >> 2] = $4;
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
break label$9;
}
$4 = 1;
if (!HEAP32[$0 + 320 >> 2] | !HEAP32[$0 + 96 >> 2]) {
break label$12;
}
$4 = HEAP32[$1 + 64 >> 2];
$4 = poolStoreString($12, $1, $4 + $2 | 0, HEAP32[$10 + 12 >> 2] - $4 | 0);
if (!$4) {
break label$5;
}
HEAP32[$13 >> 2] = $2;
FUNCTION_TABLE[HEAP32[$0 + 96 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$0 + 320 >> 2], HEAP32[$0 + 344 >> 2], $4, HEAP32[$0 + 324 >> 2]);
$4 = 0;
break label$12;
}
$4 = 1;
if (!HEAP32[$0 + 324 >> 2] | !HEAP32[$0 + 96 >> 2]) {
break label$12;
}
HEAP32[$13 >> 2] = $2;
$4 = 0;
FUNCTION_TABLE[HEAP32[$0 + 96 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[$0 + 320 >> 2], HEAP32[$0 + 344 >> 2], 0, HEAP32[$0 + 324 >> 2]);
break label$12;
}
$9 = ($4 | 0) == 28 ? 10 : ($4 | 0) == 12 ? 17 : 2;
break label$3;
}
$4 = HEAP32[$0 + 452 >> 2];
label$96: {
if ($4 >>> 0 > HEAPU32[$0 + 256 >> 2]) {
break label$96;
}
if ($4) {
$11 = 1;
$4 = $4 << 1;
HEAP32[$0 + 452 >> 2] = $4;
$4 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]](HEAP32[$0 + 448 >> 2], $4) | 0;
if (!$4) {
break label$4;
}
HEAP32[$0 + 448 >> 2] = $4;
$4 = HEAP32[$5 + 164 >> 2];
if (!$4) {
break label$96;
}
$4 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]]($4, HEAP32[$0 + 452 >> 2] << 2) | 0;
if (!$4) {
break label$4;
}
HEAP32[$5 + 164 >> 2] = $4;
break label$96;
}
HEAP32[$0 + 452 >> 2] = 32;
$4 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](32) | 0;
HEAP32[$0 + 448 >> 2] = $4;
if (!$4) {
break label$5;
}
}
HEAP8[HEAP32[$0 + 448 >> 2] + HEAP32[$0 + 256 >> 2] | 0] = 0;
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
$4 = nextScaffoldPart($0);
if (($4 | 0) < 0) {
break label$5;
}
HEAP32[HEAP32[$5 + 164 >> 2] + (HEAP32[$5 + 160 >> 2] << 2) >> 2] = $4;
HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
HEAP32[HEAP32[$5 + 144 >> 2] + Math_imul($4, 28) >> 2] = 6;
if (!HEAP32[$0 + 128 >> 2]) {
break label$10;
}
break label$9;
}
$4 = HEAP32[$0 + 448 >> 2] + HEAP32[$0 + 256 >> 2] | 0;
if (HEAPU8[$4 | 0] == 124) {
break label$13;
}
HEAP8[$4 | 0] = 44;
if (!HEAPU8[$5 + 140 | 0] | !HEAP32[$0 + 128 >> 2]) {
break label$10;
}
break label$9;
}
$8 = HEAP32[$0 + 448 >> 2];
$11 = HEAP32[$0 + 256 >> 2];
$9 = HEAPU8[$8 + $11 | 0];
if (($9 | 0) == 44) {
break label$13;
}
$4 = 1;
label$98: {
if (!HEAPU8[$5 + 140 | 0] | $9) {
break label$98;
}
$9 = HEAP32[$5 + 144 >> 2] + Math_imul(HEAP32[(HEAP32[$5 + 164 >> 2] + (HEAP32[$5 + 160 >> 2] << 2) | 0) - 4 >> 2], 28) | 0;
if (HEAP32[$9 >> 2] == 3) {
break label$98;
}
HEAP32[$9 >> 2] = 5;
$11 = HEAP32[$0 + 256 >> 2];
$8 = HEAP32[$0 + 448 >> 2];
$4 = !HEAP32[$0 + 128 >> 2];
}
HEAP8[$8 + $11 | 0] = 124;
break label$11;
}
if (HEAPU8[$5 + 130 | 0]) {
break label$10;
}
$4 = HEAP32[$0 + 108 >> 2];
if (!$4) {
break label$10;
}
if (!(FUNCTION_TABLE[$4 | 0](HEAP32[$0 + 4 >> 2]) | 0)) {
break label$8;
}
break label$10;
}
if (!HEAP32[$0 + 128 >> 2]) {
break label$10;
}
$4 = getElementType($0, $1, $2, HEAP32[$10 + 12 >> 2]);
HEAP32[$0 + 328 >> 2] = $4;
if (!$4) {
break label$5;
}
HEAP32[$5 + 156 >> 2] = 0;
HEAP32[$5 + 160 >> 2] = 0;
HEAP8[$5 + 140 | 0] = 1;
break label$9;
}
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
if (HEAP32[$0 + 128 >> 2]) {
$4 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](20) | 0;
if (!$4) {
break label$5;
}
HEAP32[$4 + 4 >> 2] = 0;
HEAP32[$4 + 8 >> 2] = 0;
HEAP32[$4 + 12 >> 2] = 0;
HEAP32[$4 + 16 >> 2] = 0;
HEAP32[$4 >> 2] = ($8 | 0) == 41 ? 2 : 1;
HEAP32[$13 >> 2] = $2;
FUNCTION_TABLE[HEAP32[$0 + 128 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$0 + 328 >> 2] >> 2], $4);
$4 = 0;
} else {
$4 = 1;
}
HEAP8[$5 + 140 | 0] = 0;
break label$11;
}
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
HEAP32[HEAP32[$5 + 144 >> 2] + Math_imul(HEAP32[(HEAP32[$5 + 164 >> 2] + (HEAP32[$5 + 160 >> 2] << 2) | 0) - 4 >> 2], 28) >> 2] = 3;
if (!HEAP32[$0 + 128 >> 2]) {
break label$10;
}
break label$9;
}
$9 = 2;
break label$35;
}
$9 = 3;
}
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
$8 = HEAP32[$10 + 12 >> 2] - HEAP32[$1 + 64 >> 2] | 0;
break label$33;
}
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
$9 = 0;
$8 = HEAP32[$10 + 12 >> 2];
}
$11 = 1;
$4 = nextScaffoldPart($0);
if (($4 | 0) < 0) {
break label$4;
}
$4 = Math_imul($4, 28);
HEAP32[$4 + HEAP32[$5 + 144 >> 2] >> 2] = 4;
HEAP32[(HEAP32[$5 + 144 >> 2] + $4 | 0) + 4 >> 2] = $9;
$8 = getElementType($0, $1, $2, $8);
if (!$8) {
break label$4;
}
$11 = HEAP32[$8 >> 2];
HEAP32[(HEAP32[$5 + 144 >> 2] + $4 | 0) + 8 >> 2] = $11;
$4 = 0;
while (1) {
$8 = $4 + $11 | 0;
$9 = $4 + 1 | 0;
$4 = $9;
if (HEAPU8[$8 | 0]) {
continue;
}
break;
}
HEAP32[$5 + 148 >> 2] = HEAP32[$5 + 148 >> 2] + $9;
if (!HEAP32[$0 + 128 >> 2]) {
break label$10;
}
break label$9;
}
$11 = 1;
break label$29;
}
$11 = 2;
break label$29;
}
$11 = 3;
}
if (!HEAPU8[$5 + 140 | 0]) {
break label$10;
}
$8 = HEAP32[$0 + 128 >> 2];
$4 = HEAP32[$5 + 160 >> 2] - 1 | 0;
HEAP32[$5 + 160 >> 2] = $4;
HEAP32[(HEAP32[$5 + 144 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 164 >> 2] + ($4 << 2) >> 2], 28) | 0) + 4 >> 2] = $11;
$4 = !$8;
if (HEAP32[$5 + 160 >> 2]) {
break label$11;
}
if ($8) {
$8 = build_model($0);
if (!$8) {
break label$5;
}
HEAP32[$13 >> 2] = $2;
FUNCTION_TABLE[HEAP32[$0 + 128 >> 2]](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$0 + 328 >> 2] >> 2], $8);
}
HEAP32[$5 + 148 >> 2] = 0;
HEAP8[$5 + 140 | 0] = 0;
break label$11;
}
if (!reportProcessingInstruction($0, $1, $2, HEAP32[$10 + 12 >> 2])) {
break label$5;
}
break label$9;
}
if (!reportComment($0, $1, $2, HEAP32[$10 + 12 >> 2])) {
break label$5;
}
break label$9;
}
if (($4 | 0) != 14) {
break label$10;
}
break label$9;
}
if (!HEAP32[$0 + 84 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 136 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAP32[$0 + 96 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAPU8[$5 + 128 | 0] | !HEAP32[$0 + 132 >> 2]) {
break label$10;
}
break label$9;
}
if (!HEAP32[$0 + 128 >> 2]) {
break label$10;
}
break label$9;
}
HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 96 >> 2];
}
HEAP32[$0 + 300 >> 2] = 0;
break label$10;
}
$9 = 6;
break label$3;
}
$11 = 2;
break label$4;
}
poolClear($12);
}
if (!$4) {
break label$9;
}
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $1, $2, HEAP32[$10 + 12 >> 2]);
}
$11 = 35;
label$103: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 1:
HEAP32[$6 >> 2] = HEAP32[$10 + 12 >> 2];
$9 = 0;
break label$3;
case 0:
break label$4;
default:
break label$103;
}
}
$2 = HEAP32[$10 + 12 >> 2];
$4 = FUNCTION_TABLE[HEAP32[$1 >> 2]]($1, $2, $3, $10 + 12 | 0) | 0;
continue;
}
break;
}
$11 = 22;
break label$4;
}
$11 = 32;
break label$4;
}
$11 = 1;
}
$9 = $11;
}
__stack_pointer = $10 + 16 | 0;
return $9;
}
function HanimAvatar__HanimAvatar_28ASDdata_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 416 | 0;
__stack_pointer = $2;
StaticArmData__StaticArmData_28_29($0);
HEAP32[19359] = 0;
invoke_ii(287, $0 + 28 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
if (($3 | 0) != 1) {
$13 = $0 + 56 | 0;
HEAP32[$0 + 80 >> 2] = 0;
HEAP32[$0 + 84 >> 2] = 0;
HEAP32[$0 + 56 >> 2] = 0;
HEAP32[$0 + 60 >> 2] = 0;
HEAP32[$0 + 88 >> 2] = 0;
HEAP32[$0 + 92 >> 2] = 0;
HEAP32[$0 + 96 >> 2] = 0;
HEAP32[19359] = 0;
$10 = invoke_iiii(38, $0 + 116 | 0, -1, 171) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$15 = invoke_iiii(38, $0 + 144 | 0, -1, 341) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$16 = invoke_iiii(288, $0 + 172 | 0, 0, 341) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$17 = invoke_iiii(38, $0 + 200 | 0, -1, 171) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(289, $0 + 232 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$14: {
if (($4 | 0) == 1) {
break label$14;
}
FaceData__FaceData_28_29($0 + 380 | 0);
$4 = HEAP32[$1 + 8 >> 2];
$5 = strncmp($4, 11493, 3);
HEAP32[19359] = 0;
HEAP8[69853] = !$5;
$5 = invoke_ii(290, $4 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$14;
}
HEAP32[$13 >> 2] = $5;
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[19359] = 0;
$5 = invoke_ii(290, $4 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 60 >> 2] = $5;
HEAP32[19359] = 0;
$18 = invoke_iifff(266, $2 + 384 | 0, Math_fround(Math_fround(.02539999969303608)), Math_fround(Math_fround(-.02539999969303608)), Math_fround(Math_fround(.01269999984651804))) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$15: {
if (($4 | 0) == 1) {
break label$15;
}
HEAP32[19359] = 0;
invoke_iifff(266, $18 + 12 | 0, Math_fround(Math_fround(.02539999969303608)), Math_fround(Math_fround(.02539999969303608)), Math_fround(Math_fround(.01269999984651804))) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$15;
}
HEAP32[19359] = 0;
$19 = invoke_iiffff(291, $2 + 352 | 0, Math_fround(Math_fround(0)), Math_fround(Math_fround(-.7070000171661377)), Math_fround(Math_fround(0)), Math_fround(Math_fround(.7070000171661377))) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$16: {
if (($4 | 0) == 1) {
break label$16;
}
HEAP32[19359] = 0;
invoke_iiffff(291, $19 + 16 | 0, Math_fround(Math_fround(0)), Math_fround(Math_fround(-.7070000171661377)), Math_fround(Math_fround(0)), Math_fround(Math_fround(.7070000171661377))) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$16;
}
HEAP32[19359] = 0;
invoke_vi(292, $0 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$16;
}
$4 = HEAP32[$1 + 12 >> 2];
HEAP32[19359] = 0;
$11 = invoke_ii(293, $4 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
$8 = ($11 | 0) > 0 ? $11 : 0;
$3 = 0;
label$18: {
label$19: {
while (1) {
if (($3 | 0) == ($8 | 0)) {
$14 = $11;
if (!HEAPU8[69853]) {
break label$8;
}
$3 = 0;
$9 = $11;
label$22: {
label$23: {
while (1) {
if (($3 | 0) == 2) {
$14 = $9 & 65535;
break label$8;
}
HEAP32[19359] = 0;
$7 = HEAP32[($3 << 2) + 60536 >> 2];
$6 = invoke_iii(294, $10 | 0, $7 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
if (HEAP32[$0 + 136 >> 2] == ($6 | 0)) {
HEAP32[19359] = 0;
$6 = invoke_ii(64, 104) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$23;
}
HEAP32[19359] = 0;
$12 = invoke_ii(290, $7 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$22;
}
HEAP32[19359] = 0;
$5 = $9 << 16 >> 16;
$14 = invoke_iiiiiii(295, $6 | 0, $12 | 0, $5 | 0, 0, 0, 0) | 0;
$12 = HEAP32[19359];
HEAP32[19359] = 0;
if (($12 | 0) == 1) {
break label$22;
}
$6 = HEAP32[$0 + 104 >> 2];
HEAP32[19359] = 0;
invoke_viii(296, $6 | 0, $5 | 0, $14 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$23;
}
HEAP32[19359] = 0;
invoke_viii(297, $10 | 0, $7 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$23;
}
$9 = $9 + 1 | 0;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
break label$7;
}
$5 = HEAP32[$1 + 12 >> 2];
HEAP32[19359] = 0;
$6 = invoke_iii(298, $5 | 0, $3 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$28: {
if (($5 | 0) == 1) {
break label$28;
}
HEAP32[19359] = 0;
$5 = invoke_ii(290, $6 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$28;
}
HEAP32[19359] = 0;
$6 = invoke_ii(64, 104) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$19;
}
HEAP32[19359] = 0;
$9 = invoke_iiiiiii(295, $6 | 0, $5 | 0, $3 | 0, 0, 0, 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$18;
}
$6 = HEAP32[$0 + 104 >> 2];
HEAP32[19359] = 0;
invoke_viii(296, $6 | 0, $3 | 0, $9 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$19;
}
HEAP32[19359] = 0;
invoke_viii(297, $10 | 0, $5 | 0, $3 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$19;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$5;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$4;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
StaticArmData___StaticArmData_28_29($0);
break label$2;
}
$3 = 0;
label$29: {
label$30: {
label$31: {
while (1) {
if (($3 | 0) == ($8 | 0)) {
label$34: {
if (!HEAPU8[69853]) {
break label$34;
}
$3 = 0;
$5 = $11;
while (1) {
if (($3 | 0) == 2) {
break label$34;
}
$4 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $5 << 16 >> 16);
if ($4) {
$7 = HEAP32[$0 + 104 >> 2];
HEAP32[19359] = 0;
$9 = invoke_iii(294, $10 | 0, HEAP32[($3 << 2) + 60544 >> 2]) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$29;
}
$8 = DynamicArrayP_Joint___getElement_28int_29_20const($7, $9);
if ($8) {
HEAP32[$4 + 8 >> 2] = $8;
HEAP32[19359] = 0;
invoke_vii(299, $8 | 0, $4 | 0);
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$29;
}
}
HEAP32[19359] = 0;
invoke_viii(300, $4 + 40 | 0, Math_imul($3, 12) + $18 | 0, ($3 << 4) + $19 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$29;
}
$5 = $5 + 1 | 0;
}
$3 = $3 + 1 | 0;
continue;
}
}
HEAP32[19359] = 0;
$5 = invoke_iii(294, $10 | 0, 11178) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$38: {
if (($4 | 0) == 1) {
break label$38;
}
$3 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $5);
HEAP32[$0 + 100 >> 2] = $3;
if (!$3) {
HEAP32[19359] = 0;
HEAP32[$2 >> 2] = $5;
invoke_vii(71, 48343, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$38;
}
HEAP32[19359] = 0;
invoke_vi(301, 1);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$1;
}
break label$38;
}
HEAP32[19359] = 0;
invoke_vi(302, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$38;
}
$4 = HEAP32[$1 + 28 >> 2];
HEAP32[19359] = 0;
$4 = invoke_ii(293, $4 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$40: {
if (($5 | 0) == 1) {
break label$40;
}
$12 = ($4 | 0) > 0 ? $4 : 0;
$4 = 0;
label$41: {
label$42: {
label$43: {
label$44: {
while (1) {
label$46: {
if (($4 | 0) == ($12 | 0)) {
HEAP32[19359] = 0;
invoke_viiiii(303, $0 | 0, 12174, 11557, 12514, 12102);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$46;
}
break label$40;
}
$5 = HEAP32[$1 + 28 >> 2];
HEAP32[19359] = 0;
$8 = invoke_iii(298, $5 | 0, $4 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$48: {
label$49: {
label$50: {
label$51: {
label$52: {
if (($5 | 0) == 1) {
break label$52;
}
HEAP32[19359] = 0;
$5 = invoke_ii(290, $8 | 0) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$52;
}
HEAP32[19359] = 0;
$6 = invoke_ii(64, 56) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$51;
}
HEAP32[19359] = 0;
$3 = invoke_iiii(304, $6 | 0, $5 | 0, $4 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$50;
}
$8 = DynamicArray_short_2c_20_28short_29_1___getElement_28int_29_20const(HEAP32[$1 + 32 >> 2], $4);
$8 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $8);
if ($8) {
break label$49;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
HEAP32[$2 + 64 >> 2] = $5;
invoke_vii(71, 43361, $2 - -64 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
operator_20delete_28void__29(Site___Site_28_29($3));
break label$48;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
break label$7;
}
HEAP32[19359] = 0;
$7 = HEAP32[17502];
invoke_viii(306, $2 + 128 | 0, $7 | 0, $5 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
label$53: {
if (($7 | 0) != 1) {
HEAP16[$3 + 12 >> 1] = HEAPU16[$2 + 128 >> 1];
HEAP8[$3 + 14 | 0] = HEAPU8[$2 + 130 | 0];
$6 = $3 + 12 | 0;
if (!HEAPU8[67591]) {
break label$53;
}
HEAP32[19359] = 0;
HEAP32[$2 + 96 >> 2] = $5;
invoke_vii(71, 17121, $2 + 96 | 0);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
$9 = HEAP32[16886];
invoke_vii(276, $6 | 0, $9 | 0);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$41;
}
if (HEAPU8[$6 | 0] != 44) {
break label$53;
}
HEAP32[19359] = 0;
invoke_vii(71, 35509, 0);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
$9 = HEAP32[16886];
invoke_vii(308, $3 | 0, $9 | 0);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) != 1) {
break label$53;
}
break label$41;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$7 = HEAP32[$3 + 12 >> 2];
HEAP32[$2 + 328 >> 2] = $7;
$9 = HEAP32[17576];
HEAP32[$2 + 320 >> 2] = $9;
HEAP32[$2 + 92 >> 2] = $7;
HEAP32[$2 + 88 >> 2] = $9;
wasm2js_i32$0 = $3, wasm2js_i32$1 = operator___28SiteID_2c_20SiteID_29_1($2 + 92 | 0, $2 + 88 | 0) ? 3 : 1, 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
$9 = HEAP32[$0 + 108 >> 2];
HEAP32[19359] = 0;
invoke_viii(309, $9 | 0, $4 | 0, $3 | 0);
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
invoke_viii(297, $15 | 0, $5 | 0, $4 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
$5 = HEAP32[$6 >> 2];
HEAP32[$2 + 312 >> 2] = $5;
$7 = HEAP32[17576];
HEAP32[$2 + 304 >> 2] = $7;
HEAP32[$2 + 84 >> 2] = $5;
HEAP32[$2 + 80 >> 2] = $7;
if (operator___28SiteID_2c_20SiteID_29($2 + 84 | 0, $2 + 80 | 0)) {
$5 = HEAP32[$3 + 12 >> 2];
HEAP32[19359] = 0;
HEAP32[$2 + 296 >> 2] = $5;
HEAP32[$2 + 76 >> 2] = $5;
invoke_viii(310, $16 | 0, $2 + 76 | 0, $3 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
}
HEAP32[19359] = 0;
invoke_vii(311, $8 | 0, $3 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$41;
}
HEAP32[$3 + 16 >> 2] = $8;
$7 = HEAP32[$1 + 36 >> 2];
HEAP32[19359] = 0;
invoke_viii(312, $2 + 128 | 0, $7 | 0, $4 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$44;
}
HEAP32[19359] = 0;
invoke_vii(313, $3 | 0, $2 + 128 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$44;
}
HEAP32[19359] = 0;
invoke_ii(314, 8327) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$41;
}
HEAP32[$3 + 20 >> 2] = 1028443341;
if (!HEAPU8[67555]) {
break label$48;
}
if (strcmp(HEAP32[$8 >> 2], 12336)) {
break label$48;
}
HEAP32[19359] = 0;
invoke_vii(71, 19042, 0);
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
$8 = HEAP32[16886];
invoke_vii(315, $3 | 0, $8 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
invoke_vi(307, 32);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(276, $6 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$41;
}
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
HEAP32[19359] = 0;
invoke_viiiii(303, $0 | 0, 12185, 11563, 12520, 12108);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$40;
}
$7 = 0;
HEAP32[19359] = 0;
invoke_vi(316, $0 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$40;
}
label$56: while (1) {
if (($7 | 0) == 2) {
$3 = (HEAPU8[69853] ? $14 : $11) << 16 >> 16;
$9 = ($3 | 0) > 0 ? $3 : 0;
$3 = 0;
label$58: {
label$59: {
while (1) {
if (($3 | 0) == ($9 | 0)) {
HEAP32[19359] = 0;
invoke_vi(317, $0 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$42;
}
HEAP32[19359] = 0;
invoke_vi(318, $0 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$42;
}
$7 = 0;
$5 = 0;
label$62: while (1) {
$3 = 0;
if (($5 | 0) == 2) {
while (1) {
label$65: {
if (($7 | 0) == 2) {
HEAP32[19359] = 0;
$3 = invoke_ii(64, 104) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$65;
}
break label$42;
}
$3 = HEAP32[HEAP32[(HEAP32[$0 + 72 >> 2] + ($7 << 2) | 0) + 12 >> 2] + 20 >> 2];
if ($3) {
HEAP32[$3 + 12 >> 2] = 3;
}
$7 = $7 + 1 | 0;
continue;
}
break;
}
HEAP32[19359] = 0;
invoke_ii(319, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 228 >> 2] = $3;
HEAP32[19359] = 0;
invoke_vii(320, $3 | 0, $0 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$42;
}
__stack_pointer = $2 + 416 | 0;
return $0 | 0;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
break label$7;
}
while (1) {
if (($3 | 0) == 5) {
$5 = $5 + 1 | 0;
continue label$62;
}
label$71: {
$4 = HEAP32[HEAP32[((HEAP32[$0 + 72 >> 2] + Math_imul($5, 60) | 0) + Math_imul($3, 12) | 0) + 60 >> 2] + 20 >> 2];
if ($4) {
AvatarNameIndex__MakeJointName_28SideIndex_2c_20DigitIndex_2c_20KnuckleIndex_29_20const(HEAP32[$0 + 68 >> 2], $5, $3, 3);
HEAP32[19359] = 0;
$6 = invoke_iii(271, $0 | 0, 69872) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$71;
}
HEAP32[$4 + 12 >> 2] = 2;
HEAP32[$4 + 20 >> 2] = $6;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
label$73: {
$4 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $3);
if ($4) {
HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
snprintf($2 + 128 | 0, 100, 4295, $2 + 16 | 0);
HEAP32[19359] = 0;
$5 = invoke_ii(290, $2 + 128 | 0) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$73;
}
HEAP32[19359] = 0;
$6 = invoke_ii(64, 48) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$59;
}
HEAP32[19359] = 0;
$1 = invoke_iiii(321, $6 | 0, $5 | 0, $3 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$58;
}
$6 = HEAP32[$0 + 112 >> 2];
HEAP32[19359] = 0;
invoke_viii(322, $6 | 0, $3 | 0, $1 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$59;
}
HEAP32[19359] = 0;
invoke_viii(297, $17 | 0, $5 | 0, $3 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$59;
}
HEAP32[$1 + 8 >> 2] = $4;
HEAP32[$4 + 20 >> 2] = $1;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
break label$7;
}
HEAP32[19359] = 0;
$6 = HEAP32[($7 << 2) + 48916 >> 2];
invoke_viiiiiii(323, $2 + 288 | 0, 6, $6 | 0, 0, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 288 >> 2];
invoke_vii(324, $0 | 0, $2 + 60 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 280 | 0, 1, $6 | 0, 1, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 272 | 0, 1, $6 | 0, 0, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 280 >> 2];
HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 272 >> 2];
invoke_iiii(325, $0 | 0, $2 + 56 | 0, $2 + 52 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 264 | 0, 1, $6 | 0, 2, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 256 | 0, 3, $6 | 0, 0, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
$3 = 0;
HEAP32[19359] = 0;
HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 264 >> 2];
HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 256 >> 2];
invoke_iiii(325, $0 | 0, $2 + 48 | 0, $2 + 44 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$43;
}
label$75: {
while (1) {
if (($3 | 0) == 3) {
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 240 | 0, 6, $6 | 0, 0, 0, 1, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
break label$75;
}
break label$43;
}
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 248 | 0, HEAP32[($3 << 2) + 48960 >> 2], $6 | 0, 0, 0, 1, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$78: {
if (($1 | 0) == 1) {
break label$78;
}
HEAP32[19359] = 0;
HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 248 >> 2];
invoke_vii(324, $0 | 0, $2 + 40 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$78;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$8 = 0;
HEAP32[19359] = 0;
HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 240 >> 2];
invoke_vii(324, $0 | 0, $2 + 36 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$43;
}
label$79: while (1) {
$3 = 0;
if (($8 | 0) == 5) {
$7 = $7 + 1 | 0;
continue label$56;
}
while (1) {
if (($3 | 0) == 3) {
$8 = $8 + 1 | 0;
continue label$79;
}
$1 = MakeDigit_28DigitIndex_29($8);
HEAP32[19359] = 0;
invoke_viiiiiii(323, $2 + 232 | 0, HEAP32[($3 << 2) + 49044 >> 2], $6 | 0, 0, $1 | 0, 1, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$83: {
if (($1 | 0) == 1) {
break label$83;
}
HEAP32[19359] = 0;
HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 232 >> 2];
invoke_vii(324, $0 | 0, $2 + 32 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$83;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
break;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$4 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $3);
$5 = DynamicArray_short_2c_20_28short_29_1___getElement_28int_29_20const(HEAP32[$1 + 16 >> 2], $3);
label$84: {
if (($5 | 0) == -1) {
break label$84;
}
$5 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $5);
if (!$5) {
HEAP32[19359] = 0;
invoke_i(305) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$30;
}
$6 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
HEAP32[$2 + 112 >> 2] = $6;
HEAP32[$2 + 116 >> 2] = $3;
invoke_vii(71, 34277, $2 + 112 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
break label$84;
}
break label$30;
}
HEAP32[$4 + 8 >> 2] = $5;
HEAP32[19359] = 0;
invoke_vii(299, $5 | 0, $4 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$30;
}
}
$6 = HEAP32[$1 + 20 >> 2];
HEAP32[19359] = 0;
invoke_viii(312, $2 + 336 | 0, $6 | 0, $3 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
$6 = HEAP32[$1 + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii(326, $2 + 128 | 0, $6 | 0, $3 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$31;
}
HEAP32[19359] = 0;
invoke_viii(300, $4 + 40 | 0, $2 + 336 | 0, $2 + 128 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$31;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
HashAny_char_20const__2c_20int____HashAny_28_29($17);
}
HashAny_SiteID_20const_2c_20Site_____HashAny_28_29($16);
}
HashAny_char_20const__2c_20int____HashAny_28_29($15);
}
HashAny_char_20const__2c_20int____HashAny_28_29($10);
}
while (1) {
$13 = StaticArmData___StaticArmData_28_29($13 - 28 | 0);
if (($13 | 0) != ($0 | 0)) {
continue;
}
break;
}
}
__resumeException($2 | 0);
}
abort();
}
function dlmalloc($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$11 = __stack_pointer - 16 | 0;
__stack_pointer = $11;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
if ($0 >>> 0 <= 244) {
$6 = HEAP32[19235];
$5 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
$1 = $5 >>> 3 | 0;
$0 = $6 >>> $1 | 0;
if ($0 & 3) {
$2 = (($0 ^ -1) & 1) + $1 | 0;
$1 = $2 << 3;
$0 = $1 + 76980 | 0;
$1 = HEAP32[$1 + 76988 >> 2];
$5 = HEAP32[$1 + 8 >> 2];
label$14: {
if (($0 | 0) == ($5 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$14;
}
HEAP32[$5 + 12 >> 2] = $0;
HEAP32[$0 + 8 >> 2] = $5;
}
$0 = $1 + 8 | 0;
$2 = $2 << 3;
HEAP32[$1 + 4 >> 2] = $2 | 3;
$1 = $1 + $2 | 0;
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
break label$1;
}
$8 = HEAP32[19237];
if ($8 >>> 0 >= $5 >>> 0) {
break label$11;
}
if ($0) {
$2 = $0 << $1;
$0 = 2 << $1;
$0 = $2 & ($0 | 0 - $0);
$0 = ($0 & 0 - $0) - 1 | 0;
$2 = $0;
$0 = $0 >>> 12 & 16;
$1 = $2 >>> $0 | 0;
$2 = $1 >>> 5 & 8;
$3 = $0 | $2;
$0 = $1 >>> $2 | 0;
$1 = $0 >>> 2 & 4;
$2 = $3 | $1;
$0 = $0 >>> $1 | 0;
$1 = $0 >>> 1 & 2;
$2 = $2 | $1;
$0 = $0 >>> $1 | 0;
$1 = $0 >>> 1 & 1;
$1 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
$0 = $1 << 3;
$2 = $0 + 76980 | 0;
$0 = HEAP32[$0 + 76988 >> 2];
$3 = HEAP32[$0 + 8 >> 2];
label$17: {
if (($2 | 0) == ($3 | 0)) {
$6 = __wasm_rotl_i32(-2, $1) & $6;
HEAP32[19235] = $6;
break label$17;
}
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$2 + 8 >> 2] = $3;
}
HEAP32[$0 + 4 >> 2] = $5 | 3;
$3 = $0 + $5 | 0;
$1 = $1 << 3;
$2 = $1 - $5 | 0;
HEAP32[$3 + 4 >> 2] = $2 | 1;
HEAP32[$0 + $1 >> 2] = $2;
if ($8) {
$4 = $8 >>> 3 | 0;
$5 = ($4 << 3) + 76980 | 0;
$1 = HEAP32[19240];
$4 = 1 << $4;
label$20: {
if (!($6 & $4)) {
HEAP32[19235] = $4 | $6;
$4 = $5;
break label$20;
}
$4 = HEAP32[$5 + 8 >> 2];
}
HEAP32[$5 + 8 >> 2] = $1;
HEAP32[$4 + 12 >> 2] = $1;
HEAP32[$1 + 12 >> 2] = $5;
HEAP32[$1 + 8 >> 2] = $4;
}
$0 = $0 + 8 | 0;
HEAP32[19240] = $3;
HEAP32[19237] = $2;
break label$1;
}
$9 = HEAP32[19236];
if (!$9) {
break label$11;
}
$0 = (0 - $9 & $9) - 1 | 0;
$2 = $0;
$0 = $0 >>> 12 & 16;
$1 = $2 >>> $0 | 0;
$2 = $1 >>> 5 & 8;
$3 = $0 | $2;
$0 = $1 >>> $2 | 0;
$1 = $0 >>> 2 & 4;
$2 = $3 | $1;
$0 = $0 >>> $1 | 0;
$1 = $0 >>> 1 & 2;
$2 = $2 | $1;
$0 = $0 >>> $1 | 0;
$1 = $0 >>> 1 & 1;
$3 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 77244 >> 2];
$1 = (HEAP32[$3 + 4 >> 2] & -8) - $5 | 0;
$2 = $3;
while (1) {
label$23: {
$0 = HEAP32[$2 + 16 >> 2];
if (!$0) {
$0 = HEAP32[$2 + 20 >> 2];
if (!$0) {
break label$23;
}
}
$2 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
$4 = $2;
$2 = $1 >>> 0 > $2 >>> 0;
$1 = $2 ? $4 : $1;
$3 = $2 ? $0 : $3;
$2 = $0;
continue;
}
break;
}
$10 = HEAP32[$3 + 24 >> 2];
$4 = HEAP32[$3 + 12 >> 2];
if (($4 | 0) != ($3 | 0)) {
$0 = HEAP32[$3 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $4;
HEAP32[$4 + 8 >> 2] = $0;
break label$2;
}
$2 = $3 + 20 | 0;
$0 = HEAP32[$2 >> 2];
if (!$0) {
$0 = HEAP32[$3 + 16 >> 2];
if (!$0) {
break label$10;
}
$2 = $3 + 16 | 0;
}
while (1) {
$7 = $2;
$4 = $0;
$2 = $0 + 20 | 0;
$0 = HEAP32[$2 >> 2];
if ($0) {
continue;
}
$2 = $4 + 16 | 0;
$0 = HEAP32[$4 + 16 >> 2];
if ($0) {
continue;
}
break;
}
HEAP32[$7 >> 2] = 0;
break label$2;
}
$5 = -1;
if ($0 >>> 0 > 4294967231) {
break label$11;
}
$0 = $0 + 11 | 0;
$5 = $0 & -8;
$8 = HEAP32[19236];
if (!$8) {
break label$11;
}
$7 = 0;
label$28: {
if ($5 >>> 0 < 256) {
break label$28;
}
$7 = 31;
if ($5 >>> 0 > 16777215) {
break label$28;
}
$0 = $0 >>> 8 | 0;
$2 = $0;
$0 = $0 + 1048320 >>> 16 & 8;
$1 = $2 << $0;
$2 = $1;
$1 = $1 + 520192 >>> 16 & 4;
$2 = $2 << $1;
$3 = $2;
$2 = $2 + 245760 >>> 16 & 2;
$0 = ($3 << $2 >>> 15 | 0) - ($0 | $1 | $2) | 0;
$7 = ($0 << 1 | $5 >>> $0 + 21 & 1) + 28 | 0;
}
$1 = 0 - $5 | 0;
$2 = HEAP32[($7 << 2) + 77244 >> 2];
label$29: {
label$30: {
label$31: {
if (!$2) {
$0 = 0;
break label$31;
}
$0 = 0;
$3 = $5 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
while (1) {
label$34: {
$6 = (HEAP32[$2 + 4 >> 2] & -8) - $5 | 0;
if ($6 >>> 0 >= $1 >>> 0) {
break label$34;
}
$4 = $2;
$1 = $6;
if ($1) {
break label$34;
}
$1 = 0;
$0 = $2;
break label$30;
}
$6 = HEAP32[$2 + 20 >> 2];
$2 = HEAP32[(($3 >>> 29 & 4) + $2 | 0) + 16 >> 2];
$0 = $6 ? ($6 | 0) == ($2 | 0) ? $0 : $6 : $0;
$3 = $3 << 1;
if ($2) {
continue;
}
break;
}
}
if (!($0 | $4)) {
$4 = 0;
$0 = 2 << $7;
$0 = ($0 | 0 - $0) & $8;
if (!$0) {
break label$11;
}
$0 = (0 - $0 & $0) - 1 | 0;
$2 = $0;
$0 = $0 >>> 12 & 16;
$2 = $2 >>> $0 | 0;
$3 = $2 >>> 5 & 8;
$6 = $0 | $3;
$0 = $2 >>> $3 | 0;
$2 = $0 >>> 2 & 4;
$3 = $6 | $2;
$0 = $0 >>> $2 | 0;
$2 = $0 >>> 1 & 2;
$3 = $3 | $2;
$0 = $0 >>> $2 | 0;
$2 = $0 >>> 1 & 1;
$0 = HEAP32[(($3 | $2) + ($0 >>> $2 | 0) << 2) + 77244 >> 2];
}
if (!$0) {
break label$29;
}
}
while (1) {
$6 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
$3 = $6 >>> 0 < $1 >>> 0;
$1 = $3 ? $6 : $1;
$4 = $3 ? $0 : $4;
$2 = HEAP32[$0 + 16 >> 2];
if (!$2) {
$2 = HEAP32[$0 + 20 >> 2];
}
$0 = $2;
if ($0) {
continue;
}
break;
}
}
if (!$4 | HEAP32[19237] - $5 >>> 0 <= $1 >>> 0) {
break label$11;
}
$7 = HEAP32[$4 + 24 >> 2];
$3 = HEAP32[$4 + 12 >> 2];
if (($4 | 0) != ($3 | 0)) {
$0 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $0;
break label$3;
}
$2 = $4 + 20 | 0;
$0 = HEAP32[$2 >> 2];
if (!$0) {
$0 = HEAP32[$4 + 16 >> 2];
if (!$0) {
break label$9;
}
$2 = $4 + 16 | 0;
}
while (1) {
$6 = $2;
$3 = $0;
$2 = $0 + 20 | 0;
$0 = HEAP32[$2 >> 2];
if ($0) {
continue;
}
$2 = $3 + 16 | 0;
$0 = HEAP32[$3 + 16 >> 2];
if ($0) {
continue;
}
break;
}
HEAP32[$6 >> 2] = 0;
break label$3;
}
$0 = HEAP32[19237];
if ($5 >>> 0 <= $0 >>> 0) {
$1 = HEAP32[19240];
$2 = $0 - $5 | 0;
label$42: {
if ($2 >>> 0 >= 16) {
HEAP32[19237] = $2;
$3 = $1 + $5 | 0;
HEAP32[19240] = $3;
HEAP32[$3 + 4 >> 2] = $2 | 1;
HEAP32[$0 + $1 >> 2] = $2;
HEAP32[$1 + 4 >> 2] = $5 | 3;
break label$42;
}
HEAP32[19240] = 0;
HEAP32[19237] = 0;
HEAP32[$1 + 4 >> 2] = $0 | 3;
$0 = $0 + $1 | 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
}
$0 = $1 + 8 | 0;
break label$1;
}
$3 = HEAP32[19238];
if ($5 >>> 0 < $3 >>> 0) {
$1 = $3 - $5 | 0;
HEAP32[19238] = $1;
$0 = HEAP32[19241];
$2 = $5 + $0 | 0;
HEAP32[19241] = $2;
HEAP32[$2 + 4 >> 2] = $1 | 1;
HEAP32[$0 + 4 >> 2] = $5 | 3;
$0 = $0 + 8 | 0;
break label$1;
}
$0 = 0;
$8 = $5 + 47 | 0;
if (HEAP32[19353]) {
$1 = HEAP32[19355];
} else {
HEAP32[19356] = -1;
HEAP32[19357] = -1;
HEAP32[19354] = 4096;
HEAP32[19355] = 4096;
HEAP32[19353] = $11 + 12 & -16 ^ 1431655768;
HEAP32[19358] = 0;
HEAP32[19346] = 0;
$1 = 4096;
}
$6 = $8 + $1 | 0;
$7 = 0 - $1 | 0;
$4 = $6 & $7;
if ($4 >>> 0 <= $5 >>> 0) {
break label$1;
}
$1 = HEAP32[19345];
if ($1) {
$2 = HEAP32[19343];
$9 = $4 + $2 | 0;
if ($1 >>> 0 < $9 >>> 0 | $2 >>> 0 >= $9 >>> 0) {
break label$1;
}
}
if (HEAPU8[77384] & 4) {
break label$6;
}
label$48: {
label$49: {
$1 = HEAP32[19241];
if ($1) {
$0 = 77388;
while (1) {
$2 = HEAP32[$0 >> 2];
if ($2 >>> 0 <= $1 >>> 0 & HEAP32[$0 + 4 >> 2] + $2 >>> 0 > $1 >>> 0) {
break label$49;
}
$0 = HEAP32[$0 + 8 >> 2];
if ($0) {
continue;
}
break;
}
}
$3 = sbrk(0);
if (($3 | 0) == -1) {
break label$7;
}
$6 = $4;
$0 = HEAP32[19354];
$1 = $0 - 1 | 0;
if ($3 & $1) {
$6 = ($4 - $3 | 0) + ($1 + $3 & 0 - $0) | 0;
}
if ($6 >>> 0 > 2147483646 | $5 >>> 0 >= $6 >>> 0) {
break label$7;
}
$0 = HEAP32[19345];
if ($0) {
$1 = HEAP32[19343];
$2 = $6 + $1 | 0;
if ($0 >>> 0 < $2 >>> 0 | $1 >>> 0 >= $2 >>> 0) {
break label$7;
}
}
$0 = sbrk($6);
if (($3 | 0) != ($0 | 0)) {
break label$48;
}
break label$5;
}
$6 = $6 - $3 & $7;
if ($6 >>> 0 > 2147483646) {
break label$7;
}
$3 = sbrk($6);
if (($3 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
break label$8;
}
$0 = $3;
}
if (!(($0 | 0) == -1 | $5 + 48 >>> 0 <= $6 >>> 0)) {
$1 = HEAP32[19355];
$1 = $1 + ($8 - $6 | 0) & 0 - $1;
if ($1 >>> 0 > 2147483646) {
$3 = $0;
break label$5;
}
if ((sbrk($1) | 0) != -1) {
$6 = $1 + $6 | 0;
$3 = $0;
break label$5;
}
sbrk(0 - $6 | 0);
break label$7;
}
$3 = $0;
if (($0 | 0) != -1) {
break label$5;
}
break label$7;
}
$4 = 0;
break label$2;
}
$3 = 0;
break label$3;
}
if (($3 | 0) != -1) {
break label$5;
}
}
HEAP32[19346] = HEAP32[19346] | 4;
}
if ($4 >>> 0 > 2147483646) {
break label$4;
}
$3 = sbrk($4);
$0 = sbrk(0);
if (($3 | 0) == -1 | ($0 | 0) == -1 | $0 >>> 0 <= $3 >>> 0) {
break label$4;
}
$6 = $0 - $3 | 0;
if ($6 >>> 0 <= $5 + 40 >>> 0) {
break label$4;
}
}
$0 = HEAP32[19343] + $6 | 0;
HEAP32[19343] = $0;
if (HEAPU32[19344] < $0 >>> 0) {
HEAP32[19344] = $0;
}
label$59: {
label$60: {
label$61: {
$1 = HEAP32[19241];
if ($1) {
$0 = 77388;
while (1) {
$2 = HEAP32[$0 >> 2];
$4 = HEAP32[$0 + 4 >> 2];
if (($2 + $4 | 0) == ($3 | 0)) {
break label$61;
}
$0 = HEAP32[$0 + 8 >> 2];
if ($0) {
continue;
}
break;
}
break label$60;
}
$0 = HEAP32[19239];
if (!($0 >>> 0 <= $3 >>> 0 ? $0 : 0)) {
HEAP32[19239] = $3;
}
$0 = 0;
HEAP32[19348] = $6;
HEAP32[19347] = $3;
HEAP32[19243] = -1;
HEAP32[19244] = HEAP32[19353];
HEAP32[19350] = 0;
while (1) {
$1 = $0 << 3;
$2 = $1 + 76980 | 0;
HEAP32[$1 + 76988 >> 2] = $2;
HEAP32[$1 + 76992 >> 2] = $2;
$0 = $0 + 1 | 0;
if (($0 | 0) != 32) {
continue;
}
break;
}
$0 = $6 - 40 | 0;
$1 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
$2 = $0 - $1 | 0;
HEAP32[19238] = $2;
$1 = $1 + $3 | 0;
HEAP32[19241] = $1;
HEAP32[$1 + 4 >> 2] = $2 | 1;
HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
HEAP32[19242] = HEAP32[19357];
break label$59;
}
if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 < $2 >>> 0 | $1 >>> 0 >= $3 >>> 0) {
break label$60;
}
HEAP32[$0 + 4 >> 2] = $4 + $6;
$0 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
$2 = $1 + $0 | 0;
HEAP32[19241] = $2;
$3 = HEAP32[19238] + $6 | 0;
$0 = $3 - $0 | 0;
HEAP32[19238] = $0;
HEAP32[$2 + 4 >> 2] = $0 | 1;
HEAP32[($1 + $3 | 0) + 4 >> 2] = 40;
HEAP32[19242] = HEAP32[19357];
break label$59;
}
$4 = HEAP32[19239];
if ($4 >>> 0 > $3 >>> 0) {
HEAP32[19239] = $3;
}
$2 = $3 + $6 | 0;
$0 = 77388;
label$67: {
label$68: {
label$69: {
label$70: {
label$71: {
label$72: {
while (1) {
if (HEAP32[$0 >> 2] != ($2 | 0)) {
$0 = HEAP32[$0 + 8 >> 2];
if ($0) {
continue;
}
break label$72;
}
break;
}
if (!(HEAPU8[$0 + 12 | 0] & 8)) {
break label$71;
}
}
$0 = 77388;
while (1) {
$2 = HEAP32[$0 >> 2];
if ($2 >>> 0 <= $1 >>> 0) {
$2 = HEAP32[$0 + 4 >> 2] + $2 | 0;
if ($2 >>> 0 > $1 >>> 0) {
break label$70;
}
}
$0 = HEAP32[$0 + 8 >> 2];
continue;
}
}
HEAP32[$0 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
$7 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
HEAP32[$7 + 4 >> 2] = $5 | 3;
$6 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
$5 = $5 + $7 | 0;
$2 = $6 - $5 | 0;
if (($1 | 0) == ($6 | 0)) {
HEAP32[19241] = $5;
$0 = HEAP32[19238] + $2 | 0;
HEAP32[19238] = $0;
HEAP32[$5 + 4 >> 2] = $0 | 1;
break label$68;
}
if (HEAP32[19240] == ($6 | 0)) {
HEAP32[19240] = $5;
$0 = HEAP32[19237] + $2 | 0;
HEAP32[19237] = $0;
HEAP32[$5 + 4 >> 2] = $0 | 1;
HEAP32[$0 + $5 >> 2] = $0;
break label$68;
}
$0 = HEAP32[$6 + 4 >> 2];
if (($0 & 3) == 1) {
$8 = $0 & -8;
label$80: {
if ($0 >>> 0 <= 255) {
$1 = HEAP32[$6 + 8 >> 2];
$4 = $0 >>> 3 | 0;
$3 = ($4 << 3) + 76980 | 0;
$0 = HEAP32[$6 + 12 >> 2];
if (($1 | 0) == ($0 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$80;
}
HEAP32[$1 + 12 >> 2] = $0;
HEAP32[$0 + 8 >> 2] = $1;
break label$80;
}
$9 = HEAP32[$6 + 24 >> 2];
$3 = HEAP32[$6 + 12 >> 2];
label$83: {
if (($6 | 0) != ($3 | 0)) {
$0 = HEAP32[$6 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $0;
break label$83;
}
label$85: {
$0 = $6 + 20 | 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
break label$85;
}
$0 = $6 + 16 | 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
break label$85;
}
$3 = 0;
break label$83;
}
while (1) {
$4 = $0;
$3 = $1;
$0 = $1 + 20 | 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
continue;
}
$0 = $3 + 16 | 0;
$1 = HEAP32[$3 + 16 >> 2];
if ($1) {
continue;
}
break;
}
HEAP32[$4 >> 2] = 0;
}
if (!$9) {
break label$80;
}
$1 = HEAP32[$6 + 28 >> 2];
$0 = ($1 << 2) + 77244 | 0;
label$87: {
if (HEAP32[$0 >> 2] == ($6 | 0)) {
HEAP32[$0 >> 2] = $3;
if ($3) {
break label$87;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$80;
}
HEAP32[(HEAP32[$9 + 16 >> 2] == ($6 | 0) ? 16 : 20) + $9 >> 2] = $3;
if (!$3) {
break label$80;
}
}
HEAP32[$3 + 24 >> 2] = $9;
$0 = HEAP32[$6 + 16 >> 2];
if ($0) {
HEAP32[$3 + 16 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $3;
}
$0 = HEAP32[$6 + 20 >> 2];
if (!$0) {
break label$80;
}
HEAP32[$3 + 20 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $3;
}
$2 = $2 + $8 | 0;
$6 = $6 + $8 | 0;
$0 = HEAP32[$6 + 4 >> 2];
}
HEAP32[$6 + 4 >> 2] = $0 & -2;
HEAP32[$5 + 4 >> 2] = $2 | 1;
HEAP32[$2 + $5 >> 2] = $2;
if ($2 >>> 0 <= 255) {
$1 = $2 >>> 3 | 0;
$0 = ($1 << 3) + 76980 | 0;
$1 = 1 << $1;
$2 = HEAP32[19235];
label$91: {
if (!($1 & $2)) {
HEAP32[19235] = $1 | $2;
$1 = $0;
break label$91;
}
$1 = HEAP32[$0 + 8 >> 2];
}
HEAP32[$0 + 8 >> 2] = $5;
HEAP32[$1 + 12 >> 2] = $5;
HEAP32[$5 + 12 >> 2] = $0;
HEAP32[$5 + 8 >> 2] = $1;
break label$68;
}
$0 = 31;
if ($2 >>> 0 <= 16777215) {
$0 = $2 >>> 8 | 0;
$3 = $0;
$0 = $0 + 1048320 >>> 16 & 8;
$1 = $3 << $0;
$3 = $1;
$1 = $1 + 520192 >>> 16 & 4;
$3 = $3 << $1;
$4 = $3;
$3 = $3 + 245760 >>> 16 & 2;
$0 = ($4 << $3 >>> 15 | 0) - ($0 | $1 | $3) | 0;
$0 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
}
HEAP32[$5 + 28 >> 2] = $0;
HEAP32[$5 + 16 >> 2] = 0;
HEAP32[$5 + 20 >> 2] = 0;
$1 = ($0 << 2) + 77244 | 0;
$3 = HEAP32[19236];
$4 = 1 << $0;
label$94: {
if (!($3 & $4)) {
HEAP32[19236] = $3 | $4;
HEAP32[$1 >> 2] = $5;
break label$94;
}
$0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
$3 = HEAP32[$1 >> 2];
while (1) {
$1 = $3;
if ((HEAP32[$1 + 4 >> 2] & -8) == ($2 | 0)) {
break label$69;
}
$3 = $0 >>> 29 | 0;
$0 = $0 << 1;
$6 = ($3 & 4) + $1 | 0;
$4 = $6 + 16 | 0;
$3 = HEAP32[$4 >> 2];
if ($3) {
continue;
}
break;
}
HEAP32[$6 + 16 >> 2] = $5;
}
HEAP32[$5 + 24 >> 2] = $1;
HEAP32[$5 + 12 >> 2] = $5;
HEAP32[$5 + 8 >> 2] = $5;
break label$68;
}
$0 = $6 - 40 | 0;
$4 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
$7 = $0 - $4 | 0;
HEAP32[19238] = $7;
$4 = $3 + $4 | 0;
HEAP32[19241] = $4;
HEAP32[$4 + 4 >> 2] = $7 | 1;
HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
HEAP32[19242] = HEAP32[19357];
$0 = (($2 - 39 & 7 ? 39 - $2 & 7 : 0) + $2 | 0) - 47 | 0;
$4 = $1 + 16 >>> 0 > $0 >>> 0 ? $1 : $0;
HEAP32[$4 + 4 >> 2] = 27;
$0 = HEAP32[19350];
$7 = HEAP32[19349];
HEAP32[$4 + 16 >> 2] = $7;
HEAP32[$4 + 20 >> 2] = $0;
$7 = HEAP32[19348];
$0 = HEAP32[19347];
HEAP32[$4 + 8 >> 2] = $0;
HEAP32[$4 + 12 >> 2] = $7;
HEAP32[19349] = $4 + 8;
HEAP32[19348] = $6;
HEAP32[19347] = $3;
HEAP32[19350] = 0;
$0 = $4 + 24 | 0;
while (1) {
HEAP32[$0 + 4 >> 2] = 7;
$3 = $0 + 8 | 0;
$0 = $0 + 4 | 0;
if ($3 >>> 0 < $2 >>> 0) {
continue;
}
break;
}
if (($1 | 0) == ($4 | 0)) {
break label$59;
}
HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] & -2;
$6 = $4 - $1 | 0;
HEAP32[$1 + 4 >> 2] = $6 | 1;
HEAP32[$4 >> 2] = $6;
if ($6 >>> 0 <= 255) {
$2 = $6 >>> 3 | 0;
$0 = ($2 << 3) + 76980 | 0;
$3 = HEAP32[19235];
$2 = 1 << $2;
label$99: {
if (!($3 & $2)) {
HEAP32[19235] = $3 | $2;
$2 = $0;
break label$99;
}
$2 = HEAP32[$0 + 8 >> 2];
}
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$2 + 12 >> 2] = $1;
HEAP32[$1 + 12 >> 2] = $0;
HEAP32[$1 + 8 >> 2] = $2;
break label$59;
}
$0 = 31;
if ($6 >>> 0 <= 16777215) {
$0 = $6 >>> 8 | 0;
$2 = $0;
$0 = $0 + 1048320 >>> 16 & 8;
$2 = $2 << $0;
$3 = $2;
$2 = $2 + 520192 >>> 16 & 4;
$3 = $3 << $2;
$4 = $3;
$3 = $3 + 245760 >>> 16 & 2;
$0 = ($4 << $3 >>> 15 | 0) - ($0 | $2 | $3) | 0;
$0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
}
HEAP32[$1 + 28 >> 2] = $0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 0;
$2 = ($0 << 2) + 77244 | 0;
$3 = HEAP32[19236];
$4 = 1 << $0;
label$102: {
if (!($3 & $4)) {
HEAP32[19236] = $3 | $4;
HEAP32[$2 >> 2] = $1;
break label$102;
}
$0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
$3 = HEAP32[$2 >> 2];
while (1) {
$2 = $3;
if ((HEAP32[$3 + 4 >> 2] & -8) == ($6 | 0)) {
break label$67;
}
$3 = $0 >>> 29 | 0;
$0 = $0 << 1;
$7 = ($3 & 4) + $2 | 0;
$4 = $7 + 16 | 0;
$3 = HEAP32[$4 >> 2];
if ($3) {
continue;
}
break;
}
HEAP32[$7 + 16 >> 2] = $1;
}
HEAP32[$1 + 24 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $1;
HEAP32[$1 + 8 >> 2] = $1;
break label$59;
}
$0 = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $5;
HEAP32[$1 + 8 >> 2] = $5;
HEAP32[$5 + 24 >> 2] = 0;
HEAP32[$5 + 12 >> 2] = $1;
HEAP32[$5 + 8 >> 2] = $0;
}
$0 = $7 + 8 | 0;
break label$1;
}
$0 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $1;
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$1 + 24 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = $2;
HEAP32[$1 + 8 >> 2] = $0;
}
$0 = HEAP32[19238];
if ($5 >>> 0 >= $0 >>> 0) {
break label$4;
}
$1 = $0 - $5 | 0;
HEAP32[19238] = $1;
$0 = HEAP32[19241];
$2 = $5 + $0 | 0;
HEAP32[19241] = $2;
HEAP32[$2 + 4 >> 2] = $1 | 1;
HEAP32[$0 + 4 >> 2] = $5 | 3;
$0 = $0 + 8 | 0;
break label$1;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$0 = 0;
break label$1;
}
label$105: {
if (!$7) {
break label$105;
}
$2 = HEAP32[$4 + 28 >> 2];
$0 = ($2 << 2) + 77244 | 0;
label$106: {
if (HEAP32[$0 >> 2] == ($4 | 0)) {
HEAP32[$0 >> 2] = $3;
if ($3) {
break label$106;
}
$8 = __wasm_rotl_i32(-2, $2) & $8;
HEAP32[19236] = $8;
break label$105;
}
HEAP32[(HEAP32[$7 + 16 >> 2] == ($4 | 0) ? 16 : 20) + $7 >> 2] = $3;
if (!$3) {
break label$105;
}
}
HEAP32[$3 + 24 >> 2] = $7;
$0 = HEAP32[$4 + 16 >> 2];
if ($0) {
HEAP32[$3 + 16 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $3;
}
$0 = HEAP32[$4 + 20 >> 2];
if (!$0) {
break label$105;
}
HEAP32[$3 + 20 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $3;
}
label$109: {
if ($1 >>> 0 <= 15) {
$0 = $1 + $5 | 0;
HEAP32[$4 + 4 >> 2] = $0 | 3;
$0 = $0 + $4 | 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
break label$109;
}
HEAP32[$4 + 4 >> 2] = $5 | 3;
$3 = $5 + $4 | 0;
HEAP32[$3 + 4 >> 2] = $1 | 1;
HEAP32[$1 + $3 >> 2] = $1;
if ($1 >>> 0 <= 255) {
$1 = $1 >>> 3 | 0;
$0 = ($1 << 3) + 76980 | 0;
$1 = 1 << $1;
$2 = HEAP32[19235];
label$112: {
if (!($1 & $2)) {
HEAP32[19235] = $1 | $2;
$1 = $0;
break label$112;
}
$1 = HEAP32[$0 + 8 >> 2];
}
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$1 + 12 >> 2] = $3;
HEAP32[$3 + 12 >> 2] = $0;
HEAP32[$3 + 8 >> 2] = $1;
break label$109;
}
$0 = 31;
if ($1 >>> 0 <= 16777215) {
$0 = $1 >>> 8 | 0;
$2 = $0;
$0 = $0 + 1048320 >>> 16 & 8;
$2 = $2 << $0;
$5 = $2;
$2 = $2 + 520192 >>> 16 & 4;
$5 = $5 << $2;
$6 = $5;
$5 = $5 + 245760 >>> 16 & 2;
$0 = ($6 << $5 >>> 15 | 0) - ($0 | $2 | $5) | 0;
$0 = ($0 << 1 | $1 >>> $0 + 21 & 1) + 28 | 0;
}
HEAP32[$3 + 28 >> 2] = $0;
HEAP32[$3 + 16 >> 2] = 0;
HEAP32[$3 + 20 >> 2] = 0;
$2 = ($0 << 2) + 77244 | 0;
label$115: {
$5 = 1 << $0;
label$116: {
if (!($8 & $5)) {
HEAP32[19236] = $5 | $8;
HEAP32[$2 >> 2] = $3;
break label$116;
}
$0 = $1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
$5 = HEAP32[$2 >> 2];
while (1) {
$2 = $5;
if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
break label$115;
}
$5 = $0 >>> 29 | 0;
$0 = $0 << 1;
$7 = ($5 & 4) + $2 | 0;
$6 = $7 + 16 | 0;
$5 = HEAP32[$6 >> 2];
if ($5) {
continue;
}
break;
}
HEAP32[$7 + 16 >> 2] = $3;
}
HEAP32[$3 + 24 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $3;
break label$109;
}
$0 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = $3;
HEAP32[$3 + 24 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $0;
}
$0 = $4 + 8 | 0;
break label$1;
}
label$119: {
if (!$10) {
break label$119;
}
$2 = HEAP32[$3 + 28 >> 2];
$0 = ($2 << 2) + 77244 | 0;
label$120: {
if (HEAP32[$0 >> 2] == ($3 | 0)) {
HEAP32[$0 >> 2] = $4;
if ($4) {
break label$120;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $9, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$119;
}
HEAP32[(HEAP32[$10 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $10 >> 2] = $4;
if (!$4) {
break label$119;
}
}
HEAP32[$4 + 24 >> 2] = $10;
$0 = HEAP32[$3 + 16 >> 2];
if ($0) {
HEAP32[$4 + 16 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $4;
}
$0 = HEAP32[$3 + 20 >> 2];
if (!$0) {
break label$119;
}
HEAP32[$4 + 20 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = $4;
}
label$123: {
if ($1 >>> 0 <= 15) {
$0 = $1 + $5 | 0;
HEAP32[$3 + 4 >> 2] = $0 | 3;
$0 = $0 + $3 | 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
break label$123;
}
HEAP32[$3 + 4 >> 2] = $5 | 3;
$2 = $3 + $5 | 0;
HEAP32[$2 + 4 >> 2] = $1 | 1;
HEAP32[$1 + $2 >> 2] = $1;
if ($8) {
$4 = $8 >>> 3 | 0;
$5 = ($4 << 3) + 76980 | 0;
$0 = HEAP32[19240];
$4 = 1 << $4;
label$126: {
if (!($6 & $4)) {
HEAP32[19235] = $4 | $6;
$4 = $5;
break label$126;
}
$4 = HEAP32[$5 + 8 >> 2];
}
HEAP32[$5 + 8 >> 2] = $0;
HEAP32[$4 + 12 >> 2] = $0;
HEAP32[$0 + 12 >> 2] = $5;
HEAP32[$0 + 8 >> 2] = $4;
}
HEAP32[19240] = $2;
HEAP32[19237] = $1;
}
$0 = $3 + 8 | 0;
}
__stack_pointer = $11 + 16 | 0;
return $0 | 0;
}
function ParMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$4 = __stack_pointer - 512 | 0;
__stack_pointer = $4;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(34061, 0);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0 + 60 | 0, HEAP32[16886]);
}
label$2: {
$3 = HEAP32[$0 + 540 >> 2] << 16;
if (!$3) {
break label$2;
}
$2 = $3 >> 16;
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(35091, 0);
}
$16 = $0 + 528 | 0;
$2 = ($2 | 0) > 0 ? $2 : 0;
$9 = dlmalloc($3 >> 14);
$3 = 0;
while (1) {
if (($2 | 0) == ($3 | 0)) {
HEAP32[$4 + 504 >> 2] = HEAP32[$0 + 20 >> 2];
$10 = HEAP32[$0 + 16 >> 2];
$11 = HEAP32[$0 + 12 >> 2];
HEAP32[$4 + 496 >> 2] = $11;
HEAP32[$4 + 500 >> 2] = $10;
$6 = 0;
HEAP32[$4 + 492 >> 2] = 0;
HEAP32[$4 + 488 >> 2] = 0;
HEAP32[$4 + 484 >> 2] = 0;
$23 = $0 + 60 | 0;
$13 = $0 + 12 | 0;
$5 = 0;
$7 = 0;
while (1) if (($2 | 0) == ($5 | 0)) {
while (1) {
label$9: {
if (($2 | 0) == ($6 | 0)) {
dlfree($9);
if (HEAP32[$0 + 24 >> 2] != ($7 | 0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
$5 = HEAP32[$0 + 24 >> 2];
HEAP32[$4 + 212 >> 2] = HEAP32[($7 << 2) + 62560 >> 2];
HEAP32[$4 + 208 >> 2] = HEAP32[($5 << 2) + 62560 >> 2];
eprintf_28char_20const__2c_20____29(36102, $4 + 208 | 0);
}
HEAP32[$0 + 24 >> 2] = $7;
}
wasm2js_i32$0 = $0, wasm2js_f32$0 = MaxDuration_28float_2c_20float_2c_20float_29(HEAPF32[$4 + 492 >> 2], HEAPF32[$4 + 488 >> 2], HEAPF32[$4 + 484 >> 2]), 
HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
$3 = 0;
break label$9;
}
$3 = ($6 << 2) + $9 | 0;
$5 = HEAP32[$3 >> 2];
if ($5) {
operator_20delete_28void__29(TwoHAbstractPosture___TwoHAbstractPosture_28_29($5));
HEAP32[$3 >> 2] = 0;
}
$6 = $6 + 1 | 0;
continue;
}
break;
}
while (1) {
if (($2 | 0) != ($3 | 0)) {
$5 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, HEAPF32[$0 + 40 >> 2], 1);
HEAP32[$4 + 200 >> 2] = HEAP32[$13 + 8 >> 2];
$11 = HEAP32[$13 + 4 >> 2];
$10 = HEAP32[$13 >> 2];
HEAP32[$4 + 192 >> 2] = $10;
HEAP32[$4 + 196 >> 2] = $11;
BasicMovement__setMannerFlags_28MannerFlags_29($5, $4 + 192 | 0);
$3 = $3 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 11;
HEAPF32[$0 + 40 >> 2] = HEAPF32[$0 + 44 >> 2] + HEAPF32[$0 + 40 >> 2];
$5 = -1;
$3 = 0;
$7 = 0;
$6 = -1;
label$16: {
while (1) {
if (($2 | 0) == ($3 | 0)) {
label$19: {
label$20: {
if (($6 | 0) == -1) {
break label$20;
}
Quaternion__setFrom_28Quaternion_20const__29($0 + 324 | 0, DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $6) + 324 | 0);
if (!HEAPU8[67600] | ($7 | 0) < 2) {
break label$20;
}
LogTime_28_29();
HEAP32[$4 + 176 >> 2] = $7;
HEAP32[$4 + 180 >> 2] = ($7 | 0) == 2 ? 7004 : 6689;
eprintf_28char_20const__2c_20____29(42931, $4 + 176 | 0);
}
if (($5 | 0) != -1) {
Quaternion__setFrom_28Quaternion_20const__29($0 + 436 | 0, DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $5) + 436 | 0);
}
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(40390, 0);
}
$6 = $0 + 424 | 0;
$7 = $0 + 412 | 0;
$9 = $0 + 312 | 0;
$8 = $0 + 300 | 0;
$3 = 0;
while (1) {
if (($2 | 0) == ($3 | 0)) {
$11 = Vector__Vector_28_29($4 + 472 | 0);
$17 = Vector__Vector_28_29($4 + 456 | 0);
TwoHConcretePostureChange__CalcHandSiteChange_28Vector__2c_20Vector__29_20const($23, $11, $17);
label$25: {
if (!HEAPU8[67585]) {
break label$25;
}
eprintf_28char_20const__2c_20____29(19332, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(19354, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($17, HEAP32[16886], 3);
eputc_28char_29(10);
if (!HEAPU8[67585]) {
break label$25;
}
eprintf_28char_20const__2c_20____29(34575, 0);
}
$12 = Vector__Vector_28_29($4 + 440 | 0);
$1 = 0;
$10 = Vector__Vector_28_29($4 + 424 | 0);
$13 = 0;
$3 = 0;
while (1) if (($2 | 0) == ($3 | 0)) {
$6 = $0 - -64 | 0;
$18 = Vector__Vector_28Vector_20const__29($4 + 408 | 0, $6);
Vector__setAdd_28Vector_20const__29($18, $12);
$7 = $0 + 176 | 0;
$19 = Vector__Vector_28Vector_20const__29($4 + 392 | 0, $7);
Vector__setAdd_28Vector_20const__29($19, $10);
label$28: {
if (!HEAPU8[67585]) {
break label$28;
}
eprintf_28char_20const__2c_20____29(18241, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(18152, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($6, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(17739, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($18, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(18266, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($10, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(18152, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($7, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(17739, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($19, HEAP32[16886], 3);
eputc_28char_29(10);
if (!HEAPU8[67585]) {
break label$28;
}
eprintf_28char_20const__2c_20____29(38236, 0);
}
$14 = Vector__Vector_28_29($4 + 376 | 0);
$15 = Vector__Vector_28_29($4 + 360 | 0);
$3 = 0;
$8 = Vector__Vector_28_29($4 + 344 | 0);
$9 = -1;
$7 = -1;
$6 = -1;
label$29: {
while (1) {
if (($2 | 0) == ($3 | 0)) {
label$32: {
label$33: {
if (!HEAPU8[67585]) {
break label$33;
}
if (($9 | 0) != -1) {
HEAP32[$4 + 64 >> 2] = $9;
eprintf_28char_20const__2c_20____29(21357, $4 - -64 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 3);
eputc_28char_29(10);
}
if (($7 | 0) != -1) {
HEAP32[$4 + 48 >> 2] = $7;
eprintf_28char_20const__2c_20____29(21380, $4 + 48 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($15, HEAP32[16886], 3);
eputc_28char_29(10);
}
if (!HEAPU8[67585]) {
break label$33;
}
eprintf_28char_20const__2c_20____29(38198, 0);
}
if ($1) {
$20 = Vector__length_28_29_20const($12);
}
if ($13) {
$24 = Vector__length_28_29_20const($10);
}
$22 = $0 + 544 | 0;
label$38: {
if ($20 == Math_fround(0)) {
$21 = Math_fround(.5);
if ($24 == Math_fround(0)) {
break label$38;
}
}
$21 = Math_fround($20 / Math_fround($20 + $24));
}
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($22, $11, $17, $21);
$10 = Vector__Vector_28_29($4 + 328 | 0);
$12 = Vector__Vector_28_29($4 + 312 | 0);
if (($6 | 0) == -1) {
break label$19;
}
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(38881, 0);
}
$20 = Math_fround(Math_fround(1) - $21);
if (($9 | 0) == -1) {
break label$29;
}
if (($7 | 0) == -1) {
break label$32;
}
$11 = Vector__Vector_28Vector_20const__29($4 + 296 | 0, $15);
Vector__setSubtract_28Vector_20const__29($11, $14);
$6 = Vector__Vector_28Vector_20const__29($4 + 280 | 0, $11);
Vector__setSubtract_28Vector_20const__29($6, $8);
$8 = Vector__Vector_28Vector_20const__29($4 + 264 | 0, $6);
Vector__setScale_28float_29($8, $21);
$17 = Vector__Vector_28Vector_20const__29($4 + 248 | 0, $6);
Vector__setScale_28float_29($17, $20);
Vector__setAdd_28Vector_20const__29($14, $8);
Vector__setSubtract_28Vector_20const__29($15, $17);
if (!HEAPU8[67585]) {
break label$19;
}
eprintf_28char_20const__2c_20____29(17518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17324, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($6, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17246, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15918, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17264, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($17, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15975, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($15, HEAP32[16886], 3);
eputc_28char_29(10);
break label$19;
}
} else {
$5 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $3);
label$42: {
if (!(HEAPU8[$5 + 508 | 0] & 2)) {
break label$42;
}
if (!(!HEAPU8[67600] | ($9 | 0) == -1)) {
LogTime_28_29();
HEAP32[$4 + 164 >> 2] = $3;
HEAP32[$4 + 160 >> 2] = $9;
eprintf_28char_20const__2c_20____29(41754, $4 + 160 | 0);
}
Vector__setFrom_28Vector_20const__29($14, $5 + 288 | 0);
$9 = $3;
if (!HEAPU8[67585]) {
break label$42;
}
HEAP32[$4 + 144 >> 2] = $3;
eprintf_28char_20const__2c_20____29(15880, $4 + 144 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 3);
eputc_28char_29(10);
}
label$44: {
if (!(HEAPU8[$5 + 510 | 0] & 2)) {
break label$44;
}
if (($7 | 0) != -1) {
LogTime_28_29();
HEAP32[$4 + 132 >> 2] = $3;
HEAP32[$4 + 128 >> 2] = $7;
eprintf_28char_20const__2c_20____29(41869, $4 + 128 | 0);
}
Vector__setFrom_28Vector_20const__29($15, $5 + 400 | 0);
$7 = $3;
if (!HEAPU8[67585]) {
break label$44;
}
HEAP32[$4 + 112 >> 2] = $3;
eprintf_28char_20const__2c_20____29(15938, $4 + 112 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($15, HEAP32[16886], 3);
eputc_28char_29(10);
}
label$46: {
if (!(HEAPU8[$5 + 510 | 0] & 4 ? 1 : HEAPU8[$5 + 508 | 0] & 4)) {
break label$46;
}
if (!(!HEAPU8[67600] | ($6 | 0) == -1)) {
LogTime_28_29();
HEAP32[$4 + 100 >> 2] = $3;
HEAP32[$4 + 96 >> 2] = $6;
eprintf_28char_20const__2c_20____29(35891, $4 + 96 | 0);
}
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($8, $5 + 400 | 0, $5 + 288 | 0);
$6 = $3;
if (!HEAPU8[67585]) {
break label$46;
}
HEAP32[$4 + 80 >> 2] = $3;
eprintf_28char_20const__2c_20____29(20435, $4 + 80 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$3 = Vector__Vector_28Vector_20const__29($4 + 296 | 0, $19);
Vector__setSubtract_28Vector_20const__29($3, $14);
$5 = Vector__Vector_28Vector_20const__29($4 + 280 | 0, $3);
Vector__setSubtract_28Vector_20const__29($5, $8);
Vector__setSubtract_28Vector_20const__29($15, $5);
if (!HEAPU8[67585]) {
break label$19;
}
eprintf_28char_20const__2c_20____29(17518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17324, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15975, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($15, HEAP32[16886], 3);
eputc_28char_29(10);
break label$19;
}
label$49: {
if (($7 | 0) != -1) {
$3 = Vector__Vector_28Vector_20const__29($4 + 296 | 0, $15);
Vector__setSubtract_28Vector_20const__29($3, $18);
$5 = Vector__Vector_28Vector_20const__29($4 + 280 | 0, $3);
Vector__setSubtract_28Vector_20const__29($5, $8);
Vector__setAdd_28Vector_20const__29($14, $5);
if (!HEAPU8[67585]) {
break label$49;
}
eprintf_28char_20const__2c_20____29(17518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17324, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15918, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 3);
eputc_28char_29(10);
break label$49;
}
$5 = Vector__Vector_28Vector_20const__29($4 + 296 | 0, $19);
Vector__setSubtract_28Vector_20const__29($5, $18);
$3 = Vector__Vector_28Vector_20const__29($4 + 280 | 0, $5);
Vector__setSubtract_28Vector_20const__29($3, $8);
label$51: {
if (($1 | 0) <= 0) {
break label$51;
}
Vector__setFrom_28Vector_20const__29($10, $3);
Vector__setScale_28float_29($10, $21);
if (!HEAPU8[67585]) {
break label$51;
}
eprintf_28char_20const__2c_20____29(17518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17324, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17281, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($10, HEAP32[16886], 3);
eputc_28char_29(10);
}
if (($13 | 0) <= 0) {
break label$49;
}
Vector__setFrom_28Vector_20const__29($12, $3);
Vector__setScale_28float_29($12, Math_fround(-$20));
if (!HEAPU8[67585]) {
break label$49;
}
eprintf_28char_20const__2c_20____29(17518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17324, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17299, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = ($1 | 0) > 0;
$5 = 0;
break label$16;
} else {
$5 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $3);
if (HEAP8[$5 + 508 | 0] & 1) {
Vector__setAdd_28Vector_20const__29($12, $5 + 288 | 0);
Vector__setSubtract_28Vector_20const__29($12, $5 - -64 | 0);
$1 = $1 + 1 | 0;
}
if (HEAP8[$5 + 510 | 0] & 1) {
Vector__setAdd_28Vector_20const__29($10, $5 + 400 | 0);
Vector__setSubtract_28Vector_20const__29($10, $5 + 176 | 0);
$13 = $13 + 1 | 0;
}
$3 = $3 + 1 | 0;
continue;
}
}
$5 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $3);
if (HEAPU8[$5 + 508 | 0] & 8) {
Vector__setFrom_28Vector_20const__29($8, $5 + 300 | 0);
Vector__setFrom_28Vector_20const__29($9, $5 + 312 | 0);
}
if (HEAPU8[$5 + 510 | 0] & 8) {
Vector__setFrom_28Vector_20const__29($7, $5 + 412 | 0);
Vector__setFrom_28Vector_20const__29($6, $5 + 424 | 0);
}
$3 = $3 + 1 | 0;
continue;
}
}
} else {
$9 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $3);
$8 = (HEAPU8[$9 + 508 | 0] | HEAPU8[$9 + 509 | 0] << 8) & 48;
$9 = (HEAPU8[$9 + 510 | 0] | HEAPU8[$9 + 511 | 0] << 8) & 48;
$7 = ((($8 | 0) != 0) + $7 | 0) + (($9 | 0) != 0) | 0;
$5 = $9 ? $3 : $5;
$6 = $8 ? $3 : $6;
$3 = $3 + 1 | 0;
continue;
}
break;
}
$3 = ($1 | 0) > 0;
$5 = ($9 | 0) != -1;
if (($9 | 0) == -1 | ($1 | 0) <= 0) {
break label$16;
}
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($10, $14, $18);
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(25006, 0);
eprintf_28char_20const__2c_20____29(15918, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15710, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($18, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17281, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($10, HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = 1;
$5 = 1;
}
label$59: {
if (($7 | 0) == -1 | ($13 | 0) <= 0) {
break label$59;
}
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($12, $15, $19);
if (!HEAPU8[67585]) {
break label$59;
}
eprintf_28char_20const__2c_20____29(25067, 0);
eprintf_28char_20const__2c_20____29(15975, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($15, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15734, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($19, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17299, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eputc_28char_29(10);
}
$8 = Vector__Vector_28_29($4 + 296 | 0);
$11 = Vector__Vector_28_29($4 + 280 | 0);
label$60: {
if ($5) {
Vector__setFrom_28Vector_20const__29($8, $14);
break label$60;
}
Vector__setFrom_28Vector_20const__29($8, $18);
Vector__setAdd_28Vector_20const__29($8, $10);
}
label$62: {
if (($7 | 0) != -1) {
Vector__setFrom_28Vector_20const__29($11, $15);
break label$62;
}
Vector__setFrom_28Vector_20const__29($11, $19);
Vector__setAdd_28Vector_20const__29($11, $12);
}
if ($3) {
Vector__setScale_28float_29($10, Math_fround(1 / +($1 | 0)));
}
if (($13 | 0) > 0) {
Vector__setScale_28float_29($12, Math_fround(1 / +($13 | 0)));
}
label$66: {
if (!HEAPU8[67585]) {
break label$66;
}
HEAP32[$4 + 36 >> 2] = $7;
HEAP32[$4 + 32 >> 2] = $9;
eprintf_28char_20const__2c_20____29(30656, $4 + 32 | 0);
eprintf_28char_20const__2c_20____29(15994, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(16016, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17281, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($10, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17299, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eputc_28char_29(10);
if (!HEAPU8[67585]) {
break label$66;
}
eprintf_28char_20const__2c_20____29(35139, 0);
}
$5 = 0;
while (1) if (($2 | 0) == ($5 | 0)) {
$2 = $0 + 288 | 0;
Vector__setFrom_28Vector_20const__29($2, $8);
$3 = $0 + 400 | 0;
Vector__setFrom_28Vector_20const__29($3, $11);
Vector__setAdd_28Vector_20const__29($2, $22);
Vector__setAdd_28Vector_20const__29($3, $22);
if (HEAPU8[67585]) {
eprintf_28char_20const__2c_20____29(19376, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($22, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(15829, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(15839, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (!HEAPU8[67585]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(43798, 0);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($23, HEAP32[16886]);
break label$2;
} else {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $5);
$6 = HEAPU16[$3 + 508 >> 1];
label$71: {
label$72: {
if ($6 & 1) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $10, 1);
if (!HEAPU8[67585]) {
break label$71;
}
$6 = 15295;
$7 = $10;
break label$72;
}
if (!($6 & 2)) {
break label$71;
}
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $8, 1);
if (!HEAPU8[67585]) {
break label$71;
}
$6 = 17712;
$7 = $8;
}
HEAP32[$4 + 16 >> 2] = $5;
eprintf_28char_20const__2c_20____29($6, $4 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($7, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(19764, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3 + 288 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
}
$6 = HEAPU16[$3 + 510 >> 1];
label$74: {
label$75: {
if ($6 & 1) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $12, 0);
if (!HEAPU8[67585]) {
break label$74;
}
$6 = 15321;
$7 = $12;
break label$75;
}
if (!($6 & 2)) {
break label$74;
}
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $11, 0);
if (!HEAPU8[67585]) {
break label$74;
}
$6 = 17712;
$7 = $11;
}
HEAP32[$4 >> 2] = $5;
eprintf_28char_20const__2c_20____29($6, $4);
Vector__print_28_IO_FILE__2c_20int_29_20const($7, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(19796, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3 + 400 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
}
$5 = $5 + 1 | 0;
continue;
}
} else {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($16, $5);
TwoHConcretePostureChange__setCopyRest_28TwoHConcretePostureChange_20const__29($3 + 60 | 0, $23);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1, HEAP32[($5 << 2) + $9 >> 2]);
if (HEAP32[$4 + 496 >> 2] < HEAP32[$3 + 12 >> 2]) {
$8 = $3 + 12 | 0;
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18042, 0);
MannerFlags__print_28_IO_FILE__29_20const($13, HEAP32[16886]);
eputs_28char_20const__29(17739);
MannerFlags__print_28_IO_FILE__29_20const($4 + 496 | 0, HEAP32[16886]);
HEAP32[$4 + 240 >> 2] = $5;
eprintf_28char_20const__2c_20____29(44393, $4 + 240 | 0);
}
HEAP32[$4 + 232 >> 2] = HEAP32[$8 + 8 >> 2];
$10 = HEAP32[$8 + 4 >> 2];
$11 = HEAP32[$8 >> 2];
HEAP32[$4 + 224 >> 2] = $11;
HEAP32[$4 + 228 >> 2] = $10;
MannerFlags__addMannerFlags_28MannerFlags_29($4 + 496 | 0, $4 + 224 | 0);
}
$8 = HEAP32[$3 + 24 >> 2];
UpdateMaxDuration_28BasicMovement__2c_20float__2c_20float__2c_20float__29($3, $4 + 492 | 0, $4 + 488 | 0, $4 + 484 | 0);
$7 = ($7 | 0) > ($8 | 0) ? $7 : $8;
$5 = $5 + 1 | 0;
continue;
}
}
$6 = operator_20new_28unsigned_20long_29(168);
HEAP32[19359] = 0;
invoke_iii(362, $6 | 0, $1 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) != 1) {
HEAP32[($3 << 2) + $9 >> 2] = $6;
$3 = $3 + 1 | 0;
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
__resumeException($4 | 0);
abort();
}
__stack_pointer = $4 + 512 | 0;
}
function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
$15 = __stack_pointer - 336 | 0;
__stack_pointer = $15;
$12 = $7;
$22 = $12;
$11 = $8;
$9 = $11 & 65535;
$17 = $9;
$11 = $3;
$20 = $11;
$9 = $4;
$12 = $9 & 65535;
$18 = $12;
$12 = $9;
$9 = $11;
$11 = $8;
$11 = $12 ^ $11;
$10 = $7;
$9 = $11 & -2147483648;
$25 = $9;
$9 = $8;
$26 = $9 >>> 16 & 32767;
$12 = $4;
$23 = $12 >>> 16 & 32767;
label$1: {
label$2: {
if ($26 - 32767 >>> 0 > 4294934529 & $23 - 32767 >>> 0 >= 4294934530) {
break label$2;
}
$11 = $2;
$14 = !($11 | $1);
$11 = $4;
$9 = $11 & 2147483647;
$16 = $9;
$13 = $9 >>> 0 < 2147418112;
$11 = $9;
$12 = $3;
$19 = $12;
$10 = $12;
if (!(!$10 & ($11 | 0) == 2147418112 ? $14 : $13)) {
$12 = $3;
$24 = $12;
$10 = $4;
$11 = $10 | 32768;
$25 = $11;
break label$1;
}
$11 = $6;
$14 = !($11 | $5);
$11 = $8;
$12 = $11 & 2147483647;
$4 = $12;
$13 = $12 >>> 0 < 2147418112;
$11 = $12;
$10 = $7;
$3 = $10;
$9 = $10;
if (!(!$9 & ($11 | 0) == 2147418112 ? $14 : $13)) {
$10 = $7;
$24 = $10;
$9 = $8;
$11 = $9 | 32768;
$25 = $11;
$1 = $5;
$11 = $6;
$2 = $11;
break label$1;
}
$11 = $16;
$10 = $11 ^ 2147418112;
$11 = $1;
$9 = $19;
$12 = $9;
$9 = $10;
$10 = $2;
$9 = $9 | $10;
if (!($11 | $12 | $9)) {
$9 = $4;
$11 = $9 ^ 2147418112;
$1 = $11;
$9 = $5;
$10 = $3;
$12 = $10;
$11 = $6;
$10 = $1;
$10 = $11 | $10;
if (!($9 | $12 | $10)) {
$1 = 0;
$2 = 0;
$25 = 2147450880;
break label$1;
}
$11 = $24;
$24 = $11;
$10 = $25;
$9 = $10 | 2147418112;
$25 = $9;
$1 = 0;
$2 = 0;
break label$1;
}
$9 = $4;
$11 = $9 ^ 2147418112;
$7 = $11;
$9 = $5;
$10 = $3;
$12 = $10;
$11 = $6;
$10 = $7;
$10 = $11 | $10;
if (!($9 | $12 | $10)) {
$1 = 0;
$2 = 0;
break label$1;
}
$9 = $16;
$10 = $2;
$9 = $9 | $10;
$11 = $1;
$12 = $19;
if (!($9 | ($11 | $12))) {
$11 = $6;
$9 = $4;
$11 = $11 | $9;
$12 = $5;
$10 = $3;
$13 = !($11 | ($12 | $10));
$12 = $13 ? 0 : $24;
$24 = $12;
$10 = $25;
$9 = $13 ? 2147450880 : $10;
$25 = $9;
$1 = 0;
$2 = 0;
break label$1;
}
$9 = $4;
$12 = $6;
$12 = $9 | $12;
$11 = $5;
$13 = $3;
if (!($12 | ($11 | $13))) {
$9 = $24;
$24 = $9;
$12 = $25;
$13 = $12 | 2147418112;
$25 = $13;
$1 = 0;
$2 = 0;
break label$1;
}
$13 = $16;
if (($13 | 0) == 65535 | $13 >>> 0 < 65535) {
$12 = $18;
$21 = !($12 | $20);
$10 = $21;
$9 = $10 ? $1 : $20;
$12 = $2;
$13 = $18;
$11 = $10 ? $12 : $13;
$12 = Math_clz32($11);
$9 = ($12 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $12;
$12 = $21 << 6;
$13 = $9 + $12 | 0;
$14 = $2;
$9 = $18;
__ashlti3($15 + 320 | 0, $1, $14, $20, $9, $13 - 15 | 0);
$21 = 16 - $13 | 0;
$10 = $15;
$9 = HEAP32[$10 + 328 >> 2];
$20 = $9;
$14 = HEAP32[$10 + 332 >> 2];
$18 = $14;
$9 = HEAP32[$10 + 324 >> 2];
$2 = $9;
$14 = HEAP32[$10 + 320 >> 2];
$1 = $14;
}
$9 = $4;
if ($9 >>> 0 > 65535) {
break label$2;
}
$10 = $17;
$11 = !($10 | $22);
$14 = $11 ? $5 : $22;
$10 = $6;
$9 = $17;
$12 = $11 ? $10 : $9;
$10 = Math_clz32($12);
$14 = ($10 | 0) == 32 ? Math_clz32($14) + 32 | 0 : $10;
$13 = 0;
$10 = $11 << 6;
$9 = $10 + $14 | 0;
$13 = $6;
$14 = $17;
__ashlti3($15 + 304 | 0, $5, $13, $22, $14, $9 - 15 | 0);
$21 = ($21 + $9 | 0) - 16 | 0;
$11 = $15;
$14 = HEAP32[$11 + 312 >> 2];
$22 = $14;
$13 = HEAP32[$11 + 316 >> 2];
$17 = $13;
$13 = HEAP32[$11 + 304 >> 2];
$5 = $13;
$14 = HEAP32[$11 + 308 >> 2];
$6 = $14;
}
$14 = $17;
$13 = $14 | 65536;
$34 = $13;
$11 = $22;
$31 = $11;
$14 = $11;
$11 = $13 << 15 | $11 >>> 17;
$4 = $11;
$11 = $6;
$10 = $11 >>> 17 | 0;
$11 = $14 << 15;
$3 = $11 | $10;
$10 = $3;
$12 = 0 - $10 | 0;
$7 = $12;
$14 = 0;
$13 = $14;
$14 = $4;
$13 = $13 | $14;
$4 = $13;
$11 = $13;
$9 = $11 + (($10 | 0) != 0) | 0;
$9 = 1963258675 - $9 | 0;
$8 = $9;
__multi3($15 + 288 | 0, $10, $11, 0, 0, $12, $9, 0, 0);
$14 = $15;
$10 = HEAP32[$14 + 296 >> 2];
$9 = $10;
$11 = 0 - $9 | 0;
$13 = HEAP32[$14 + 300 >> 2];
$10 = $13;
$12 = $10 + (($9 | 0) != 0) | 0;
$12 = 0 - $12 | 0;
$13 = $8;
__multi3($14 + 272 | 0, $11, $12, 0, 0, $7, $13, 0, 0);
$10 = $14 + 256 | 0;
$13 = HEAP32[$14 + 284 >> 2];
$9 = HEAP32[$14 + 280 >> 2];
$7 = $9 << 1;
$9 = $13 << 1 | $9 >>> 31;
$8 = $9;
$13 = $15;
$9 = HEAP32[$13 + 272 >> 2];
$14 = HEAP32[$13 + 276 >> 2];
$9 = 0;
$13 = $9;
$12 = $14 >>> 31 | 0;
$14 = $7;
$7 = $12 | $14;
$9 = $8;
$13 = $9 | $13;
$8 = $13;
$9 = $4;
__multi3($10, $7, $13, 0, 0, $3, $9, 0, 0);
$14 = $15;
$12 = HEAP32[$14 + 264 >> 2];
$13 = $12;
$10 = 0 - $12 | 0;
$9 = HEAP32[$14 + 268 >> 2];
$11 = $9 + (($13 | 0) != 0) | 0;
$11 = 0 - $11 | 0;
$9 = $11;
$11 = $8;
__multi3($14 + 240 | 0, $7, $11, 0, 0, $10, $9, 0, 0);
$10 = $14 + 224 | 0;
$9 = HEAP32[$14 + 252 >> 2];
$13 = HEAP32[$14 + 248 >> 2];
$7 = $13 << 1;
$13 = $9 << 1 | $13 >>> 31;
$8 = $13;
$9 = $15;
$13 = HEAP32[$9 + 240 >> 2];
$14 = HEAP32[$9 + 244 >> 2];
$11 = $14 >>> 31 | 0;
$14 = $7;
$7 = $11 | $14;
$13 = 0;
$9 = $13;
$13 = $8;
$9 = $9 | $13;
$8 = $9;
$13 = $4;
__multi3($10, $7, $9, 0, 0, $3, $13, 0, 0);
$14 = $15;
$11 = HEAP32[$14 + 232 >> 2];
$9 = $11;
$12 = 0 - $9 | 0;
$13 = HEAP32[$14 + 236 >> 2];
$11 = $13;
$10 = $11 + (($9 | 0) != 0) | 0;
$10 = 0 - $10 | 0;
$13 = $10;
$10 = $8;
__multi3($14 + 208 | 0, $7, $10, 0, 0, $12, $13, 0, 0);
$11 = $14 + 192 | 0;
$13 = HEAP32[$14 + 220 >> 2];
$9 = HEAP32[$14 + 216 >> 2];
$7 = $9 << 1;
$9 = $13 << 1 | $9 >>> 31;
$8 = $9;
$13 = $15;
$9 = HEAP32[$13 + 208 >> 2];
$14 = HEAP32[$13 + 212 >> 2];
$9 = 0;
$13 = $9;
$10 = $14 >>> 31 | 0;
$14 = $7;
$7 = $10 | $14;
$9 = $8;
$13 = $9 | $13;
$8 = $13;
$9 = $4;
__multi3($11, $7, $13, 0, 0, $3, $9, 0, 0);
$14 = $15;
$10 = HEAP32[$14 + 200 >> 2];
$13 = $10;
$11 = 0 - $10 | 0;
$9 = HEAP32[$14 + 204 >> 2];
$12 = $9 + (($13 | 0) != 0) | 0;
$12 = 0 - $12 | 0;
$9 = $12;
$12 = $8;
__multi3($14 + 176 | 0, $7, $12, 0, 0, $11, $9, 0, 0);
$16 = $14 + 160 | 0;
$9 = HEAP32[$14 + 188 >> 2];
$13 = HEAP32[$14 + 184 >> 2];
$8 = $13 << 1;
$13 = $9 << 1 | $13 >>> 31;
$7 = $13;
$9 = $15;
$13 = HEAP32[$9 + 176 >> 2];
$14 = HEAP32[$9 + 180 >> 2];
$13 = 0;
$9 = $13;
$13 = $7;
$9 = $9 | $13;
$12 = $14 >>> 31 | 0;
$14 = $8;
$13 = $12 | $14;
$10 = $13 - 1 | 0;
$7 = $10;
$11 = !$13;
$11 = $9 - $11 | 0;
$8 = $11;
$11 = $4;
$9 = $8;
__multi3($16, $3, $11, 0, 0, $10, $9, 0, 0);
$13 = $5;
$12 = $6;
$9 = $12 << 15 | $13 >>> 17;
$12 = $8;
__multi3($15 + 144 | 0, $13 << 15, $9, 0, 0, $10, $12, 0, 0);
$13 = $15;
$11 = HEAP32[$13 + 168 >> 2];
$19 = $11;
$12 = HEAP32[$13 + 172 >> 2];
$16 = $12;
$12 = HEAP32[$13 + 160 >> 2];
$22 = $12;
$11 = HEAP32[$13 + 164 >> 2];
$17 = $11;
$12 = HEAP32[$13 + 156 >> 2];
$11 = HEAP32[$13 + 152 >> 2];
$9 = $11;
$13 = $22;
$14 = $9 + $13 | 0;
$11 = $12;
$12 = $17;
$10 = $11 + $12 | 0;
$3 = $14;
$10 = $9 >>> 0 > $14 >>> 0 ? $10 + 1 | 0 : $10;
$4 = $10;
$13 = $12;
$9 = $22;
$12 = $14;
$13 = ($10 | 0) == ($13 | 0) & $9 >>> 0 > $12 >>> 0 | $10 >>> 0 < $13 >>> 0;
$12 = $16;
$9 = $19;
$11 = $9 + $13 | 0;
$14 = $11 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$13 = $14;
$14 = $4;
$12 = $3;
$9 = !$14 & $12 >>> 0 > 1 | ($14 | 0) != 0;
$10 = $9 + $11 | 0;
$12 = $13;
$11 = $12;
$11 = $9 >>> 0 > $10 >>> 0 ? $11 + 1 | 0 : $11;
$9 = $10;
$14 = 0 - $9 | 0;
$10 = $11 + (($9 | 0) != 0) | 0;
$10 = 0 - $10 | 0;
$11 = $10;
$10 = $8;
__multi3($15 + 112 | 0, $7, $10, 0, 0, $14, $11, 0, 0);
$10 = $3;
$13 = 1 - $10 | 0;
$11 = $4;
$14 = $11 + ($10 >>> 0 > 1) | 0;
$14 = 0 - $14 | 0;
$9 = $8;
__multi3($15 + 128 | 0, $13, $14, 0, 0, $7, $9, 0, 0);
$26 = ($23 - $26 | 0) + $21 | 0;
$12 = $15;
$10 = HEAP32[$12 + 112 >> 2];
$9 = HEAP32[$12 + 116 >> 2];
$29 = $9;
$12 = $10;
$10 = $9 << 1 | $10 >>> 31;
$23 = $12 << 1;
$21 = $10;
$9 = $15;
$10 = HEAP32[$9 + 136 >> 2];
$12 = HEAP32[$9 + 140 >> 2];
$30 = $12;
$9 = $10;
$10 = $12 << 1 | $9 >>> 31;
$4 = $9 << 1;
$3 = $10;
$12 = $15;
$10 = HEAP32[$12 + 128 >> 2];
$9 = HEAP32[$12 + 132 >> 2];
$14 = $9 >>> 31 | 0;
$10 = 0;
$12 = $10;
$10 = $3;
$12 = $12 | $10;
$10 = $23;
$9 = $4;
$14 = $9 | $14;
$11 = $10 + $14 | 0;
$9 = $12;
$12 = $21;
$13 = $9 + $12 | 0;
$19 = $11;
$13 = $11 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
$16 = $13;
$9 = $11 - 13927 | 0;
$35 = $9;
$11 = $11 >>> 0 < 13927;
$11 = $13 - $11 | 0;
$3 = $11;
$12 = 0;
$4 = $12;
$12 = $18;
$13 = $12 | 65536;
$44 = $13;
$11 = $20;
$45 = $11;
$8 = $11 << 1;
$11 = $13 << 1 | $11 >>> 31;
$7 = $11;
$11 = $2;
$14 = $11 >>> 31 | 0;
$12 = 0;
$13 = $12;
$12 = $7;
$13 = $12 | $13;
$42 = $13;
$11 = $8;
$36 = $11 | $14;
$7 = $13;
$11 = 0;
$8 = $11;
$12 = __wasm_i64_mul($3, $24, $13, $11);
$20 = $12;
$11 = i64toi32_i32$HIGH_BITS;
$18 = $11;
$13 = $1;
$39 = $13 << 1;
$11 = $2;
$12 = $11 << 1 | $13 >>> 31;
$43 = $12;
$13 = 0;
$17 = $13;
$22 = $12;
$11 = $3;
$13 = $16;
$12 = $19;
$23 = ($11 | 0) == ($13 | 0) & $12 >>> 0 > $9 >>> 0 | $11 >>> 0 < $13 >>> 0;
$12 = $13;
$13 = $21;
$14 = $19;
$16 = ($12 | 0) == ($13 | 0) & $10 >>> 0 > $14 >>> 0 | $13 >>> 0 > $12 >>> 0;
$11 = $15;
$14 = HEAP32[$11 + 120 >> 2];
$12 = HEAP32[$11 + 124 >> 2];
$11 = $14;
$10 = $11 << 1;
$14 = $12 << 1 | $11 >>> 31;
$9 = $14;
$11 = 0;
$12 = $11;
$14 = $29;
$13 = $14 >>> 31 | 0;
$14 = $10;
$10 = $13 | $14;
$11 = $9;
$12 = $11 | $12;
$9 = $12;
$12 = $30;
$13 = $12 >>> 31 | 0;
$14 = 0;
$11 = $14;
$14 = $9;
$9 = $11 + $14 | 0;
$12 = $10;
$10 = $12 + $13 | 0;
$9 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$13 = $10;
$10 = $9;
$14 = $16;
$11 = $13 + $14 | 0;
$10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$13 = $11;
$11 = $10;
$9 = $23;
$12 = $9 + $13 | 0;
$11 = $12 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
$10 = $12;
$14 = $10 - 1 | 0;
$33 = $14;
$12 = !$10;
$12 = $11 - $12 | 0;
$10 = 0;
$16 = $10;
$19 = $12;
$11 = __wasm_i64_mul($22, $24, $12, $10);
$13 = $11;
$10 = i64toi32_i32$HIGH_BITS;
$11 = $10;
$10 = $18;
$14 = $11 + $10 | 0;
$12 = $20;
$9 = $12 + $13 | 0;
$14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
$23 = $9;
$12 = $10;
$21 = $14;
$13 = $20;
$27 = ($12 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $12 >>> 0 > $14 >>> 0;
$13 = $33;
$20 = $13;
$13 = 0;
$29 = $13;
$14 = 0;
$18 = $14;
$13 = $14;
$10 = $36;
$33 = $10;
$10 = $29;
$10 = __wasm_i64_mul($20, $13, $33, $10);
$12 = $10;
$13 = i64toi32_i32$HIGH_BITS;
$10 = $13;
$13 = $21;
$9 = $10 + $13 | 0;
$14 = $23;
$11 = $12 + $14 | 0;
$9 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
$32 = $11;
$30 = $9;
$14 = $13;
$12 = $23;
$14 = ($9 | 0) == ($14 | 0) & $12 >>> 0 > $11 >>> 0 | $9 >>> 0 < $14 >>> 0;
$11 = 0;
$12 = $27;
$10 = $12 + $14 | 0;
$11 = $10 >>> 0 < $14 >>> 0 ? 1 : $11;
$13 = $10;
$9 = $11;
$11 = $8;
$12 = $16;
$12 = __wasm_i64_mul($7, $11, $19, $12);
$14 = $12;
$11 = i64toi32_i32$HIGH_BITS;
$12 = $11;
$11 = $9;
$10 = $11 + $12 | 0;
$9 = $13 + $14 | 0;
$10 = $9 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
$37 = $9;
$38 = $10;
$10 = $8;
$13 = $18;
$13 = __wasm_i64_mul($7, $10, $20, $13);
$28 = $13;
$10 = i64toi32_i32$HIGH_BITS;
$27 = $10;
$10 = $16;
$13 = $29;
$13 = __wasm_i64_mul($19, $10, $33, $13);
$14 = $13;
$10 = i64toi32_i32$HIGH_BITS;
$13 = $10;
$10 = $27;
$9 = $10 + $13 | 0;
$11 = $28;
$12 = $11 + $14 | 0;
$9 = $12 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$23 = $12;
$11 = $10;
$21 = $9;
$10 = $12;
$14 = $28;
$14 = ($11 | 0) == ($9 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $11 >>> 0;
$9 = $14;
$14 = 0;
$10 = $14;
$10 = $10 | $9;
$9 = $21;
$11 = $9;
$9 = 0;
$11 = $11 | $9;
$14 = $37;
$13 = $11 + $14 | 0;
$9 = $10;
$10 = $38;
$12 = $9 + $10 | 0;
$28 = $13;
$12 = $11 >>> 0 > $13 >>> 0 ? $12 + 1 | 0 : $12;
$27 = $12;
$10 = $23;
$12 = $30;
$14 = $12;
$13 = $10 + $12 | 0;
$11 = 0;
$12 = $32;
$9 = $11 + $12 | 0;
$23 = $9;
$12 = $14;
$13 = $9 >>> 0 < $11 >>> 0 ? $13 + 1 | 0 : $13;
$21 = $13;
$11 = $32;
$12 = ($12 | 0) == ($13 | 0) & $11 >>> 0 > $9 >>> 0 | $13 >>> 0 < $12 >>> 0;
$14 = $27;
$9 = $14;
$11 = $28;
$10 = $11 + $12 | 0;
$40 = $10;
$9 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
$41 = $9;
$9 = $3;
$14 = $35;
$35 = $14;
$11 = 0;
$17 = $11;
$14 = $29;
$14 = __wasm_i64_mul($35, $11, $33, $14);
$28 = $14;
$11 = i64toi32_i32$HIGH_BITS;
$27 = $11;
$11 = $4;
$14 = $17;
$14 = __wasm_i64_mul($9, $11, $22, $14);
$12 = $14;
$11 = i64toi32_i32$HIGH_BITS;
$14 = $11;
$11 = $27;
$10 = $11 + $14 | 0;
$9 = $28;
$13 = $9 + $12 | 0;
$32 = $13;
$9 = $11;
$10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
$30 = $10;
$11 = $13;
$12 = $28;
$46 = ($9 | 0) == ($10 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 > $10 >>> 0;
$10 = 0;
$27 = $10;
$10 = $18;
$12 = $39;
$28 = $12 & -2;
$12 = $27;
$12 = __wasm_i64_mul($20, $10, $28, $12);
$9 = $12;
$14 = $9 + $11 | 0;
$10 = i64toi32_i32$HIGH_BITS;
$12 = $10;
$10 = $30;
$13 = $12 + $10 | 0;
$37 = $14;
$11 = $10;
$13 = $9 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
$38 = $13;
$9 = $32;
$10 = $14;
$11 = ($11 | 0) == ($13 | 0) & $9 >>> 0 > $10 >>> 0 | $11 >>> 0 > $13 >>> 0;
$9 = $46;
$12 = $11 + $9 | 0;
$14 = 0;
$14 = $11 >>> 0 > $12 >>> 0 ? 1 : $14;
$11 = $12;
$10 = $23;
$13 = $11 + $10 | 0;
$9 = $14;
$14 = $21;
$12 = $9 + $14 | 0;
$32 = $13;
$12 = $11 >>> 0 > $13 >>> 0 ? $12 + 1 | 0 : $12;
$30 = $12;
$10 = $14;
$11 = $23;
$10 = ($12 | 0) == ($10 | 0) & $11 >>> 0 > $13 >>> 0 | $10 >>> 0 > $12 >>> 0;
$14 = $41;
$13 = $14;
$11 = $40;
$9 = $11 + $10 | 0;
$13 = $9 >>> 0 < $10 >>> 0 ? $13 + 1 | 0 : $13;
$40 = $9;
$41 = $13;
$13 = $8;
$11 = $17;
$11 = __wasm_i64_mul($7, $13, $35, $11);
$23 = $11;
$13 = i64toi32_i32$HIGH_BITS;
$21 = $13;
$13 = $16;
$11 = $27;
$11 = __wasm_i64_mul($19, $13, $28, $11);
$10 = $11;
$13 = i64toi32_i32$HIGH_BITS;
$11 = $13;
$13 = $21;
$9 = $11 + $13 | 0;
$14 = $23;
$12 = $10 + $14 | 0;
$9 = $12 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
$7 = $12;
$8 = $9;
$9 = $4;
$14 = $29;
$14 = __wasm_i64_mul($3, $9, $33, $14);
$10 = $14;
$9 = i64toi32_i32$HIGH_BITS;
$14 = $9;
$9 = $8;
$12 = $9 + $14 | 0;
$13 = $7;
$11 = $10 + $13 | 0;
$12 = $11 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
$19 = $11;
$16 = $12;
$12 = $17;
$13 = $18;
$13 = __wasm_i64_mul($22, $12, $20, $13);
$10 = $13;
$12 = i64toi32_i32$HIGH_BITS;
$13 = $12;
$12 = $16;
$11 = $12 + $13 | 0;
$9 = $19;
$14 = $9 + $10 | 0;
$20 = $14;
$11 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
$9 = 0;
$4 = $9;
$9 = $12;
$18 = $11;
$12 = $11;
$11 = $19;
$10 = $14;
$29 = ($9 | 0) == ($12 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 > $12 >>> 0;
$11 = $8;
$9 = $21;
$12 = $23;
$10 = $7;
$8 = ($11 | 0) == ($9 | 0) & $12 >>> 0 > $10 >>> 0 | $9 >>> 0 > $11 >>> 0;
$10 = $11;
$12 = $7;
$11 = $16;
$9 = $19;
$11 = ($10 | 0) == ($11 | 0) & $12 >>> 0 > $9 >>> 0 | $10 >>> 0 > $11 >>> 0;
$14 = 0;
$9 = $8;
$13 = $11 + $9 | 0;
$14 = $11 >>> 0 > $13 >>> 0 ? 1 : $14;
$9 = $14;
$11 = $13;
$12 = $29;
$10 = $11 + $12 | 0;
$12 = $4;
$14 = $12 | $10;
$11 = $24;
$13 = $18;
$11 = $11 | $13;
$12 = $32;
$9 = $11 + $12 | 0;
$13 = $14;
$14 = $30;
$10 = $13 + $14 | 0;
$7 = $9;
$12 = $14;
$10 = $9 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
$8 = $10;
$11 = $32;
$12 = ($12 | 0) == ($10 | 0) & $11 >>> 0 > $9 >>> 0 | $10 >>> 0 < $12 >>> 0;
$14 = $41;
$9 = $14;
$11 = $40;
$13 = $11 + $12 | 0;
$18 = $13;
$9 = $13 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
$16 = $9;
$9 = $4;
$11 = $27;
$11 = __wasm_i64_mul($3, $9, $28, $11);
$3 = $11;
$9 = i64toi32_i32$HIGH_BITS;
$4 = $9;
$9 = $17;
$11 = $17;
$11 = __wasm_i64_mul($22, $9, $35, $11);
$12 = $11;
$14 = $3;
$10 = $11 + $14 | 0;
$9 = i64toi32_i32$HIGH_BITS;
$11 = $9;
$9 = $4;
$13 = $11 + $9 | 0;
$13 = $10 >>> 0 < $12 >>> 0 ? $13 + 1 | 0 : $13;
$14 = 0;
$11 = $14;
$17 = $13;
$9 = $13;
$14 = $4;
$13 = $3;
$12 = ($9 | 0) == ($14 | 0) & $10 >>> 0 < $13 >>> 0 | $9 >>> 0 < $14 >>> 0;
$14 = $11;
$12 = $12 | $14;
$3 = $12;
$9 = 0;
$13 = $17;
$9 = $9 | $13;
$14 = $37;
$11 = $9 + $14 | 0;
$12 = $38;
$13 = $3;
$10 = $12 + $13 | 0;
$3 = $11;
$10 = $9 >>> 0 > $11 >>> 0 ? $10 + 1 | 0 : $10;
$4 = $10;
$14 = $12;
$9 = $37;
$12 = $11;
$17 = ($10 | 0) == ($14 | 0) & $9 >>> 0 > $11 >>> 0 | $10 >>> 0 < $14 >>> 0;
$9 = $20;
$10 = $4;
$11 = $9 + $10 | 0;
$14 = 0;
$13 = $14 + $12 | 0;
$11 = $13 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
$12 = $10;
$10 = $13;
$14 = $3;
$12 = ($12 | 0) == ($11 | 0) & $10 >>> 0 < $14 >>> 0 | $11 >>> 0 < $12 >>> 0;
$13 = 0;
$14 = $17;
$9 = $12 + $14 | 0;
$13 = $9 >>> 0 < $12 >>> 0 ? 1 : $13;
$12 = $9;
$14 = $13;
$13 = $8;
$9 = $13 + $14 | 0;
$10 = $7;
$11 = $12 + $10 | 0;
$9 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
$3 = $11;
$4 = $9;
$10 = $13;
$12 = $7;
$10 = ($9 | 0) == ($10 | 0) & $12 >>> 0 > $11 >>> 0 | $9 >>> 0 < $10 >>> 0;
$13 = $16;
$11 = $13;
$12 = $18;
$14 = $12 + $10 | 0;
$7 = $14;
$11 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
$8 = $11;
label$12: {
if (($11 | 0) == 131071 | $11 >>> 0 < 131071) {
$13 = $4;
$11 = $8;
$10 = $6;
$12 = $34;
__multi3($15 + 80 | 0, $3, $13, $7, $11, $5, $10, $31, $12);
$11 = $1;
$10 = $11 << 17;
$2 = $10;
$12 = $15;
$10 = HEAP32[$12 + 88 >> 2];
$11 = HEAP32[$12 + 92 >> 2];
$1 = $11;
$12 = 0;
$13 = $10;
$9 = $12 - $10 | 0;
$11 = $2;
$10 = $1;
$14 = $10 + ($13 >>> 0 > $12 >>> 0) | 0;
$14 = $11 - $14 | 0;
$13 = $14;
$11 = $15;
$14 = HEAP32[$11 + 80 >> 2];
$1 = $14;
$12 = HEAP32[$11 + 84 >> 2];
$2 = $12;
$11 = $14;
$14 = ($12 | $11) != 0;
$10 = $9 - $14 | 0;
$19 = $10;
$11 = $13;
$9 = $9 >>> 0 < $14 >>> 0;
$9 = $11 - $9 | 0;
$16 = $9;
$26 = $26 + 16382 | 0;
$14 = $1;
$12 = 0 - $14 | 0;
$22 = $12;
$13 = $2;
$10 = $13 + (($14 | 0) != 0) | 0;
$10 = 0 - $10 | 0;
$9 = 0;
break label$12;
}
$9 = $7;
$11 = $9 << 31;
$12 = $11;
$11 = $4;
$9 = $11 >>> 1 | 0;
$10 = $3;
$14 = ($11 & 1) << 31 | $10 >>> 1;
$10 = $9;
$9 = $12;
$10 = $9 | $10;
$4 = $10;
$11 = 0;
$3 = $11 | $14;
$10 = $8;
$11 = $10 >>> 1 | 0;
$9 = $7;
$7 = ($10 & 1) << 31 | $9 >>> 1;
$8 = $11;
$11 = $4;
$9 = $8;
$10 = $6;
$14 = $34;
__multi3($15 + 96 | 0, $3, $11, $7, $9, $5, $10, $31, $14);
$9 = $1;
$10 = $9 << 16;
$16 = $10;
$14 = $15;
$10 = HEAP32[$14 + 104 >> 2];
$9 = HEAP32[$14 + 108 >> 2];
$12 = $9;
$14 = 0;
$11 = $10;
$13 = $14 - $10 | 0;
$9 = $16;
$10 = $12;
$12 = $10 + ($11 >>> 0 > $14 >>> 0) | 0;
$12 = $9 - $12 | 0;
$16 = $12;
$9 = $15;
$12 = HEAP32[$9 + 96 >> 2];
$22 = $12;
$14 = HEAP32[$9 + 100 >> 2];
$17 = $14;
$11 = $13;
$9 = $12;
$12 = ($14 | $9) != 0;
$10 = $11 - $12 | 0;
$19 = $10;
$9 = $16;
$13 = $11 >>> 0 < $12 >>> 0;
$13 = $9 - $13 | 0;
$16 = $13;
$26 = $26 + 16383 | 0;
$39 = $1;
$13 = $2;
$43 = $13;
$36 = $45;
$13 = $44;
$42 = $13;
$12 = $22;
$14 = 0 - $12 | 0;
$22 = $14;
$11 = $17;
$10 = $11 + (($12 | 0) != 0) | 0;
$10 = 0 - $10 | 0;
$9 = 0;
}
$17 = $10;
if (($26 | 0) >= 32767) {
$13 = $24;
$24 = $13;
$10 = $25;
$9 = $10 | 2147418112;
$25 = $9;
$1 = 0;
$2 = 0;
break label$1;
}
label$15: {
if (($26 | 0) > 0) {
$10 = $19;
$9 = $16;
$13 = $9 << 1 | $10 >>> 31;
$1 = $13;
$13 = $17;
$12 = $13 >>> 31 | 0;
$13 = $10 << 1;
$19 = $12 | $13;
$10 = 0;
$9 = $10;
$10 = $1;
$9 = $9 | $10;
$16 = $9;
$9 = $8;
$13 = $9 & 65535;
$12 = 0;
$10 = $7;
$20 = $12 | $10;
$9 = $26;
$10 = $9 << 16;
$9 = $10;
$10 = $13;
$9 = $9 | $10;
$18 = $9;
$10 = $22;
$7 = $10 << 1;
$9 = $17;
$13 = $9 << 1 | $10 >>> 31;
$10 = $13;
break label$15;
}
if (($26 | 0) <= -113) {
$1 = 0;
$2 = 0;
break label$1;
}
$13 = $4;
$10 = $8;
__lshrti3($15 - -64 | 0, $3, $13, $7, $10, 1 - $26 | 0);
$10 = $43;
$13 = $42;
__ashlti3($15 + 48 | 0, $39, $10, $36, $13, $26 + 112 | 0);
$9 = $15;
$13 = HEAP32[$9 + 64 >> 2];
$3 = $13;
$10 = HEAP32[$9 + 68 >> 2];
$4 = $10;
$10 = HEAP32[$9 + 72 >> 2];
$20 = $10;
$13 = HEAP32[$9 + 76 >> 2];
$18 = $13;
$1 = $9 + 32 | 0;
$13 = $6;
$10 = $34;
$9 = $4;
$12 = $18;
__multi3($1, $5, $13, $31, $10, $3, $9, $20, $12);
$10 = $15;
$12 = HEAP32[$10 + 56 >> 2];
$11 = $12;
$9 = HEAP32[$10 + 60 >> 2];
$8 = $9;
$12 = HEAP32[$10 + 44 >> 2];
$9 = HEAP32[$10 + 40 >> 2];
$14 = $9 << 1;
$9 = $12 << 1 | $9 >>> 31;
$7 = $9;
$12 = $15;
$9 = HEAP32[$12 + 32 >> 2];
$1 = $9;
$10 = HEAP32[$12 + 36 >> 2];
$2 = $10;
$13 = $10 >>> 31 | 0;
$9 = 0;
$12 = $9;
$9 = $7;
$12 = $9 | $12;
$7 = $12;
$9 = $11;
$10 = $14;
$13 = $10 | $13;
$11 = $9 - $13 | 0;
$12 = $8;
$10 = $7;
$14 = $10 + ($9 >>> 0 < $13 >>> 0) | 0;
$14 = $12 - $14 | 0;
$16 = $14;
$12 = $15;
$14 = HEAP32[$12 + 48 >> 2];
$7 = $14;
$9 = HEAP32[$12 + 52 >> 2];
$8 = $9;
$12 = $1;
$1 = $12 << 1;
$9 = $2;
$14 = $9 << 1 | $12 >>> 31;
$2 = $14;
$12 = $14;
$14 = $8;
$9 = $7;
$13 = $1;
$12 = ($12 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $12 >>> 0 > $14 >>> 0;
$10 = $11 - $12 | 0;
$19 = $10;
$9 = $16;
$11 = $11 >>> 0 < $12 >>> 0;
$11 = $9 - $11 | 0;
$16 = $11;
$9 = $7;
$12 = $1;
$14 = $9 - $12 | 0;
$7 = $14;
$11 = $8;
$13 = $2;
$10 = $13 + ($9 >>> 0 < $12 >>> 0) | 0;
$10 = $11 - $10 | 0;
}
$8 = $10;
$10 = $6;
$9 = $34;
__multi3($15 + 16 | 0, $5, $10, $31, $9, 3, 0, 0, 0);
__multi3($15, $5, $10, $31, $9, 5, 0, 0, 0);
$12 = $7;
$11 = $3;
$1 = $11 & 1;
$10 = $1;
$13 = $12 + $10 | 0;
$11 = $8;
$9 = 0;
$2 = $9;
$14 = $11 + $9 | 0;
$7 = $13;
$10 = $6;
$14 = $13 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
$8 = $14;
$9 = $13;
$12 = $5;
$6 = ($10 | 0) == ($14 | 0) & $9 >>> 0 > $12 >>> 0 | $10 >>> 0 < $14 >>> 0;
$9 = $2;
$12 = $1;
$10 = $13;
$14 = ($14 | 0) == ($9 | 0) & $12 >>> 0 > $10 >>> 0 | $9 >>> 0 > $14 >>> 0;
$12 = $16;
$10 = $19;
$11 = $10 + $14 | 0;
$13 = $11 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
$1 = $11;
$10 = $34;
$2 = $13;
$14 = $31;
$5 = ($10 | 0) == ($13 | 0) & $11 >>> 0 > $14 >>> 0 | $10 >>> 0 < $13 >>> 0;
$12 = $13;
$13 = $10;
$10 = $31;
$13 = ($11 | 0) == ($10 | 0) & ($13 | 0) == ($12 | 0) ? $6 : $5;
$14 = $4;
$11 = $14;
$10 = $3;
$9 = $10 + $13 | 0;
$11 = $9 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
$5 = $9;
$6 = $11;
$10 = $14;
$13 = $3;
$10 = ($11 | 0) == ($10 | 0) & $13 >>> 0 > $9 >>> 0 | $10 >>> 0 > $11 >>> 0;
$14 = $18;
$9 = $14;
$13 = $20;
$12 = $10 + $13 | 0;
$9 = $12 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
$18 = $12;
$16 = $9;
$12 = $9 >>> 0 < 2147418112;
$10 = $15;
$14 = HEAP32[$10 + 16 >> 2];
$13 = $14;
$9 = HEAP32[$10 + 20 >> 2];
$14 = $9;
$9 = $8;
$10 = $7;
$11 = ($9 | 0) == ($14 | 0) & $10 >>> 0 > $13 >>> 0 | $9 >>> 0 > $14 >>> 0;
$13 = $15;
$10 = HEAP32[$13 + 24 >> 2];
$3 = $10;
$9 = HEAP32[$13 + 28 >> 2];
$4 = $9;
$9 = $2;
$10 = $4;
$13 = $1;
$14 = $3;
$4 = ($9 | 0) == ($10 | 0) & $13 >>> 0 > $14 >>> 0 | $9 >>> 0 > $10 >>> 0;
$13 = $9;
$14 = $1;
$9 = $10;
$10 = $3;
$9 = (($14 | 0) == ($10 | 0) & ($9 | 0) == ($13 | 0) ? $11 : $4) & $12;
$14 = $6;
$12 = $14;
$10 = $5;
$11 = $9 + $10 | 0;
$12 = $11 >>> 0 < $9 >>> 0 ? $12 + 1 | 0 : $12;
$3 = $11;
$4 = $12;
$10 = $14;
$9 = $5;
$10 = ($12 | 0) == ($10 | 0) & $9 >>> 0 > $11 >>> 0 | $10 >>> 0 > $12 >>> 0;
$14 = $16;
$11 = $14;
$9 = $18;
$13 = $9 + $10 | 0;
$5 = $13;
$11 = $10 >>> 0 > $13 >>> 0 ? $11 + 1 | 0 : $11;
$6 = $11;
$10 = $15;
$14 = HEAP32[$10 >> 2];
$9 = $14;
$11 = HEAP32[$10 + 4 >> 2];
$14 = $11;
$11 = $8;
$10 = $7;
$12 = ($11 | 0) == ($14 | 0) & $9 >>> 0 < $10 >>> 0 | $11 >>> 0 > $14 >>> 0;
$9 = $15;
$10 = HEAP32[$9 + 8 >> 2];
$7 = $10;
$11 = HEAP32[$9 + 12 >> 2];
$8 = $11;
$11 = $2;
$10 = $8;
$9 = $1;
$14 = $7;
$2 = ($11 | 0) == ($10 | 0) & $9 >>> 0 > $14 >>> 0 | $10 >>> 0 < $11 >>> 0;
$9 = $11;
$14 = $1;
$11 = $10;
$10 = $7;
$11 = (($14 | 0) == ($10 | 0) & ($9 | 0) == ($11 | 0) ? $12 : $2) & $6 >>> 0 < 2147418112;
$10 = $3;
$12 = $11 + $10 | 0;
$1 = $12;
$14 = $4;
$13 = $14;
$10 = $13;
$13 = $11 >>> 0 > $12 >>> 0 ? $10 + 1 | 0 : $10;
$2 = $13;
$11 = $3;
$10 = ($10 | 0) == ($13 | 0) & $11 >>> 0 > $12 >>> 0 | $10 >>> 0 > $13 >>> 0;
$14 = $6;
$12 = $14;
$11 = $5;
$9 = $11 + $10 | 0;
$12 = $9 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
$10 = $24;
$24 = $10 | $9;
$11 = $25;
$11 = $12 | $11;
$25 = $11;
}
$14 = $0;
HEAP32[$14 >> 2] = $1;
$11 = $2;
HEAP32[$14 + 4 >> 2] = $11;
HEAP32[$14 + 8 >> 2] = $24;
$11 = $25;
HEAP32[$14 + 12 >> 2] = $11;
__stack_pointer = $15 + 336 | 0;
}
function HanimAvatar__createARPFacePoints_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$1 = __stack_pointer - 496 | 0;
__stack_pointer = $1;
$5 = HEAP32[17100];
$4 = XMLCell__element_28char_20const__29($5, 1353);
$5 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$9 = invoke_iii(255, $5 | 0, 100) | 0;
$10 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($10 | 0) != 1) {
HEAP32[$0 + 488 >> 2] = $9;
$2 = HanimAvatar__LookupSite_28char_20const__29_20const($0, 11958);
$5 = HanimAvatar__LookupSite_28char_20const__29_20const($0, 11363);
if ($5 ? $2 : 0) {
break label$2;
}
eprintf_28char_20const__2c_20____29(41049, 0);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($1 | 0);
abort();
}
$10 = Vector__Vector_28Vector_20const__29_1($1 + 480 | 0, Site__getGlobalPosition_28_29($2));
$9 = Vector__Vector_28Vector_20const__29_1($1 + 464 | 0, Site__getGlobalPosition_28_29($5));
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29(Vector__Vector_28_29($1 + 448 | 0), $10, $9);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_fround(Vector__x_28_29_20const($10) - Vector__x_28_29_20const($9)) * Math_fround(2.5)), 
HEAPF32[wasm2js_i32$0 + 380 >> 2] = wasm2js_f32$0;
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12238, 36);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11986, 37);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11391, 38);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12526, 39);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11878, 40);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11275, 41);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11891, 42);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11296, 43);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12478, 7);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12478, 46);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12462, 8);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12075, 34);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11480, 35);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12501, 44);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12024, 0);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11429, 1);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12392, 2);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12453, 4);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12035, 3);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11440, 5);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12439, 62);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12377, 65);
HanimAvatar__GetFacePoint_28short_29($1 + 432 | 0, $0, 3);
$3 = Vector__x_28_29_20const($1 + 432 | 0);
HanimAvatar__GetFacePoint_28short_29($1 + 416 | 0, $0, 5);
$6 = Vector__x_28_29_20const($1 + 416 | 0);
HanimAvatar__GetFacePoint_28short_29($1 + 432 | 0, $0, 62);
$3 = Math_fround(Math_fround($3 - $6) * Math_fround(.5));
HanimAvatar__SetFacePointPair_28short_2c_20short_2c_20Vector_20const__2c_20float_29($0, 61, 63, $1 + 432 | 0, Math_fround($3 * Math_fround(.8999999761581421)));
HanimAvatar__GetFacePoint_28short_29($1 + 432 | 0, $0, 65);
HanimAvatar__SetFacePointPair_28short_2c_20short_2c_20Vector_20const__2c_20float_29($0, 64, 66, $1 + 432 | 0, $3);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12401, 6);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11967, 9);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11372, 10);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12492, 48);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12054, 53);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11459, 55);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 432 | 0, HEAP32[$0 + 488 >> 2], 53);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 416 | 0, HEAP32[$0 + 488 >> 2], 55);
$3 = Vector__x_28_29_20const($1 + 432 | 0);
$6 = Vector__x_28_29_20const($1 + 416 | 0);
$7 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 7116, Math_fround(.25));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 400 | 0, HEAP32[$0 + 488 >> 2], 48);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 384 | 0, HEAP32[$0 + 488 >> 2], 2);
$5 = Vector__Vector_28_29($1 + 368 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($5, $1 + 400 | 0, $1 + 384 | 0);
$2 = Vector__Vector_28_29($1 + 352 | 0);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($2, $1 + 400 | 0, $1 + 384 | 0);
Vector__setScale_28float_29($2, Math_fround(.20000000298023224));
Vector__setAdd_28Vector_20const__29($5, $2);
$3 = Math_fround($7 * Math_fround(Math_fround($3 - $6) * Math_fround(.5)));
HanimAvatar__SetFacePointPair_28short_2c_20short_2c_20Vector_20const__2c_20float_29($0, 49, 50, $1 + 400 | 0, $3);
HanimAvatar__SetFacePointPair_28short_2c_20short_2c_20Vector_20const__2c_20float_29($0, 51, 52, $5, Math_fround($3 * Math_fround(.5)));
$5 = Vector__Vector_28_29($1 + 336 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($5, $1 + 432 | 0, $1 + 416 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 54, $5);
$7 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 6178, Math_fround(.10000000149011612));
$3 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 2592, Math_fround(.44999998807907104));
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 6991, Math_fround(.05000000074505806));
$4 = Vector__Vector_28_29($1 + 320 | 0);
$5 = Vector__Vector_28_29($1 + 304 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 53);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 49);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($5, $1 + 288 | 0, $1 + 272 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 54);
$7 = Math_fround(-$7);
Vector__setMidPoint_28Vector_20const__2c_20float_29($5, $1 + 288 | 0, $7);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 53);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 54);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($4, $1 + 288 | 0, $1 + 272 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 49);
Vector__setMidPoint_28Vector_20const__2c_20float_29($4, $1 + 288 | 0, $3);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 2);
Vector__setMidPoint_28Vector_20const__2c_20float_29($4, $1 + 288 | 0, $6);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 56, $4);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 59, $5);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 55);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 50);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($5, $1 + 288 | 0, $1 + 272 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 54);
Vector__setMidPoint_28Vector_20const__2c_20float_29($5, $1 + 288 | 0, $7);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 55);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 54);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($4, $1 + 288 | 0, $1 + 272 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 50);
Vector__setMidPoint_28Vector_20const__2c_20float_29($4, $1 + 288 | 0, $3);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 2);
Vector__setMidPoint_28Vector_20const__2c_20float_29($4, $1 + 288 | 0, $6);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 58, $4);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 60, $5);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 48);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 54);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($4, $1 + 288 | 0, $1 + 272 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 57, $4);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 288 | 0, HEAP32[$0 + 488 >> 2], 3);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 272 | 0, HEAP32[$0 + 488 >> 2], 5);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 256 | 0, HEAP32[$0 + 488 >> 2], 54);
$3 = Vector__x_28_29_20const($1 + 288 | 0);
$6 = Vector__x_28_29_20const($1 + 272 | 0);
$2 = HanimAvatar__LookupSite_28char_20const__29_20const($0, 11949);
HEAP8[69852] = !$2;
$3 = Math_fround($3 - $6);
label$4: {
if ($2) {
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11949, 11);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11354, 12);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12011, 13);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12426, 14);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11416, 15);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11998, 16);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12413, 17);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11403, 18);
break label$4;
}
$6 = Math_fround(Math_fround(Vector__x_28_29_20const($1 + 288 | 0) + Vector__x_28_29_20const($1 + 272 | 0)) * Math_fround(.5));
$2 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 240 | 0, Math_fround($3 + $6), Math_fround(Math_fround(Math_fround(Math_fround(Vector__y_28_29_20const($1 + 288 | 0) + Vector__y_28_29_20const($1 + 272 | 0)) + Vector__y_28_29_20const($1 + 256 | 0)) + Vector__y_28_29_20const($1 + 256 | 0)) * Math_fround(.25)), Math_fround(Math_fround(Math_fround(Math_fround(Vector__z_28_29_20const($1 + 288 | 0) + Vector__z_28_29_20const($1 + 272 | 0)) + Vector__z_28_29_20const($1 + 256 | 0)) + Vector__z_28_29_20const($1 + 256 | 0)) * Math_fround(.25)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 11, $2);
Vector__set_x_28float_29($2, Math_fround($6 - $3));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 12, $2);
Vector__set_x_28float_29($2, $6);
$6 = Math_fround($3 * Math_fround(.5));
$7 = Math_fround(HEAPF32[$0 + 424 >> 2] * Math_fround(.5));
$11 = Math_fround($7 + HEAPF32[$0 + 416 >> 2]);
$8 = HEAPF32[$0 + 428 >> 2];
$12 = Math_fround($8 + HEAPF32[$0 + 420 >> 2]);
HanimAvatar__SetFacePointTriple_28short_2c_20short_2c_20short_2c_20Vector_20const__2c_20Vector_20const__29($0, 13, 14, 15, $2, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, $6, $11, $12));
HanimAvatar__SetFacePointTriple_28short_2c_20short_2c_20short_2c_20Vector_20const__2c_20Vector_20const__29($0, 16, 17, 18, $2, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, $6, Math_fround(-$11), $12));
HanimAvatar__SetFacePointTriple_28short_2c_20short_2c_20short_2c_20Vector_20const__2c_20Vector_20const__29($0, 19, 20, 21, $2, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, $6, $7, $8));
HanimAvatar__SetFacePointTriple_28short_2c_20short_2c_20short_2c_20Vector_20const__2c_20Vector_20const__29($0, 22, 23, 24, $2, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, $6, Math_fround(-$7), $8));
}
MakeSiteID_28Location_29($1 + 216 | 0, 36);
HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 216 >> 2];
$3 = Math_fround($3 * Math_fround(.6000000238418579));
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 20 | 0, $3, Math_fround(.5));
MakeSiteID_28Location_29($1 + 208 | 0, 37);
HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 208 >> 2];
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 16 | 0, $3, Math_fround(.5));
MakeSiteID_28Location_29($1 + 200 | 0, 38);
HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 200 >> 2];
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 12 | 0, $3, Math_fround(.5));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 240 | 0, HEAP32[$0 + 488 >> 2], 14);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 224 | 0, HEAP32[$0 + 488 >> 2], 17);
$2 = Vector__Vector_28_29($1 + 184 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($2, $1 + 240 | 0, $1 + 224 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 25, $2);
$4 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 240 | 0, Math_fround(0), Math_fround(-HEAPF32[$0 + 416 >> 2]), Math_fround(-HEAPF32[$0 + 420 >> 2]));
$2 = Vector__Vector_28_29($1 + 224 | 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 13);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 19, $2);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 14);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 20, $2);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 15);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 21, $2);
Vector__set_z_28float_29($4, Math_fround(-Vector__z_28_29_20const($4)));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 16);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 22, $2);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 17);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 23, $2);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 18);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $4, $1 + 184 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 24, $2);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 26, $10);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 27, $9);
label$6: {
if (HanimAvatar__LookupSite_28char_20const__29_20const($0, 11904)) {
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11904, 28);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11309, 29);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11934, 30);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11339, 31);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11919, 32);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11324, 33);
break label$6;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(35373, 0);
$2 = Vector__Vector_28_29($1 + 240 | 0);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $10, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(0), Math_fround(-.009999999776482582), Math_fround(.009999999776482582)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 28, $2);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $9, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(0), Math_fround(-.009999999776482582), Math_fround(.009999999776482582)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 29, $2);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $10, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(0), Math_fround(.009999999776482582), Math_fround(.009999999776482582)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 30, $2);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $9, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(0), Math_fround(.009999999776482582), Math_fround(.009999999776482582)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 31, $2);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $10, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(.019999999552965164), Math_fround(0), Math_fround(0)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 32, $2);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2, $9, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(-.019999999552965164), Math_fround(0), Math_fround(0)));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 33, $2);
}
DynamicArray1_Vector___getElement_28int_29_20const($1 + 240 | 0, HEAP32[$0 + 488 >> 2], 9);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 224 | 0, HEAP32[$0 + 488 >> 2], 10);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 46);
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 45, Math_fround(+Vector__x_28_29_20const($1 + 240 | 0) * .707 + +Vector__x_28_29_20const($1 + 184 | 0) * .707), Vector__y_28_29_20const($1 + 184 | 0), Math_fround(+Vector__z_28_29_20const($1 + 240 | 0) * .707 + +Vector__z_28_29_20const($1 + 184 | 0) * .707));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 47, Math_fround(+Vector__x_28_29_20const($1 + 224 | 0) * .707 + +Vector__x_28_29_20const($1 + 184 | 0) * .707), Vector__y_28_29_20const($1 + 184 | 0), Math_fround(+Vector__z_28_29_20const($1 + 224 | 0) * .707 + +Vector__z_28_29_20const($1 + 184 | 0) * .707));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 184 | 0, HEAP32[$0 + 488 >> 2], 3);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 168 | 0, HEAP32[$0 + 488 >> 2], 5);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 152 | 0, HEAP32[$0 + 488 >> 2], 4);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 136 | 0, HEAP32[$0 + 488 >> 2], 65);
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 64, Vector__x_28_29_20const($1 + 184 | 0), Vector__y_28_29_20const($1 + 136 | 0), Math_fround(Math_fround(Vector__z_28_29_20const($1 + 184 | 0) + Vector__z_28_29_20const($1 + 136 | 0)) - Vector__z_28_29_20const($1 + 152 | 0)));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 66, Vector__x_28_29_20const($1 + 168 | 0), Vector__y_28_29_20const($1 + 136 | 0), Math_fround(Math_fround(Vector__z_28_29_20const($1 + 168 | 0) + Vector__z_28_29_20const($1 + 136 | 0)) - Vector__z_28_29_20const($1 + 152 | 0)));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 120 | 0, HEAP32[$0 + 488 >> 2], 0);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 104 | 0, HEAP32[$0 + 488 >> 2], 1);
$2 = Vector__Vector_28Vector_20const__29($1 + 88 | 0, $1 + 184 | 0);
Vector__setMidPoint_28Vector_20const__29($2, $1 + 120 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 67, $2);
$2 = Vector__Vector_28Vector_20const__29($1 + 72 | 0, $1 + 168 | 0);
Vector__setMidPoint_28Vector_20const__29($2, $1 + 104 | 0);
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 68, $2);
$4 = HEAPU8[69852];
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11468, 76);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12063, 84);
label$8: {
if (!$4) {
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11380, 73);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11975, 81);
break label$8;
}
DynamicArray1_Vector___getElement_28int_29_20const($1 + 56 | 0, HEAP32[$0 + 488 >> 2], 84);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 40 | 0, HEAP32[$0 + 488 >> 2], 9);
$2 = Vector__Vector_28_29($1 + 24 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($2, $1 + 40 | 0, $1 + 56 | 0, Math_fround(-1));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 81, $2);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 56 | 0, HEAP32[$0 + 488 >> 2], 76);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 40 | 0, HEAP32[$0 + 488 >> 2], 10);
$2 = Vector__Vector_28_29($1 + 24 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($2, $1 + 40 | 0, $1 + 56 | 0, Math_fround(-1));
HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, 73, $2);
}
$6 = HEAPF32[$0 + 480 >> 2];
$3 = HEAPF32[$0 + 484 >> 2];
DynamicArray1_Vector___getElement_28int_29_20const($1 + 56 | 0, HEAP32[$0 + 488 >> 2], 73);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 40 | 0, HEAP32[$0 + 488 >> 2], 76);
$7 = Vector__y_28_29_20const($1 + 56 | 0);
$8 = Vector__y_28_29_20const($1 + 224 | 0);
$2 = $0 + 476 | 0;
$11 = HEAPF32[$2 >> 2];
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 69, Math_fround($3 + Vector__x_28_29_20const($1 + 56 | 0)), Vector__y_28_29_20const($1 + 56 | 0), Vector__z_28_29_20const($1 + 56 | 0));
$7 = Math_fround($11 * Math_fround($7 - $8));
$8 = Math_fround($7 * Math_fround(-.6000000238418579));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 70, Math_fround($3 + Vector__x_28_29_20const($1 + 56 | 0)), Vector__y_28_29_20const($1 + 56 | 0), Math_fround($8 + Vector__z_28_29_20const($1 + 56 | 0)));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 74, Math_fround(Math_fround($3 + Vector__x_28_29_20const($1 + 56 | 0)) - $6), Vector__y_28_29_20const($1 + 56 | 0), Math_fround($8 + Vector__z_28_29_20const($1 + 56 | 0)));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 71, Math_fround($3 + Vector__x_28_29_20const($1 + 224 | 0)), Vector__y_28_29_20const($1 + 224 | 0), Math_fround(Vector__z_28_29_20const($1 + 224 | 0) - $7));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 75, Math_fround(Math_fround($3 + Vector__x_28_29_20const($1 + 224 | 0)) - $6), Vector__y_28_29_20const($1 + 224 | 0), Math_fround(Vector__z_28_29_20const($1 + 224 | 0) - $7));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 72, Math_fround($3 + Vector__x_28_29_20const($1 + 40 | 0)), Vector__y_28_29_20const($1 + 40 | 0), Vector__z_28_29_20const($1 + 40 | 0));
DynamicArray1_Vector___getElement_28int_29_20const($1 + 56 | 0, HEAP32[$0 + 488 >> 2], 81);
DynamicArray1_Vector___getElement_28int_29_20const($1 + 40 | 0, HEAP32[$0 + 488 >> 2], 84);
$7 = Vector__y_28_29_20const($1 + 56 | 0);
$8 = Vector__y_28_29_20const($1 + 240 | 0);
$11 = HEAPF32[$0 + 476 >> 2];
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 77, Math_fround(Vector__x_28_29_20const($1 + 56 | 0) - $3), Vector__y_28_29_20const($1 + 56 | 0), Vector__z_28_29_20const($1 + 56 | 0));
$7 = Math_fround($11 * Math_fround($7 - $8));
$8 = Math_fround($7 * Math_fround(-.6000000238418579));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 78, Math_fround(Vector__x_28_29_20const($1 + 56 | 0) - $3), Vector__y_28_29_20const($1 + 56 | 0), Math_fround($8 + Vector__z_28_29_20const($1 + 56 | 0)));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 82, Math_fround($6 + Math_fround(Vector__x_28_29_20const($1 + 56 | 0) - $3)), Vector__y_28_29_20const($1 + 56 | 0), Math_fround($8 + Vector__z_28_29_20const($1 + 56 | 0)));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 79, Math_fround(Vector__x_28_29_20const($1 + 240 | 0) - $3), Vector__y_28_29_20const($1 + 240 | 0), Math_fround(Vector__z_28_29_20const($1 + 240 | 0) - $7));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 83, Math_fround($6 + Math_fround(Vector__x_28_29_20const($1 + 240 | 0) - $3)), Vector__y_28_29_20const($1 + 240 | 0), Math_fround(Vector__z_28_29_20const($1 + 240 | 0) - $7));
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, 80, Math_fround(Vector__x_28_29_20const($1 + 40 | 0) - $3), Vector__y_28_29_20const($1 + 40 | 0), Vector__z_28_29_20const($1 + 40 | 0));
$2 = 0;
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 12044, 86);
HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, 11449, 85);
$5 = 1;
while (1) {
$4 = HEAP32[$0 + 488 >> 2];
if (HEAP32[$4 + 12 >> 2] <= ($2 | 0)) {
if (!($5 & 1)) {
break label$1;
}
} else {
label$14: {
if (!HEAPU8[67600]) {
break label$14;
}
DynamicArray1_Vector___getElement_28int_29_20const($1 + 56 | 0, $4, $2);
if (!Vector__isZero_28_29_20const($1 + 56 | 0)) {
break label$14;
}
HEAP32[$1 >> 2] = $2;
eprintf_28char_20const__2c_20____29(42263, $1);
$5 = 0;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
__stack_pointer = $1 + 496 | 0;
return;
}
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 15) | 0, 60484, 0);
abort();
}
function decfloat($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$7 = __stack_pointer - 8976 | 0;
__stack_pointer = $7;
$28 = $3 + $4 | 0;
$34 = 0 - $28 | 0;
label$1: {
label$2: {
while (1) {
label$4: {
if (($2 | 0) != 48) {
if (($2 | 0) != 46) {
break label$1;
}
$2 = HEAP32[$1 + 4 >> 2];
if (($2 | 0) == HEAP32[$1 + 104 >> 2]) {
break label$4;
}
HEAP32[$1 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$2;
}
$2 = HEAP32[$1 + 4 >> 2];
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
$19 = 1;
HEAP32[$1 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
} else {
$19 = 1;
$2 = __shgetc($1);
}
continue;
}
break;
}
$2 = __shgetc($1);
}
$20 = 1;
if (($2 | 0) != 48) {
break label$1;
}
while (1) {
$12 = $15;
$8 = $12 - 1 | 0;
$15 = $8;
$10 = !$12;
$10 = $16 - $10 | 0;
$16 = $10;
$2 = HEAP32[$1 + 4 >> 2];
label$9: {
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$1 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$9;
}
$2 = __shgetc($1);
}
if (($2 | 0) == 48) {
continue;
}
break;
}
$19 = 1;
}
HEAP32[$7 + 784 >> 2] = 0;
label$11: {
label$12: {
$13 = ($2 | 0) == 46;
$17 = $2 - 48 | 0;
label$13: {
label$14: {
label$15: {
label$16: {
if ($13 | $17 >>> 0 <= 9) {
while (1) {
label$20: {
if ($13 & 1) {
if (!$20) {
$15 = $14;
$10 = $18;
$16 = $10;
$20 = 1;
break label$20;
}
$13 = !$19;
break label$16;
}
$10 = $18;
$8 = $10;
$9 = $14 + 1 | 0;
$8 = $9 ? $8 : $8 + 1 | 0;
$14 = $9;
$18 = $8;
if (($21 | 0) <= 2044) {
$19 = ($2 | 0) == 48;
$27 = $19 ? $27 : $14;
$13 = ($7 + 784 | 0) + ($21 << 2) | 0;
$17 = $24 ? (Math_imul(HEAP32[$13 >> 2], 10) + $2 | 0) - 48 | 0 : $17;
HEAP32[$13 >> 2] = $17;
$19 = 1;
$2 = $24 + 1 | 0;
$8 = $2;
$2 = ($2 | 0) == 9;
$24 = $2 ? 0 : $8;
$21 = $2 + $21 | 0;
break label$20;
}
if (($2 | 0) == 48) {
break label$20;
}
HEAP32[$7 + 8960 >> 2] = HEAP32[$7 + 8960 >> 2] | 1;
$27 = 18396;
}
$2 = HEAP32[$1 + 4 >> 2];
label$26: {
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$1 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$26;
}
$2 = __shgetc($1);
}
$13 = ($2 | 0) == 46;
$17 = $2 - 48 | 0;
if ($13 | $17 >>> 0 < 10) {
continue;
}
break;
}
}
$12 = $20;
$11 = $12 ? $15 : $14;
$15 = $11;
$8 = $16;
$10 = $12 ? $8 : $18;
$16 = $10;
if (!(!$19 | ($2 & -33) != 69)) {
$10 = scanexp($1, $6);
$25 = $10;
$11 = i64toi32_i32$HIGH_BITS;
$22 = $11;
$12 = $25;
label$29: {
if ($12 | ($11 | 0) != -2147483648) {
break label$29;
}
if (!$6) {
break label$13;
}
$25 = 0;
$22 = 0;
$8 = $1;
$12 = HEAP32[$8 + 112 >> 2];
$11 = HEAP32[$1 + 116 >> 2];
if (($11 | 0) < 0) {
break label$29;
}
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
}
if (!$19) {
break label$14;
}
$11 = $22;
$8 = $16;
$9 = $11 + $8 | 0;
$12 = $25;
$10 = $15;
$22 = $12 + $10 | 0;
$9 = $12 >>> 0 > $22 >>> 0 ? $9 + 1 | 0 : $9;
$15 = $22;
$16 = $9;
break label$12;
}
$13 = !$19;
if (($2 | 0) < 0) {
break label$15;
}
}
$8 = $1;
$9 = HEAP32[$8 + 112 >> 2];
$10 = HEAP32[$1 + 116 >> 2];
if (($10 | 0) < 0) {
break label$15;
}
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
}
if (!$13) {
break label$12;
}
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
$14 = 0;
$18 = 0;
__shlim($1, 0, 0);
$8 = 0;
break label$11;
}
$1 = HEAP32[$7 + 784 >> 2];
if (!$1) {
__extenddftf2($7, +($5 | 0) * 0);
$8 = HEAP32[$7 >> 2];
$14 = $8;
$10 = HEAP32[$7 + 4 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 12 >> 2];
$23 = $8;
$10 = HEAP32[$7 + 8 >> 2];
$8 = $10;
break label$11;
}
$9 = $14;
$12 = $15;
$8 = $16;
$10 = $18;
$2 = ($9 | 0) != ($12 | 0) | ($8 | 0) != ($10 | 0);
$12 = $18;
if (!($2 | ($9 >>> 0 > 9 & ($12 | 0) >= 0 | ($12 | 0) > 0) | ($1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0))) {
__floatsitf($7 + 48 | 0, $5);
__floatunsitf($7 + 32 | 0, $1);
$9 = HEAP32[$7 + 48 >> 2];
$6 = $9;
$12 = HEAP32[$7 + 52 >> 2];
$2 = $12;
$12 = HEAP32[$7 + 56 >> 2];
$5 = $12;
$9 = HEAP32[$7 + 60 >> 2];
$1 = $9;
$9 = HEAP32[$7 + 32 >> 2];
$4 = $9;
$12 = HEAP32[$7 + 36 >> 2];
$10 = $12;
$12 = HEAP32[$7 + 40 >> 2];
$3 = $12;
$9 = HEAP32[$7 + 44 >> 2];
$8 = $9;
$9 = $2;
$12 = $1;
__multf3($7 + 16 | 0, $6, $9, $5, $12, $4, $10, $3, $8);
$8 = HEAP32[$7 + 16 >> 2];
$14 = $8;
$10 = HEAP32[$7 + 20 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 28 >> 2];
$23 = $8;
$10 = HEAP32[$7 + 24 >> 2];
$8 = $10;
break label$11;
}
$9 = $15;
$12 = ($4 | 0) / -2 | 0;
$10 = $16;
if ($9 >>> 0 > $12 >>> 0 & ($10 | 0) >= 0 | ($10 | 0) > 0) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__floatsitf($7 + 96 | 0, $5);
$12 = HEAP32[$7 + 96 >> 2];
$3 = $12;
$12 = HEAP32[$7 + 108 >> 2];
$1 = $12;
$8 = HEAP32[$7 + 100 >> 2];
$12 = $8;
$8 = HEAP32[$7 + 104 >> 2];
$2 = $8;
$8 = $1;
__multf3($7 + 80 | 0, $3, $12, $2, $8, -1, -1, -1, 2147418111);
$10 = HEAP32[$7 + 80 >> 2];
$3 = $10;
$10 = HEAP32[$7 + 92 >> 2];
$1 = $10;
$9 = HEAP32[$7 + 84 >> 2];
$10 = $9;
$9 = HEAP32[$7 + 88 >> 2];
$2 = $9;
$9 = $1;
__multf3($7 - -64 | 0, $3, $10, $2, $9, -1, -1, -1, 2147418111);
$12 = HEAP32[$7 + 64 >> 2];
$14 = $12;
$8 = HEAP32[$7 + 68 >> 2];
$18 = $8;
$12 = HEAP32[$7 + 76 >> 2];
$23 = $12;
$8 = HEAP32[$7 + 72 >> 2];
break label$11;
}
$8 = $4 - 226 | 0;
$12 = $8 >> 31;
$9 = $8;
$10 = $15;
$8 = $16;
if ($9 >>> 0 > $10 >>> 0 & ($8 | 0) <= ($12 | 0) | ($12 | 0) > ($8 | 0)) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__floatsitf($7 + 144 | 0, $5);
$9 = HEAP32[$7 + 144 >> 2];
$3 = $9;
$9 = HEAP32[$7 + 156 >> 2];
$1 = $9;
$12 = HEAP32[$7 + 148 >> 2];
$9 = $12;
$12 = HEAP32[$7 + 152 >> 2];
$2 = $12;
$12 = $1;
__multf3($7 + 128 | 0, $3, $9, $2, $12, 0, 0, 0, 65536);
$8 = HEAP32[$7 + 128 >> 2];
$3 = $8;
$8 = HEAP32[$7 + 140 >> 2];
$1 = $8;
$10 = HEAP32[$7 + 132 >> 2];
$8 = $10;
$10 = HEAP32[$7 + 136 >> 2];
$2 = $10;
$10 = $1;
__multf3($7 + 112 | 0, $3, $8, $2, $10, 0, 0, 0, 65536);
$9 = HEAP32[$7 + 112 >> 2];
$14 = $9;
$12 = HEAP32[$7 + 116 >> 2];
$18 = $12;
$9 = HEAP32[$7 + 124 >> 2];
$23 = $9;
$12 = HEAP32[$7 + 120 >> 2];
$8 = $12;
break label$11;
}
if ($24) {
if (($24 | 0) <= 8) {
$2 = ($7 + 784 | 0) + ($21 << 2) | 0;
$1 = HEAP32[$2 >> 2];
while (1) {
$1 = Math_imul($1, 10);
$24 = $24 + 1 | 0;
if (($24 | 0) != 9) {
continue;
}
break;
}
HEAP32[$2 >> 2] = $1;
}
$21 = $21 + 1 | 0;
}
label$37: {
$20 = $15;
if (($27 | 0) > ($20 | 0) | ($27 | 0) >= 9 | ($20 | 0) > 17) {
break label$37;
}
if (($20 | 0) == 9) {
__floatsitf($7 + 192 | 0, $5);
__floatunsitf($7 + 176 | 0, HEAP32[$7 + 784 >> 2]);
$9 = HEAP32[$7 + 192 >> 2];
$6 = $9;
$12 = HEAP32[$7 + 196 >> 2];
$2 = $12;
$12 = HEAP32[$7 + 200 >> 2];
$5 = $12;
$9 = HEAP32[$7 + 204 >> 2];
$1 = $9;
$9 = HEAP32[$7 + 176 >> 2];
$4 = $9;
$12 = HEAP32[$7 + 180 >> 2];
$10 = $12;
$12 = HEAP32[$7 + 184 >> 2];
$3 = $12;
$9 = HEAP32[$7 + 188 >> 2];
$8 = $9;
$9 = $2;
$12 = $1;
__multf3($7 + 160 | 0, $6, $9, $5, $12, $4, $10, $3, $8);
$8 = HEAP32[$7 + 160 >> 2];
$14 = $8;
$10 = HEAP32[$7 + 164 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 172 >> 2];
$23 = $8;
$10 = HEAP32[$7 + 168 >> 2];
$8 = $10;
break label$11;
}
if (($20 | 0) <= 8) {
__floatsitf($7 + 272 | 0, $5);
__floatunsitf($7 + 256 | 0, HEAP32[$7 + 784 >> 2]);
$8 = HEAP32[$7 + 272 >> 2];
$6 = $8;
$10 = HEAP32[$7 + 276 >> 2];
$2 = $10;
$10 = HEAP32[$7 + 280 >> 2];
$5 = $10;
$8 = HEAP32[$7 + 284 >> 2];
$1 = $8;
$8 = HEAP32[$7 + 256 >> 2];
$4 = $8;
$10 = HEAP32[$7 + 260 >> 2];
$12 = $10;
$10 = HEAP32[$7 + 264 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 268 >> 2];
$9 = $8;
$8 = $2;
$10 = $1;
__multf3($7 + 240 | 0, $6, $8, $5, $10, $4, $12, $3, $9);
__floatsitf($7 + 224 | 0, HEAP32[(0 - $20 << 2) + 55456 >> 2]);
$9 = HEAP32[$7 + 240 >> 2];
$6 = $9;
$12 = HEAP32[$7 + 244 >> 2];
$2 = $12;
$12 = HEAP32[$7 + 248 >> 2];
$5 = $12;
$9 = HEAP32[$7 + 252 >> 2];
$1 = $9;
$9 = HEAP32[$7 + 224 >> 2];
$4 = $9;
$12 = HEAP32[$7 + 228 >> 2];
$10 = $12;
$12 = HEAP32[$7 + 232 >> 2];
$3 = $12;
$9 = HEAP32[$7 + 236 >> 2];
$8 = $9;
$9 = $2;
$12 = $1;
__divtf3($7 + 208 | 0, $6, $9, $5, $12, $4, $10, $3, $8);
$8 = HEAP32[$7 + 208 >> 2];
$14 = $8;
$10 = HEAP32[$7 + 212 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 220 >> 2];
$23 = $8;
$10 = HEAP32[$7 + 216 >> 2];
$8 = $10;
break label$11;
}
$2 = (Math_imul($20, -3) + $3 | 0) + 27 | 0;
$1 = HEAP32[$7 + 784 >> 2];
if ($1 >>> $2 | 0 ? ($2 | 0) <= 30 : 0) {
break label$37;
}
__floatsitf($7 + 352 | 0, $5);
__floatunsitf($7 + 336 | 0, $1);
$8 = HEAP32[$7 + 352 >> 2];
$6 = $8;
$10 = HEAP32[$7 + 356 >> 2];
$2 = $10;
$10 = HEAP32[$7 + 360 >> 2];
$5 = $10;
$8 = HEAP32[$7 + 364 >> 2];
$1 = $8;
$8 = HEAP32[$7 + 336 >> 2];
$4 = $8;
$10 = HEAP32[$7 + 340 >> 2];
$12 = $10;
$10 = HEAP32[$7 + 344 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 348 >> 2];
$9 = $8;
$8 = $2;
$10 = $1;
__multf3($7 + 320 | 0, $6, $8, $5, $10, $4, $12, $3, $9);
__floatsitf($7 + 304 | 0, HEAP32[($20 << 2) + 55384 >> 2]);
$9 = HEAP32[$7 + 320 >> 2];
$6 = $9;
$12 = HEAP32[$7 + 324 >> 2];
$2 = $12;
$12 = HEAP32[$7 + 328 >> 2];
$5 = $12;
$9 = HEAP32[$7 + 332 >> 2];
$1 = $9;
$9 = HEAP32[$7 + 304 >> 2];
$4 = $9;
$12 = HEAP32[$7 + 308 >> 2];
$10 = $12;
$12 = HEAP32[$7 + 312 >> 2];
$3 = $12;
$9 = HEAP32[$7 + 316 >> 2];
$8 = $9;
$9 = $2;
$12 = $1;
__multf3($7 + 288 | 0, $6, $9, $5, $12, $4, $10, $3, $8);
$8 = HEAP32[$7 + 288 >> 2];
$14 = $8;
$10 = HEAP32[$7 + 292 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 300 >> 2];
$23 = $8;
$10 = HEAP32[$7 + 296 >> 2];
$8 = $10;
break label$11;
}
while (1) {
$2 = $21;
$21 = $2 - 1 | 0;
if (!HEAP32[($7 + 784 | 0) + ($21 << 2) >> 2]) {
continue;
}
break;
}
$24 = 0;
$1 = ($20 | 0) % 9 | 0;
label$41: {
if (!$1) {
$13 = 0;
break label$41;
}
$13 = 0;
$6 = ($20 | 0) < 0 ? $1 + 9 | 0 : $1;
label$43: {
if (!$2) {
$2 = 0;
break label$43;
}
$19 = HEAP32[(0 - $6 << 2) + 55456 >> 2];
$14 = 1e9 / ($19 | 0) | 0;
$17 = 0;
$1 = 0;
while (1) {
$21 = ($7 + 784 | 0) + ($1 << 2) | 0;
$8 = $21;
$21 = HEAP32[$21 >> 2];
$27 = ($21 >>> 0) / ($19 >>> 0) | 0;
$17 = $27 + $17 | 0;
HEAP32[$8 >> 2] = $17;
$17 = !$17 & ($1 | 0) == ($13 | 0);
$13 = $17 ? $13 + 1 & 2047 : $13;
$20 = $17 ? $20 - 9 | 0 : $20;
$17 = Math_imul($21 - Math_imul($19, $27) | 0, $14);
$1 = $1 + 1 | 0;
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
if (!$17) {
break label$43;
}
HEAP32[($7 + 784 | 0) + ($2 << 2) >> 2] = $17;
$2 = $2 + 1 | 0;
}
$20 = ($20 - $6 | 0) + 9 | 0;
}
while (1) {
$27 = ($7 + 784 | 0) + ($13 << 2) | 0;
label$47: {
while (1) {
if ((($20 | 0) != 36 | HEAPU32[$27 >> 2] >= 10384593) & ($20 | 0) >= 36) {
break label$47;
}
$19 = $2 + 2047 | 0;
$17 = 0;
while (1) {
$1 = $19 & 2047;
$19 = ($7 + 784 | 0) + ($1 << 2) | 0;
$12 = $19;
$8 = HEAP32[$12 >> 2];
$12 = $8;
$8 = $8 >>> 3 | 0;
$9 = $12 << 29;
$10 = $17;
$11 = $9 + $10 | 0;
$12 = $8;
$22 = $9 >>> 0 > $11 >>> 0 ? $12 + 1 | 0 : $12;
$15 = $11;
$16 = $22;
$8 = $11;
if (!$16 & $8 >>> 0 < 1000000001) {
$14 = 0;
} else {
$8 = $16;
$22 = __wasm_i64_udiv($15, $8, 1e9, 0);
$14 = $22;
$8 = i64toi32_i32$HIGH_BITS;
$18 = $8;
$22 = __wasm_i64_mul($14, $8, 1e9, 0);
$8 = i64toi32_i32$HIGH_BITS;
$6 = $8;
$9 = $15;
$10 = $22;
$12 = $9 - $10 | 0;
$15 = $12;
$8 = $16;
$22 = $6;
$11 = $22 + ($9 >>> 0 < $10 >>> 0) | 0;
$11 = $8 - $11 | 0;
$16 = $11;
}
$17 = $14;
HEAP32[$19 >> 2] = $15;
$2 = ($2 - 1 & 2047) != ($1 | 0) ? $2 : ($1 | 0) == ($13 | 0) ? $2 : $15 ? $2 : $1;
$19 = $1 - 1 | 0;
if (($1 | 0) != ($13 | 0)) {
continue;
}
break;
}
$24 = $24 - 29 | 0;
if (!$17) {
continue;
}
break;
}
$13 = $13 - 1 & 2047;
if (($13 | 0) == ($2 | 0)) {
$1 = ($7 + 784 | 0) + (($2 + 2046 & 2047) << 2) | 0;
$6 = $1;
$8 = HEAP32[$1 >> 2];
$1 = $2 - 1 & 2047;
HEAP32[$6 >> 2] = $8 | HEAP32[($7 + 784 | 0) + ($1 << 2) >> 2];
$2 = $1;
}
$20 = $20 + 9 | 0;
HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2] = $17;
continue;
}
break;
}
label$54: {
label$55: while (1) {
$8 = $2 + 1 & 2047;
$6 = ($7 + 784 | 0) + (($2 - 1 & 2047) << 2) | 0;
while (1) {
$21 = ($20 | 0) > 45 ? 9 : 1;
label$57: {
while (1) {
$19 = $13;
$1 = 0;
label$59: {
while (1) {
label$61: {
$13 = $1 + $19 & 2047;
if (($13 | 0) == ($2 | 0)) {
break label$61;
}
$13 = HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2];
$17 = HEAP32[($1 << 2) + 55408 >> 2];
if ($13 >>> 0 < $17 >>> 0) {
break label$61;
}
if ($13 >>> 0 > $17 >>> 0) {
break label$59;
}
$1 = $1 + 1 | 0;
if (($1 | 0) != 4) {
continue;
}
}
break;
}
if (($20 | 0) != 36) {
break label$59;
}
$15 = 0;
$16 = 0;
$1 = 0;
$14 = 0;
$18 = 0;
while (1) {
$13 = $1 + $19 & 2047;
if (($13 | 0) == ($2 | 0)) {
$2 = $2 + 1 & 2047;
HEAP32[(($2 << 2) + $7 | 0) + 780 >> 2] = 0;
}
__floatunsitf($7 + 768 | 0, HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2]);
$11 = $16;
$9 = $18;
__multf3($7 + 752 | 0, $15, $11, $14, $9, 0, 0, 1342177280, 1075633366);
$10 = HEAP32[$7 + 752 >> 2];
$14 = $10;
$8 = HEAP32[$7 + 756 >> 2];
$12 = $8;
$8 = HEAP32[$7 + 760 >> 2];
$15 = $8;
$10 = HEAP32[$7 + 764 >> 2];
$6 = $10;
$10 = HEAP32[$7 + 768 >> 2];
$18 = $10;
$8 = HEAP32[$7 + 772 >> 2];
$9 = $8;
$8 = HEAP32[$7 + 776 >> 2];
$16 = $8;
$10 = HEAP32[$7 + 780 >> 2];
$11 = $10;
$10 = $12;
$8 = $6;
__addtf3($7 + 736 | 0, $14, $10, $15, $8, $18, $9, $16, $11);
$11 = HEAP32[$7 + 744 >> 2];
$14 = $11;
$9 = HEAP32[$7 + 748 >> 2];
$18 = $9;
$9 = HEAP32[$7 + 736 >> 2];
$15 = $9;
$11 = HEAP32[$7 + 740 >> 2];
$16 = $11;
$1 = $1 + 1 | 0;
if (($1 | 0) != 4) {
continue;
}
break;
}
__floatsitf($7 + 720 | 0, $5);
$11 = HEAP32[$7 + 720 >> 2];
$6 = $11;
$9 = HEAP32[$7 + 724 >> 2];
$8 = $9;
$9 = HEAP32[$7 + 728 >> 2];
$1 = $9;
$11 = HEAP32[$7 + 732 >> 2];
$10 = $11;
$11 = $16;
$9 = $18;
__multf3($7 + 704 | 0, $15, $11, $14, $9, $6, $8, $1, $10);
$10 = HEAP32[$7 + 712 >> 2];
$14 = $10;
$8 = HEAP32[$7 + 716 >> 2];
$18 = $8;
$15 = 0;
$16 = 0;
$8 = HEAP32[$7 + 704 >> 2];
$25 = $8;
$10 = HEAP32[$7 + 708 >> 2];
$22 = $10;
$17 = $24 + 113 | 0;
$1 = $17 - $4 | 0;
$21 = ($3 | 0) > ($1 | 0);
$13 = $21 ? ($1 | 0) > 0 ? $1 : 0 : $3;
if (($13 | 0) <= 112) {
break label$57;
}
break label$54;
}
$24 = $21 + $24 | 0;
$13 = $2;
if (($2 | 0) == ($19 | 0)) {
continue;
}
break;
}
$27 = 1e9 >>> $21 | 0;
$14 = -1 << $21 ^ -1;
$1 = 0;
$13 = $19;
while (1) {
$17 = ($7 + 784 | 0) + ($19 << 2) | 0;
$9 = $17;
$17 = HEAP32[$17 >> 2];
$1 = ($17 >>> $21 | 0) + $1 | 0;
HEAP32[$9 >> 2] = $1;
$1 = !$1 & ($13 | 0) == ($19 | 0);
$13 = $1 ? $13 + 1 & 2047 : $13;
$20 = $1 ? $20 - 9 | 0 : $20;
$1 = Math_imul($17 & $14, $27);
$19 = $19 + 1 & 2047;
if (($19 | 0) != ($2 | 0)) {
continue;
}
break;
}
if (!$1) {
continue;
}
if (($13 | 0) != ($8 | 0)) {
HEAP32[($7 + 784 | 0) + ($2 << 2) >> 2] = $1;
$2 = $8;
continue label$55;
}
HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1;
continue;
}
break;
}
break;
}
__extenddftf2($7 + 656 | 0, scalbn(1, 225 - $13 | 0));
$10 = HEAP32[$7 + 656 >> 2];
$6 = $10;
$10 = HEAP32[$7 + 668 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 660 >> 2];
$10 = $8;
$8 = HEAP32[$7 + 664 >> 2];
$4 = $8;
$8 = $3;
$9 = $22;
$11 = $18;
copysignl($7 + 688 | 0, $6, $10, $4, $8, $25, $9, $14, $11);
$11 = HEAP32[$7 + 696 >> 2];
$29 = $11;
$9 = HEAP32[$7 + 700 >> 2];
$30 = $9;
$9 = HEAP32[$7 + 688 >> 2];
$31 = $9;
$11 = HEAP32[$7 + 692 >> 2];
$32 = $11;
__extenddftf2($7 + 640 | 0, scalbn(1, 113 - $13 | 0));
$11 = HEAP32[$7 + 640 >> 2];
$4 = $11;
$9 = HEAP32[$7 + 644 >> 2];
$8 = $9;
$9 = HEAP32[$7 + 648 >> 2];
$3 = $9;
$11 = HEAP32[$7 + 652 >> 2];
$10 = $11;
$11 = $22;
$9 = $18;
fmodl($7 + 672 | 0, $25, $11, $14, $9, $4, $8, $3, $10);
$10 = HEAP32[$7 + 672 >> 2];
$15 = $10;
$8 = HEAP32[$7 + 676 >> 2];
$16 = $8;
$8 = HEAP32[$7 + 680 >> 2];
$26 = $8;
$10 = HEAP32[$7 + 684 >> 2];
$23 = $10;
$10 = $11;
$8 = $9;
$9 = $16;
$11 = $23;
__subtf3($7 + 624 | 0, $25, $10, $14, $8, $15, $9, $26, $11);
$11 = HEAP32[$7 + 624 >> 2];
$4 = $11;
$9 = HEAP32[$7 + 628 >> 2];
$8 = $9;
$9 = HEAP32[$7 + 632 >> 2];
$3 = $9;
$11 = HEAP32[$7 + 636 >> 2];
$10 = $11;
$11 = $32;
$9 = $30;
__addtf3($7 + 608 | 0, $31, $11, $29, $9, $4, $8, $3, $10);
$10 = HEAP32[$7 + 616 >> 2];
$14 = $10;
$8 = HEAP32[$7 + 620 >> 2];
$18 = $8;
$8 = HEAP32[$7 + 608 >> 2];
$25 = $8;
$10 = HEAP32[$7 + 612 >> 2];
$22 = $10;
}
$20 = $19 + 4 & 2047;
label$66: {
if (($20 | 0) == ($2 | 0)) {
break label$66;
}
$20 = HEAP32[($7 + 784 | 0) + ($20 << 2) >> 2];
label$67: {
if ($20 >>> 0 <= 499999999) {
if (!$20 & ($19 + 5 & 2047) == ($2 | 0)) {
break label$67;
}
__extenddftf2($7 + 496 | 0, +($5 | 0) * .25);
$10 = HEAP32[$7 + 496 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 500 >> 2];
$9 = $8;
$8 = HEAP32[$7 + 504 >> 2];
$2 = $8;
$10 = HEAP32[$7 + 508 >> 2];
$11 = $10;
$10 = $16;
$8 = $23;
__addtf3($7 + 480 | 0, $15, $10, $26, $8, $3, $9, $2, $11);
$11 = HEAP32[$7 + 488 >> 2];
$26 = $11;
$9 = HEAP32[$7 + 492 >> 2];
$23 = $9;
$9 = HEAP32[$7 + 480 >> 2];
$15 = $9;
$11 = HEAP32[$7 + 484 >> 2];
$16 = $11;
break label$67;
}
if (($20 | 0) != 5e8) {
__extenddftf2($7 + 592 | 0, +($5 | 0) * .75);
$11 = HEAP32[$7 + 592 >> 2];
$3 = $11;
$9 = HEAP32[$7 + 596 >> 2];
$8 = $9;
$9 = HEAP32[$7 + 600 >> 2];
$2 = $9;
$11 = HEAP32[$7 + 604 >> 2];
$10 = $11;
$11 = $16;
$9 = $23;
__addtf3($7 + 576 | 0, $15, $11, $26, $9, $3, $8, $2, $10);
$10 = HEAP32[$7 + 584 >> 2];
$26 = $10;
$8 = HEAP32[$7 + 588 >> 2];
$23 = $8;
$8 = HEAP32[$7 + 576 >> 2];
$15 = $8;
$10 = HEAP32[$7 + 580 >> 2];
$16 = $10;
break label$67;
}
$33 = +($5 | 0);
if (($19 + 5 & 2047) == ($2 | 0)) {
__extenddftf2($7 + 528 | 0, $33 * .5);
$10 = HEAP32[$7 + 528 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 532 >> 2];
$9 = $8;
$8 = HEAP32[$7 + 536 >> 2];
$2 = $8;
$10 = HEAP32[$7 + 540 >> 2];
$11 = $10;
$10 = $16;
$8 = $23;
__addtf3($7 + 512 | 0, $15, $10, $26, $8, $3, $9, $2, $11);
$11 = HEAP32[$7 + 520 >> 2];
$26 = $11;
$9 = HEAP32[$7 + 524 >> 2];
$23 = $9;
$9 = HEAP32[$7 + 512 >> 2];
$15 = $9;
$11 = HEAP32[$7 + 516 >> 2];
$16 = $11;
break label$67;
}
__extenddftf2($7 + 560 | 0, $33 * .75);
$11 = HEAP32[$7 + 560 >> 2];
$3 = $11;
$9 = HEAP32[$7 + 564 >> 2];
$8 = $9;
$9 = HEAP32[$7 + 568 >> 2];
$2 = $9;
$11 = HEAP32[$7 + 572 >> 2];
$10 = $11;
$11 = $16;
$9 = $23;
__addtf3($7 + 544 | 0, $15, $11, $26, $9, $3, $8, $2, $10);
$10 = HEAP32[$7 + 552 >> 2];
$26 = $10;
$8 = HEAP32[$7 + 556 >> 2];
$23 = $8;
$8 = HEAP32[$7 + 544 >> 2];
$15 = $8;
$10 = HEAP32[$7 + 548 >> 2];
$16 = $10;
}
if (($13 | 0) > 111) {
break label$66;
}
$10 = $16;
$8 = $23;
fmodl($7 + 464 | 0, $15, $10, $26, $8, 0, 0, 0, 1073676288);
$11 = HEAP32[$7 + 464 >> 2];
$4 = $11;
$11 = HEAP32[$7 + 476 >> 2];
$2 = $11;
$9 = HEAP32[$7 + 468 >> 2];
$11 = $9;
$9 = HEAP32[$7 + 472 >> 2];
$3 = $9;
$9 = $2;
if (__letf2($4, $11, $3, $9, 0, 0, 0, 0)) {
break label$66;
}
$10 = $16;
$8 = $23;
__addtf3($7 + 448 | 0, $15, $10, $26, $8, 0, 0, 0, 1073676288);
$11 = HEAP32[$7 + 456 >> 2];
$26 = $11;
$9 = HEAP32[$7 + 460 >> 2];
$23 = $9;
$9 = HEAP32[$7 + 448 >> 2];
$15 = $9;
$11 = HEAP32[$7 + 452 >> 2];
$16 = $11;
}
$11 = $22;
$9 = $18;
$8 = $16;
$10 = $23;
__addtf3($7 + 432 | 0, $25, $11, $14, $9, $15, $8, $26, $10);
$10 = HEAP32[$7 + 432 >> 2];
$4 = $10;
$10 = HEAP32[$7 + 444 >> 2];
$2 = $10;
$8 = HEAP32[$7 + 436 >> 2];
$10 = $8;
$8 = HEAP32[$7 + 440 >> 2];
$3 = $8;
$8 = $2;
$9 = $32;
$11 = $30;
__subtf3($7 + 416 | 0, $4, $10, $3, $8, $31, $9, $29, $11);
$11 = HEAP32[$7 + 424 >> 2];
$14 = $11;
$9 = HEAP32[$7 + 428 >> 2];
$18 = $9;
$9 = HEAP32[$7 + 416 >> 2];
$25 = $9;
$11 = HEAP32[$7 + 420 >> 2];
$22 = $11;
label$71: {
if ((-2 - $28 | 0) >= ($17 & 2147483647)) {
break label$71;
}
$11 = $22;
$9 = $18;
fabsl($7 + 400 | 0, $25, $11, $14, $9);
$9 = $11;
$11 = $18;
__multf3($7 + 384 | 0, $25, $9, $14, $11, 0, 0, 0, 1073610752);
$10 = HEAP32[$7 + 400 >> 2];
$4 = $10;
$10 = HEAP32[$7 + 412 >> 2];
$2 = $10;
$8 = HEAP32[$7 + 404 >> 2];
$10 = $8;
$8 = HEAP32[$7 + 408 >> 2];
$3 = $8;
$8 = $2;
$2 = __getf2($4, $10, $3, $8, 0, 0, 0, 1081081856);
$11 = HEAP32[$7 + 396 >> 2];
$3 = $11;
$17 = ($2 | 0) < 0;
$9 = HEAP32[$7 + 392 >> 2];
$10 = $17 ? $14 : $9;
$14 = $10;
$11 = $18;
$9 = $3;
$8 = $17 ? $11 : $9;
$18 = $8;
$10 = HEAP32[$7 + 388 >> 2];
$3 = $10;
$8 = HEAP32[$7 + 384 >> 2];
$9 = $17;
$11 = $9 ? $25 : $8;
$25 = $11;
$10 = $22;
$8 = $3;
$22 = $9 ? $10 : $8;
$24 = (($2 | 0) >= 0) + $24 | 0;
$11 = $23;
$19 = __letf2($15, $16, $26, $11, 0, 0, 0, 0);
if (($19 | 0) != 0 & ($17 ? $21 : ($1 | 0) != ($13 | 0) & $21) ? 0 : ($24 + 110 | 0) <= ($34 | 0)) {
break label$71;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
$10 = $22;
$9 = $18;
scalbnl($7 + 368 | 0, $25, $10, $14, $9, $24);
$9 = HEAP32[$7 + 368 >> 2];
$14 = $9;
$10 = HEAP32[$7 + 372 >> 2];
$18 = $10;
$9 = HEAP32[$7 + 380 >> 2];
$23 = $9;
$10 = HEAP32[$7 + 376 >> 2];
$8 = $10;
}
$10 = $0;
$15 = $8;
HEAP32[$10 + 8 >> 2] = $15;
$9 = $23;
HEAP32[$10 + 12 >> 2] = $9;
HEAP32[$0 >> 2] = $14;
$9 = $18;
HEAP32[$10 + 4 >> 2] = $9;
__stack_pointer = $7 + 8976 | 0;
}
function vfscanf($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0;
$11 = __stack_pointer - 304 | 0;
__stack_pointer = $11;
if (HEAP32[$0 + 76 >> 2] >= 0) {
$24 = __lockfile($0);
}
label$2: {
label$3: {
label$4: {
label$5: {
if (HEAP32[$0 + 4 >> 2]) {
break label$5;
}
__toread($0);
if (HEAP32[$0 + 4 >> 2]) {
break label$5;
}
break label$4;
}
$5 = HEAPU8[$1 | 0];
if (!$5) {
break label$2;
}
label$7: {
label$8: {
label$9: {
label$10: {
while (1) {
label$12: {
label$13: {
if (isspace($5 & 255)) {
while (1) {
$5 = $1;
$1 = $5 + 1 | 0;
if (isspace(HEAPU8[$5 + 1 | 0])) {
continue;
}
break;
}
__shlim($0, 0, 0);
while (1) {
$1 = HEAP32[$0 + 4 >> 2];
label$17: {
if (($1 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $1 + 1;
$1 = HEAPU8[$1 | 0];
break label$17;
}
$1 = __shgetc($0);
}
if (isspace($1)) {
continue;
}
break;
}
$1 = HEAP32[$0 + 4 >> 2];
$10 = HEAP32[$0 + 112 >> 2];
$4 = HEAP32[$0 + 116 >> 2];
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$1 = $1 - 1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
}
$4 = $1 - HEAP32[$0 + 44 >> 2] | 0;
$3 = $4 >> 31;
$1 = $4;
$14 = $3;
$10 = $20;
$3 = HEAP32[$0 + 120 >> 2];
$6 = $10 + $3 | 0;
$4 = HEAP32[$0 + 124 >> 2];
$3 = $21;
$7 = $4 + $3 | 0;
$7 = $6 >>> 0 < $10 >>> 0 ? $7 + 1 | 0 : $7;
$10 = $6;
$4 = $1;
$3 = $6 + $4 | 0;
$8 = $7;
$7 = $14;
$6 = $8 + $7 | 0;
$20 = $3;
$6 = $3 >>> 0 < $10 >>> 0 ? $6 + 1 | 0 : $6;
$21 = $6;
break label$13;
}
label$20: {
label$21: {
label$22: {
if (HEAPU8[$1 | 0] == 37) {
$5 = HEAPU8[$1 + 1 | 0];
if (($5 | 0) == 42) {
break label$22;
}
if (($5 | 0) != 37) {
break label$21;
}
}
__shlim($0, 0, 0);
label$24: {
if (HEAPU8[$1 | 0] == 37) {
while (1) {
$5 = HEAP32[$0 + 4 >> 2];
label$27: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$27;
}
$5 = __shgetc($0);
}
if (isspace($5)) {
continue;
}
break;
}
$1 = $1 + 1 | 0;
break label$24;
}
$5 = HEAP32[$0 + 4 >> 2];
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$24;
}
$5 = __shgetc($0);
}
if (HEAPU8[$1 | 0] != ($5 | 0)) {
$6 = HEAP32[$0 + 112 >> 2];
$4 = HEAP32[$0 + 116 >> 2];
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
}
if (($5 | 0) >= 0) {
break label$2;
}
$16 = 0;
if ($23) {
break label$2;
}
break label$4;
}
$4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 44 >> 2] | 0;
$7 = $4 >> 31;
$14 = $4;
$5 = $7;
$7 = HEAP32[$0 + 120 >> 2];
$6 = $20;
$8 = $7 + $6 | 0;
$4 = HEAP32[$0 + 124 >> 2];
$7 = $21;
$3 = $4 + $7 | 0;
$7 = $8;
$3 = $6 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
$10 = $3;
$3 = $5;
$8 = $10 + $3 | 0;
$4 = $14;
$6 = $7;
$7 = $4 + $6 | 0;
$20 = $7;
$8 = $6 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
$21 = $8;
$5 = $1;
break label$13;
}
$12 = 0;
$5 = $1 + 2 | 0;
break label$20;
}
if (!(!isdigit($5) | HEAPU8[$1 + 2 | 0] != 36)) {
$12 = arg_n($2, HEAPU8[$1 + 1 | 0] - 48 | 0);
$5 = $1 + 3 | 0;
break label$20;
}
$12 = HEAP32[$2 >> 2];
$2 = $2 + 4 | 0;
$5 = $1 + 1 | 0;
}
$22 = 0;
$1 = 0;
if (isdigit(HEAPU8[$5 | 0])) {
while (1) {
$1 = (HEAPU8[$5 | 0] + Math_imul($1, 10) | 0) - 48 | 0;
$3 = HEAPU8[$5 + 1 | 0];
$5 = $5 + 1 | 0;
if (isdigit($3)) {
continue;
}
break;
}
}
$15 = HEAPU8[$5 | 0];
if (($15 | 0) != 109) {
$3 = $5;
} else {
$17 = 0;
$22 = ($12 | 0) != 0;
$15 = HEAPU8[$5 + 1 | 0];
$13 = 0;
$3 = $5 + 1 | 0;
}
$5 = $3 + 1 | 0;
$9 = 3;
$16 = $22;
label$37: {
label$38: {
switch (($15 & 255) - 65 | 0) {
case 39:
$4 = $3 + 2 | 0;
$3 = HEAPU8[$3 + 1 | 0] == 104;
$5 = $3 ? $4 : $5;
$9 = $3 ? -2 : -1;
break label$37;
case 43:
$4 = $3 + 2 | 0;
$3 = HEAPU8[$3 + 1 | 0] == 108;
$5 = $3 ? $4 : $5;
$9 = $3 ? 3 : 1;
break label$37;
case 51:
case 57:
$9 = 1;
break label$37;
case 11:
$9 = 2;
break label$37;
case 41:
break label$37;
case 0:
case 2:
case 4:
case 5:
case 6:
case 18:
case 23:
case 26:
case 32:
case 34:
case 35:
case 36:
case 37:
case 38:
case 40:
case 45:
case 46:
case 47:
case 50:
case 52:
case 55:
break label$38;
default:
break label$7;
}
}
$9 = 0;
$5 = $3;
}
$3 = HEAPU8[$5 | 0];
$15 = ($3 & 47) == 3;
$16 = $15 ? 1 : $9;
$18 = $15 ? $3 | 32 : $3;
label$43: {
if (($18 | 0) == 91) {
break label$43;
}
label$44: {
if (($18 | 0) != 110) {
if (($18 | 0) != 99) {
break label$44;
}
$1 = ($1 | 0) > 1 ? $1 : 1;
break label$43;
}
$8 = $21;
store_int($12, $16, $20, $8);
break label$13;
}
__shlim($0, 0, 0);
while (1) {
$3 = HEAP32[$0 + 4 >> 2];
label$47: {
if (($3 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $3 + 1;
$3 = HEAPU8[$3 | 0];
break label$47;
}
$3 = __shgetc($0);
}
if (isspace($3)) {
continue;
}
break;
}
$3 = HEAP32[$0 + 4 >> 2];
$8 = HEAP32[$0 + 112 >> 2];
$4 = HEAP32[$0 + 116 >> 2];
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$3 = $3 - 1 | 0;
HEAP32[$0 + 4 >> 2] = $3;
}
$4 = $3 - HEAP32[$0 + 44 >> 2] | 0;
$3 = $4 >> 31;
$14 = $4;
$19 = $3;
$8 = $20;
$3 = HEAP32[$0 + 120 >> 2];
$6 = $3;
$10 = $8 + $6 | 0;
$4 = HEAP32[$0 + 124 >> 2];
$3 = $21;
$7 = $4 + $3 | 0;
$3 = $10;
$7 = $8 >>> 0 > $10 >>> 0 ? $7 + 1 | 0 : $7;
$6 = $7;
$7 = $19;
$10 = $6 + $7 | 0;
$4 = $14;
$8 = $3;
$3 = $4 + $8 | 0;
$10 = $3 >>> 0 < $8 >>> 0 ? $10 + 1 | 0 : $10;
$20 = $3;
$21 = $10;
}
$10 = $1 >> 31;
$14 = $10;
$19 = $1;
__shlim($0, $1, $10);
$3 = HEAP32[$0 + 4 >> 2];
label$50: {
if (($3 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $3 + 1;
break label$50;
}
if ((__shgetc($0) | 0) < 0) {
break label$8;
}
}
$10 = HEAP32[$0 + 112 >> 2];
$4 = HEAP32[$0 + 116 >> 2];
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
}
$3 = 16;
label$53: {
label$54: {
label$55: {
label$56: {
label$57: {
switch ($18 - 88 | 0) {
default:
$1 = $18 - 65 | 0;
if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
break label$53;
}
case 9:
case 13:
case 14:
case 15:
__floatscan($11 + 8 | 0, $0, $16, 0);
$7 = HEAP32[$0 + 120 >> 2];
$1 = $7;
$4 = HEAP32[$0 + 124 >> 2];
$8 = $4;
$7 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 44 >> 2] | 0;
$4 = $7 >> 31;
$10 = $7;
$6 = 0 - $7 | 0;
$3 = $4 + (($10 | 0) != 0) | 0;
$3 = 0 - $3 | 0;
$7 = $3;
$4 = $1;
$3 = $8;
$8 = $7;
if (($6 | 0) != ($4 | 0) | ($3 | 0) != ($8 | 0)) {
break label$55;
}
break label$9;
case 3:
case 11:
case 27:
if (($18 | 16) == 115) {
memset($11 + 32 | 0, -1, 257);
HEAP8[$11 + 32 | 0] = 0;
if (($18 | 0) != 115) {
break label$54;
}
HEAP8[$11 + 65 | 0] = 0;
HEAP8[$11 + 46 | 0] = 0;
HEAP16[$11 + 42 >> 1] = 0;
HEAP16[$11 + 44 >> 1] = 0;
break label$54;
}
$9 = HEAPU8[$5 + 1 | 0];
$3 = ($9 | 0) == 94;
memset($11 + 32 | 0, $3, 257);
HEAP8[$11 + 32 | 0] = 0;
$15 = $3 ? $5 + 2 | 0 : $5 + 1 | 0;
label$64: {
label$65: {
label$66: {
$5 = HEAPU8[($3 ? 2 : 1) + $5 | 0];
if (($5 | 0) != 45) {
if (($5 | 0) == 93) {
break label$66;
}
$9 = ($9 | 0) != 94;
$5 = $15;
break label$64;
}
$9 = ($9 | 0) != 94;
HEAP8[$11 + 78 | 0] = $9;
break label$65;
}
$9 = ($9 | 0) != 94;
HEAP8[$11 + 126 | 0] = $9;
}
$5 = $15 + 1 | 0;
}
while (1) {
$3 = HEAPU8[$5 | 0];
label$69: {
if (($3 | 0) != 45) {
if (!$3) {
break label$8;
}
if (($3 | 0) == 93) {
break label$54;
}
break label$69;
}
$3 = 45;
$4 = HEAPU8[$5 + 1 | 0];
if (!$4 | ($4 | 0) == 93) {
break label$69;
}
$15 = $5 + 1 | 0;
$5 = HEAPU8[$5 - 1 | 0];
label$71: {
if ($4 >>> 0 <= $5 >>> 0) {
$3 = $4;
break label$71;
}
while (1) {
$5 = $5 + 1 | 0;
HEAP8[$5 + ($11 + 32 | 0) | 0] = $9;
$3 = HEAPU8[$15 | 0];
if ($5 >>> 0 < $3 >>> 0) {
continue;
}
break;
}
}
$5 = $15;
}
HEAP8[($3 + $11 | 0) + 33 | 0] = $9;
$5 = $5 + 1 | 0;
continue;
}
;
case 23:
$3 = 8;
break label$56;
case 12:
case 29:
$3 = 10;
break label$56;
case 1:
case 2:
case 4:
case 5:
case 6:
case 7:
case 8:
case 10:
case 16:
case 18:
case 19:
case 20:
case 21:
case 22:
case 25:
case 26:
case 28:
case 30:
case 31:
break label$53;
case 0:
case 24:
case 32:
break label$56;
case 17:
break label$57;
}
}
$3 = 0;
}
$4 = __intscan($0, $3, 0, -1, -1);
$19 = $4;
$3 = i64toi32_i32$HIGH_BITS;
$14 = $3;
$3 = HEAP32[$0 + 120 >> 2];
$1 = $3;
$4 = HEAP32[$0 + 124 >> 2];
$9 = $4;
$3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 44 >> 2] | 0;
$4 = $3 >> 31;
$8 = $3;
$7 = 0 - $3 | 0;
$6 = $4 + (($8 | 0) != 0) | 0;
$6 = 0 - $6 | 0;
$4 = $1;
$10 = $6;
$6 = $9;
if (($4 | 0) == ($7 | 0) & ($10 | 0) == ($6 | 0)) {
break label$9;
}
if (!(!$12 | ($18 | 0) != 112)) {
HEAP32[$12 >> 2] = $19;
break label$53;
}
$4 = $14;
store_int($12, $16, $19, $4);
break label$53;
}
if (!$12) {
break label$53;
}
$4 = HEAP32[$11 + 16 >> 2];
$19 = $4;
$6 = HEAP32[$11 + 20 >> 2];
$14 = $6;
$6 = HEAP32[$11 + 8 >> 2];
$3 = $6;
$4 = HEAP32[$11 + 12 >> 2];
label$75: {
switch ($16 | 0) {
case 0:
$6 = $14;
wasm2js_i32$0 = $12, wasm2js_f32$0 = __trunctfsf2($3, $4, $19, $6), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
break label$53;
case 1:
$6 = $4;
$4 = $14;
wasm2js_i32$0 = $12, wasm2js_f64$0 = __trunctfdf2($3, $6, $19, $4), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
break label$53;
case 2:
break label$75;
default:
break label$53;
}
}
$6 = $12;
HEAP32[$6 >> 2] = $3;
HEAP32[$6 + 4 >> 2] = $4;
HEAP32[$6 + 8 >> 2] = $19;
$4 = $14;
HEAP32[$6 + 12 >> 2] = $4;
break label$53;
}
$15 = ($18 | 0) == 99;
$9 = $15 ? $1 + 1 | 0 : 31;
label$78: {
if (($16 | 0) == 1) {
$3 = $12;
if ($22) {
$3 = dlmalloc($9 << 2);
if (!$3) {
break label$10;
}
}
$6 = $11;
HEAP32[$6 + 296 >> 2] = 0;
HEAP32[$6 + 300 >> 2] = 0;
$1 = 0;
$4 = $22;
while (1) {
$13 = $3;
label$82: {
while (1) {
$3 = HEAP32[$0 + 4 >> 2];
label$84: {
if (($3 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $3 + 1;
$3 = HEAPU8[$3 | 0];
break label$84;
}
$3 = __shgetc($0);
}
if (!HEAPU8[($11 + $3 | 0) + 33 | 0]) {
break label$82;
}
HEAP8[$11 + 27 | 0] = $3;
$3 = mbrtowc($11 + 28 | 0, $11 + 27 | 0, 1, $11 + 296 | 0);
if (($3 | 0) == -2) {
continue;
}
$17 = 0;
if (($3 | 0) == -1) {
break label$8;
}
if ($13) {
HEAP32[($1 << 2) + $13 >> 2] = HEAP32[$11 + 28 >> 2];
$1 = $1 + 1 | 0;
}
if (!(($1 | 0) == ($9 | 0) & $4)) {
continue;
}
break;
}
$16 = 1;
$9 = $9 << 1 | 1;
$3 = dlrealloc($13, $9 << 2);
if ($3) {
continue;
}
break label$7;
}
break;
}
$17 = 0;
$9 = $13;
if (!mbsinit($11 + 296 | 0)) {
break label$8;
}
break label$78;
}
if ($22) {
$1 = 0;
$3 = dlmalloc($9);
if (!$3) {
break label$10;
}
while (1) {
$13 = $3;
while (1) {
$3 = HEAP32[$0 + 4 >> 2];
label$90: {
if (($3 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $3 + 1;
$3 = HEAPU8[$3 | 0];
break label$90;
}
$3 = __shgetc($0);
}
if (!HEAPU8[($11 + $3 | 0) + 33 | 0]) {
$9 = 0;
$17 = $13;
break label$78;
}
HEAP8[$1 + $13 | 0] = $3;
$1 = $1 + 1 | 0;
if (($9 | 0) != ($1 | 0)) {
continue;
}
break;
}
$16 = 1;
$9 = $9 << 1 | 1;
$3 = dlrealloc($13, $9);
if ($3) {
continue;
}
break;
}
$17 = $13;
$13 = 0;
break label$7;
}
$1 = 0;
if ($12) {
while (1) {
$3 = HEAP32[$0 + 4 >> 2];
label$95: {
if (($3 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $3 + 1;
$3 = HEAPU8[$3 | 0];
break label$95;
}
$3 = __shgetc($0);
}
if (HEAPU8[($11 + $3 | 0) + 33 | 0]) {
HEAP8[$1 + $12 | 0] = $3;
$1 = $1 + 1 | 0;
continue;
} else {
$9 = 0;
$13 = $12;
$17 = $12;
break label$78;
}
}
}
while (1) {
$1 = HEAP32[$0 + 4 >> 2];
label$100: {
if (($1 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $1 + 1;
$1 = HEAPU8[$1 | 0];
break label$100;
}
$1 = __shgetc($0);
}
if (HEAPU8[($11 + $1 | 0) + 33 | 0]) {
continue;
}
break;
}
$13 = 0;
$17 = 0;
$9 = 0;
$1 = 0;
}
$3 = HEAP32[$0 + 4 >> 2];
$4 = HEAP32[$0 + 112 >> 2];
$6 = HEAP32[$0 + 116 >> 2];
if (($6 | 0) > 0 | ($6 | 0) >= 0) {
$3 = $3 - 1 | 0;
HEAP32[$0 + 4 >> 2] = $3;
}
$6 = HEAP32[$0 + 124 >> 2];
$7 = $6;
$8 = HEAP32[$0 + 120 >> 2];
$10 = $8;
$8 = $3 - HEAP32[$0 + 44 >> 2] | 0;
$6 = $8 >> 31;
$4 = $8;
$3 = $10 + $4 | 0;
$8 = $6;
$6 = $7;
$7 = $8 + $6 | 0;
$7 = $4 >>> 0 > $3 >>> 0 ? $7 + 1 | 0 : $7;
$8 = !($3 | $7);
$4 = $3;
$6 = $19;
$10 = $7;
$7 = $14;
if ($8 | (($4 | 0) != ($6 | 0) | ($10 | 0) != ($7 | 0)) & ($18 | 0) == 99) {
break label$12;
}
if ($22) {
HEAP32[$12 >> 2] = $13;
}
label$104: {
if ($15) {
break label$104;
}
if ($9) {
HEAP32[($1 << 2) + $9 >> 2] = 0;
}
if (!$17) {
$17 = 0;
break label$104;
}
HEAP8[$1 + $17 | 0] = 0;
}
$13 = $9;
}
$7 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 44 >> 2] | 0;
$6 = $7 >> 31;
$1 = $7;
$14 = $6;
$10 = $20;
$6 = HEAP32[$0 + 120 >> 2];
$4 = $6;
$8 = $10 + $4 | 0;
$6 = $21;
$7 = HEAP32[$0 + 124 >> 2];
$3 = $6 + $7 | 0;
$3 = $8 >>> 0 < $10 >>> 0 ? $3 + 1 | 0 : $3;
$10 = $8;
$7 = $1;
$6 = $8 + $7 | 0;
$4 = $3;
$3 = $14;
$8 = $4 + $3 | 0;
$20 = $6;
$8 = $6 >>> 0 < $10 >>> 0 ? $8 + 1 | 0 : $8;
$21 = $8;
$23 = (($12 | 0) != 0) + $23 | 0;
}
$1 = $5 + 1 | 0;
$5 = HEAPU8[$5 + 1 | 0];
if ($5) {
continue;
}
break label$2;
}
break;
}
$13 = $9;
break label$9;
}
$16 = 1;
$17 = 0;
$13 = 0;
break label$7;
}
$16 = $22;
break label$3;
}
$16 = $22;
}
if ($23) {
break label$3;
}
}
$23 = -1;
}
if (!$16) {
break label$2;
}
dlfree($17);
dlfree($13);
}
if ($24) {
__unlockfile($0);
}
__stack_pointer = $11 + 304 | 0;
return $23;
}
function SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$7 = __stack_pointer - 528 | 0;
__stack_pointer = $7;
HEAP32[$1 >> 2] = 0;
label$1: {
if (!($4 ? 1 : $3)) {
break label$1;
}
label$2: {
if (!$3 | !$4) {
break label$2;
}
$4 = 1;
if (!Mirroring__isUndef_28_29_20const($5)) {
break label$2;
}
$4 = HEAP8[$0 + 13 | 0] & 1;
}
$15 = MakeSetOfHands_28bool_2c_20bool_29($3, $4);
$16 = HEAPU8[$0 + 13 | 0] & 64;
$12 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29($15, $16 >>> 6 | 0);
label$3: {
if (!$2) {
$4 = operator_20new_28unsigned_20long_29(528);
HEAP32[19359] = 0;
$9 = invoke_iii(377, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
HEAP32[$1 >> 2] = $9;
break label$1;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
}
$10 = HEAP32[$2 >> 2];
$13 = SiGML__convertElement_28char_20const__29($10);
$9 = HEAP32[$2 + 8 >> 2];
$8 = HEAP32[$9 + 12 >> 2];
$14 = MotionAttributes__MotionAttributes_28char_20const__2c_20HashAny_char_20const__2c_20char_20const____2c_20bool_29($7 + 312 | 0, $10, HEAP32[$2 + 4 >> 2], (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0);
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
switch ($13 - 18 | 0) {
case 0:
if (HEAP32[$9 + 12 >> 2] == 2) {
break label$17;
}
LogTime_28_29();
HEAP32[$7 + 52 >> 2] = HEAP32[$9 + 12 >> 2];
HEAP32[$7 + 48 >> 2] = $10;
eprintf_28char_20const__2c_20____29(41390, $7 + 48 | 0);
BadSiGML_28_29();
break label$16;
case 1:
$11 = operator_20new_28unsigned_20long_29(556);
HEAP32[19359] = 0;
$8 = invoke_iii(504, $11 | 0, $12 | 0) | 0;
$10 = HEAP32[19359];
HEAP32[19359] = 0;
if (($10 | 0) == 1) {
break label$14;
}
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($8, $14);
$2 = 0;
label$30: {
while (1) {
if (HEAP32[$9 + 12 >> 2] <= ($2 | 0)) {
label$33: {
switch (HEAP32[$8 + 540 >> 2]) {
case 1:
break label$30;
case 0:
break label$33;
default:
break label$9;
}
}
} else {
HEAP32[$7 + 308 >> 2] = 0;
$11 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, $2);
$10 = HEAPU16[$5 >> 1];
HEAP16[$7 + 60 >> 1] = $10;
HEAP16[$7 + 288 >> 1] = $10;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 308 | 0, $11, $3, $4, $7 + 60 | 0, $6);
$11 = HEAP32[$7 + 308 >> 2];
label$35: {
if (!$11) {
break label$35;
}
if (HEAP32[$11 + 4 >> 2] == 10) {
FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 4 >> 2]]($11);
break label$35;
}
CompoundMovement__addComponent_28BasicMovement__29($8, $11);
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 4 >> 2]]($8);
break label$15;
}
$3 = $8 + 528 | 0;
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, 0);
HEAP32[$1 >> 2] = $4;
BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($4, $8);
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($3, 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 4 >> 2]]($8);
break label$15;
case 2:
$11 = operator_20new_28unsigned_20long_29(580);
HEAP32[19359] = 0;
$10 = invoke_iii(378, $11 | 0, $12 | 0) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$6;
}
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($10, $14);
$2 = 0;
label$37: {
label$38: {
while (1) {
if (HEAP32[$9 + 12 >> 2] <= ($2 | 0)) {
label$41: {
switch (HEAP32[$10 + 540 >> 2]) {
case 1:
break label$38;
case 0:
break label$41;
default:
break label$37;
}
}
} else {
HEAP32[$7 + 308 >> 2] = 0;
$11 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, $2);
$8 = HEAPU16[$5 >> 1];
HEAP16[$7 + 62 >> 1] = $8;
HEAP16[$7 + 280 >> 1] = $8;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 308 | 0, $11, $3, $4, $7 + 62 | 0, $6);
$11 = HEAP32[$7 + 308 >> 2];
label$43: {
if (!$11) {
break label$43;
}
if (HEAP32[$11 + 4 >> 2] == 10) {
FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 4 >> 2]]($11);
break label$43;
}
CompoundMovement__addComponent_28BasicMovement__29($10, $11);
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 4 >> 2]]($10);
break label$15;
}
$3 = $10 + 528 | 0;
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, 0);
HEAP32[$1 >> 2] = $4;
BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($4, $10);
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($3, 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 4 >> 2]]($10);
break label$15;
}
HEAP32[$1 >> 2] = $10;
if (!HEAPU8[67565]) {
break label$1;
}
$17 = HEAPF32[$14 + 208 >> 2];
$19 = HEAPF32[$10 + 52 >> 2];
HEAPF64[$7 + 80 >> 3] = HEAPF32[$10 + 40 >> 2];
HEAPF64[$7 + 72 >> 3] = $19;
HEAPF64[$7 + 64 >> 3] = $17;
eprintf_28char_20const__2c_20____29(27799, $7 - -64 | 0);
break label$15;
case 3:
if (!$8) {
break label$15;
}
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 0);
$18 = isMotion_28XMLCell__29($2);
$2 = $18 ? $2 : 0;
$16 = 4;
$13 = Gesture__CloneGesture_28short_29_20const($0, 1);
label$45: {
switch ($15 - 1 | 0) {
case 1:
$16 = 8;
case 0:
HEAP8[$13 + 13 | 0] = HEAPU8[$13 + 13 | 0] & 242 | $16;
HEAP8[$13 + 14 | 0] = HEAPU8[70296];
break;
default:
break label$45;
}
}
$15 = StaticGestureFromXML_28Gesture__2c_20DynamicArrayP_XMLCell___2c_20int_29($13, $9, $18);
if (($15 | 0) >= ($8 | 0)) {
break label$13;
}
LogTime_28_29();
$11 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, $15);
$9 = 0;
break label$12;
case 4:
label$48: {
switch ($8 | 0) {
case 0:
LogTime_28_29();
HEAP32[$7 + 128 >> 2] = $10;
eprintf_28char_20const__2c_20____29(41093, $7 + 128 | 0);
BadSiGML_28_29();
break label$15;
default:
LogTime_28_29();
HEAP32[$7 + 116 >> 2] = $8;
HEAP32[$7 + 112 >> 2] = $10;
eprintf_28char_20const__2c_20____29(40909, $7 + 112 | 0);
BadSiGML_28_29();
break label$15;
case 1:
break label$48;
}
}
$9 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 0);
HEAP32[$7 + 308 >> 2] = 0;
$2 = HEAPU16[$5 >> 1];
HEAP16[$7 + 126 >> 1] = $2;
HEAP16[$7 + 264 >> 1] = $2;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 308 | 0, $9, $3, $4, $7 + 126 | 0, $6);
$4 = operator_20new_28unsigned_20long_29(704);
HEAP32[19359] = 0;
$8 = invoke_iii(505, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($8, $14);
HEAP32[$8 + 696 >> 2] = HEAP32[$7 + 308 >> 2];
break label$9;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
case 5:
$4 = operator_20new_28unsigned_20long_29(744);
HEAP32[19359] = 0;
$8 = invoke_iii(506, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$10;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
case 6:
$4 = operator_20new_28unsigned_20long_29(752);
HEAP32[19359] = 0;
$8 = invoke_iii(507, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$10;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
case 7:
$4 = operator_20new_28unsigned_20long_29(560);
HEAP32[19359] = 0;
$8 = invoke_iii(508, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$11;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
case 8:
UNIMPLEMENTED_28char_20const__29(14821);
LogTime_28_29();
HEAP32[$7 + 144 >> 2] = $10;
eprintf_28char_20const__2c_20____29(45293, $7 + 144 | 0);
UnimplSiGML_28_29();
break label$15;
case 9:
$4 = operator_20new_28unsigned_20long_29(552);
HEAP32[19359] = 0;
$8 = invoke_iii(509, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$11;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
case 11:
label$52: {
switch ($8 | 0) {
case 0:
LogTime_28_29();
HEAP32[$7 + 240 >> 2] = $10;
eprintf_28char_20const__2c_20____29(41093, $7 + 240 | 0);
BadSiGML_28_29();
break label$15;
default:
LogTime_28_29();
HEAP32[$7 + 164 >> 2] = $8;
HEAP32[$7 + 160 >> 2] = $10;
eprintf_28char_20const__2c_20____29(40981, $7 + 160 | 0);
BadSiGML_28_29();
break label$15;
case 2:
break label$52;
}
}
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 0);
$9 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 1);
if ((SiGML__convertElement_28char_20const__29(HEAP32[$2 >> 2]) | 0) != 9) {
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 9);
HEAP32[$7 + 232 >> 2] = HEAP32[$2 >> 2];
HEAP32[$7 + 228 >> 2] = $3;
HEAP32[$7 + 224 >> 2] = $10;
eprintf_28char_20const__2c_20____29(41132, $7 + 224 | 0);
break label$15;
}
$2 = XMLCell__attrib_string_28char_20const__29($2, 2111);
if (!$2) {
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 9);
HEAP32[$7 + 180 >> 2] = $10;
HEAP32[$7 + 176 >> 2] = $3;
eprintf_28char_20const__2c_20____29(40173, $7 + 176 | 0);
break label$15;
}
if ((InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18213], $2) | 0) != 13) {
$3 = HEAP32[18782];
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const($3, 9);
$4 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], 13);
HEAP32[$7 + 220 >> 2] = $2;
HEAP32[$7 + 216 >> 2] = $4;
HEAP32[$7 + 212 >> 2] = $10;
HEAP32[$7 + 208 >> 2] = $3;
eprintf_28char_20const__2c_20____29(41651, $7 + 208 | 0);
break label$15;
}
if (HEAPU8[67567]) {
wasm2js_i32$0 = $7, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], 13), 
HEAP32[wasm2js_i32$0 + 196 >> 2] = wasm2js_i32$1;
HEAP32[$7 + 192 >> 2] = 13;
eprintf_28char_20const__2c_20____29(36818, $7 + 192 | 0);
}
$2 = HEAPU16[$5 >> 1];
HEAP16[$7 + 190 >> 1] = $2;
HEAP16[$7 + 256 >> 1] = $2;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $1, $9, $3, $4, $7 + 190 | 0, 13);
break label$15;
case 10:
case 12:
break label$15;
default:
break label$18;
}
}
LogTime_28_29();
HEAP32[$7 >> 2] = $10;
eprintf_28char_20const__2c_20____29(43139, $7);
BadSiGML_28_29();
HEAP32[$1 >> 2] = 0;
break label$1;
}
$3 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 0);
HEAP32[$7 + 308 >> 2] = 0;
$2 = HEAPU16[35148];
HEAP16[$7 + 304 >> 1] = $2;
HEAP16[$7 + 46 >> 1] = $2;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 308 | 0, $3, 1, 0, $7 + 46 | 0, $6);
$3 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 1);
HEAP32[$7 + 300 >> 2] = 0;
$4 = HEAPU16[35148];
HEAP16[$7 + 296 >> 1] = $4;
HEAP16[$7 + 44 >> 1] = $4;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 300 | 0, $3, 0, 1, $7 + 44 | 0, $6);
$3 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29(HEAP32[$7 + 308 >> 2], HEAP32[$7 + 300 >> 2], ($16 | 0) != 0);
HEAP32[$1 >> 2] = $3;
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($3, $14);
}
$12 = 5;
}
$8 = HEAP32[$1 >> 2];
if ($8) {
break label$8;
}
$4 = operator_20new_28unsigned_20long_29(528);
HEAP32[19359] = 0;
$8 = invoke_iii(377, $4 | 0, $12 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$11;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($11);
break label$3;
}
$9 = 1;
}
while (1) {
if (!$9) {
$9 = HEAP32[$11 >> 2];
HEAP32[$7 + 100 >> 2] = $10;
HEAP32[$7 + 96 >> 2] = $9;
eprintf_28char_20const__2c_20____29(43218, $7 + 96 | 0);
BadSiGML_28_29();
$9 = 1;
continue;
}
label$61: {
label$62: {
while (1) {
if (!isTgtMotion_28XMLCell__29($2)) {
break label$62;
}
$9 = HEAP32[$2 + 8 >> 2];
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, 0);
$11 = isMotion_28XMLCell__29($2);
$9 = $11 ? $9 : 0;
$11 = StaticGestureFromXML_28Gesture__2c_20DynamicArrayP_XMLCell___2c_20int_29($13, $9, $11);
if (($11 | 0) >= ($8 | 0)) {
continue;
}
break;
}
LogTime_28_29();
$11 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, $11);
break label$61;
}
HEAP32[$7 + 308 >> 2] = 0;
$9 = HEAPU16[$5 >> 1];
HEAP16[$7 + 94 >> 1] = $9;
HEAP16[$7 + 272 >> 1] = $9;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $7 + 308 | 0, $2, $3, $4, $7 + 94 | 0, $6);
$8 = operator_20new_28unsigned_20long_29(536);
HEAP32[19359] = 0;
invoke_iiii(376, $8 | 0, $12 | 0, $13 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$64: {
if (($4 | 0) != 1) {
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($8, $14);
HEAP8[$8 + 532 | 0] = 1;
$3 = HEAP32[$7 + 308 >> 2];
if (!$3) {
break label$9;
}
if (HEAP32[$3 + 4 >> 2] == 10) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 4 >> 2]]($3);
break label$9;
}
$9 = operator_20new_28unsigned_20long_29(556);
HEAP32[19359] = 0;
$0 = invoke_iii(504, $9 | 0, $12 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$64;
}
CompoundMovement__addComponent_28BasicMovement__29($0, $3);
CompoundMovement__addComponent_28BasicMovement__29($0, $8);
$8 = $0;
break label$9;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
$8 = $9;
break label$7;
}
$9 = 0;
continue;
}
}
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($8, $14);
break label$9;
}
BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($8, $14);
HEAP32[$8 + 36 >> 2] = $6;
}
HEAP32[$1 >> 2] = $8;
}
if (!HEAPU8[67565]) {
break label$1;
}
$17 = HEAPF32[$8 + 52 >> 2];
$3 = HEAP32[$8 + 4 >> 2];
HEAPF64[$7 + 32 >> 3] = HEAPF32[$8 + 40 >> 2];
HEAP32[$7 + 16 >> 2] = $3;
HEAPF64[$7 + 24 >> 3] = $17;
eprintf_28char_20const__2c_20____29(27966, $7 + 16 | 0);
break label$1;
}
operator_20delete_28void__29($8);
break label$3;
}
$7 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($11);
}
__resumeException($7 | 0);
abort();
}
__stack_pointer = $7 + 528 | 0;
}
function TargettedMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$3 = __stack_pointer - 656 | 0;
__stack_pointer = $3;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67594]) {
HEAP32[$3 + 468 >> 2] = $1;
HEAP32[$3 + 464 >> 2] = $0;
eprintf_28char_20const__2c_20____29(19907, $3 + 464 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 - -64 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(20002);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 176 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(19994);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 288 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(20024);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 400 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
}
$4 = HEAP32[$0 + 8 >> 2];
$6 = HEAPF32[$0 + 40 >> 2];
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
$8 = HEAPU8[HEAP32[$0 + 528 >> 2] + 13 | 0] & 64;
if ($8) {
if (HaveRightHand_28SET_OF_HANDS_29($4)) {
break label$7;
}
$7 = HEAPF32[$0 + 40 >> 2];
break label$6;
}
if (HaveLeftHand_28SET_OF_HANDS_29($4)) {
break label$7;
}
$7 = HEAPF32[$0 + 40 >> 2];
break label$5;
}
OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($2, HEAP32[HEAP32[$0 + 528 >> 2] + 20 >> 2]);
HEAP8[$2 + 52 | 0] = 0;
$7 = Math_fround(Math_fround(Math_abs(HEAPF32[HEAP32[$2 + 56 >> 2] + 228 >> 2])) * HEAPF32[HEAP32[$1 >> 2] + 264 >> 2]);
if (HEAPU8[67558]) {
eprintf_28char_20const__2c_20____29(18293, 0);
PostureChangeTiming__print_28_IO_FILE__29_20const($2 + 44 | 0, HEAP32[16886]);
eputc_28char_29(10);
eputc_28char_29(10);
}
$7 = Math_fround($7 + Math_fround(1));
$4 = $2 + 44 | 0;
PostureChangeTiming__defaultFrom_28PostureChangeTiming_20const__29($4, HEAP32[HEAP32[$0 + 528 >> 2] >> 2] + 272 | 0);
if (HEAPU8[67558]) {
eprintf_28char_20const__2c_20____29(16537, 0);
PostureChangeTiming__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
eputc_28char_29(10);
eputc_28char_29(10);
}
$6 = Math_fround($6 * $7);
$7 = HEAPF32[$0 + 40 >> 2];
if (!$8) {
break label$5;
}
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$3;
}
break label$4;
}
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$3;
}
}
OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($2 + 72 | 0, HEAP32[HEAP32[$0 + 528 >> 2] + 24 >> 2]);
HEAP8[$2 + 124 | 0] = 0;
$14 = HEAPF32[HEAP32[$1 >> 2] + 264 >> 2];
$15 = HEAPF32[HEAP32[$2 + 128 >> 2] + 228 >> 2];
PostureChangeTiming__defaultFrom_28PostureChangeTiming_20const__29($2 + 116 | 0, HEAP32[HEAP32[$0 + 528 >> 2] >> 2] + 272 | 0);
$7 = Math_fround($7 * Math_fround(Math_fround($14 * Math_fround(Math_abs($15))) + Math_fround(1)));
}
$4 = ($8 ? 44 : 116) + $2 | 0;
$9 = HEAP32[$4 >> 2];
$5 = HEAP32[$4 + 4 >> 2];
$4 = $0 + 512 | 0;
HEAP32[$4 >> 2] = $9;
HEAP32[$4 + 4 >> 2] = $5;
$9 = HEAP32[$2 + 120 >> 2];
$5 = HEAP32[$2 + 116 >> 2];
$10 = $0 + 520 | 0;
HEAP32[$10 >> 2] = $5;
HEAP32[$10 + 4 >> 2] = $9;
if (HEAPU8[67558]) {
eprintf_28char_20const__2c_20____29(18321, 0);
PostureChangeTiming__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(18365, 0);
PostureChangeTiming__print_28_IO_FILE__29_20const($10, HEAP32[16886]);
eputc_28char_29(10);
eputc_28char_29(10);
}
$6 = $7 < $6 ? $6 : $7;
$14 = HEAPF32[$0 + 40 >> 2];
if ($6 != $14) {
if (HEAPU8[67589]) {
HEAPF64[$3 + 456 >> 3] = $6;
HEAPF64[$3 + 448 >> 3] = $14;
eprintf_28char_20const__2c_20____29(29504, $3 + 448 | 0);
}
HEAPF32[$0 + 40 >> 2] = $6;
}
$16 = $0 + 284 | 0;
Gesture__InitPosture1_28TwoHConcretePosture__29(HEAP32[$0 + 528 >> 2], $16);
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
HEAP32[$0 + 340 >> 2] = HEAP32[$0 + 116 >> 2];
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
HEAP32[$0 + 452 >> 2] = HEAP32[$0 + 228 >> 2];
}
if (HEAPU8[67594]) {
HEAP32[$3 + 436 >> 2] = $1;
HEAP32[$3 + 432 >> 2] = $0;
eprintf_28char_20const__2c_20____29(19937, $3 + 432 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 - -64 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(20002);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 176 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(19994);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 288 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(20024);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 400 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
}
$4 = HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2];
$10 = HEAPU8[$4 + ($8 ? 64 : 63) | 0];
$12 = HEAPU8[($8 ? 63 : 64) + $4 | 0];
HEAP32[$3 + 648 >> 2] = HEAP32[$4 + 20 >> 2];
$5 = HEAP32[$4 + 16 >> 2];
$9 = HEAP32[$4 + 12 >> 2];
HEAP32[$3 + 640 >> 2] = $9;
HEAP32[$3 + 644 >> 2] = $5;
HEAP32[$3 + 632 >> 2] = HEAP32[$4 + 32 >> 2];
$9 = HEAP32[$4 + 28 >> 2];
$5 = HEAP32[$4 + 24 >> 2];
HEAP32[$3 + 624 >> 2] = $5;
HEAP32[$3 + 628 >> 2] = $9;
$4 = operator___28SiteIDPair_2c_20SiteIDPair_29($3 + 640 | 0, $3 + 624 | 0);
SiteIDPair___SiteIDPair_28_29($3 + 624 | 0);
SiteIDPair___SiteIDPair_28_29($3 + 640 | 0);
label$17: {
if (!HEAPU8[67594]) {
break label$17;
}
HEAP32[$3 + 416 >> 2] = $4 ? 84 : 70;
eprintf_28char_20const__2c_20____29(31164, $3 + 416 | 0);
HEAP32[$3 + 400 >> 2] = $12 & 255 ? 84 : 70;
eprintf_28char_20const__2c_20____29(31181, $3 + 400 | 0);
HEAP32[$3 + 384 >> 2] = $10 & 255 ? 84 : 70;
eprintf_28char_20const__2c_20____29(31208, $3 + 384 | 0);
eputs_28char_20const__29(20472);
$5 = HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2];
if (!$5) {
eputs_28char_20const__29(14681);
break label$17;
}
ArmHandConstellation__print_28_IO_FILE__29_20const($5, HEAP32[16886]);
}
$7 = Math_fround(0);
$6 = Math_fround(0);
$5 = SiteID__isArmHandSite_28_29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 12 | 0);
$13 = SiteID__isArmHandSite_28_29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 24 | 0);
label$19: {
if (!($12 & 255) | !(($8 ? $5 : $13) | $4)) {
break label$19;
}
HEAP32[$3 + 544 >> 2] = 0;
HEAP32[$3 + 528 >> 2] = 0;
$9 = HEAP32[$0 + 528 >> 2];
$11 = HEAP32[$9 >> 2];
$9 = HEAP32[HEAP32[$9 + 28 >> 2] + 16 >> 2];
HEAP32[$3 + 380 >> 2] = $9;
HEAP32[$3 + 616 >> 2] = $9;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($11, 0, $3 + 380 | 0, 0, $3 + 544 | 0, $3 + 528 | 0);
if (!HEAP32[$3 + 528 >> 2]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(19548, 0);
SiteID__print_28_IO_FILE__29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2] + 16 | 0, HEAP32[16886]);
eputc_28char_29(10);
break label$19;
}
$9 = Vector__Vector_28_29($3 + 600 | 0);
Quaternion__invRotateVector_28Vector_20const__2c_20Vector__29_20const($0 + 324 | 0, 68032, $9);
$11 = Vector__Vector_28_29($3 + 584 | 0);
$6 = Handshape__SiteToHullVector_28Site__2c_20Vector_20const__2c_20Vector__29(HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2] + 56 >> 2], HEAP32[$3 + 528 >> 2], $9, $11);
if (!(!($6 > Math_fround(0)) | !HEAPU8[67570])) {
LogTime_28_29();
HEAPF64[$3 + 368 >> 3] = $6;
eprintf_28char_20const__2c_20____29(16881, $3 + 368 | 0);
SiteID__print_28_IO_FILE__29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2] + 16 | 0, HEAP32[16886]);
eputc_28char_29(10);
}
if (!HEAPU8[67594]) {
break label$19;
}
HEAP32[$3 + 352 >> 2] = $0;
eprintf_28char_20const__2c_20____29(20379, $3 + 352 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 288 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
HEAPF64[$3 + 336 >> 3] = Math_fround(-$6);
eprintf_28char_20const__2c_20____29(7874, $3 + 336 | 0);
eputc_28char_29(10);
}
label$22: {
if (!($10 & 255) | !(($8 ? $13 : $5) | $4)) {
break label$22;
}
HEAP32[$3 + 544 >> 2] = 0;
HEAP32[$3 + 528 >> 2] = 0;
$4 = HEAP32[$0 + 528 >> 2];
$5 = HEAP32[$4 >> 2];
$4 = HEAP32[HEAP32[$4 + 32 >> 2] + 16 >> 2];
HEAP32[$3 + 332 >> 2] = $4;
HEAP32[$3 + 576 >> 2] = $4;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($5, 0, $3 + 332 | 0, 0, $3 + 544 | 0, $3 + 528 | 0);
if (!HEAP32[$3 + 528 >> 2]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(19590, 0);
SiteID__print_28_IO_FILE__29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2] + 16 | 0, HEAP32[16886]);
eputc_28char_29(10);
break label$22;
}
$4 = Vector__Vector_28_29($3 + 600 | 0);
Quaternion__invRotateVector_28Vector_20const__2c_20Vector__29_20const($0 + 436 | 0, 68068, $4);
$5 = Vector__Vector_28_29($3 + 584 | 0);
$7 = Handshape__SiteToHullVector_28Site__2c_20Vector_20const__2c_20Vector__29(HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2] + 56 >> 2], HEAP32[$3 + 528 >> 2], $4, $5);
if (!(!($7 > Math_fround(0)) | !HEAPU8[67570])) {
LogTime_28_29();
HEAPF64[$3 + 320 >> 3] = $7;
eprintf_28char_20const__2c_20____29(16970, $3 + 320 | 0);
SiteID__print_28_IO_FILE__29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2] + 16 | 0, HEAP32[16886]);
eputc_28char_29(10);
}
if (!HEAPU8[67594]) {
break label$22;
}
HEAP32[$3 + 304 >> 2] = $0;
eprintf_28char_20const__2c_20____29(20407, $3 + 304 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 400 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
HEAPF64[$3 + 288 >> 3] = $7;
eprintf_28char_20const__2c_20____29(7887, $3 + 288 | 0);
eputc_28char_29(10);
}
$6 = Math_fround($6 + $7);
label$25: {
if (!HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 44 >> 2]) {
break label$25;
}
if (HEAPU8[67570]) {
LogTime_28_29();
HEAP32[$3 + 272 >> 2] = HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 44 >> 2];
eprintf_28char_20const__2c_20____29(38485, $3 + 272 | 0);
}
if (HEAPU8[67594]) {
HEAP32[$3 + 256 >> 2] = HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 44 >> 2];
eprintf_28char_20const__2c_20____29(33667, $3 + 256 | 0);
}
$4 = $2 + 4 | 0;
$6 = Math_fround(Math_fround(HEAPF32[HEAP32[$0 + 528 >> 2] + 16 >> 2] * HanimAvatar__siteStdDistance_28SiteIDPair_20const__29_20const(HEAP32[$1 >> 2], $4)) + $6);
if (!HEAPU8[67594]) {
break label$25;
}
HEAP32[$3 + 240 >> 2] = $0;
HEAPF64[$3 + 248 >> 3] = $6;
eprintf_28char_20const__2c_20____29(18422, $3 + 240 | 0);
SiteIDPair__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
eputc_28char_29(10);
}
$4 = $0 + 60 | 0;
label$28: {
if (!($6 >= Math_fround(0)) | !HEAP32[HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2] + 44 >> 2]) {
break label$28;
}
$1 = HandsitePriority_28Location_29(HEAPU8[$2 + 16 | 0]);
$17 = $2 + 88 | 0;
$5 = HandsitePriority_28Location_29(HEAPU8[$17 | 0]);
$13 = ($1 | 0) < ($5 | 0);
$5 = ($1 | 0) > ($5 | 0);
$1 = $8 ? $13 : $5;
$13 = $8 ? $5 : $13;
if (HEAPU8[67594]) {
HEAP32[$3 + 228 >> 2] = $1 ? 84 : 70;
HEAP32[$3 + 224 >> 2] = $13 ? 84 : 70;
eprintf_28char_20const__2c_20____29(31055, $3 + 224 | 0);
}
$19 = $2 + 16 | 0;
$5 = 0;
$9 = Vector__Vector_28_29($3 + 600 | 0);
label$30: {
if (!(($12 & 255) != 0 | $1)) {
$1 = HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2];
$11 = $8 ? $19 : $17;
$12 = HEAP32[$11 >> 2];
HEAP32[$3 + 220 >> 2] = $12;
HEAP32[$3 + 568 >> 2] = $12;
$5 = OneHGesture__transferHandsiteNormalToGlobalFrame_28Vector__2c_20SiteID_29($1, $9, $3 + 220 | 0);
if (!HEAPU8[67570]) {
break label$30;
}
LogTime_28_29();
if ($5) {
eprintf_28char_20const__2c_20____29(18924, 0);
SiteID__print_28_IO_FILE__29_20const($11, HEAP32[16886]);
eputs_28char_20const__29(21255);
Vector__print_28_IO_FILE__2c_20int_29_20const($9, HEAP32[16886], 3);
eputc_28char_29(10);
$5 = 1;
break label$30;
}
$5 = 0;
eprintf_28char_20const__2c_20____29(18886, 0);
SiteID__print_28_IO_FILE__29_20const($11, HEAP32[16886]);
eputc_28char_29(10);
break label$30;
}
if (!HEAPU8[67570]) {
break label$30;
}
LogTime_28_29();
HEAP32[$3 + 212 >> 2] = $1 ? 84 : 70;
HEAP32[$3 + 208 >> 2] = $12 & 255 ? 84 : 70;
eprintf_28char_20const__2c_20____29(44617, $3 + 208 | 0);
}
$12 = 0;
$11 = Vector__Vector_28_29($3 + 584 | 0);
label$33: {
if (!(($10 & 255) != 0 | $13)) {
$1 = HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2];
$13 = $8 ? $17 : $19;
$10 = HEAP32[$13 >> 2];
HEAP32[$3 + 204 >> 2] = $10;
HEAP32[$3 + 560 >> 2] = $10;
$12 = OneHGesture__transferHandsiteNormalToGlobalFrame_28Vector__2c_20SiteID_29($1, $11, $3 + 204 | 0);
if (!HEAPU8[67570]) {
break label$33;
}
LogTime_28_29();
if ($12) {
eprintf_28char_20const__2c_20____29(19002, 0);
SiteID__print_28_IO_FILE__29_20const($13, HEAP32[16886]);
eputs_28char_20const__29(21255);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputc_28char_29(10);
$12 = 1;
break label$33;
}
$12 = 0;
eprintf_28char_20const__2c_20____29(18965, 0);
SiteID__print_28_IO_FILE__29_20const($13, HEAP32[16886]);
eputc_28char_29(10);
break label$33;
}
if (!HEAPU8[67570]) {
break label$33;
}
LogTime_28_29();
HEAP32[$3 + 196 >> 2] = $13 ? 84 : 70;
HEAP32[$3 + 192 >> 2] = $10 & 255 ? 84 : 70;
eprintf_28char_20const__2c_20____29(44526, $3 + 192 | 0);
}
$1 = Vector__Vector_28_29($3 + 544 | 0);
label$36: {
if ($5) {
if ($12) {
$7 = Vector__cosAngleWith_28Vector_20const__29_20const($9, $11);
if ($7 > Math_fround(.800000011920929)) {
Vector__setFrom_28float_2c_20float_2c_20float_29($1, Math_fround(1), Math_fround(0), Math_fround(0));
if (!HEAPU8[67570]) {
break label$36;
}
LogTime_28_29();
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Math_fround(Math_fround(acos_28float_29($7) * Math_fround(180)) / HEAPF32[17668]), 
HEAPF64[wasm2js_i32$0 + 176 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(38390, $3 + 176 | 0);
break label$36;
}
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $9, $11);
Vector__setLength_28float_29($1, Math_fround(Math_sqrt(minREAL_28float_2c_20float_29(Vector__lengthsq_28_29_20const($9), Vector__lengthsq_28_29_20const($11)))));
if (!HEAPU8[67570]) {
break label$36;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(32557, 0);
eputs_28char_20const__29(24156);
Vector__print_28_IO_FILE__2c_20int_29_20const($9, HEAP32[16886], 3);
eputs_28char_20const__29(24156);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputs_28char_20const__29(24156);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
break label$36;
}
Vector__setFrom_28Vector_20const__29($1, $9);
break label$36;
}
if ($12) {
Vector__setSubtract_28Vector_20const__29($1, $11);
break label$36;
}
Vector__setFrom_28float_2c_20float_2c_20float_29($1, Math_fround(1), Math_fround(0), Math_fround(0));
}
if (Vector__isZero_28_29_20const($1)) {
Vector__setFrom_28float_2c_20float_2c_20float_29($1, Math_fround(1), Math_fround(0), Math_fround(0));
}
$18 = Math_fround(.5);
$14 = Math_fround(.5);
$10 = HEAPU8[HEAP32[$0 + 528 >> 2] + 13 | 0];
label$42: {
if ($10 & 1) {
break label$42;
}
$7 = HEAPF32[17217];
$15 = Math_fround(Math_fround(1) - $7);
if ($10 & 2) {
$18 = $8 ? $7 : $15;
$14 = $8 ? $15 : $7;
break label$42;
}
$18 = $8 ? $15 : $7;
$14 = $8 ? $7 : $15;
}
$7 = $18;
Vector__setLength_28float_29($1, $6);
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(21762, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(45644);
LogTime_28_29();
HEAPF64[$3 + 168 >> 3] = $14;
HEAPF64[$3 + 160 >> 3] = $7;
eprintf_28char_20const__2c_20____29(39991, $3 + 160 | 0);
}
$8 = Vector__Vector_28_29($3 + 528 | 0);
label$45: {
if (SiteID__isArmHandSite_28_29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2] + 4 | 0)) {
break label$45;
}
if (SiteID__isArmHandSite_28_29_20const(HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2] + 4 | 0)) {
break label$45;
}
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($8, $0 + 400 | 0, $0 + 288 | 0);
}
if (HEAPU8[67594]) {
eprintf_28char_20const__2c_20____29(20264, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
}
$5 = Vector__Vector_28_29($3 + 512 | 0);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($5, $1, $8);
if (HEAPU8[67594]) {
HEAP32[$3 + 144 >> 2] = $0;
eprintf_28char_20const__2c_20____29(18222, $3 + 144 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(18204);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputs_28char_20const__29(18213);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
}
$8 = Vector__Vector_28Vector_20const__29($3 + 496 | 0, $5);
Vector__setScale_28float_29($8, $7);
$5 = Vector__Vector_28Vector_20const__29($3 + 480 | 0, $5);
Vector__setScale_28float_29($5, $14);
if (HEAPU8[67594]) {
HEAP32[$3 + 128 >> 2] = $0;
eprintf_28char_20const__2c_20____29(18089, $3 + 128 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 288 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(15347);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
HEAP32[$3 + 112 >> 2] = $0;
eprintf_28char_20const__2c_20____29(18124, $3 + 112 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 400 | 0, HEAP32[16886], 3);
eputs_28char_20const__29(15347);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
$1 = 0;
}
$1 = $0 + 288 | 0;
Vector__setSubtract_28Vector_20const__29($1, $8);
$8 = $0 + 400 | 0;
Vector__setAdd_28Vector_20const__29($8, $5);
if (!HEAPU8[67594]) {
break label$28;
}
eputs_28char_20const__29(19980);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
eputs_28char_20const__29(20010);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 3);
eputc_28char_29(10);
if (!HEAPU8[67594]) {
break label$28;
}
$6 = HEAPF32[HEAP32[$0 + 528 >> 2] + 16 >> 2];
$5 = HEAP32[$2 + 144 >> 2];
HEAPF64[$3 + 96 >> 3] = Math_fround($14 - $7);
HEAP32[$3 + 84 >> 2] = $5;
HEAP32[$3 + 80 >> 2] = $0;
HEAPF64[$3 + 88 >> 3] = $6;
eprintf_28char_20const__2c_20____29(38667, $3 + 80 | 0);
}
TwoHConcretePostureChange__fixWrists_28_29($4);
Gesture__ShiftToPalm_28TwoHConcretePosture__29_20const(HEAP32[$0 + 528 >> 2], $16);
label$49: {
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$49;
}
$6 = HEAPF32[HEAP32[TwoHAbstractPosture__right_28bool_29($2, 1) + 56 >> 2] + 228 >> 2];
HEAPF32[$0 + 356 >> 2] = $6;
if (!HEAPU8[67593]) {
break label$49;
}
HEAPF64[$3 + 64 >> 3] = $6;
eprintf_28char_20const__2c_20____29(25574, $3 - -64 | 0);
}
label$50: {
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$50;
}
$6 = HEAPF32[HEAP32[TwoHAbstractPosture__left_28bool_29($2, 1) + 56 >> 2] + 228 >> 2];
HEAPF32[$0 + 468 >> 2] = $6;
if (!HEAPU8[67593]) {
break label$50;
}
HEAPF64[$3 + 48 >> 3] = $6;
eprintf_28char_20const__2c_20____29(25619, $3 + 48 | 0);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
label$51: {
if (!HEAPU8[67594]) {
break label$51;
}
HEAP32[$3 + 32 >> 2] = $0;
eprintf_28char_20const__2c_20____29(20284, $3 + 32 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 288 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
HEAP32[$3 + 16 >> 2] = $0;
eprintf_28char_20const__2c_20____29(20311, $3 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 400 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
if (!HEAPU8[67594]) {
break label$51;
}
$6 = HEAPF32[$0 + 40 >> 2];
HEAP32[$3 >> 2] = $0;
HEAPF64[$3 + 8 >> 3] = $6;
eprintf_28char_20const__2c_20____29(30870, $3);
}
label$52: {
if (!HEAPU8[67570]) {
break label$52;
}
if (TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const($16, HEAP32[$0 + 8 >> 2])) {
break label$52;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(33477, 0);
$0 = HEAP32[$0 + 8 >> 2];
TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const($4, HEAP32[16886], $0);
}
__stack_pointer = $3 + 656 | 0;
}
function doContent($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$8 = __stack_pointer - 48 | 0;
__stack_pointer = $8;
HEAP32[$8 + 44 >> 2] = $3;
$12 = HEAP32[$0 + 340 >> 2];
label$1: {
if (HEAP32[$0 + 144 >> 2] == ($2 | 0)) {
$11 = $0 + 272 | 0;
$13 = $0 + 276 | 0;
break label$1;
}
$11 = HEAP32[$0 + 284 >> 2];
$13 = $11 + 4 | 0;
}
HEAP32[$11 >> 2] = $3;
$17 = $12 + 80 | 0;
$14 = $0 + 400 | 0;
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
while (1) {
$3 = HEAP32[$8 + 44 >> 2];
HEAP32[$8 + 40 >> 2] = $3;
$9 = FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($2, $3, $4, $8 + 40 | 0) | 0;
$3 = HEAP32[$8 + 40 >> 2];
HEAP32[$13 >> 2] = $3;
$7 = 17;
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
switch ($9 + 5 | 0) {
case 2:
if ($6) {
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
}
HEAP32[$13 >> 2] = $4;
$3 = HEAP32[$0 + 60 >> 2];
label$31: {
if ($3) {
HEAP8[$8 + 8 | 0] = 10;
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], $8 + 8 | 0, 1);
break label$31;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$31;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $4);
}
if (!$1) {
break label$4;
}
$7 = 13;
if (HEAP32[$0 + 296 >> 2] != ($1 | 0)) {
break label$3;
}
break label$6;
case 1:
if ($6) {
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
}
if (($1 | 0) <= 0) {
break label$4;
}
$7 = 13;
if (HEAP32[$0 + 296 >> 2] != ($1 | 0)) {
break label$3;
}
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
case 5:
HEAP32[$11 >> 2] = $3;
$7 = 4;
break label$3;
case 4:
if (!$6) {
$7 = 5;
break label$3;
}
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
case 3:
if (!$6) {
$7 = 6;
break label$3;
}
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
case 14:
$7 = HEAP32[$2 + 64 >> 2];
$3 = FUNCTION_TABLE[HEAP32[$2 + 44 >> 2]]($2, $7 + HEAP32[$8 + 44 >> 2] | 0, $3 - $7 | 0) | 0;
HEAP8[$8 + 8 | 0] = $3;
if ($3 & 255) {
$3 = HEAP32[$0 + 60 >> 2];
if ($3) {
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], $8 + 8 | 0, 1);
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$9;
}
$3 = HEAP32[$2 + 64 >> 2];
$7 = poolStoreString($17, $2, $3 + HEAP32[$8 + 44 >> 2] | 0, HEAP32[$8 + 40 >> 2] - $3 | 0);
if (!$7) {
break label$7;
}
$3 = lookup($12, $7, 0);
HEAP32[$12 + 92 >> 2] = HEAP32[$12 + 96 >> 2];
label$38: {
if (!(HEAPU8[$12 + 130 | 0] ? 0 : HEAPU8[$12 + 129 | 0])) {
if (!$3) {
$7 = 11;
break label$3;
}
if (HEAPU8[$3 + 34 | 0]) {
break label$38;
}
$7 = 24;
break label$3;
}
if ($3) {
break label$38;
}
$3 = HEAP32[$0 + 120 >> 2];
if ($3) {
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], $7, 0);
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$9;
}
if (HEAPU8[$3 + 32 | 0]) {
$7 = 12;
break label$3;
}
if (HEAP32[$3 + 28 >> 2]) {
$7 = 15;
break label$3;
}
if (HEAP32[$3 + 4 >> 2]) {
if (HEAPU8[$0 + 292 | 0]) {
break label$12;
}
$7 = HEAP32[$0 + 120 >> 2];
if ($7) {
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$3 >> 2], 0);
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$9;
}
if (HEAP32[$0 + 112 >> 2]) {
$7 = 1;
HEAP8[$3 + 32 | 0] = 1;
$9 = getContext($0);
HEAP8[$3 + 32 | 0] = 0;
if (!$9) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 112 >> 2]](HEAP32[$0 + 116 >> 2], $9, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]) | 0)) {
$7 = 21;
break label$3;
}
HEAP32[$0 + 412 >> 2] = HEAP32[$0 + 416 >> 2];
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$9;
case 6:
case 7:
$3 = HEAP32[$0 + 352 >> 2];
label$49: {
if ($3) {
HEAP32[$0 + 352 >> 2] = HEAP32[$3 >> 2];
break label$49;
}
$7 = 1;
$3 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](48) | 0;
if (!$3) {
break label$3;
}
$9 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](32) | 0;
HEAP32[$3 + 36 >> 2] = $9;
if (!$9) {
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]]($3);
break label$3;
}
HEAP32[$3 + 40 >> 2] = $9 + 32;
}
HEAP32[$3 + 44 >> 2] = 0;
HEAP32[$3 >> 2] = HEAP32[$0 + 348 >> 2];
HEAP32[$0 + 348 >> 2] = $3;
HEAP32[$3 + 16 >> 2] = 0;
HEAP32[$3 + 20 >> 2] = 0;
$7 = HEAP32[$8 + 44 >> 2] + HEAP32[$2 + 64 >> 2] | 0;
HEAP32[$3 + 4 >> 2] = $7;
wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$2 + 28 >> 2]]($2, $7) | 0, 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 296 >> 2] + 1;
$7 = HEAP32[$3 + 8 >> 2];
$9 = HEAP32[$3 + 4 >> 2];
HEAP32[$8 + 36 >> 2] = $9;
$15 = $3 + 12 | 0;
$18 = $3 + 44 | 0;
$9 = $7 + $9 | 0;
$10 = HEAP32[$3 + 40 >> 2];
$7 = HEAP32[$3 + 36 >> 2];
while (1) {
label$53: {
HEAP32[$8 + 8 >> 2] = $7;
FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($2, $8 + 36 | 0, $9, $8 + 8 | 0, $10 - 1 | 0);
$10 = HEAP32[$8 + 8 >> 2];
$7 = HEAP32[$3 + 36 >> 2];
$16 = $10 - $7 | 0;
if (HEAP32[$8 + 36 >> 2] == ($9 | 0)) {
break label$53;
}
$10 = HEAP32[$3 + 40 >> 2] - $7 << 1;
$7 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]]($7, $10) | 0;
if (!$7) {
break label$7;
}
HEAP32[$3 + 36 >> 2] = $7;
$10 = $7 + $10 | 0;
HEAP32[$3 + 40 >> 2] = $10;
$7 = $7 + $16 | 0;
continue;
}
break;
}
;
HEAP32[$3 + 24 >> 2] = $16;
HEAP32[$3 + 12 >> 2] = $7;
HEAP8[$10 | 0] = 0;
$7 = storeAtts($0, $2, HEAP32[$8 + 44 >> 2], $15, $18);
if ($7) {
break label$3;
}
$3 = HEAP32[$0 + 52 >> 2];
if ($3) {
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$15 >> 2], HEAP32[$0 + 376 >> 2]);
break label$10;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$10;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$10;
case 8:
case 9:
$3 = HEAP32[$2 + 64 >> 2];
$7 = HEAP32[$8 + 44 >> 2];
HEAP32[$8 + 36 >> 2] = 0;
$3 = $3 + $7 | 0;
$3 = poolStoreString($14, $2, $3, (FUNCTION_TABLE[HEAP32[$2 + 28 >> 2]]($2, $3) | 0) + $3 | 0);
HEAP32[$8 + 8 >> 2] = $3;
if (!$3) {
break label$7;
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$7 = storeAtts($0, $2, HEAP32[$8 + 44 >> 2], $8 + 8 | 0, $8 + 36 | 0);
if ($7) {
break label$3;
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$3 = HEAP32[$0 + 52 >> 2];
label$55: {
label$56: {
if (!$3) {
$7 = HEAP32[$0 + 56 >> 2];
if ($7) {
break label$56;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$55;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$55;
}
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$8 + 8 >> 2], HEAP32[$0 + 376 >> 2]);
$7 = HEAP32[$0 + 56 >> 2];
if (!$7) {
break label$55;
}
$3 = HEAP32[$0 + 52 >> 2];
}
if ($3) {
HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
$7 = HEAP32[$0 + 56 >> 2];
}
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$8 + 8 >> 2]);
}
poolClear($14);
$3 = HEAP32[$8 + 36 >> 2];
while (1) {
if ($3) {
$7 = HEAP32[$0 + 104 >> 2];
if ($7) {
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$3 >> 2] >> 2]);
}
$7 = HEAP32[$3 + 4 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 360 >> 2];
HEAP32[$0 + 360 >> 2] = $3;
HEAP32[HEAP32[$3 >> 2] + 4 >> 2] = HEAP32[$3 + 8 >> 2];
$3 = $7;
continue;
}
break;
}
;
if (HEAP32[$0 + 296 >> 2]) {
break label$9;
}
$7 = epilogProcessor($0, HEAP32[$8 + 40 >> 2], $4, $5);
break label$3;
case 10:
if (HEAP32[$0 + 296 >> 2] == ($1 | 0)) {
break label$11;
}
$7 = HEAP32[$0 + 348 >> 2];
HEAP32[$0 + 348 >> 2] = HEAP32[$7 >> 2];
HEAP32[$7 >> 2] = HEAP32[$0 + 352 >> 2];
HEAP32[$0 + 352 >> 2] = $7;
label$62: {
$3 = HEAP32[$8 + 44 >> 2] + (HEAP32[$2 + 64 >> 2] << 1) | 0;
$9 = FUNCTION_TABLE[HEAP32[$2 + 28 >> 2]]($2, $3) | 0;
if (($9 | 0) == HEAP32[$7 + 8 >> 2]) {
if (!memcmp(HEAP32[$7 + 4 >> 2], $3, $9)) {
break label$62;
}
}
HEAP32[$11 >> 2] = $3;
$7 = 7;
break label$3;
}
HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 296 >> 2] - 1;
$3 = HEAP32[$0 + 56 >> 2];
label$64: {
if ($3) {
label$66: {
if (!HEAPU8[$0 + 232 | 0]) {
break label$66;
}
$9 = HEAP32[$7 + 16 >> 2];
if (!$9) {
break label$66;
}
$3 = HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 28 >> 2] | 0;
while (1) {
$10 = HEAPU8[$9 | 0];
if ($10) {
HEAP8[$3 | 0] = $10;
$3 = $3 + 1 | 0;
$9 = $9 + 1 | 0;
continue;
}
break;
}
label$69: {
if (!HEAPU8[$0 + 233 | 0]) {
break label$69;
}
$9 = HEAP32[$7 + 20 >> 2];
if (!$9) {
break label$69;
}
HEAP8[$3 | 0] = HEAPU8[$0 + 456 | 0];
while (1) {
$3 = $3 + 1 | 0;
$10 = HEAPU8[$9 | 0];
if (!$10) {
break label$69;
}
HEAP8[$3 | 0] = $10;
$9 = $9 + 1 | 0;
continue;
}
}
HEAP8[$3 | 0] = 0;
$3 = HEAP32[$0 + 56 >> 2];
}
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$7 + 12 >> 2]);
break label$64;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$64;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
}
while (1) {
$3 = HEAP32[$7 + 44 >> 2];
if ($3) {
$9 = $3;
$10 = HEAP32[$0 + 104 >> 2];
if ($10) {
FUNCTION_TABLE[$10 | 0](HEAP32[$0 + 4 >> 2], HEAP32[HEAP32[$3 >> 2] >> 2]);
$9 = HEAP32[$7 + 44 >> 2];
}
HEAP32[$7 + 44 >> 2] = HEAP32[$9 + 4 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 360 >> 2];
HEAP32[$0 + 360 >> 2] = $3;
HEAP32[HEAP32[$3 >> 2] + 4 >> 2] = HEAP32[$3 + 8 >> 2];
continue;
}
break;
}
;
if (HEAP32[$0 + 296 >> 2]) {
break label$9;
}
$7 = epilogProcessor($0, HEAP32[$8 + 40 >> 2], $4, $5);
break label$3;
case 15:
$3 = FUNCTION_TABLE[HEAP32[$2 + 40 >> 2]]($2, HEAP32[$8 + 44 >> 2]) | 0;
if (($3 | 0) < 0) {
$7 = 14;
break label$3;
}
$7 = HEAP32[$0 + 60 >> 2];
if ($7) {
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], $8 + 8 | 0, XmlUtf8Encode($3, $8 + 8 | 0));
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2]);
break label$9;
case 12:
$7 = HEAP32[$0 + 60 >> 2];
if ($7) {
HEAP8[$8 + 8 | 0] = 10;
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], $8 + 8 | 0, 1);
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $3);
break label$9;
case 13:
$7 = HEAP32[$0 + 72 >> 2];
label$77: {
if ($7) {
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2]);
break label$77;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$77;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $3);
}
$7 = doCdataSection($0, $2, $8 + 40 | 0, $4, $5, $6);
if ($7) {
break label$3;
}
if (HEAP32[$8 + 40 >> 2]) {
break label$9;
}
HEAP32[$0 + 264 >> 2] = 774;
break label$5;
case 0:
if ($6) {
HEAP32[$5 >> 2] = HEAP32[$8 + 44 >> 2];
break label$5;
}
$3 = HEAP32[$0 + 60 >> 2];
label$80: {
if ($3) {
if (!HEAPU8[$2 + 68 | 0]) {
HEAP32[$8 + 8 >> 2] = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($2, $8 + 44 | 0, $4, $8 + 8 | 0, HEAP32[$0 + 48 >> 2]);
$3 = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 60 >> 2]](HEAP32[$0 + 4 >> 2], $3, HEAP32[$8 + 8 >> 2] - $3 | 0);
break label$80;
}
$2 = HEAP32[$8 + 44 >> 2];
FUNCTION_TABLE[$3 | 0](HEAP32[$0 + 4 >> 2], $2, $4 - $2 | 0);
break label$80;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$80;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $4);
}
if (!$1) {
HEAP32[$11 >> 2] = $4;
break label$4;
}
if (HEAP32[$0 + 296 >> 2] == ($1 | 0)) {
break label$6;
}
HEAP32[$11 >> 2] = $4;
break label$11;
case 11:
$7 = HEAP32[$0 + 60 >> 2];
if ($7) {
if (!HEAPU8[$2 + 68 | 0]) {
while (1) {
HEAP32[$8 + 8 >> 2] = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($2, $8 + 44 | 0, $3, $8 + 8 | 0, HEAP32[$0 + 48 >> 2]);
HEAP32[$13 >> 2] = HEAP32[$8 + 44 >> 2];
$3 = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], $3, HEAP32[$8 + 8 >> 2] - $3 | 0);
$3 = HEAP32[$8 + 44 >> 2];
if (($3 | 0) == HEAP32[$8 + 40 >> 2]) {
break label$9;
}
HEAP32[$11 >> 2] = $3;
$3 = HEAP32[$8 + 40 >> 2];
continue;
}
}
$9 = HEAP32[$8 + 44 >> 2];
FUNCTION_TABLE[$7 | 0](HEAP32[$0 + 4 >> 2], $9, $3 - $9 | 0);
break label$9;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $3);
break label$9;
case 16:
if (!reportProcessingInstruction($0, $2, HEAP32[$8 + 44 >> 2], $3)) {
break label$7;
}
break label$9;
case 18:
if (!reportComment($0, $2, HEAP32[$8 + 44 >> 2], $3)) {
break label$7;
}
break label$9;
case 17:
break label$3;
default:
break label$13;
}
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$9;
}
reportDefault($0, $2, HEAP32[$8 + 44 >> 2], $3);
break label$9;
}
$7 = processInternalEntity($0, $3);
if (!$7) {
break label$9;
}
break label$3;
}
$7 = 13;
break label$3;
}
poolClear($14);
}
$3 = HEAP32[$8 + 40 >> 2];
HEAP32[$8 + 44 >> 2] = $3;
HEAP32[$11 >> 2] = $3;
$7 = 35;
label$87: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 0:
break label$3;
case 1:
break label$87;
default:
continue;
}
}
break;
}
HEAP32[$5 >> 2] = HEAP32[$8 + 40 >> 2];
break label$5;
}
$7 = 1;
break label$3;
}
HEAP32[$5 >> 2] = $4;
}
$7 = 0;
break label$3;
}
$7 = 3;
}
__stack_pointer = $8 + 48 | 0;
return $7;
}
function printf_core($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$7 = __stack_pointer - 80 | 0;
__stack_pointer = $7;
HEAP32[$7 + 76 >> 2] = $1;
$24 = $7 + 55 | 0;
$21 = $7 + 56 | 0;
$1 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: while (1) {
if ((2147483647 - $15 | 0) < ($1 | 0)) {
break label$4;
}
$15 = $1 + $15 | 0;
label$6: {
label$8: {
label$9: {
$13 = HEAP32[$7 + 76 >> 2];
$1 = $13;
$12 = HEAPU8[$1 | 0];
if ($12) {
while (1) {
label$12: {
$12 = $12 & 255;
label$13: {
if (!$12) {
$12 = $1;
break label$13;
}
if (($12 | 0) != 37) {
break label$12;
}
$12 = $1;
while (1) {
if (HEAPU8[$1 + 1 | 0] != 37) {
break label$13;
}
$9 = $1 + 2 | 0;
HEAP32[$7 + 76 >> 2] = $9;
$12 = $12 + 1 | 0;
$8 = HEAPU8[$1 + 2 | 0];
$1 = $9;
if (($8 | 0) == 37) {
continue;
}
break;
}
}
$1 = $12 - $13 | 0;
$12 = 2147483647 - $15 | 0;
if (($1 | 0) > ($12 | 0)) {
break label$4;
}
if ($0) {
out($0, $13, $1);
}
if ($1) {
continue label$5;
}
$19 = -1;
$9 = 1;
$8 = isdigit(HEAP8[HEAP32[$7 + 76 >> 2] + 1 | 0]);
$1 = HEAP32[$7 + 76 >> 2];
if (!(!$8 | HEAPU8[$1 + 2 | 0] != 36)) {
$19 = HEAP8[$1 + 1 | 0] - 48 | 0;
$22 = 1;
$9 = 3;
}
$1 = $1 + $9 | 0;
HEAP32[$7 + 76 >> 2] = $1;
$16 = 0;
$18 = HEAP8[$1 | 0];
$8 = $18 - 32 | 0;
label$18: {
if ($8 >>> 0 > 31) {
$9 = $1;
break label$18;
}
$9 = $1;
$8 = 1 << $8;
if (!($8 & 75913)) {
break label$18;
}
while (1) {
$9 = $1 + 1 | 0;
HEAP32[$7 + 76 >> 2] = $9;
$16 = $8 | $16;
$18 = HEAP8[$1 + 1 | 0];
$8 = $18 - 32 | 0;
if ($8 >>> 0 >= 32) {
break label$18;
}
$1 = $9;
$8 = 1 << $8;
if ($8 & 75913) {
continue;
}
break;
}
}
label$21: {
if (($18 | 0) == 42) {
label$23: {
label$24: {
if (!isdigit(HEAP8[$9 + 1 | 0])) {
break label$24;
}
$9 = HEAP32[$7 + 76 >> 2];
if (HEAPU8[$9 + 2 | 0] != 36) {
break label$24;
}
HEAP32[((HEAP8[$9 + 1 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
$17 = HEAP32[((HEAP8[$9 + 1 | 0] << 3) + $3 | 0) - 384 >> 2];
$22 = 1;
$1 = $9 + 3 | 0;
break label$23;
}
if ($22) {
break label$9;
}
$22 = 0;
$17 = 0;
if ($0) {
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$17 = HEAP32[$1 >> 2];
}
$1 = HEAP32[$7 + 76 >> 2] + 1 | 0;
}
HEAP32[$7 + 76 >> 2] = $1;
if (($17 | 0) >= 0) {
break label$21;
}
$17 = 0 - $17 | 0;
$16 = $16 | 8192;
break label$21;
}
$17 = getint($7 + 76 | 0);
if (($17 | 0) < 0) {
break label$4;
}
$1 = HEAP32[$7 + 76 >> 2];
}
$9 = 0;
$10 = -1;
$11 = 0;
label$26: {
if (HEAPU8[$1 | 0] != 46) {
break label$26;
}
if (HEAPU8[$1 + 1 | 0] == 42) {
label$28: {
label$29: {
if (!isdigit(HEAP8[$1 + 2 | 0])) {
break label$29;
}
$8 = HEAP32[$7 + 76 >> 2];
if (HEAPU8[$8 + 3 | 0] != 36) {
break label$29;
}
HEAP32[((HEAP8[$8 + 2 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
$10 = HEAP32[((HEAP8[$8 + 2 | 0] << 3) + $3 | 0) - 384 >> 2];
$1 = $8 + 4 | 0;
break label$28;
}
if ($22) {
break label$9;
}
if ($0) {
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$10 = HEAP32[$1 >> 2];
} else {
$10 = 0;
}
$1 = HEAP32[$7 + 76 >> 2] + 2 | 0;
}
HEAP32[$7 + 76 >> 2] = $1;
$11 = ($10 ^ -1) >>> 31 | 0;
break label$26;
}
HEAP32[$7 + 76 >> 2] = $1 + 1;
$10 = getint($7 + 76 | 0);
$1 = HEAP32[$7 + 76 >> 2];
$11 = 1;
}
$23 = $11;
while (1) {
$8 = $9;
$20 = 28;
if (HEAP8[$1 | 0] - 123 >>> 0 < 4294967238) {
break label$3;
}
$18 = $1 + 1 | 0;
HEAP32[$7 + 76 >> 2] = $18;
$9 = HEAP8[$1 | 0];
$1 = $18;
$9 = HEAPU8[(Math_imul($8, 58) + $9 | 0) + 54719 | 0];
if ($9 - 1 >>> 0 < 8) {
continue;
}
break;
}
label$33: {
label$34: {
if (($9 | 0) != 27) {
if (!$9) {
break label$3;
}
if (($19 | 0) >= 0) {
HEAP32[($19 << 2) + $4 >> 2] = $9;
$1 = ($19 << 3) + $3 | 0;
$14 = HEAP32[$1 >> 2];
$11 = HEAP32[$1 + 4 >> 2];
HEAP32[$7 + 64 >> 2] = $14;
HEAP32[$7 + 68 >> 2] = $11;
break label$34;
}
if (!$0) {
break label$6;
}
pop_arg($7 - -64 | 0, $9, $2, $6);
$18 = HEAP32[$7 + 76 >> 2];
break label$33;
}
if (($19 | 0) >= 0) {
break label$3;
}
}
$1 = 0;
if (!$0) {
continue label$5;
}
}
$11 = $16 & -65537;
$9 = $16 & 8192 ? $11 : $16;
$16 = 0;
$19 = 1696;
$20 = $21;
label$37: {
label$38: {
label$39: {
label$40: {
label$41: {
label$42: {
label$43: {
label$44: {
label$45: {
label$46: {
label$47: {
label$48: {
label$49: {
label$50: {
label$51: {
label$52: {
$1 = HEAP8[$18 - 1 | 0];
$1 = $8 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
switch ($1 - 88 | 0) {
case 11:
break label$37;
case 9:
case 13:
case 14:
case 15:
break label$38;
case 27:
break label$43;
case 12:
case 17:
break label$46;
case 23:
break label$47;
case 0:
case 32:
break label$48;
case 24:
break label$49;
case 22:
break label$50;
case 29:
break label$51;
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 10:
case 16:
case 18:
case 19:
case 20:
case 21:
case 25:
case 26:
case 28:
case 30:
case 31:
break label$8;
default:
break label$52;
}
}
label$53: {
switch ($1 - 65 | 0) {
case 0:
case 4:
case 5:
case 6:
break label$38;
case 2:
break label$41;
case 1:
case 3:
break label$8;
default:
break label$53;
}
}
if (($1 | 0) == 83) {
break label$42;
}
break label$8;
}
$11 = HEAP32[$7 + 64 >> 2];
$8 = $11;
$14 = HEAP32[$7 + 68 >> 2];
$1 = $14;
$19 = 1696;
break label$45;
}
$1 = 0;
label$54: {
switch ($8 & 255) {
case 0:
HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $15;
continue label$5;
case 1:
HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $15;
continue label$5;
case 2:
$11 = $15;
$14 = $11 >> 31;
$11 = HEAP32[$7 + 64 >> 2];
HEAP32[$11 >> 2] = $15;
HEAP32[$11 + 4 >> 2] = $14;
continue label$5;
case 3:
HEAP16[HEAP32[$7 + 64 >> 2] >> 1] = $15;
continue label$5;
case 4:
HEAP8[HEAP32[$7 + 64 >> 2]] = $15;
continue label$5;
case 6:
HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $15;
continue label$5;
case 7:
break label$54;
default:
continue label$5;
}
}
$11 = $15;
$14 = $11 >> 31;
$11 = HEAP32[$7 + 64 >> 2];
HEAP32[$11 >> 2] = $15;
HEAP32[$11 + 4 >> 2] = $14;
continue label$5;
}
$10 = $10 >>> 0 > 8 ? $10 : 8;
$9 = $9 | 8;
$1 = 120;
}
$14 = HEAP32[$7 + 64 >> 2];
$11 = HEAP32[$7 + 68 >> 2];
$13 = fmt_x($14, $11, $21, $1 & 32);
$11 = HEAP32[$7 + 64 >> 2];
$14 = HEAP32[$7 + 68 >> 2];
if (!($9 & 8) | !($11 | $14)) {
break label$44;
}
$19 = ($1 >>> 4 | 0) + 1696 | 0;
$16 = 2;
break label$44;
}
$14 = HEAP32[$7 + 64 >> 2];
$11 = HEAP32[$7 + 68 >> 2];
$13 = fmt_o($14, $11, $21);
if (!($9 & 8)) {
break label$44;
}
$1 = $21 - $13 | 0;
$10 = ($1 | 0) < ($10 | 0) ? $10 : $1 + 1 | 0;
break label$44;
}
$14 = HEAP32[$7 + 68 >> 2];
$1 = $14;
$11 = HEAP32[$7 + 64 >> 2];
$8 = $11;
if (($14 | 0) < 0) {
$11 = $8;
$8 = 0 - $11 | 0;
$14 = $1;
$1 = $14 + (($11 | 0) != 0) | 0;
$1 = 0 - $1 | 0;
HEAP32[$7 + 64 >> 2] = $8;
HEAP32[$7 + 68 >> 2] = $1;
$16 = 1;
$19 = 1696;
break label$45;
}
if ($9 & 2048) {
$16 = 1;
$19 = 1697;
break label$45;
}
$16 = $9 & 1;
$19 = $16 ? 1698 : 1696;
}
$13 = fmt_u($8, $1, $21);
}
if (($10 | 0) < 0 ? $23 : 0) {
break label$4;
}
$9 = $23 ? $9 & -65537 : $9;
$1 = HEAP32[$7 + 64 >> 2];
$8 = $1;
$1 = HEAP32[$7 + 68 >> 2];
if (!(($1 | $8) != 0 | $10)) {
$13 = $21;
$20 = $13;
$10 = 0;
break label$8;
}
$1 = !($1 | $8) + ($21 - $13 | 0) | 0;
$10 = ($1 | 0) < ($10 | 0) ? $10 : $1;
break label$8;
}
$1 = HEAP32[$7 + 64 >> 2];
$13 = $1 ? $1 : 14681;
$1 = strnlen($13, $10 >>> 0 < 2147483647 ? $10 : 2147483647);
$20 = $1 + $13 | 0;
if (($10 | 0) >= 0) {
$9 = $11;
$10 = $1;
break label$8;
}
$9 = $11;
$10 = $1;
if (HEAPU8[$20 | 0]) {
break label$4;
}
break label$8;
}
$12 = HEAP32[$7 + 64 >> 2];
if ($10) {
break label$40;
}
$1 = 0;
pad($0, 32, $17, 0, $9);
break label$39;
}
HEAP32[$7 + 12 >> 2] = 0;
$1 = HEAP32[$7 + 64 >> 2];
HEAP32[$7 + 8 >> 2] = $1;
HEAP32[$7 + 64 >> 2] = $7 + 8;
$10 = -1;
$12 = $7 + 8 | 0;
}
$1 = 0;
label$66: {
while (1) {
$8 = HEAP32[$12 >> 2];
if (!$8) {
break label$66;
}
$8 = wctomb($7 + 4 | 0, $8);
$13 = ($8 | 0) < 0;
if (!($13 | $10 - $1 >>> 0 < $8 >>> 0)) {
$12 = $12 + 4 | 0;
$1 = $1 + $8 | 0;
if ($10 >>> 0 > $1 >>> 0) {
continue;
}
break label$66;
}
break;
}
if ($13) {
break label$2;
}
}
$20 = 61;
if (($1 | 0) < 0) {
break label$3;
}
pad($0, 32, $17, $1, $9);
if (!$1) {
$1 = 0;
break label$39;
}
$8 = 0;
$12 = HEAP32[$7 + 64 >> 2];
while (1) {
$13 = HEAP32[$12 >> 2];
if (!$13) {
break label$39;
}
$13 = wctomb($7 + 4 | 0, $13);
$8 = $13 + $8 | 0;
if ($8 >>> 0 > $1 >>> 0) {
break label$39;
}
out($0, $7 + 4 | 0, $13);
$12 = $12 + 4 | 0;
if ($1 >>> 0 > $8 >>> 0) {
continue;
}
break;
}
}
pad($0, 32, $17, $1, $9 ^ 8192);
$1 = ($1 | 0) < ($17 | 0) ? $17 : $1;
continue label$5;
}
if (($10 | 0) < 0 ? $23 : 0) {
break label$4;
}
$20 = 61;
$1 = FUNCTION_TABLE[$5 | 0]($0, HEAPF64[$7 + 64 >> 3], $17, $10, $9, $1) | 0;
if (($1 | 0) >= 0) {
continue label$5;
}
break label$3;
}
$1 = HEAP32[$7 + 64 >> 2];
HEAP8[$7 + 55 | 0] = $1;
$10 = 1;
$13 = $24;
$9 = $11;
break label$8;
}
$9 = $1 + 1 | 0;
HEAP32[$7 + 76 >> 2] = $9;
$12 = HEAPU8[$1 + 1 | 0];
$1 = $9;
continue;
}
}
if ($0) {
break label$1;
}
if (!$22) {
break label$6;
}
$1 = 1;
while (1) {
$12 = HEAP32[($1 << 2) + $4 >> 2];
if ($12) {
pop_arg(($1 << 3) + $3 | 0, $12, $2, $6);
$15 = 1;
$1 = $1 + 1 | 0;
if (($1 | 0) != 10) {
continue;
}
break label$1;
}
break;
}
$15 = 1;
if ($1 >>> 0 >= 10) {
break label$1;
}
while (1) {
if (HEAP32[($1 << 2) + $4 >> 2]) {
break label$9;
}
$1 = $1 + 1 | 0;
if (($1 | 0) != 10) {
continue;
}
break;
}
break label$1;
}
$20 = 28;
break label$3;
}
$18 = $20 - $13 | 0;
$10 = ($10 | 0) > ($18 | 0) ? $10 : $18;
if (($10 | 0) > (2147483647 - $16 | 0)) {
break label$4;
}
$20 = 61;
$8 = $10 + $16 | 0;
$1 = ($8 | 0) < ($17 | 0) ? $17 : $8;
if (($12 | 0) < ($1 | 0)) {
break label$3;
}
pad($0, 32, $1, $8, $9);
out($0, $19, $16);
pad($0, 48, $1, $8, $9 ^ 65536);
pad($0, 48, $10, $18, 0);
out($0, $13, $18);
pad($0, 32, $1, $8, $9 ^ 8192);
continue;
}
break;
}
$15 = 0;
break label$1;
}
$20 = 61;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $20, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
$15 = -1;
}
__stack_pointer = $7 + 80 | 0;
return $15;
}
function MotionAttributes__setFromXMLAttribs_28char_20const__2c_20HashAny_char_20const__2c_20char_20const____2c_20Mirroring_2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = __stack_pointer - 208 | 0;
__stack_pointer = $5;
MotionAttributes__setZero_28_29($0);
wasm2js_i32$0 = $0, wasm2js_i32$1 = SiGML__convertElement_28char_20const__29($1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP8[$0 + 4 | 0] = HEAPU8[$3 | 0];
HashAny_char_20const__2c_20char_20const____startIteration_28_29_20const($5 + 200 | 0, $2);
HEAP32[$5 + 196 >> 2] = 0;
HEAP32[$5 + 192 >> 2] = 0;
$8 = $0 + 8 | 0;
$15 = $0 + 56 | 0;
$9 = $0 + 80 | 0;
$10 = $0 + 96 | 0;
$11 = $0 + 112 | 0;
$7 = $0 + 140 | 0;
$16 = $0 + 152 | 0;
$17 = $0 + 164 | 0;
$18 = $0 + 180 | 0;
$19 = $0 + 192 | 0;
label$1: {
while (1) {
if (HashAny_char_20const__2c_20char_20const____nextIteration_28char_20const___2c_20char_20const___2c_20HashAny_char_20const__2c_20char_20const____Iterator__29_20const($2, $5 + 196 | 0, $5 + 192 | 0, $5 + 200 | 0)) {
HEAP32[19359] = 0;
$1 = HEAP32[18783];
$3 = HEAP32[$5 + 196 >> 2];
$3 = invoke_iii(294, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
label$4: {
switch ($3 - 1 | 0) {
case 8:
HEAP32[19359] = 0;
$1 = HEAP32[18786];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[19359] = 0;
invoke_vii(511, $8 | 0, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 11:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$12 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 13:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$20 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 12:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$21 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 9:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$22 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 10:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$13 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 0:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 20 | 0] = $3;
continue;
case 1:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 21 | 0] = $3;
continue;
case 2:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 22 | 0] = $3;
continue;
case 3:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 23 | 0] = $3;
continue;
case 4:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 24 | 0] = $3;
continue;
case 14:
HEAP32[19359] = 0;
$1 = HEAP32[18784];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 32 >> 2] = $3;
continue;
case 15:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 36 >> 2] = $3;
continue;
}
break label$1;
case 6:
HEAP32[19359] = 0;
$1 = HEAP32[18788];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 40 >> 2] = $3;
continue;
}
break label$1;
case 7:
HEAP32[19359] = 0;
$1 = HEAP32[18788];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 44 >> 2] = $3;
continue;
}
break label$1;
case 16:
HEAP32[19359] = 0;
$1 = HEAP32[18784];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 48 >> 2] = $3;
continue;
}
break label$1;
case 17:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 52 >> 2] = $3;
continue;
}
break label$1;
case 18:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(513, $5 + 160 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$53: {
if (($1 | 0) == 1) {
break label$53;
}
HEAP32[19359] = 0;
invoke_viii(514, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$53;
}
HEAP32[19359] = 0;
invoke_iii(515, $15 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 19:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 68 >> 2] = $3;
continue;
}
break label$1;
case 20:
HEAP32[19359] = 0;
$1 = HEAP32[18784];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 72 >> 2] = $3;
continue;
}
break label$1;
case 21:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 76 >> 2] = $3;
continue;
}
break label$1;
case 38:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(513, $5 + 144 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$57: {
if (($1 | 0) == 1) {
break label$57;
}
HEAP32[19359] = 0;
invoke_viii(514, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$57;
}
HEAP32[19359] = 0;
invoke_iii(515, $9 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 25:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 92 >> 2] = $3;
continue;
}
break label$1;
case 36:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(513, $5 + 128 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$59: {
if (($1 | 0) == 1) {
break label$59;
}
HEAP32[19359] = 0;
invoke_viii(514, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$59;
}
HEAP32[19359] = 0;
invoke_iii(515, $10 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 40:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 108 >> 2] = $3;
continue;
}
break label$1;
case 37:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(516, $5 + 120 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$61: {
if (($1 | 0) == 1) {
break label$61;
}
HEAP32[19359] = 0;
invoke_viii(517, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$61;
}
HEAP32[19359] = 0;
invoke_iii(518, $11 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 39:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 120 >> 2] = $3;
continue;
}
break label$1;
case 31:
HEAP32[19359] = 0;
$1 = HEAP32[18785];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 124 >> 2] = $3;
continue;
}
break label$1;
case 29:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 128 >> 2] = $3;
continue;
}
break label$1;
case 30:
HEAP32[19359] = 0;
$1 = HEAP32[18784];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 132 >> 2] = $3;
continue;
}
break label$1;
case 28:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 136 >> 2] = $3;
continue;
}
break label$1;
case 26:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
invoke_vii(519, $7 | 0, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vii(520, $7 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 34:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(513, $5 + 104 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$67: {
if (($1 | 0) == 1) {
break label$67;
}
HEAP32[19359] = 0;
invoke_viii(521, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$67;
}
HEAP32[19359] = 0;
invoke_iii(515, $16 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 22:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(513, $5 + 88 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$68: {
if (($1 | 0) == 1) {
break label$68;
}
HEAP32[19359] = 0;
invoke_viii(521, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$68;
}
HEAP32[19359] = 0;
invoke_iii(515, $17 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 33:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(516, $5 + 80 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$69: {
if (($1 | 0) == 1) {
break label$69;
}
HEAP32[19359] = 0;
invoke_viii(517, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$69;
}
HEAP32[19359] = 0;
invoke_iii(518, $18 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 32:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(516, $5 + 72 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$70: {
if (($1 | 0) == 1) {
break label$70;
}
HEAP32[19359] = 0;
invoke_viii(517, $5 + 176 | 0, $3 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$70;
}
HEAP32[19359] = 0;
invoke_iii(518, $19 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
}
break label$1;
case 23:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 188 | 0] = $3;
continue;
case 24:
HEAP32[19359] = 0;
$1 = HEAP32[$5 + 192 >> 2];
$3 = invoke_ii(512, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 189 | 0] = $3;
continue;
case 27:
HEAP32[19359] = 0;
$1 = HEAP32[18787];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 200 >> 2] = $3;
continue;
}
break label$1;
case 41:
HEAP32[19359] = 0;
$1 = HEAP32[18789];
$3 = HEAP32[$5 + 192 >> 2];
$3 = invoke_iii(510, $1 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 204 >> 2] = $3;
continue;
}
break label$1;
case 42:
HEAP32[$5 + 176 >> 2] = 0;
HEAP32[$5 + 180 >> 2] = 0;
HEAP32[$5 + 16 >> 2] = $5 + 176;
sscanf(HEAP32[$5 + 192 >> 2], 7531, $5 + 16 | 0);
$14 = Math_fround(HEAPF64[$5 + 176 >> 3]);
HEAPF32[$0 + 208 >> 2] = $14;
if (!HEAPU8[67565]) {
continue;
}
HEAP32[19359] = 0;
HEAP32[$5 >> 2] = HEAP32[$5 + 192 >> 2];
HEAPF64[$5 + 8 >> 3] = $14;
invoke_vii(71, 29956, $5 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
continue;
}
break label$1;
case 43:
HEAP32[$5 + 176 >> 2] = 0;
HEAP32[$5 + 180 >> 2] = 1072693248;
HEAP32[$5 + 32 >> 2] = $5 + 176;
sscanf(HEAP32[$5 + 192 >> 2], 7531, $5 + 32 | 0);
$6 = HEAPF64[$5 + 176 >> 3];
if (!($6 > 0)) {
continue;
}
HEAPF32[$0 + 212 >> 2] = HEAPF32[$0 + 212 >> 2] * Math_fround($6);
continue;
case 44:
break label$4;
default:
continue;
}
}
HEAP32[$5 + 176 >> 2] = 0;
HEAP32[$5 + 180 >> 2] = 1072693248;
HEAP32[$5 + 48 >> 2] = $5 + 176;
sscanf(HEAP32[$5 + 192 >> 2], 7531, $5 + 48 | 0);
$6 = HEAPF64[$5 + 176 >> 3];
if (!($6 > 0)) {
continue;
}
HEAPF32[$0 + 212 >> 2] = HEAPF32[$0 + 212 >> 2] / Math_fround($6);
continue;
}
break;
}
label$73: {
label$74: {
if (!($22 & 1)) {
if (!($13 & 1)) {
break label$74;
}
HEAP32[$0 + 12 >> 2] = 3;
break label$73;
}
if ($13 & 1) {
break label$74;
}
HEAP32[$0 + 12 >> 2] = 1;
break label$73;
}
if (HEAP32[$0 + 12 >> 2]) {
break label$73;
}
HEAP32[$0 + 12 >> 2] = 2;
}
if ($21 & 1) {
HEAP8[$0 + 16 | 0] = 1;
}
if (($12 | $20) & 1) {
HEAP32[$8 >> 2] = $12 & 1 ? 6 : 8;
}
label$78: {
if (Direction2__defined_28_29_20const($7)) {
break label$78;
}
$1 = Direction2__Direction2_28float_2c_20float_29($5 - -64 | 0, Math_fround(1), Math_fround(0));
HEAP32[19359] = 0;
invoke_viii(517, $5 + 176 | 0, $1 | 0, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[19359] = 0;
invoke_iii(518, $7 | 0, $5 + 176 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$78;
}
}
break label$1;
}
if (!(HEAP32[$0 + 36 >> 2] | !HEAP32[$0 + 32 >> 2])) {
HEAP32[$0 + 36 >> 2] = 3;
}
label$81: {
if (HEAP32[$0 + 92 >> 2]) {
break label$81;
}
if (Direction3__isUndef_28_29_20const($9)) {
break label$81;
}
HEAP32[$0 + 92 >> 2] = 3;
}
label$82: {
if (HEAP32[$0 + 120 >> 2]) {
break label$82;
}
if (Direction2__isUndef_28_29_20const($11)) {
break label$82;
}
HEAP32[$0 + 120 >> 2] = 3;
}
label$83: {
if (HEAP32[$0 + 108 >> 2]) {
break label$83;
}
if (Direction3__isUndef_28_29_20const($10)) {
break label$83;
}
HEAP32[$0 + 108 >> 2] = 3;
}
if (!(HEAP32[$0 + 128 >> 2] | !HEAP32[$0 + 124 >> 2])) {
HEAP32[$0 + 128 >> 2] = 3;
}
if (!(HEAP32[$0 + 136 >> 2] | !HEAP32[$0 + 132 >> 2])) {
HEAP32[$0 + 136 >> 2] = 3;
}
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($5 + 200 | 0);
__stack_pointer = $5 + 208 | 0;
return;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($5 + 200 | 0);
__resumeException($3 | 0);
abort();
}
function GetDefaultAvatarInfo_28XMLCell__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$8 = __stack_pointer + -64 | 0;
__stack_pointer = $8;
label$1: {
if (!$0) {
break label$1;
}
$1 = XMLCell__element_28char_20const__29($0, 1322);
if (!$1) {
break label$1;
}
$4 = XMLCell__element_28char_20const__29($1, 1307);
if (!$4) {
break label$1;
}
$5 = XMLCell__element_28char_20const__29($1, 3200);
if (!$5) {
break label$1;
}
$1 = XMLCellIterator__XMLCellIterator_28DynamicArrayP_XMLCell___2c_20char_20const__29($8 + 40 | 0, HEAP32[$4 + 8 >> 2], 1304);
while (1) {
if (XMLCellIterator__next_28_29($1)) {
$4 = HEAP32[$1 + 16 >> 2];
$2 = attrDigit_28XMLCell__2c_20short_29($4, HEAP16[$1 + 12 >> 1]);
$7 = attrSide_28XMLCell__29($4);
wasm2js_i32$0 = (Math_imul($7, 20) + 68552 | 0) + ($2 << 2) | 0, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 5370, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
continue;
}
break;
}
$2 = XMLCellIterator__XMLCellIterator_28DynamicArrayP_XMLCell___2c_20char_20const__29($8 + 40 | 0, HEAP32[$5 + 8 >> 2], 3197);
while (1) {
if (XMLCellIterator__next_28_29($2)) {
$1 = HEAP32[$2 + 16 >> 2];
$7 = attrDigit_28XMLCell__2c_20short_29($1, HEAP16[$2 + 12 >> 1]);
$3 = $7 << 4;
$5 = $3 + 60256 | 0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 8976, HEAPF32[17095]), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2215, HEAPF32[17095]), 
HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2206, HEAPF32[17095]), 
HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
$5 = $3 + 60400 | 0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5351, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5338, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $5, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5325, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
$7 = $7 << 2;
wasm2js_i32$0 = $7 + 69120 | 0, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1456, Math_fround(-.30000001192092896)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $7 + 69088 | 0, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1427, Math_fround(.30000001192092896)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$4 = $7 + 60368 | 0;
label$6: {
label$7: {
label$8: {
if (!HEAP32[$2 + 12 >> 2]) {
HEAP32[$7 + 60336 >> 2] = 0;
break label$8;
}
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1446, Math_fround(0));
$5 = HEAP32[$2 + 12 >> 2];
HEAPF32[$7 + 60336 >> 2] = $6;
if ($5) {
break label$7;
}
}
HEAP32[$7 + 69152 >> 2] = 0;
$6 = Math_fround(0);
break label$6;
}
$9 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1436, Math_fround(0));
$5 = HEAP32[$2 + 12 >> 2];
HEAPF32[$7 + 69152 >> 2] = $9;
$6 = Math_fround(0);
if (!$5) {
break label$6;
}
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1954, Math_fround(0));
}
HEAPF32[$4 >> 2] = $6;
continue;
}
break;
}
$4 = 0;
$1 = XMLCell__element_28char_20const__29($0, 7291);
wasm2js_i32$0 = 68404, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12304, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68408, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12313, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68412, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12167, Math_fround(3.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68416, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 11212, Math_fround(3)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68420, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12292, Math_fround(.699999988079071)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68424, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12320, Math_fround(.6000000238418579)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68428, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 11523, Math_fround(.30000001192092896)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68432, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 11532, Math_fround(2.5999999046325684)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68436, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 11193, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 10581, Math_fround(0));
wasm2js_i32$0 = 68444, wasm2js_f32$0 = trimREAL_28float_2c_20float_2c_20float_29(Math_fround(-.9990000128746033), $6, Math_fround(.9990000128746033)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68448, wasm2js_f32$0 = trimREAL_28float_2c_20float_2c_20float_29(Math_fround(-.9990000128746033), XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 10564, Math_fround(0)), Math_fround(.9990000128746033)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
if (HEAPU8[67558]) {
HEAPF64[$8 + 32 >> 3] = $6;
eprintf_28char_20const__2c_20____29(18454, $8 + 32 | 0);
PostureChangeTiming__print_28_IO_FILE__29_20const(68444, HEAP32[16886]);
eputc_28char_29(10);
XMLCell__print_28_IO_FILE__29($1, HEAP32[16886]);
$4 = 0;
}
wasm2js_i32$0 = 68504, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12272, Math_fround(1.0499999523162842)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68508, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12260, Math_fround(1.100000023841858)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68512, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12283, Math_fround(1.2000000476837158)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$3 = XMLCell__element_28char_20const__29($0, 1337);
$1 = XMLCell__element_28char_20const__29($3, 3688);
label$11: {
if ($1) {
$10 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1950, Math_fround(10));
$11 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 6371, Math_fround(80));
$12 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5115, Math_fround(80));
$13 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5532, Math_fround(20));
$14 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 9976, Math_fround(20));
$15 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5365, Math_fround(20));
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 1945, $10);
$9 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 6366, $11);
$16 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5110, $12);
$17 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5527, $13);
$18 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 9971, $14);
$19 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5360, $15);
SphereInterpolator__setFrom_28float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29(69172, DegreesToRadians_28float_29(Math_fround(-$11)), DegreesToRadians_28float_29(Math_fround(-$10)), DegreesToRadians_28float_29(Math_fround(-$12)), DegreesToRadians_28float_29(Math_fround(-$13)), DegreesToRadians_28float_29(Math_fround(-$14)), DegreesToRadians_28float_29(Math_fround(-$15)));
break label$11;
}
SphereInterpolator__setFrom_28float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29(69172, DegreesToRadians_28float_29(Math_fround(-80)), DegreesToRadians_28float_29(Math_fround(-10)), DegreesToRadians_28float_29(Math_fround(-80)), DegreesToRadians_28float_29(Math_fround(-20)), DegreesToRadians_28float_29(Math_fround(-20)), DegreesToRadians_28float_29(Math_fround(-20)));
$17 = Math_fround(20);
$9 = Math_fround(80);
$6 = Math_fround(10);
$16 = Math_fround(80);
$18 = Math_fround(20);
$19 = Math_fround(20);
}
SphereInterpolator__setFrom_28float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29(69512, DegreesToRadians_28float_29($6), DegreesToRadians_28float_29($9), DegreesToRadians_28float_29($16), DegreesToRadians_28float_29($17), DegreesToRadians_28float_29($18), DegreesToRadians_28float_29($19));
wasm2js_i32$0 = 68592, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9861, Math_fround(.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68596, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9849, Math_fround(.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68600, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9874, Math_fround(.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68604, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9835, Math_fround(.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68608, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9414, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68612, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 9401, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68616, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 5438, Math_fround(.800000011920929)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68620, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 5379, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68624, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 5451, Math_fround(2)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 8943, Math_fround(15));
HEAPF32[17157] = $6;
wasm2js_i32$0 = 68628, wasm2js_f32$0 = DegreesToRadians_28float_29($6), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68868, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29(XMLCell__element_28char_20const__29($0, 9543), 9887, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$2 = XMLCell__element_28char_20const__29($3, 1465);
wasm2js_i32$0 = 69064, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 12818, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 69068, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 12759, Math_fround(-.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 69072, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 4026, Math_fround(3)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 69076, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 6151, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 69080, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 9414, Math_fround(1.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 69084, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 9401, Math_fround(1.5)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$20 = 0;
label$13: {
label$14: {
$1 = XMLCell__element_28char_20const__29($3, 7305);
$5 = 0;
label$15: {
if (!$1) {
break label$15;
}
$4 = HEAP32[$1 + 8 >> 2];
$5 = 0;
if (!$4) {
break label$15;
}
$2 = HEAP32[$4 + 12 >> 2] << 16;
if ($2) {
break label$14;
}
$5 = $4;
}
LogTime_28_29();
HEAP32[$8 + 20 >> 2] = $5;
HEAP32[$8 + 16 >> 2] = $1;
eprintf_28char_20const__2c_20____29(24317, $8 + 16 | 0);
break label$13;
}
$20 = $2 >> 16;
$5 = $4;
}
$7 = 0;
while (1) {
$1 = $7 << 16 >> 16;
if (($20 | 0) <= ($1 | 0)) {
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3799), 68632);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 4013), 68652);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 4036), 68672);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3704), 68692);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 6978), 68712);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3720), 68732);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3838), 68752);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3823), 68772);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3760), 68792);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3851), 68812);
GetSmMdLg_28XMLCell__2c_20float__29(XMLCell__element_28char_20const__29($3, 3779), 68844);
if (HEAPU8[70600]) {
InitSmMdLgTikTok_28float__29(68692);
InitSmMdLgTikTok_28float__29(68732);
}
$1 = XMLCell__element_28char_20const__29($3, 3814);
if ($1) {
wasm2js_i32$0 = 68832, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 7538, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68836, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 7538, Math_fround(1.7000000476837158)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68840, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 7538, Math_fround(.6000000238418579)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
if (!HEAPU8[70600]) {
$2 = XMLCell__element_28char_20const__29($0, 3917);
HEAP32[17115] = 0;
wasm2js_i32$0 = 68464, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 10211, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68468, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2031, Math_fround(.550000011920929)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68472, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 1734, Math_fround(1.6699999570846558)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68476, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 8909, Math_fround(2.299999952316284)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68480, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2006, Math_fround(2)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68484, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2704, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68456, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 1692, Math_fround(1.2000000476837158)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68488, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2911, Math_fround(1.100000023841858)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68492, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2923, Math_fround(.550000011920929)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68496, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 5072, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
HEAPF32[17131] = HEAPF32[17117];
$6 = HEAPF32[17118];
HEAP32[17117] = 1065353216;
HEAP32[17118] = 1065353216;
HEAPF32[17133] = $6;
$2 = XMLCell__element_28char_20const__29($0, 3929);
wasm2js_i32$0 = 68540, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 2031, Math_fround(.6000000238418579)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68544, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 6521, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 68548, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($2, 1734, Math_fround(2)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
MakeHandshapeTables_28_29();
} else {
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const($5, $1);
$4 = HEAP32[$1 >> 2];
$2 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18789], $4);
label$22: {
if (!$2) {
HEAP32[$8 >> 2] = $4;
eprintf_28char_20const__2c_20____29(45859, $8);
break label$22;
}
$4 = Math_imul($2, 24) + 68592 | 0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12818, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 328 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 12759, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 332 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 4026, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 336 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 6151, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 340 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 9414, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 344 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $4, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 9401, Math_fround(0)), 
HEAPF32[wasm2js_i32$0 + 348 >> 2] = wasm2js_f32$0;
}
$7 = $7 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $8 - -64 | 0;
}
function CreateNameIndexes_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$1 = __stack_pointer - 272 | 0;
__stack_pointer = $1;
MakeSLJointDictionary_28_29();
$0 = operator_20new_28unsigned_20long_29(136);
HEAP32[19359] = 0;
invoke_ii(277, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) != 1) {
HEAP32[17493] = $0;
HEAP8[$0 + 132 | 0] = 0;
HEAP32[$0 + 128 >> 2] = 4269;
HEAP32[$0 + 124 >> 2] = 4269;
HEAP32[$0 + 88 >> 2] = 5172;
HEAP32[$0 + 84 >> 2] = 12745;
HEAP32[$0 + 80 >> 2] = 12813;
HEAP32[$0 + 76 >> 2] = 12862;
HEAP32[$0 + 72 >> 2] = 1398;
HEAP32[$0 + 68 >> 2] = 7268;
HEAP32[$0 - -64 >> 2] = 9518;
HEAP32[$0 + 60 >> 2] = 1680;
HEAP32[$0 + 56 >> 2] = 11008;
HEAP32[$0 + 52 >> 2] = 5108;
HEAP32[$0 + 48 >> 2] = 6846;
HEAP32[$0 + 12 >> 2] = 2224;
HEAP32[$0 + 8 >> 2] = 2246;
HEAP32[$0 + 4 >> 2] = 8965;
HEAP32[$0 >> 2] = 2130;
HEAP32[$0 + 112 >> 2] = 9360;
HEAP32[$0 + 108 >> 2] = 9374;
HEAP32[$0 + 104 >> 2] = 9585;
HEAP32[$0 + 100 >> 2] = 9598;
HEAP32[$0 + 96 >> 2] = 5206;
HEAP32[$0 + 92 >> 2] = 5218;
HEAP32[$0 + 44 >> 2] = 1964;
HEAP32[$0 + 40 >> 2] = 1739;
HEAP32[$0 + 36 >> 2] = 4739;
HEAP32[$0 + 32 >> 2] = 5002;
HEAP32[$0 + 28 >> 2] = 1978;
HEAP32[$0 + 24 >> 2] = 1753;
HEAP32[$0 + 20 >> 2] = 4756;
HEAP32[$0 + 16 >> 2] = 5027;
$0 = operator_20new_28unsigned_20long_29(136);
HEAP32[19359] = 0;
invoke_ii(277, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17494] = $0;
HEAP8[$0 + 132 | 0] = 0;
HEAP32[$0 + 128 >> 2] = 4262;
HEAP32[$0 + 124 >> 2] = 4262;
HEAP32[$0 + 88 >> 2] = 5179;
HEAP32[$0 + 84 >> 2] = 12745;
HEAP32[$0 + 80 >> 2] = 12813;
HEAP32[$0 + 76 >> 2] = 12862;
HEAP32[$0 + 72 >> 2] = 1404;
HEAP32[$0 + 68 >> 2] = 7437;
HEAP32[$0 - -64 >> 2] = 10173;
HEAP32[$0 + 60 >> 2] = 1686;
HEAP32[$0 + 56 >> 2] = 11014;
HEAP32[$0 + 52 >> 2] = 5108;
HEAP32[$0 + 48 >> 2] = 6846;
HEAP32[$0 + 12 >> 2] = 8436;
HEAP32[$0 + 8 >> 2] = 8445;
HEAP32[$0 + 4 >> 2] = 10619;
HEAP32[$0 >> 2] = 5226;
HEAP32[$0 + 44 >> 2] = 10113;
HEAP32[$0 + 40 >> 2] = 6563;
HEAP32[$0 + 36 >> 2] = 4811;
HEAP32[$0 + 32 >> 2] = 5052;
HEAP32[$0 + 28 >> 2] = 10119;
HEAP32[$0 + 24 >> 2] = 6572;
HEAP32[$0 + 20 >> 2] = 4818;
HEAP32[$0 + 16 >> 2] = 5060;
$0 = operator_20new_28unsigned_20long_29(136);
HEAP32[19359] = 0;
invoke_ii(277, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17495] = $0;
HEAP32[$0 + 120 >> 2] = 12367;
HEAP32[$0 + 116 >> 2] = 12124;
HEAP32[$0 + 4 >> 2] = 12336;
HEAP32[$0 >> 2] = 11178;
HEAP8[$0 + 132 | 0] = 1;
HEAP32[$0 + 128 >> 2] = 4306;
HEAP32[$0 + 124 >> 2] = 4262;
HEAP32[$0 + 88 >> 2] = 11509;
HEAP32[$0 + 84 >> 2] = 12745;
HEAP32[$0 + 80 >> 2] = 12813;
HEAP32[$0 + 76 >> 2] = 12862;
HEAP32[$0 + 72 >> 2] = 12194;
HEAP32[$0 + 68 >> 2] = 12191;
HEAP32[$0 - -64 >> 2] = 12201;
HEAP32[$0 + 60 >> 2] = 12224;
HEAP32[$0 + 56 >> 2] = 12154;
HEAP32[$0 + 52 >> 2] = 11491;
HEAP32[$0 + 48 >> 2] = 12086;
HEAP32[$0 + 12 >> 2] = 12250;
HEAP32[$0 + 8 >> 2] = 12255;
HEAP32[$0 + 112 >> 2] = 11183;
HEAP32[$0 + 108 >> 2] = 11188;
HEAP32[$0 + 104 >> 2] = 11599;
HEAP32[$0 + 100 >> 2] = 11604;
HEAP32[$0 + 96 >> 2] = 12157;
HEAP32[$0 + 92 >> 2] = 12162;
HEAP32[$0 + 44 >> 2] = 12114;
HEAP32[$0 + 40 >> 2] = 12538;
HEAP32[$0 + 36 >> 2] = 12548;
HEAP32[$0 + 32 >> 2] = 11260;
HEAP32[$0 + 28 >> 2] = 12119;
HEAP32[$0 + 24 >> 2] = 12543;
HEAP32[$0 + 20 >> 2] = 12553;
HEAP32[$0 + 16 >> 2] = 11265;
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = HEAP32[17576];
HEAP32[$1 + 264 >> 2] = $2;
HEAP32[$1 + 148 >> 2] = $2;
$3 = invoke_iiii(278, $4 | 0, $1 + 148 | 0, 171) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17500] = $3;
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = HEAP32[17576];
HEAP32[$1 + 256 >> 2] = $2;
HEAP32[$1 + 144 >> 2] = $2;
$3 = invoke_iiii(278, $4 | 0, $1 + 144 | 0, 171) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17501] = $3;
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = HEAP32[17576];
HEAP32[$1 + 248 >> 2] = $2;
HEAP32[$1 + 140 >> 2] = $2;
$3 = invoke_iiii(278, $4 | 0, $1 + 140 | 0, 171) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17502] = $3;
$2 = HEAP32[17500];
$3 = copyString_28char_20const__29(6728);
MakeSiteID_28Location_29($1 + 240 | 0, 22);
HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 240 >> 2];
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($2, $3, $1 + 136 | 0);
$2 = HEAP32[17500];
$3 = copyString_28char_20const__29(5156);
MakeSiteID_28Location_29($1 + 232 | 0, 16);
HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 232 >> 2];
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($2, $3, $1 + 132 | 0);
$4 = HEAP32[17500];
$0 = copyString_28char_20const__29(5629);
MakeSiteID_28Location_29($1 + 224 | 0, 39);
HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 224 >> 2];
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $0, $1 + 128 | 0);
$3 = 0;
while (1) {
if (($3 | 0) != 2) {
$6 = ($3 << 2) + 48916 | 0;
$0 = 0;
while (1) {
if (($0 | 0) != 5) {
AvatarNameIndex__MakeJointName_28SideIndex_2c_20DigitIndex_2c_20KnuckleIndex_29_20const(HEAP32[17493], $3, $0, 3);
$4 = HEAP32[17500];
$2 = copyString_28char_20const__29(69872);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 216 | 0, 7, HEAP32[$6 >> 2], 0, MakeDigit_28DigitIndex_29($0), 1, 0);
HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 216 >> 2];
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $2, $1 + 124 | 0);
$0 = $0 + 1 | 0;
continue;
}
break;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
label$12: while (1) {
if (($5 | 0) != 5) {
$0 = 0;
$4 = $5 << 2;
$6 = $4 + 48928 | 0;
$7 = HEAP32[$4 + 60496 >> 2];
while (1) if (($0 | 0) == 4) {
$5 = $5 + 1 | 0;
continue label$12;
} else {
HEAP32[$1 + 112 >> 2] = $7;
HEAP32[$1 + 116 >> 2] = HEAP8[$0 + 48924 | 0];
snprintf($1 + 205 | 0, 11, 10774, $1 + 112 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, HEAP32[($0 << 2) + 49072 >> 2], HEAP32[$6 >> 2], 0, 0, 1, 0);
$4 = HEAP32[17502];
$2 = copyString_28char_20const__29($1 + 205 | 0);
$3 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 192 >> 2] = $3;
HEAP32[$1 + 108 >> 2] = $3;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $2, $1 + 108 | 0);
$0 = $0 + 1 | 0;
continue;
}
}
break;
}
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_2c_20bool_29(7442, 44, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(5141, 16, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(10592, 25, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(3143, 26, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(11062, 27, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(3869, 27, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(10159, 28, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(10145, 29, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(8896, 30, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(3737, 31, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(3640, 32, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(5195, 33, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(5184, 34, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(8535, 35, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(7108, 36, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(7095, 37, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(7009, 38, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(6347, 39, 1, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(6335, 40, 1, 0);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(5095, 41, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(9943, 42, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29(6869, 43, 0, 1);
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_2c_20bool_29(6887, 18, 1);
while (1) {
label$18: {
if (($9 | 0) != 2) {
$10 = ($9 << 2) + 48916 | 0;
$8 = HEAP8[$9 + 48948 | 0];
$5 = 1;
while (1) {
if (($5 | 0) == 5) {
$0 = 0;
break label$18;
}
$6 = HEAP8[$5 + 48953 | 0];
$0 = 0;
while (1) {
if (($0 | 0) == 3) {
label$24: {
HEAP32[$1 + 88 >> 2] = $6;
HEAP32[$1 + 84 >> 2] = 87;
HEAP32[$1 + 80 >> 2] = $8;
snprintf($1 + 205 | 0, 11, 10807, $1 + 80 | 0);
$6 = 0;
$11 = HEAP32[$10 >> 2];
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, 6, $11, $5, 0, 1, 0);
$2 = HEAP32[17502];
$3 = copyString_28char_20const__29($1 + 205 | 0);
$7 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 176 >> 2] = $7;
HEAP32[$1 + 76 >> 2] = $7;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($2, $3, $1 + 76 | 0);
HEAP32[$1 + 64 >> 2] = $8;
$12 = HEAP8[$5 + 48972 | 0];
HEAP32[$1 + 68 >> 2] = $12;
snprintf($1 + 205 | 0, 11, 10816, $1 - -64 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, 1, $11, $5, 0, 1, 0);
$0 = HEAP32[17502];
$4 = copyString_28char_20const__29($1 + 205 | 0);
$2 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 168 >> 2] = $2;
HEAP32[$1 + 60 >> 2] = $2;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($0, $4, $1 + 60 | 0);
label$25: while (1) {
if (($6 | 0) == 5) {
break label$24;
}
$7 = $6 + 1 | 0;
$0 = 0;
while (1) if (($0 | 0) == 3) {
$6 = $7;
continue label$25;
} else {
HEAP32[$1 + 44 >> 2] = $12;
HEAP32[$1 + 36 >> 2] = $7;
HEAP32[$1 + 32 >> 2] = $8;
$2 = $0 << 2;
HEAP32[$1 + 40 >> 2] = HEAP32[$2 + 60516 >> 2];
snprintf($1 + 205 | 0, 11, 10843, $1 + 32 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, HEAP32[$2 + 49044 >> 2], $11, $5, MakeDigit_28DigitIndex_29($6), 1, 0);
$4 = HEAP32[17502];
$2 = copyString_28char_20const__29($1 + 205 | 0);
$3 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 160 >> 2] = $3;
HEAP32[$1 + 28 >> 2] = $3;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $2, $1 + 28 | 0);
$0 = $0 + 1 | 0;
continue;
}
}
}
} else {
HEAP32[$1 + 104 >> 2] = $6;
HEAP32[$1 + 96 >> 2] = $8;
HEAP32[$1 + 100 >> 2] = HEAP8[$0 + 48950 | 0];
snprintf($1 + 205 | 0, 11, 10807, $1 + 96 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, HEAP32[($0 << 2) + 48960 >> 2], HEAP32[$10 >> 2], $5, 0, 1, 0);
$4 = HEAP32[17502];
$2 = copyString_28char_20const__29($1 + 205 | 0);
$3 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 184 >> 2] = $3;
HEAP32[$1 + 92 >> 2] = $3;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $2, $1 + 92 | 0);
$0 = $0 + 1 | 0;
continue;
}
break;
}
$5 = $5 + 1 | 0;
continue;
}
}
label$30: {
if (!HEAPU8[67591]) {
break label$30;
}
$0 = HEAP32[17502];
if (!$0) {
eputs_28char_20const__29(14681);
break label$30;
}
HashAny_char_20const__2c_20SiteID___print_28_IO_FILE__29_20const($0, HEAP32[16886]);
}
$2 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$4 = invoke_iiii(279, $2 | 0, 0, 13) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
break label$1;
}
HEAP32[17467] = $4;
HashAny_char_20const__20const_2c_20AvatarType___addItem_28char_20const__2c_20AvatarType_29($4, HEAP32[HEAP32[17493] >> 2], 1);
HashAny_char_20const__20const_2c_20AvatarType___addItem_28char_20const__2c_20AvatarType_29(HEAP32[17467], HEAP32[HEAP32[17494] >> 2], 2);
HashAny_char_20const__20const_2c_20AvatarType___addItem_28char_20const__2c_20AvatarType_29(HEAP32[17467], HEAP32[HEAP32[17495] >> 2], 3);
HEAP32[17496] = 0;
HEAP32[17504] = 0;
HEAP32[17497] = HEAP32[17493];
HEAP32[17498] = HEAP32[17494];
HEAP32[17499] = HEAP32[17495];
HEAP32[17505] = HEAP32[17500];
HEAP32[17506] = HEAP32[17501];
HEAP32[17507] = HEAP32[17502];
__stack_pointer = $1 + 272 | 0;
return;
}
while (1) {
if (($0 | 0) != 5) {
HEAP32[$1 + 16 >> 2] = $8;
$4 = $0 + 1 | 0;
HEAP32[$1 + 20 >> 2] = $4;
snprintf($1 + 205 | 0, 11, 11502, $1 + 16 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, 7, HEAP32[$10 >> 2], 0, MakeDigit_28DigitIndex_29($0), 1, 0);
$0 = HEAP32[17502];
$2 = copyString_28char_20const__29($1 + 205 | 0);
$3 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 152 >> 2] = $3;
HEAP32[$1 + 12 >> 2] = $3;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($0, $2, $1 + 12 | 0);
$0 = $4;
continue;
}
break;
}
$9 = $9 + 1 | 0;
continue;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
}
__resumeException($1 | 0);
abort();
}
function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
$19 = __stack_pointer - 96 | 0;
__stack_pointer = $19;
$13 = $7;
$25 = $13;
$9 = $8;
$12 = $9 & 65535;
$24 = $12;
$12 = $4;
$13 = $12 ^ $9;
$9 = $3;
$11 = $7;
$9 = $13 & -2147483648;
$15 = $9;
$9 = $4;
$12 = $9 & 65535;
$22 = $12;
$13 = $3;
$23 = $13;
$9 = $13;
$31 = $12;
$13 = 0;
$32 = $13;
$13 = $8;
$20 = $13 >>> 16 & 32767;
$9 = $4;
$29 = $9 >>> 16 & 32767;
label$1: {
label$2: {
if ($20 - 32767 >>> 0 > 4294934529 & $29 - 32767 >>> 0 >= 4294934530) {
break label$2;
}
$12 = $2;
$10 = !($12 | $1);
$12 = $4;
$13 = $12 & 2147483647;
$17 = $13;
$14 = $13 >>> 0 < 2147418112;
$12 = $13;
$9 = $3;
$16 = $9;
$11 = $9;
if (!(!$11 & ($12 | 0) == 2147418112 ? $10 : $14)) {
$9 = $3;
$18 = $9;
$11 = $4;
$12 = $11 | 32768;
$15 = $12;
break label$1;
}
$12 = $6;
$10 = !($12 | $5);
$12 = $8;
$9 = $12 & 2147483647;
$4 = $9;
$14 = $9 >>> 0 < 2147418112;
$12 = $9;
$11 = $7;
$3 = $11;
$13 = $11;
if (!(!$13 & ($12 | 0) == 2147418112 ? $10 : $14)) {
$11 = $7;
$18 = $11;
$13 = $8;
$12 = $13 | 32768;
$15 = $12;
$1 = $5;
$12 = $6;
$2 = $12;
break label$1;
}
$12 = $17;
$11 = $12 ^ 2147418112;
$13 = $16;
$9 = $13;
$12 = $1;
$13 = $11;
$11 = $2;
$13 = $13 | $11;
if (!($9 | $12 | $13)) {
$12 = $6;
$13 = $4;
$12 = $12 | $13;
$9 = $5;
$11 = $3;
if (!($12 | ($9 | $11))) {
$15 = 2147450880;
$1 = 0;
$2 = 0;
break label$1;
}
$13 = $18;
$18 = $13;
$12 = $15;
$11 = $12 | 2147418112;
$15 = $11;
$1 = 0;
$2 = 0;
break label$1;
}
$11 = $4;
$13 = $11 ^ 2147418112;
$12 = $3;
$9 = $12;
$11 = $5;
$12 = $13;
$13 = $6;
$12 = $12 | $13;
if (!($9 | $11 | $12)) {
$9 = $16;
$13 = $1;
$3 = $9 | $13;
$12 = $2;
$11 = $17;
$11 = $12 | $11;
$1 = 0;
$2 = 0;
if (!($11 | $3)) {
$15 = 2147450880;
break label$1;
}
$12 = $18;
$18 = $12;
$11 = $15;
$13 = $11 | 2147418112;
$15 = $13;
break label$1;
}
$12 = $17;
$13 = $2;
$12 = $12 | $13;
$9 = $16;
$11 = $1;
if (!($12 | ($9 | $11))) {
$1 = 0;
$2 = 0;
break label$1;
}
$12 = $4;
$11 = $6;
$11 = $12 | $11;
$9 = $5;
$13 = $3;
if (!($11 | ($9 | $13))) {
$1 = 0;
$2 = 0;
break label$1;
}
$11 = $17;
if (($11 | 0) == 65535 | $11 >>> 0 < 65535) {
$12 = $22;
$21 = !($12 | $23);
$14 = $21;
$13 = $14 ? $1 : $23;
$12 = $2;
$11 = $22;
$9 = $14 ? $12 : $11;
$12 = Math_clz32($9);
$13 = ($12 | 0) == 32 ? Math_clz32($13) + 32 | 0 : $12;
$12 = $21 << 6;
$11 = $12 + $13 | 0;
$10 = $2;
$13 = $22;
__ashlti3($19 + 80 | 0, $1, $10, $23, $13, $11 - 15 | 0);
$21 = 16 - $11 | 0;
$14 = $19;
$13 = HEAP32[$14 + 88 >> 2];
$23 = $13;
$10 = HEAP32[$14 + 92 >> 2];
$22 = $10;
$31 = $10;
$13 = 0;
$32 = $13;
$10 = $14;
$13 = HEAP32[$10 + 80 >> 2];
$1 = $13;
$14 = HEAP32[$10 + 84 >> 2];
$2 = $14;
}
$14 = $4;
if ($14 >>> 0 > 65535) {
break label$2;
}
$10 = $24;
$9 = !($10 | $25);
$13 = $9 ? $5 : $25;
$10 = $6;
$14 = $24;
$12 = $9 ? $10 : $14;
$10 = Math_clz32($12);
$11 = 0;
$13 = ($10 | 0) == 32 ? Math_clz32($13) + 32 | 0 : $10;
$10 = $9 << 6;
$14 = $13 + $10 | 0;
$11 = $6;
$13 = $24;
__ashlti3($19 - -64 | 0, $5, $11, $25, $13, $14 - 15 | 0);
$21 = ($21 - $14 | 0) + 16 | 0;
$9 = $19;
$13 = HEAP32[$9 + 72 >> 2];
$25 = $13;
$11 = HEAP32[$9 + 76 >> 2];
$24 = $11;
$11 = HEAP32[$9 + 64 >> 2];
$5 = $11;
$13 = HEAP32[$9 + 68 >> 2];
$6 = $13;
}
$9 = $5;
$16 = $9 << 15;
$13 = $6;
$11 = $13 << 15 | $9 >>> 17;
$17 = $11;
$9 = 0;
$4 = $9;
$13 = $16;
$3 = $13 & -32768;
$13 = 0;
$8 = $13;
$9 = $2;
$7 = $9;
$11 = $13;
$11 = __wasm_i64_mul($3, $4, $9, $11);
$33 = $11;
$13 = i64toi32_i32$HIGH_BITS;
$34 = $13;
$13 = $17;
$16 = $13;
$11 = 0;
$17 = $11;
$13 = $1;
$1 = $13;
$9 = 0;
$2 = $9;
$9 = $17;
$13 = $2;
$13 = __wasm_i64_mul($16, $9, $1, $13);
$10 = $13;
$9 = i64toi32_i32$HIGH_BITS;
$13 = $9;
$9 = $34;
$14 = $9 + $13 | 0;
$11 = $33;
$12 = $11 + $10 | 0;
$14 = $12 >>> 0 < $10 >>> 0 ? $14 + 1 | 0 : $14;
$30 = $12;
$27 = $14;
$9 = $12;
$11 = $2;
$9 = $4;
$9 = __wasm_i64_mul($1, $11, $3, $9);
$10 = $9;
$11 = i64toi32_i32$HIGH_BITS;
$9 = $11;
$11 = $12;
$12 = $9 + $11 | 0;
$14 = 0;
$13 = $14 + $10 | 0;
$12 = $13 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
$28 = $13;
$26 = $12;
$14 = $11;
$11 = $13;
$10 = $37;
$38 = ($12 | 0) == ($14 | 0) & $11 >>> 0 < $10 >>> 0 | $12 >>> 0 < $14 >>> 0;
$10 = $23;
$23 = $10;
$12 = 0;
$22 = $12;
$12 = $4;
$10 = $22;
$10 = __wasm_i64_mul($3, $12, $23, $10);
$39 = $10;
$12 = i64toi32_i32$HIGH_BITS;
$40 = $12;
$12 = $8;
$10 = $17;
$10 = __wasm_i64_mul($7, $12, $16, $10);
$14 = $10;
$12 = i64toi32_i32$HIGH_BITS;
$10 = $12;
$12 = $40;
$13 = $12 + $10 | 0;
$11 = $39;
$9 = $11 + $14 | 0;
$13 = $9 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
$37 = $9;
$41 = $13;
$12 = $25;
$10 = $12 << 15;
$13 = $24;
$11 = $13 << 15 | $12 >>> 17;
$5 = $11;
$11 = $6;
$14 = $11 >>> 17 | 0;
$12 = 0;
$13 = $12;
$12 = $5;
$13 = $12 | $13;
$35 = $13;
$11 = $10;
$36 = $11 | $14;
$12 = $36;
$5 = $12;
$11 = 0;
$6 = $11;
$12 = $2;
$12 = __wasm_i64_mul($5, $11, $1, $12);
$14 = $12;
$10 = $9 + $12 | 0;
$11 = i64toi32_i32$HIGH_BITS;
$12 = $11;
$11 = $41;
$9 = $12 + $11 | 0;
$25 = $10;
$9 = $10 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$24 = $9;
$9 = $27;
$13 = $34;
$11 = $30;
$14 = $33;
$14 = ($9 | 0) == ($13 | 0) & $11 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
$9 = $14;
$14 = 0;
$11 = $14;
$14 = $9;
$11 = $11 | $14;
$9 = 0;
$13 = $27;
$13 = $9 | $13;
$12 = $13 + $10 | 0;
$9 = $11;
$11 = $24;
$10 = $9 + $11 | 0;
$33 = $12;
$10 = $12 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$34 = $10;
$10 = $32;
$27 = $10;
$14 = $4;
$11 = $31;
$30 = $11 | 65536;
$11 = __wasm_i64_mul($3, $14, $30, $10);
$42 = $11;
$14 = i64toi32_i32$HIGH_BITS;
$43 = $14;
$14 = $17;
$11 = $22;
$11 = __wasm_i64_mul($16, $14, $23, $11);
$13 = $11;
$14 = i64toi32_i32$HIGH_BITS;
$11 = $14;
$14 = $43;
$12 = $11 + $14 | 0;
$10 = $42;
$9 = $13 + $10 | 0;
$12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$31 = $9;
$32 = $12;
$12 = $35;
$3 = $12 | -2147483648;
$10 = 0;
$4 = $10;
$12 = $2;
$12 = __wasm_i64_mul($3, $10, $1, $12);
$13 = $12;
$11 = $13 + $9 | 0;
$14 = i64toi32_i32$HIGH_BITS;
$12 = $14;
$14 = $32;
$9 = $12 + $14 | 0;
$36 = $11;
$9 = $11 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$35 = $9;
$9 = $6;
$10 = $8;
$10 = __wasm_i64_mul($5, $9, $7, $10);
$13 = $10;
$9 = i64toi32_i32$HIGH_BITS;
$10 = $9;
$9 = $35;
$11 = $9 + $10 | 0;
$14 = $36;
$12 = $13 + $14 | 0;
$11 = $12 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
$46 = $12;
$44 = $11;
$9 = $12;
$14 = $34;
$12 = $9 + $14 | 0;
$13 = 0;
$11 = $33;
$10 = $13 + $11 | 0;
$45 = $10;
$12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$47 = $12;
$11 = $12;
$10 = $11;
$13 = $45;
$14 = $38;
$9 = $13 + $14 | 0;
$10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$1 = $9;
$2 = $10;
$20 = (($20 + $29 | 0) + $21 | 0) - 16383 | 0;
$10 = $4;
$14 = $8;
$14 = __wasm_i64_mul($3, $10, $7, $14);
$21 = $14;
$10 = i64toi32_i32$HIGH_BITS;
$7 = $10;
$12 = $14;
$10 = $17;
$14 = $27;
$14 = __wasm_i64_mul($16, $10, $30, $14);
$13 = $14;
$11 = $12 + $13 | 0;
$10 = i64toi32_i32$HIGH_BITS;
$14 = $10;
$10 = $7;
$9 = $14 + $10 | 0;
$7 = $11;
$9 = $11 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$8 = $9;
$12 = $10;
$13 = $21;
$10 = $11;
$21 = ($9 | 0) == ($12 | 0) & $13 >>> 0 > $10 >>> 0 | $9 >>> 0 < $12 >>> 0;
$10 = $6;
$9 = $22;
$9 = __wasm_i64_mul($5, $10, $23, $9);
$12 = $9;
$14 = $9 + $11 | 0;
$10 = i64toi32_i32$HIGH_BITS;
$9 = $10;
$10 = $8;
$11 = $9 + $10 | 0;
$16 = $14;
$13 = $10;
$11 = $12 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
$17 = $11;
$12 = $7;
$10 = $14;
$13 = ($13 | 0) == ($11 | 0) & $12 >>> 0 > $10 >>> 0 | $11 >>> 0 < $13 >>> 0;
$14 = 0;
$12 = $21;
$9 = $12 + $13 | 0;
$14 = $9 >>> 0 < $13 >>> 0 ? 1 : $14;
$7 = $14;
$14 = $4;
$12 = $27;
$12 = __wasm_i64_mul($3, $14, $30, $12);
$13 = $12;
$11 = $13 + $9 | 0;
$14 = i64toi32_i32$HIGH_BITS;
$12 = $14;
$14 = $7;
$9 = $12 + $14 | 0;
$21 = $11;
$9 = $11 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$38 = $9;
$9 = $41;
$10 = $40;
$13 = $39;
$14 = $37;
$7 = ($9 | 0) == ($10 | 0) & $13 >>> 0 > $14 >>> 0 | $9 >>> 0 < $10 >>> 0;
$14 = $24;
$13 = $25;
$10 = $37;
$9 = ($14 | 0) == ($9 | 0) & $13 >>> 0 < $10 >>> 0 | $9 >>> 0 > $14 >>> 0;
$11 = 0;
$10 = $7;
$12 = $9 + $10 | 0;
$7 = $12;
$11 = $9 >>> 0 > $12 >>> 0 ? 1 : $11;
$10 = $11;
$11 = $17;
$12 = $11 + $10 | 0;
$9 = $7;
$13 = $16;
$14 = $9 + $13 | 0;
$7 = $14;
$12 = $9 >>> 0 > $14 >>> 0 ? $12 + 1 | 0 : $12;
$8 = $12;
$13 = $11;
$9 = $16;
$11 = $14;
$13 = ($12 | 0) == ($13 | 0) & $9 >>> 0 > $11 >>> 0 | $12 >>> 0 < $13 >>> 0;
$11 = $38;
$9 = $21;
$10 = $9 + $13 | 0;
$17 = $10;
$14 = $10 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
$16 = $14;
$14 = $6;
$9 = $27;
$9 = __wasm_i64_mul($5, $14, $30, $9);
$5 = $9;
$14 = i64toi32_i32$HIGH_BITS;
$6 = $14;
$14 = $4;
$9 = $22;
$9 = __wasm_i64_mul($3, $14, $23, $9);
$13 = $9;
$14 = i64toi32_i32$HIGH_BITS;
$9 = $14;
$14 = $6;
$10 = $9 + $14 | 0;
$11 = $5;
$12 = $13 + $11 | 0;
$10 = $12 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$3 = $12;
$11 = $14;
$4 = $10;
$13 = $5;
$13 = ($11 | 0) == ($10 | 0) & $13 >>> 0 > $12 >>> 0 | $10 >>> 0 < $11 >>> 0;
$10 = $13;
$13 = 0;
$14 = $13;
$14 = $10 | $14;
$5 = $14;
$13 = $17;
$10 = $4;
$11 = $10;
$10 = 0;
$11 = $11 | $10;
$9 = $13 + $11 | 0;
$14 = $16;
$10 = $5;
$12 = $14 + $10 | 0;
$5 = $9;
$12 = $9 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
$6 = $12;
$14 = $3;
$12 = $8;
$13 = $12;
$9 = $12 + $14 | 0;
$12 = $7;
$11 = 0;
$10 = $12 + $11 | 0;
$3 = $10;
$9 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
$4 = $9;
$12 = $13;
$11 = $7;
$12 = ($9 | 0) == ($12 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 < $12 >>> 0;
$13 = $6;
$10 = $13;
$11 = $5;
$14 = $12 + $11 | 0;
$5 = $14;
$10 = $12 >>> 0 > $14 >>> 0 ? $10 + 1 | 0 : $10;
$6 = $10;
$11 = $44;
$10 = $35;
$12 = $46;
$13 = $36;
$7 = ($11 | 0) == ($10 | 0) & $12 >>> 0 < $13 >>> 0 | $10 >>> 0 > $11 >>> 0;
$13 = $32;
$10 = $43;
$12 = $31;
$11 = $42;
$8 = ($13 | 0) == ($10 | 0) & $12 >>> 0 < $11 >>> 0 | $10 >>> 0 > $13 >>> 0;
$12 = $13;
$13 = $35;
$11 = $31;
$10 = $36;
$13 = ($12 | 0) == ($13 | 0) & $11 >>> 0 > $10 >>> 0 | $12 >>> 0 > $13 >>> 0;
$14 = 0;
$10 = $8;
$9 = $13 + $10 | 0;
$14 = $9 >>> 0 < $13 >>> 0 ? 1 : $14;
$13 = $9;
$10 = $14;
$9 = $10;
$11 = $7;
$12 = $13 + $11 | 0;
$11 = $12;
$14 = 0;
$9 = $14;
$9 = $9 | $11;
$7 = $9;
$11 = $44;
$13 = $11;
$11 = $18;
$13 = $13 | $11;
$14 = $3;
$10 = $13 + $14 | 0;
$9 = $4;
$11 = $7;
$12 = $9 + $11 | 0;
$7 = $10;
$12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$8 = $12;
$14 = $9;
$9 = $10;
$13 = $3;
$14 = ($12 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $12 >>> 0 < $14 >>> 0;
$9 = $6;
$13 = $5;
$11 = $13 + $14 | 0;
$10 = $11 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$5 = $11;
$6 = $10;
$13 = $34;
$10 = $24;
$9 = $25;
$14 = $33;
$3 = ($13 | 0) == ($10 | 0) & $9 >>> 0 > $14 >>> 0 | $10 >>> 0 > $13 >>> 0;
$9 = $13;
$10 = $47;
$13 = $45;
$10 = ($9 | 0) == ($10 | 0) & $14 >>> 0 > $13 >>> 0 | $9 >>> 0 > $10 >>> 0;
$11 = 0;
$13 = $3;
$12 = $13 + $10 | 0;
$11 = $12 >>> 0 < $10 >>> 0 ? 1 : $11;
$10 = $12;
$13 = $11;
$11 = $8;
$12 = $13 + $11 | 0;
$14 = $7;
$9 = $14 + $10 | 0;
$12 = $9 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
$3 = $9;
$4 = $12;
$14 = $11;
$10 = $7;
$14 = ($12 | 0) == ($14 | 0) & $9 >>> 0 < $10 >>> 0 | $12 >>> 0 < $14 >>> 0;
$11 = $6;
$9 = $11;
$10 = $5;
$13 = $14 + $10 | 0;
$9 = $13 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$7 = $13;
$8 = $9;
$10 = $9 & 65536;
label$13: {
if ($10) {
$20 = $20 + 1 | 0;
break label$13;
}
$10 = $26;
$5 = $10 >>> 31 | 0;
$11 = 0;
$6 = $11;
$10 = $7;
$11 = $8;
$9 = $11 << 1 | $10 >>> 31;
$8 = $9;
$9 = $4;
$14 = $9 >>> 31 | 0;
$9 = $10 << 1;
$7 = $9 | $14;
$10 = 0;
$11 = $10;
$10 = $8;
$11 = $11 | $10;
$8 = $11;
$10 = $3;
$11 = $4;
$9 = $11 << 1 | $10 >>> 31;
$4 = $9;
$9 = $2;
$14 = $9 >>> 31 | 0;
$9 = $10 << 1;
$3 = $9 | $14;
$10 = 0;
$11 = $10;
$10 = $4;
$11 = $11 | $10;
$4 = $11;
$10 = $28;
$28 = $10 << 1;
$11 = $26;
$9 = $11 << 1 | $10 >>> 31;
$26 = $9;
$9 = $2;
$11 = $1;
$10 = $9 << 1 | $11 >>> 31;
$9 = $5;
$14 = $11 << 1;
$1 = $9 | $14;
$11 = $10;
$10 = $6;
$11 = $11 | $10;
$2 = $11;
}
if (($20 | 0) >= 32767) {
$10 = $18;
$18 = $10;
$11 = $15;
$9 = $11 | 2147418112;
$15 = $9;
$1 = 0;
$2 = 0;
break label$1;
}
$9 = $15;
$5 = $9;
label$16: {
if (($20 | 0) <= 0) {
$29 = 1 - $20 | 0;
if ($29 >>> 0 >= 128) {
$1 = 0;
$2 = 0;
break label$1;
}
$9 = $26;
$10 = $2;
$20 = $20 + 127 | 0;
__ashlti3($19 + 48 | 0, $28, $9, $1, $10, $20);
$10 = $4;
$9 = $8;
__ashlti3($19 + 32 | 0, $3, $10, $7, $9, $20);
$9 = $26;
$10 = $2;
__lshrti3($19 + 16 | 0, $28, $9, $1, $10, $29);
$10 = $4;
$9 = $8;
__lshrti3($19, $3, $10, $7, $9, $29);
$11 = $19;
$9 = HEAP32[$11 + 48 >> 2];
$1 = $9;
$10 = HEAP32[$11 + 52 >> 2];
$2 = $10;
$10 = HEAP32[$11 + 56 >> 2];
$14 = $10;
$9 = HEAP32[$11 + 60 >> 2];
$10 = $9;
$9 = $2;
$10 = $9 | $10;
$11 = $1;
$9 = $11 | $14;
$3 = ($10 | $9) != 0;
$14 = $19;
$9 = HEAP32[$14 + 32 >> 2];
$1 = $9;
$10 = HEAP32[$14 + 36 >> 2];
$2 = $10;
$10 = HEAP32[$14 + 16 >> 2];
$11 = $10;
$9 = HEAP32[$14 + 20 >> 2];
$10 = $9;
$9 = $2;
$10 = $9 | $10;
$9 = $3;
$14 = $1;
$11 = $11 | $14;
$28 = $9 | $11;
$26 = $10;
$10 = $19;
$14 = HEAP32[$10 + 40 >> 2];
$1 = $14;
$9 = HEAP32[$10 + 44 >> 2];
$2 = $9;
$14 = HEAP32[$10 + 28 >> 2];
$9 = HEAP32[$10 + 24 >> 2];
$10 = $1;
$1 = $9 | $10;
$9 = $14;
$14 = $2;
$9 = $9 | $14;
$2 = $9;
$14 = $19;
$9 = HEAP32[$14 >> 2];
$3 = $9;
$10 = HEAP32[$14 + 4 >> 2];
$4 = $10;
$10 = HEAP32[$14 + 8 >> 2];
$7 = $10;
$9 = HEAP32[$14 + 12 >> 2];
break label$16;
}
$9 = $8;
$10 = $9 & 65535;
$6 = $10;
$11 = 0;
$14 = $7;
$10 = $14;
$7 = $11 | $10;
$9 = $20;
$14 = $9 << 16;
$9 = $14;
$14 = $6;
$9 = $9 | $14;
}
$8 = $9;
$11 = $7;
$14 = $18;
$18 = $11 | $14;
$9 = $5;
$10 = $8;
$10 = $9 | $10;
$15 = $10;
$10 = $26;
$5 = !($10 | $28);
$10 = $2;
$6 = ($10 | 0) > 0 | ($10 | 0) >= 0;
$11 = $1;
$9 = $2;
if (!(!$11 & ($9 | 0) == -2147483648 ? $5 : $6)) {
$11 = $4;
$14 = $3;
$12 = $14 + 1 | 0;
$13 = $12 ? $11 : $11 + 1 | 0;
$1 = $12;
$2 = $13;
$14 = $11;
$11 = $12;
$10 = $3;
$14 = ($13 | 0) == ($14 | 0) & $11 >>> 0 < $10 >>> 0 | $13 >>> 0 < $14 >>> 0;
$11 = $15;
$10 = $18;
$9 = $14 + $10 | 0;
$12 = $9 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
$18 = $9;
$15 = $12;
break label$1;
}
$12 = $2;
$10 = $12 ^ -2147483648;
$12 = $28;
$14 = $1;
$11 = $10;
$10 = $26;
$11 = $11 | $10;
if ($12 | $14 | $11) {
$1 = $3;
$11 = $4;
$2 = $11;
break label$1;
}
$12 = 0;
$1 = $12;
$11 = $4;
$12 = $11;
$11 = $3;
$10 = $11;
$14 = $10 & 1;
$13 = $10 + $14 | 0;
$10 = $1;
$9 = $10 + $12 | 0;
$1 = $13;
$9 = $13 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$2 = $9;
$11 = $12;
$12 = $13;
$14 = $3;
$11 = ($9 | 0) == ($11 | 0) & $12 >>> 0 < $14 >>> 0 | $9 >>> 0 < $11 >>> 0;
$12 = $15;
$14 = $18;
$10 = $11 + $14 | 0;
$18 = $10;
$13 = $10 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
$15 = $13;
}
$14 = $0;
HEAP32[$14 >> 2] = $1;
$13 = $2;
HEAP32[$14 + 4 >> 2] = $13;
HEAP32[$14 + 8 >> 2] = $18;
$13 = $15;
HEAP32[$14 + 12 >> 2] = $13;
__stack_pointer = $19 + 96 | 0;
}
function HanimAvatar__createSiGMLTorsoSites_28_29($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0;
$1 = __stack_pointer - 624 | 0;
__stack_pointer = $1;
$4 = XMLCell__element_28char_20const__29(HEAP32[17100], 9919);
$26 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 8162, Math_fround(0));
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 7396, Math_fround(0));
$10 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 7424, Math_fround(0));
$29 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 7410, Math_fround(0));
$30 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 6517, Math_fround(0));
$27 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 8485, Math_fround(0));
$31 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 1380, Math_fround(0));
$5 = HEAP32[$0 + 72 >> 2];
$7 = HEAP32[$5 + 40 >> 2];
$21 = HEAP32[$5 + 4 >> 2];
$5 = HEAP32[$5 + 24 >> 2];
$20 = Math_fround(HEAPF32[$5 + 28 >> 2] * Math_fround(.5));
HEAPF32[$1 + 616 >> 2] = $20;
$14 = Math_fround(HEAPF32[$7 + 28 >> 2] * Math_fround(.5));
HEAPF32[$1 + 620 >> 2] = $14;
$15 = $5 + 68 | 0;
$6 = Vector__x_28_29_20const($15);
$7 = $7 + 68 | 0;
$8 = Vector__x_28_29_20const($7);
$8 = Math_fround(Math_fround($6 - $8) * Math_fround(.5));
$2 = Math_fround($2 * $8);
$23 = Math_fround(XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 8176, Math_fround(0)) * $2);
$3 = HEAP32[$0 + 72 >> 2];
$6 = Math_fround(Vector__y_28_29_20const(HEAP32[$3 + 12 >> 2] + 68 | 0) + Vector__y_28_29_20const(HEAP32[$3 + 16 >> 2] + 68 | 0));
$3 = HEAP32[$0 + 72 >> 2];
if (HEAPU8[67563]) {
HEAPF64[$1 + 128 >> 3] = $23;
eprintf_28char_20const__2c_20____29(28606, $1 + 128 | 0);
}
$16 = Math_fround($6 * Math_fround(.5));
$11 = Math_fround(Math_fround(Vector__x_28_29_20const($15) + Vector__x_28_29_20const($7)) * Math_fround(.5));
HEAPF32[$1 + 600 >> 2] = $11;
$6 = Math_fround($11 - $2);
HEAPF32[$1 + 604 >> 2] = $6;
HEAPF32[$1 + 608 >> 2] = $6 - $2;
$6 = Math_fround($2 + $11);
HEAPF32[$1 + 596 >> 2] = $6;
$28 = Math_fround($2 + $6);
HEAPF32[$1 + 592 >> 2] = $28;
$2 = Vector__y_28_29_20const(HEAP32[$3 + 32 >> 2] + 68 | 0);
$6 = Vector__y_28_29_20const(HEAP32[$3 + 48 >> 2] + 68 | 0);
$12 = $2 > $6 ? $2 : $6;
$22 = Math_fround(Vector__y_28_29_20const($15) - $2);
$6 = Math_fround(Vector__y_28_29_20const($7) - $6);
$17 = Math_fround(Math_fround($22 + $6) * Math_fround(.5));
$2 = Math_fround($10 * $17);
if (HEAPU8[67563]) {
HEAPF64[$1 + 120 >> 3] = $2;
HEAPF64[$1 + 112 >> 3] = $17;
HEAPF64[$1 + 104 >> 3] = $6;
HEAPF64[$1 + 96 >> 3] = $22;
eprintf_28char_20const__2c_20____29(26496, $1 + 96 | 0);
eputs_28char_20const__29(21238);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[HEAP32[$0 + 72 >> 2] + 24 >> 2] + 68 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
eputs_28char_20const__29(21230);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[$3 + 32 >> 2] + 68 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
}
$6 = Vector__y_28_29_20const($15);
$10 = Vector__y_28_29_20const($7);
HanimAvatar__GetFacePoint_28short_29($1 + 272 | 0, $0, 6);
$22 = Vector__y_28_29_20const($1 + 272 | 0);
HEAPF32[$1 + 576 >> 2] = $12;
HEAPF32[$1 + 548 >> 2] = $16 + Math_fround(-.019999999552965164);
HEAPF32[$1 + 544 >> 2] = $22;
$6 = Math_fround(Math_fround($6 + $10) * Math_fround(.5));
HEAPF32[$1 + 560 >> 2] = $6;
HEAPF32[$1 + 572 >> 2] = $6 - Math_fround($2 * Math_fround(3));
HEAPF32[$1 + 568 >> 2] = $6 - Math_fround($2 + $2);
HEAPF32[$1 + 564 >> 2] = $6 - $2;
$2 = Math_fround(Math_fround($2 / Math_fround(3)) + $6);
HEAPF32[$1 + 556 >> 2] = $2;
$12 = Math_fround($2 + Math_fround(.029999999329447746));
HEAPF32[$1 + 552 >> 2] = $12;
$3 = 0;
while (1) if (($3 | 0) == 9) {
HEAP32[$1 + 456 >> 2] = 0;
HEAP32[$1 + 460 >> 2] = 0;
HEAP32[$1 + 448 >> 2] = 0;
HEAP32[$1 + 452 >> 2] = 0;
HEAPF32[$1 + 464 >> 2] = $8;
$2 = Math_fround(Math_fround($8 + Math_fround(Math_fround($20 + $14) * Math_fround(-.5))) * Math_fround(.800000011920929));
HEAPF32[$1 + 480 >> 2] = $2;
HEAPF32[$1 + 476 >> 2] = $2;
HEAPF32[$1 + 472 >> 2] = $2;
HEAPF32[$1 + 468 >> 2] = $2;
memset($1 + 400 | 0, 0, 36);
HEAP32[$1 + 424 >> 2] = 1042737529;
HEAP32[$1 + 428 >> 2] = 1042536202;
HEAP32[$1 + 416 >> 2] = 1033208070;
HEAP32[$1 + 420 >> 2] = 1042401985;
memset($1 + 352 | 0, 0, 36);
HEAP32[$1 + 376 >> 2] = 1042737529;
HEAP32[$1 + 380 >> 2] = 1042536202;
HEAP32[$1 + 368 >> 2] = 1033208070;
HEAP32[$1 + 372 >> 2] = 1042401985;
$13 = Vector__Vector_28Vector_20const__29_1($1 + 336 | 0, $15);
Vector__setMidPoint_28Vector_20const__29($13, Vector__Vector_28Vector_20const__29_1($1 + 272 | 0, $7));
$9 = Vector__Vector_28Vector_20const__29($1 + 272 | 0, 68032);
Vector__Vector_28float_2c_20float_2c_20float_29($9 + 12 | 0, Math_fround(1), Math_fround(0), Math_fround(1));
Vector__Vector_28Vector_20const__29($9 + 24 | 0, 68056);
Vector__Vector_28float_2c_20float_2c_20float_29($9 + 36 | 0, Math_fround(-1), Math_fround(0), Math_fround(1));
Vector__Vector_28Vector_20const__29($9 + 48 | 0, 68068);
$18 = $1 - -64 | 0;
while (1) {
if (($24 | 0) == 9) {
$2 = Math_fround(0);
$3 = 0;
$7 = 0;
while (1) if (($3 | 0) == 4) {
$14 = Math_fround(Math_fround($17 * $31) + $2);
HEAPF32[$1 + 272 >> 2] = $14;
$2 = Math_fround($29 * $17);
$6 = Math_fround($2 + $14);
HEAPF32[$1 + 276 >> 2] = $6;
HEAPF32[$1 + 280 >> 2] = $2 + $6;
$17 = Math_fround($28 - $11);
$18 = 0;
label$9: while (1) {
label$10: {
if (($18 | 0) == 5) {
$4 = ($1 + 272 | 0) + (HEAP16[24299] << 2) | 0;
$3 = 0;
while (1) {
if (($3 | 0) == 2) {
break label$10;
}
$5 = HEAP32[(HEAP32[$0 + 72 >> 2] + ($3 << 4) | 0) + 24 >> 2];
$7 = Vector__Vector_28Vector_20const__29($1 + 272 | 0, $5 + 68 | 0);
HEAPF32[$4 >> 2] = HEAPF32[($1 + 616 | 0) + ($3 << 2) >> 2] + HEAPF32[$4 >> 2];
MakeSiteID_28Location_2c_20SideIndex_29($1 + 184 | 0, 19, $3);
$2 = HEAPF32[$5 + 28 >> 2];
HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 184 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 24 | 0, $21, $7, $2, 68044, $26);
$3 = $3 + 1 | 0;
continue;
}
}
$3 = $18 << 2;
$13 = $3 + 48928 | 0;
$16 = HEAPF32[($1 + 592 | 0) + $3 >> 2];
$20 = Math_fround($16 - $11);
$9 = 0;
label$13: while (1) {
if (($9 | 0) == 9) {
$18 = $18 + 1 | 0;
continue label$9;
}
$3 = $9 << 2;
$10 = HEAPF32[$3 + ($1 + 544 | 0) >> 2];
$7 = Vector__Vector_28_29($1 + 256 | 0);
$19 = HEAP32[($1 + 496 | 0) + $3 >> 2];
$25 = HEAP32[$13 >> 2];
$3 = 0;
while (1) if (($3 | 0) == 3) {
$9 = $9 + 1 | 0;
continue label$13;
} else {
$5 = $3 << 2;
$2 = HEAPF32[$5 + ($1 + 272 | 0) >> 2];
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 248 | 0, $19, $25, 0, 0, HEAP32[$5 + 48980 >> 2], 0);
$8 = Math_fround($2 - $14);
$6 = Math_fround($16 + Math_fround(Math_fround($20 * Math_fround($30 * $8)) / $17));
$4 = Vector__Vector_28_29($1 + 200 | 0);
label$18: {
if (!$3) {
Vector__setFrom_28float_2c_20float_2c_20float_29($7, $6, $10, $2);
Vector__setFrom_28Vector_20const__29($4, $7);
break label$18;
}
Vector__setFrom_28float_2c_20float_2c_20float_29($4, $6, $10, $2);
if ($27 == Math_fround(0)) {
break label$18;
}
Vector__setSubtract_28Vector_20const__29($4, $7);
$2 = Vector__length_28_29_20const($4);
Vector__setLength_28float_29($4, Math_fround(Math_fround($27 * Math_fround($8 - $2)) + $2));
Vector__setAdd_28Vector_20const__29($4, $7);
}
$5 = HEAP32[$1 + 248 >> 2];
HEAP32[$1 + 192 >> 2] = $5;
HEAP32[$1 + 28 >> 2] = $5;
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $1 + 28 | 0, $21, $4, $23);
$3 = $3 + 1 | 0;
continue;
}
}
}
break;
}
$4 = HEAP32[HEAP32[$0 + 72 >> 2] + 8 >> 2];
MakeSiteID_28Location_29($1 + 176 | 0, 18);
$3 = $21 + 68 | 0;
$5 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 272 | 0, Vector__x_28_29_20const($3), $12, Math_fround(Vector__z_28_29_20const($3) + Math_fround(.07999999821186066)));
HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 176 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 20 | 0, $4, $5, Math_fround(.07999999821186066), 68056, Math_fround(.07999999821186066));
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($1 + 168 | 0, 18, 2);
$5 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 272 | 0, Math_fround(Vector__x_28_29_20const($3) + Math_fround(.05655999854207039)), $12, Math_fround(Vector__z_28_29_20const($3) + Math_fround(.05655999854207039)));
$7 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 544 | 0, Math_fround(.7070000171661377), Math_fround(0), Math_fround(.7070000171661377));
HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 168 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 16 | 0, $4, $5, Math_fround(.07999999821186066), $7, Math_fround(.07999999821186066));
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($1 + 160 | 0, 18, 1);
$5 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 272 | 0, Math_fround(Vector__x_28_29_20const($3) + Math_fround(-.05655999854207039)), $12, Math_fround(Vector__z_28_29_20const($3) + Math_fround(.05655999854207039)));
$7 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 544 | 0, Math_fround(-.7070000171661377), Math_fround(0), Math_fround(.7070000171661377));
HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 160 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 12 | 0, $4, $5, Math_fround(.07999999821186066), $7, Math_fround(.07999999821186066));
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($1 + 152 | 0, 18, 4);
$5 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 272 | 0, Math_fround(Vector__x_28_29_20const($3) + Math_fround(.07999999821186066)), $12, Vector__z_28_29_20const($3));
HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 152 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 8 | 0, $4, $5, Math_fround(.07999999821186066), 68032, Math_fround(.07999999821186066));
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($1 + 144 | 0, 18, 3);
$3 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 272 | 0, Math_fround(Vector__x_28_29_20const($3) + Math_fround(-.07999999821186066)), $12, Vector__z_28_29_20const($3));
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 144 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 4 | 0, $4, $3, Math_fround(.07999999821186066), 68068, Math_fround(.07999999821186066));
__stack_pointer = $1 + 624 | 0;
return;
} else {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 256 | 0, HEAP32[($3 << 2) + 49072 >> 2], 0, 0, 0, 1, 0);
HEAP32[$1 + 248 >> 2] = 0;
$4 = Vector__Vector_28_29($1 + 272 | 0);
$5 = HEAP32[$1 + 256 >> 2];
HEAP32[$1 + 216 >> 2] = $5;
HEAP32[$1 + 36 >> 2] = $5;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $1 + 36 | 0, $4, $1 + 200 | 0, $1 + 248 | 0);
if (HEAPU8[67563]) {
HEAP32[$1 + 32 >> 2] = HEAP32[HEAP32[$1 + 248 >> 2] >> 2];
eprintf_28char_20const__2c_20____29(17146, $1 + 32 | 0);
eprintf_28char_20const__2c_20____29(24233, 0);
SiteID__print_28_IO_FILE__29_20const($1 + 256 | 0, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(24233, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
eputc_28char_29(10);
}
label$21: {
if (!(!$3 | ($7 ^ 1) & 1)) {
if (!(Vector__z_28_29_20const($4) > $2)) {
break label$21;
}
}
$7 = 1;
$2 = Vector__z_28_29_20const($4);
}
$3 = $3 + 1 | 0;
continue;
}
}
label$23: {
$19 = $24 << 2;
$2 = HEAPF32[$19 + ($1 + 448 | 0) >> 2];
if (!($2 > Math_fround(0))) {
break label$23;
}
$10 = Math_fround($11 + $2);
$16 = Math_fround($11 - $2);
$25 = ($1 + 496 | 0) + $19 | 0;
$8 = HEAPF32[($1 + 544 | 0) + $19 >> 2];
$32 = +$8;
$3 = 0;
while (1) {
if (($3 | 0) == 5) {
break label$23;
}
$2 = HEAPF32[(($3 | 0) == 2 ? $1 + 400 | 0 : $1 + 352 | 0) + $19 >> 2];
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
$4 = HEAP32[($3 << 2) + 48928 >> 2];
switch ($4 - 1 | 0) {
case 0:
break label$27;
case 1:
break label$28;
case 2:
break label$29;
case 3:
break label$30;
default:
break label$26;
}
}
$2 = Math_fround(Vector__x_28_29_20const($15) - $20);
$6 = Vector__z_28_29_20const($13);
break label$25;
}
$2 = Math_fround(Vector__x_28_29_20const($7) + $14);
$6 = Vector__z_28_29_20const($13);
break label$25;
}
$6 = Math_fround(Math_fround($2 + Vector__z_28_29_20const($13)) + Math_fround(0));
$2 = $10;
break label$25;
}
$6 = Math_fround(Math_fround($2 + Vector__z_28_29_20const($13)) + Math_fround(0));
$2 = $16;
break label$25;
}
$6 = Math_fround(Math_fround($2 + Vector__z_28_29_20const($13)) + Math_fround(0));
$2 = $11;
}
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 200 | 0, HEAP32[$25 >> 2], $4, 0, 0, 1, 0);
if (HEAPU8[67563]) {
$4 = Vector__Vector_28_29($1 + 256 | 0);
$5 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 240 >> 2] = $5;
HEAP32[$1 + 92 >> 2] = $5;
HEAP32[$1 + 244 >> 2] = 0;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $1 + 92 | 0, $4, $1 + 248 | 0, $1 + 244 | 0);
eprintf_28char_20const__2c_20____29(25664, 0);
$5 = HEAP32[$1 + 244 >> 2];
if ($5) {
$5 = HEAP32[$5 >> 2];
} else {
$5 = 14776;
}
HEAP32[$1 + 80 >> 2] = $5;
eprintf_28char_20const__2c_20____29(17182, $1 + 80 | 0);
SiteID__print_28_IO_FILE__29_20const($1 + 200 | 0, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(24233, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
HEAPF64[$18 >> 3] = $6;
HEAPF64[$1 + 56 >> 3] = $32;
HEAPF64[$1 + 48 >> 3] = $2;
eprintf_28char_20const__2c_20____29(47229, $1 + 48 | 0);
}
HEAP32[$1 + 232 >> 2] = HEAP32[$1 + 200 >> 2];
$4 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 256 | 0, $2, $8, $6);
HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 232 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 44 | 0, $21, $4, $26, Math_imul($3, 12) + $9 | 0, $23);
if (HEAPU8[67563]) {
$4 = Vector__Vector_28_29($1 + 256 | 0);
$5 = HEAP32[$1 + 200 >> 2];
HEAP32[$1 + 224 >> 2] = $5;
HEAP32[$1 + 40 >> 2] = $5;
HEAP32[$1 + 244 >> 2] = 0;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $1 + 40 | 0, $4, $1 + 248 | 0, $1 + 244 | 0);
eprintf_28char_20const__2c_20____29(17834, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = $3 + 1 | 0;
continue;
}
}
$24 = $24 + 1 | 0;
continue;
}
} else {
HEAP32[($1 + 496 | 0) + ($3 << 2) >> 2] = $3 + 16;
$3 = $3 + 1 | 0;
continue;
}
}
function MakeHandshapeTables_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
$0 = __stack_pointer - 336 | 0;
__stack_pointer = $0;
label$1: {
label$2: {
$10 = XMLCell__element_28char_20const__29(HEAP32[17100], 1322);
label$3: {
if (!$10) {
break label$3;
}
$4 = XMLCell__element_28char_20const__29($10, 3876);
$3 = XMLCell__element_28char_20const__29($10, 3906);
$9 = $4 ? HEAP32[$4 + 8 >> 2] : 0;
if (!$3 | !$9) {
break label$3;
}
$12 = HEAP32[$3 + 8 >> 2];
if ($12) {
break label$2;
}
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(40655, 0);
break label$1;
}
$4 = HEAP32[$9 + 12 >> 2];
$13 = ($4 | 0) > 0 ? $4 : 0;
label$6: {
label$7: {
label$8: {
while (1) {
if (($5 | 0) == ($13 | 0)) {
label$11: {
$4 = HEAP32[$12 + 12 >> 2];
$13 = ($4 | 0) > 0 ? $4 : 0;
$8 = 0;
while (1) {
if (($8 | 0) == ($13 | 0)) {
break label$6;
}
$3 = DynamicArrayP_XMLCell___getElement_28int_29_20const($12, $8);
$7 = HEAP32[$3 >> 2];
$6 = HEAP32[18776];
$5 = InvertibleStringArray__indexFromValue_28char_20const__29_20const($6, $7);
$7 = XMLCell__attrib_string_28char_20const__29($3, 3521);
$7 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[18777], $7);
FingerBending__FingerBending_28char_20const__29($0 + 160 | 0, XMLCell__attrib_string_28char_20const__29($3, 4179));
HEAP32[19359] = 0;
$9 = invoke_iii(707, $3 | 0, 4165) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$11;
}
HEAP32[19359] = 0;
invoke_iii(708, $0 + 144 | 0, $9 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$11;
}
$4 = Math_imul($7, 120) + 73984 | 0;
HEAP32[$0 + 136 >> 2] = HEAP32[$4 + 36 >> 2];
$2 = HEAP32[$4 + 32 >> 2];
$1 = HEAP32[$4 + 28 >> 2];
HEAP32[$0 + 128 >> 2] = $1;
HEAP32[$0 + 132 >> 2] = $2;
$1 = HEAP32[$4 + 24 >> 2];
$2 = HEAP32[$4 + 20 >> 2];
HEAP32[$0 + 120 >> 2] = $2;
HEAP32[$0 + 124 >> 2] = $1;
HEAP32[$0 + 112 >> 2] = HEAP32[$4 + 56 >> 2];
$2 = HEAP32[$4 + 52 >> 2];
$1 = HEAP32[$4 + 48 >> 2];
HEAP32[$0 + 104 >> 2] = $1;
HEAP32[$0 + 108 >> 2] = $2;
$1 = HEAP32[$4 + 44 >> 2];
$2 = HEAP32[$4 + 40 >> 2];
HEAP32[$0 + 96 >> 2] = $2;
HEAP32[$0 + 100 >> 2] = $1;
HEAP32[$0 + 88 >> 2] = HEAP32[$4 + 76 >> 2];
$2 = HEAP32[$4 + 72 >> 2];
$1 = HEAP32[$4 + 68 >> 2];
HEAP32[$0 + 80 >> 2] = $1;
HEAP32[$0 + 84 >> 2] = $2;
$1 = HEAP32[$4 + 64 >> 2];
$2 = HEAP32[$4 + 60 >> 2];
HEAP32[$0 + 72 >> 2] = $2;
HEAP32[$0 + 76 >> 2] = $1;
$2 = HEAP32[$4 + 92 >> 2];
$1 = HEAP32[$4 + 88 >> 2];
HEAP32[$0 + 56 >> 2] = $1;
HEAP32[$0 + 60 >> 2] = $2;
HEAP32[$0 - -64 >> 2] = HEAP32[$4 + 96 >> 2];
$1 = HEAP32[$4 + 84 >> 2];
$2 = HEAP32[$4 + 80 >> 2];
HEAP32[$0 + 48 >> 2] = $2;
HEAP32[$0 + 52 >> 2] = $1;
$1 = HEAP32[$4 + 100 >> 2];
$9 = $1;
$2 = HEAP32[$4 + 104 >> 2];
$11 = $2;
$6 = HEAP32[$4 + 116 >> 2];
$1 = HEAP32[$4 + 112 >> 2];
$2 = HEAP32[$4 + 108 >> 2];
HEAP32[19359] = 0;
HEAP32[$0 + 32 >> 2] = $2;
HEAP32[$0 + 36 >> 2] = $1;
HEAP32[$0 + 40 >> 2] = $6;
HEAP32[$0 + 24 >> 2] = $9;
$1 = $11;
HEAP32[$0 + 28 >> 2] = $1;
$6 = invoke_iii(707, $3 | 0, 3590) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$6 = invoke_ii(709, $6 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
$3 = invoke_iiiiiiiiiiiiiiii(710, $0 + 176 | 0, $0 + 160 | 0, $0 + 144 | 0, 1, $0 + 120 | 0, 2, $0 + 96 | 0, 3, $0 + 72 | 0, 4, $0 + 48 | 0, 5, $0 + 24 | 0, $6 | 0, $7 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$8;
}
__memcpy(Math_imul($5, 160) + 70752 | 0, $3, 160);
CannedHandshape___CannedHandshape_28_29($3);
ThumbBending___ThumbBending_28_29($0 + 24 | 0);
ThumbBending___ThumbBending_28_29($0 + 48 | 0);
ThumbBending___ThumbBending_28_29($0 + 72 | 0);
ThumbBending___ThumbBending_28_29($0 + 96 | 0);
ThumbBending___ThumbBending_28_29($0 + 120 | 0);
FingerBending___FingerBending_28_29($0 + 144 | 0);
FingerBending___FingerBending_28_29($0 + 160 | 0);
HEAP32[($5 << 2) + 73920 >> 2] = ($7 << 7) + 72896;
$8 = $8 + 1 | 0;
continue;
}
}
} else {
$8 = DynamicArrayP_XMLCell___getElement_28int_29_20const($9, $5);
$3 = HEAP32[$8 >> 2];
$4 = 0;
$7 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[18777], $3);
$3 = 0;
while (1) {
if (($3 | 0) != 8) {
FingerBending__FingerBending_28char_20const__29($0 + 176 | 0, XMLCell__attrib_string_28char_20const__29($8, InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18221], $3)));
$2 = HEAP32[$0 + 188 >> 2];
$1 = HEAP32[$0 + 184 >> 2];
$11 = $1;
$6 = (($7 << 7) + 72896 | 0) + ($3 << 4) | 0;
$1 = $6;
HEAP32[$1 + 8 >> 2] = $11;
HEAP32[$1 + 12 >> 2] = $2;
$1 = HEAP32[$0 + 180 >> 2];
$2 = HEAP32[$0 + 176 >> 2];
$11 = $2;
$2 = $6;
HEAP32[$2 >> 2] = $11;
HEAP32[$2 + 4 >> 2] = $1;
$3 = $3 + 1 | 0;
FingerBending___FingerBending_28_29($0 + 176 | 0);
continue;
}
break;
}
while (1) {
if (($4 | 0) != 6) {
ThumbBending__ThumbBending_28char_20const__29($0 + 176 | 0, XMLCell__attrib_string_28char_20const__29($8, InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18222], $4)));
$3 = (Math_imul($7, 120) + 73984 | 0) + Math_imul($4, 20) | 0;
HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 192 >> 2];
$2 = HEAP32[$0 + 188 >> 2];
$1 = HEAP32[$0 + 184 >> 2];
$6 = $1;
$1 = $3;
HEAP32[$1 + 8 >> 2] = $6;
HEAP32[$1 + 12 >> 2] = $2;
$1 = HEAP32[$0 + 180 >> 2];
$2 = HEAP32[$0 + 176 >> 2];
$6 = $2;
$2 = $3;
HEAP32[$2 >> 2] = $6;
HEAP32[$2 + 4 >> 2] = $1;
$4 = $4 + 1 | 0;
ThumbBending___ThumbBending_28_29($0 + 176 | 0);
continue;
}
break;
}
$5 = $5 + 1 | 0;
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$7;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ThumbBending___ThumbBending_28_29($0 + 24 | 0);
ThumbBending___ThumbBending_28_29($0 + 48 | 0);
ThumbBending___ThumbBending_28_29($0 + 72 | 0);
ThumbBending___ThumbBending_28_29($0 + 96 | 0);
ThumbBending___ThumbBending_28_29($0 + 120 | 0);
FingerBending___FingerBending_28_29($0 + 144 | 0);
}
FingerBending___FingerBending_28_29($0 + 160 | 0);
__resumeException($4 | 0);
abort();
}
label$18: {
$8 = XMLCell__element_28char_20const__29($10, 7355);
if (!$8) {
break label$18;
}
$4 = 0;
while (1) {
if (($4 | 0) == 8) {
break label$18;
}
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($8, InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18221], $4)));
$3 = Math_imul($4, 20) + 74944 | 0;
HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
$2 = HEAP32[$0 + 12 >> 2];
$1 = HEAP32[$0 + 8 >> 2];
$5 = $1;
$1 = $3;
HEAP32[$1 + 8 >> 2] = $5;
HEAP32[$1 + 12 >> 2] = $2;
$1 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[$0 >> 2];
$5 = $2;
$2 = $3;
HEAP32[$2 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = $1;
$4 = $4 + 1 | 0;
ThumbBending___ThumbBending_28_29($0);
continue;
}
}
label$20: {
$3 = XMLCell__element_28char_20const__29($10, 3579);
if (!$3) {
break label$20;
}
$4 = 1;
while (1) {
if (($4 | 0) == 3) {
break label$20;
}
XMLCell__attrib_REAL_28float__2c_20char_20const__29($3, ($4 << 2) + 63144 | 0, InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18778], $4));
$4 = $4 + 1 | 0;
continue;
}
}
$4 = XMLCell__element_28char_20const__29($10, 3893);
if (!$4) {
break label$1;
}
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1538));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$5 = $1;
$7 = HEAP32[18780];
$1 = $7;
HEAP32[$1 >> 2] = $5;
HEAP32[$1 + 4 >> 2] = $2;
$5 = $1;
$7 = $0 + 8 | 0;
$2 = HEAP32[$7 >> 2];
$1 = HEAP32[$7 + 4 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 8 >> 2] = $3;
HEAP32[$2 + 12 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 9470));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$5 = $1;
$6 = HEAP32[18780];
$1 = $6;
HEAP32[$1 + 16 >> 2] = $5;
HEAP32[$1 + 20 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$5 = $2;
$2 = $6;
HEAP32[$2 + 24 >> 2] = $5;
HEAP32[$2 + 28 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10898));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 32 >> 2] = $3;
HEAP32[$1 + 36 >> 2] = $2;
$6 = $0 + 16 | 0;
HEAP32[$1 + 48 >> 2] = HEAP32[$6 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 40 >> 2] = $3;
HEAP32[$2 + 44 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1592));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 52 >> 2] = $3;
HEAP32[$1 + 56 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 60 >> 2] = $3;
HEAP32[$2 + 64 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 9500));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 68 >> 2] = $3;
HEAP32[$1 + 72 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 76 >> 2] = $3;
HEAP32[$2 + 80 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10977));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 84 >> 2] = $3;
HEAP32[$1 + 88 >> 2] = $2;
HEAP32[$1 + 100 >> 2] = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 92 >> 2] = $3;
HEAP32[$2 + 96 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 3606));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 104 >> 2] = $3;
HEAP32[$1 + 108 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 112 >> 2] = $3;
HEAP32[$2 + 116 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10922));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 120 >> 2] = $3;
HEAP32[$1 + 124 >> 2] = $2;
HEAP32[$1 + 136 >> 2] = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 128 >> 2] = $3;
HEAP32[$2 + 132 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1616));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 140 >> 2] = $3;
HEAP32[$1 + 144 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 148 >> 2] = $3;
HEAP32[$2 + 152 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10999));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 156 >> 2] = $3;
HEAP32[$1 + 160 >> 2] = $2;
HEAP32[$1 + 172 >> 2] = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 164 >> 2] = $3;
HEAP32[$2 + 168 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1671));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 176 >> 2] = $3;
HEAP32[$1 + 180 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 184 >> 2] = $3;
HEAP32[$2 + 188 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10951));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 192 >> 2] = $3;
HEAP32[$1 + 196 >> 2] = $2;
HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 200 >> 2] = $3;
HEAP32[$2 + 204 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1645));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 212 >> 2] = $3;
HEAP32[$1 + 216 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 220 >> 2] = $3;
HEAP32[$2 + 224 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
ThumbBending__ThumbBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 10859));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$3 = $1;
$5 = HEAP32[18780];
$1 = $5;
HEAP32[$1 + 228 >> 2] = $3;
HEAP32[$1 + 232 >> 2] = $2;
HEAP32[$1 + 244 >> 2] = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$3 = $2;
$2 = $5;
HEAP32[$2 + 236 >> 2] = $3;
HEAP32[$2 + 240 >> 2] = $1;
ThumbBending___ThumbBending_28_29($0);
FingerBending__FingerBending_28char_20const__29($0, XMLCell__attrib_string_28char_20const__29($4, 1567));
$2 = HEAP32[$0 + 4 >> 2];
$1 = HEAP32[$0 >> 2];
$5 = $1;
$4 = HEAP32[18780];
$1 = $4;
HEAP32[$1 + 248 >> 2] = $5;
HEAP32[$1 + 252 >> 2] = $2;
$1 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
$5 = $2;
$2 = $4;
HEAP32[$2 + 256 >> 2] = $5;
HEAP32[$2 + 260 >> 2] = $1;
FingerBending___FingerBending_28_29($0);
}
__stack_pointer = $0 + 336 | 0;
}
function HanimAvatar__createSiGMLArmSites_28_29($0) {
var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0);
$1 = __stack_pointer - 368 | 0;
__stack_pointer = $1;
$7 = XMLCell__element_28char_20const__29(HEAP32[17100], 1322);
$27 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($7, 8152, Math_fround(.05400000140070915));
$21 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($7, 1276, Math_fround(1.2999999523162842));
$24 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($7, 3504, Math_fround(.027000000700354576));
label$1: while (1) {
if (($8 | 0) == 2) {
$19 = Math_fround(XMLCell__attrib_REAL_28char_20const__2c_20float_29($7, 3487, Math_fround(.0820000022649765)) * Math_fround(.5));
$20 = Math_fround(XMLCell__attrib_REAL_28char_20const__2c_20float_29($7, 3469, Math_fround(.10999999940395355)) * Math_fround(.5));
$28 = HEAP32[13692];
$29 = Math_fround($21 + $21);
$8 = 0;
$4 = 0;
label$3: while (1) {
if (($4 | 0) == 2) {
label$5: while (1) {
if (($8 | 0) != 2) {
$18 = HEAP32[($8 << 2) + 75456 >> 2];
$5 = 0;
label$7: while (1) {
if (($5 | 0) == 5) {
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 152 | 0, 10, $8, 1, MakeDigit_28DigitIndex_29(0));
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 144 | 0, 2, $8, 0, 0);
HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 152 >> 2];
HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 144 >> 2];
HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1 + 32 | 0, $1 + 28 | 0);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 136 | 0, 10, $8, 3, MakeDigit_28DigitIndex_29(1));
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 128 | 0, 4, $8, 0, 0);
HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 136 >> 2];
HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 128 >> 2];
HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1 + 24 | 0, $1 + 20 | 0);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 120 | 0, 10, $8, 4, MakeDigit_28DigitIndex_29(4));
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 112 | 0, 5, $8, 0, 0);
HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 120 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 112 >> 2];
HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1 + 16 | 0, $1 + 12 | 0);
$8 = $8 + 1 | 0;
continue label$5;
}
$11 = ((HEAP32[$0 + 72 >> 2] + Math_imul($8, 60) | 0) + Math_imul($5, 12) | 0) + 52 | 0;
$7 = 0;
label$9: while (1) {
if (($7 | 0) == 3) {
$5 = $5 + 1 | 0;
continue label$7;
}
$2 = $7 << 2;
$13 = $2 + 49056 | 0;
$14 = $2 + 49044 | 0;
$15 = HEAP32[$2 + $11 >> 2];
$3 = HEAPF32[$15 + 28 >> 2];
$16 = $3 == Math_fround(0) ? $24 : $3;
$3 = Math_fround($16 * Math_fround(.5));
$6 = $15 + 68 | 0;
$2 = 0;
while (1) if (($2 | 0) == 5) {
$7 = $7 + 1 | 0;
continue label$9;
} else {
$10 = $2 << 2;
$9 = HEAPF32[$10 + 48992 >> 2];
$4 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 344 | 0, ($8 | 0) == 1 ? $9 : Math_fround(-$9), Math_fround(0), HEAPF32[$10 + 49024 >> 2]);
Vector__setUnit_28_29($4);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 312 | 0, HEAP32[$14 >> 2], $8, $2, MakeDigit_28DigitIndex_29($5));
HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 312 >> 2];
$9 = Vector__x_28_29_20const($6);
$12 = Vector__x_28_29_20const($4);
$17 = Vector__y_28_29_20const($6);
$19 = Vector__y_28_29_20const($4);
$20 = Vector__z_28_29_20const($6);
$10 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 328 | 0, Math_fround($9 + Math_fround($3 * $12)), Math_fround(Math_fround($3 * $19) + Math_fround($17 - HEAPF32[$13 >> 2])), Math_fround(Math_fround($3 * Vector__z_28_29_20const($4)) + Math_fround($20 + Math_fround(0))));
HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 176 >> 2];
$4 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 44 | 0, $15, $10, $16, $4, HEAPF32[17148]);
label$14: {
label$15: {
label$16: {
label$17: {
switch ($7 & 65535) {
case 1:
if (!$5 & ($2 | 0) == 3 | ($2 | 0) == 2) {
break label$16;
}
break label$15;
case 0:
break label$17;
default:
break label$14;
}
}
if (($2 | 0) == 4 & ($5 | 0) == 4) {
break label$16;
}
if (!(($2 | 0) == 3 & $5 >>> 0 < 2)) {
break label$14;
}
}
DynamicArrayP_Site___appendElement_28Site__29($18, $4);
if (($7 | 0) != 1) {
break label$14;
}
}
HEAP32[$1 + 168 >> 2] = HEAP32[$1 + 312 >> 2];
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 160 | 0, 11, $8, $2, MakeDigit_28DigitIndex_29($5));
HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 168 >> 2];
HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 160 >> 2];
HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1 + 40 | 0, $1 + 36 | 0);
}
$2 = $2 + 1 | 0;
continue;
}
}
}
}
break;
}
HanimAvatar__setSiteNormals_28_29($0);
__stack_pointer = $1 + 368 | 0;
return;
}
$22 = HEAP32[($4 << 2) + 75456 >> 2];
$2 = HEAP32[$0 + 72 >> 2] + ($4 << 4) | 0;
$18 = HEAP32[$2 + 24 >> 2];
$14 = HEAP32[$2 + 32 >> 2];
$6 = HEAP32[$2 + 28 >> 2];
$7 = Vector__Vector_28_29($1 + 344 | 0);
$10 = $6 + 68 | 0;
$5 = $14 + 68 | 0;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($7, Vector__Vector_28Vector_20const__29_1($1 + 328 | 0, $10), Vector__Vector_28Vector_20const__29_1($1 + 312 | 0, $5));
$15 = Vector__Vector_28_29($1 + 328 | 0);
$23 = $18 + 68 | 0;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($15, Vector__Vector_28Vector_20const__29_1($1 + 312 | 0, $23), Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $10));
$3 = HEAPF32[$14 + 28 >> 2];
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 288 | 0, 6, $4, 0, 0);
$2 = 1;
$3 = $3 == Math_fround(0) ? $27 : $3;
$25 = Math_fround($3 / $29);
$9 = ($4 | 0) == 1 ? Math_fround(1) : Math_fround(-1);
$13 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 312 | 0, Math_fround(Math_fround($25 * $9) + Vector__x_28_29_20const($5)), Vector__y_28_29_20const($5), Vector__z_28_29_20const($5));
$12 = HEAPF32[$14 + 28 >> 2];
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, $9, Math_fround(0), Math_fround(0));
HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 288 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 104 | 0, $14, $13, $12, $11, HEAPF32[17148]);
$30 = Math_fround(Math_fround($21 * $3) * Math_fround(.5));
while (1) {
if (($2 | 0) == 5) {
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 248 | 0, 13, $4, 1, 0);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 240 | 0, 14, $4, 0, 0);
HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 248 >> 2];
HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 240 >> 2];
HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1 + 84 | 0, $1 + 80 | 0);
$6 = HEAP32[(HEAP32[$0 + 72 >> 2] + Math_imul($4, 60) | 0) + 76 >> 2];
$2 = Vector__Vector_28_29($1 + 312 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($2, Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $5), Vector__Vector_28Vector_20const__29_1($1 + 224 | 0, $6 + 68 | 0), Math_fround(.6000000238418579));
$3 = HEAPF32[$6 + 28 >> 2];
MakeSiteID_28Location_2c_20SideIndex_29($1 + 216 | 0, 1, $4);
HEAP32[$1 + 208 >> 2] = HEAP32[$1 + 216 >> 2];
$3 = Math_fround(Math_fround(Math_fround(($3 == Math_fround(0) ? $24 : $3) * Math_fround(1.2000000476837158)) * Math_fround(.5)) * $9);
$7 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, Math_fround($3 + Vector__x_28_29_20const($2)), Vector__y_28_29_20const($2), Vector__z_28_29_20const($2));
$12 = HEAPF32[$14 + 28 >> 2];
$15 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, $9, Math_fround(0), Math_fround(0));
HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 208 >> 2];
DynamicArrayP_Site___appendElement_28Site__29($22, HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 76 | 0, $14, $7, $12, $15, HEAPF32[17148]));
MakeSiteID_28Location_2c_20SideIndex_29($1 + 200 | 0, 3, $4);
HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 200 >> 2];
$7 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, Math_fround(Vector__x_28_29_20const($2) - $3), Vector__y_28_29_20const($2), Vector__z_28_29_20const($2));
$3 = HEAPF32[$14 + 28 >> 2];
$15 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 224 | 0, Math_fround(-$9), Math_fround(0), Math_fround(0));
HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 192 >> 2];
DynamicArrayP_Site___appendElement_28Site__29($22, HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 72 | 0, $14, $7, $3, $15, HEAPF32[17148]));
$3 = Vector__distance_28Vector_20const__29_20const($10, Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $23));
$9 = Vector__distance_28Vector_20const__29_20const($5, Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $10));
$12 = Vector__distance_28Vector_20const__29_20const($2, Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $5));
$2 = Vector__Vector_28Vector_20const__29_1($1 + 296 | 0, $23);
$5 = Vector__yref_28_29($2);
HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] - Math_fround($12 + Math_fround($3 + $9));
MakeSiteID_28Location_2c_20SideIndex_29($1 + 224 | 0, 44, $4);
$5 = HEAP32[$1 + 224 >> 2];
HEAP32[$1 + 184 >> 2] = $5;
$10 = HEAP32[HEAP32[$0 + 72 >> 2] + 4 >> 2];
HEAP32[$1 + 68 >> 2] = $5;
$3 = HEAPF32[17148];
$2 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 68 | 0, $10, $2, $3, 68080, $3);
if (HEAPU8[67591]) {
HEAPF64[$1 + 48 >> 3] = HEAPF32[$14 + 28 >> 2];
eprintf_28char_20const__2c_20____29(33205, $1 + 48 | 0);
Site__print_28_IO_FILE__29_20const($2, $28);
}
$4 = $4 + 1 | 0;
continue label$3;
}
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 280 | 0, 6, $4, $2, 0);
$11 = $2 << 2;
$12 = HEAPF32[$11 + 48992 >> 2];
$16 = Math_fround(Math_fround(Math_fround($25 * $12) * $9) + Vector__x_28_29_20const($5));
$17 = Vector__y_28_29_20const($5);
$3 = HEAPF32[$11 + 49024 >> 2];
$13 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 312 | 0, $16, $17, Math_fround(Math_fround($30 * $3) + Vector__z_28_29_20const($5)));
$16 = HEAPF32[$14 + 28 >> 2];
$17 = Math_fround($9 * $12);
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, $17, Math_fround(0), $3);
HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 280 >> 2];
$13 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 100 | 0, $14, $13, $16, $11, HEAPF32[17148]);
if ($2 - 1 >>> 0 <= 1) {
DynamicArrayP_Site___appendElement_28Site__29($22, $13);
}
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 272 | 0, 12, $4, $2, 0);
$16 = Math_fround(Math_fround($19 * $12) * $9);
$26 = Math_fround($19 * $3);
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 312 | 0, Math_fround($16 + Vector__x_28_29_20const($7)), Vector__y_28_29_20const($7), Math_fround($26 + Vector__z_28_29_20const($7)));
$31 = HEAPF32[$6 + 28 >> 2];
$13 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, $17, Math_fround(0), $3);
HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 272 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 96 | 0, $6, $11, $31, $13, HEAPF32[17149]);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 264 | 0, 13, $4, $2, 0);
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 312 | 0, Math_fround($16 + Vector__x_28_29_20const($10)), Vector__y_28_29_20const($10), Math_fround($26 + Vector__z_28_29_20const($10)));
$16 = HEAPF32[$6 + 28 >> 2];
$13 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, $17, Math_fround(0), $3);
HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 264 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 92 | 0, $6, $11, $16, $13, HEAPF32[17149]);
MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($1 + 256 | 0, 15, $4, $2, 0);
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 312 | 0, Math_fround(Math_fround(Math_fround($20 * $12) * $9) + Vector__x_28_29_20const($15)), Vector__y_28_29_20const($15), Math_fround(Math_fround($20 * $3) + Vector__z_28_29_20const($15)));
$12 = HEAPF32[$18 + 28 >> 2];
$13 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 296 | 0, $17, Math_fround(0), $3);
HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 256 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1 + 88 | 0, $18, $11, $12, $13, HEAPF32[17149]);
$2 = $2 + 1 | 0;
continue;
}
}
}
$2 = $8 << 2;
$5 = HEAP32[$2 + 48916 >> 2];
$10 = HEAP32[$2 + 75456 >> 2];
$2 = 0;
while (1) if (($2 | 0) == 5) {
$8 = $8 + 1 | 0;
continue label$1;
} else {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($1 + 328 | 0, 7, $5, 0, MakeDigit_28DigitIndex_29($2));
$6 = (HEAP32[$0 + 72 >> 2] + Math_imul($8, 60) | 0) + Math_imul($2, 12) | 0;
$4 = HEAP32[$6 + 60 >> 2];
$3 = Vector__y_28_29_20const(HEAP32[$6 + 56 >> 2] + 68 | 0);
$6 = $4 + 68 | 0;
$3 = Math_fround(Math_fround($3 - Vector__y_28_29_20const($6)) * HEAPF32[(Math_imul($8, 20) + 68552 | 0) + ($2 << 2) >> 2]);
$9 = Math_fround(0);
if (!$2) {
$9 = Math_fround($3 / HEAPF32[17096]);
$3 = $9;
}
HEAP32[$1 + 360 >> 2] = HEAP32[$1 + 328 >> 2];
$6 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 344 | 0, Vector__x_28_29_20const($6), Math_fround(Vector__y_28_29_20const($6) - $3), Math_fround($9 + Vector__z_28_29_20const($6)));
$3 = HEAPF32[$4 + 28 >> 2];
HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 360 >> 2];
DynamicArrayP_Site___appendElement_28Site__29($10, HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $1 + 108 | 0, $4, $6, Math_fround($3 * Math_fround(.25))));
$2 = $2 + 1 | 0;
continue;
}
}
}
function HanimAvatar__computeArmRotations_28JointRotation___2c_20bool_2c_20Vector_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_2c_20float_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = Math_fround($6);
$7 = Math_fround($7);
var $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
$8 = __stack_pointer - 688 | 0;
__stack_pointer = $8;
if (HEAPU8[67561]) {
HEAP32[$8 + 384 >> 2] = $2 ? 82 : 76;
HEAP32[$8 + 388 >> 2] = HEAP16[35020];
eprintf_28char_20const__2c_20____29(30616, $8 + 384 | 0);
HEAP16[35020] = HEAPU16[35020] + 1;
}
$12 = HEAP32[$0 + 72 >> 2] + ($2 << 4) | 0;
$35 = $12;
$23 = HEAP32[$12 + 20 >> 2];
$22 = Vector__Vector_28Vector_20const__29($8 + 672 | 0, HEAP32[$12 + 28 >> 2] + 68 | 0);
$17 = Vector__Vector_28Vector_20const__29($8 + 656 | 0, HEAP32[$12 + 32 >> 2] + 68 | 0);
$20 = Vector__Vector_28Vector_20const__29($8 + 640 | 0, HEAP32[$12 + 24 >> 2] + 68 | 0);
$13 = Vector__Vector_28Vector_20const__29($8 + 624 | 0, $20);
$24 = $23 + 68 | 0;
Vector__setSubtract_28Vector_20const__29_1($13, $24);
$12 = Vector__Vector_28Vector_20const__29($8 + 608 | 0, $13);
$23 = Quaternion__Quaternion_28_29($8 + 592 | 0);
$29 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 8 >> 2]]($29, $23);
Quaternion__rotateVector_28Vector__29_20const($23, $12);
Vector__setSubtract_28Vector_20const__29($12, $13);
Vector__setAdd_28Vector_20const__29($20, $12);
Vector__setAdd_28Vector_20const__29($22, $12);
Vector__setAdd_28Vector_20const__29($17, $12);
$12 = Math_imul($2, 28) + $0 | 0;
$27 = HEAPF32[$12 + 8 >> 2];
$18 = HEAPF32[$12 + 4 >> 2];
$14 = HEAPF32[$12 + 24 >> 2];
$12 = Vector__Vector_28Vector_20const__29($8 + 576 | 0, $3);
Vector__setSubtract_28Vector_20const__29($12, $20);
$10 = Vector__x_28_29_20const($12);
$7 = Vector__y_28_29_20const($12);
$11 = Vector__z_28_29_20const($12);
$9 = Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11));
$21 = sqrt_28float_29($9);
$15 = Math_fround(Math_fround($7 * $7) + $9);
$9 = sqrt_28float_29($15);
$17 = Quaternion__Quaternion_28_29($8 + 560 | 0);
$13 = HEAP32[$0 + 228 >> 2];
$28 = Math_fround($14 * HEAPF32[$13 + 32 >> 2]);
$19 = $28 < $9;
$25 = HEAPF32[$13 + 36 >> 2];
$16 = HEAPF32[$13 + 40 >> 2];
$30 = Math_fround(Math_fround($14 * $25) * $16);
$32 = $30 > $9;
$29 = $19 | $32;
if ($29) {
label$3: {
if ($19) {
$10 = Math_fround($14 - $28);
$7 = Math_fround($9 - $28);
$21 = Math_fround($9 - Math_fround(sqrt_28float_29(Math_fround(Math_fround($10 * $10) + Math_fround($7 * $7))) - $10));
break label$3;
}
$10 = Math_fround($30 - $9);
$7 = Math_fround(Math_fround($10 * Math_fround(Math_fround($16 + $16) - Math_fround($10 / $25))) / Math_fround($16 * $16));
$21 = Math_fround($9 + $7);
if (!HEAPU8[67587]) {
break label$3;
}
HEAPF64[$8 + 368 >> 3] = $25;
HEAPF64[$8 + 376 >> 3] = Math_fround($7 / $25);
HEAPF64[$8 + 360 >> 3] = $16;
HEAPF64[$8 + 352 >> 3] = $10;
eprintf_28char_20const__2c_20____29(27652, $8 + 352 | 0);
}
$26 = Vector__Vector_28Vector_20const__29($8 + 544 | 0, $20);
Vector__setSubtract_28Vector_20const__29_1($26, $24);
$31 = Vector__Vector_28Vector_20const__29($8 + 528 | 0, $3);
Vector__setSubtract_28Vector_20const__29_1($31, $24);
$7 = Vector__angleWith_28Vector_20const__29_20const($26, $31);
$10 = $7;
$11 = cosRule_28float_2c_20float_2c_20float_29(Vector__length_28_29_20const($26), Vector__length_28_29_20const($31), $21);
label$5: {
if ($11 < Math_fround(-1)) {
break label$5;
}
$10 = $7;
if ($11 > Math_fround(1)) {
break label$5;
}
$10 = Math_fround($7 - acos_28float_29($11));
}
if ($19) {
$7 = Math_fround($7 * HEAPF32[HEAP32[$0 + 228 >> 2] + 12 >> 2]);
$10 = $7 < $10 ? $7 : $10;
}
$13 = Vector__Vector_28_29($8 + 512 | 0);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($13, $26, $31);
if ($32) {
$7 = Vector__y_28_29_20const($13);
Vector__set_y_28float_29($13, Math_fround($7 + $7));
}
$7 = Vector__z_28_29_20const($13);
label$8: {
if ($2) {
$7 = Math_fround(-$7);
$11 = Vector__y_28_29_20const($13);
break label$8;
}
$11 = Math_fround(-Vector__y_28_29_20const($13));
}
$16 = Math_fround($10 / sqrt_28float_29(Math_fround(Math_fround($7 * $7) + Math_fround($11 * $11))));
$15 = Math_fround($11 * $16);
$11 = Math_fround($7 * $16);
$19 = HEAP32[$0 + 228 >> 2];
$7 = HEAPF32[$19 + 16 >> 2];
label$10: {
if ($11 > $7) {
$7 = Math_fround($11 / $7);
break label$10;
}
$11 = Math_fround(-$11);
$16 = HEAPF32[$19 + 20 >> 2];
$7 = Math_fround(0);
if (!($11 > $16)) {
break label$10;
}
$7 = Math_fround($11 / $16);
}
$11 = HEAPF32[$19 + 24 >> 2];
label$12: {
if ($15 > $11) {
$11 = Math_fround($15 / $11);
break label$12;
}
$15 = Math_fround(-$15);
$16 = HEAPF32[$19 + 28 >> 2];
$11 = Math_fround(0);
if (!($15 > $16)) {
break label$12;
}
$11 = Math_fround($15 / $16);
}
$7 = $7 > $11 ? $7 : $11;
$10 = Math_fround($10 / ($7 != Math_fround(0) ? $7 : Math_fround(1)));
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($17, $13, $10, 0);
if (!(!HEAPU8[67587] | !($9 < $21))) {
HEAPF64[$8 + 336 >> 3] = $10;
eprintf_28char_20const__2c_20____29(15682, $8 + 336 | 0);
Quaternion__print_28_IO_FILE__2c_20int_29($17, HEAP32[16886], 3);
eputc_28char_29(10);
}
Quaternion__rotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($17, Vector__Vector_28Vector_20const__29_1($8 + 496 | 0, $24), $20);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($12, $3, $20);
$10 = Vector__x_28_29_20const($12);
$7 = Vector__y_28_29_20const($12);
$11 = Vector__z_28_29_20const($12);
$9 = Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11));
$21 = sqrt_28float_29($9);
$15 = Math_fround(Math_fround($7 * $7) + $9);
$9 = sqrt_28float_29($15);
}
if ($9 > $14) {
$14 = Math_fround($14 / $9);
$9 = Math_fround($9 * $14);
$21 = Math_fround($14 * $21);
$11 = Math_fround($14 * $11);
$10 = Math_fround($14 * $10);
$15 = Math_fround($15 * Math_fround($14 * $14));
$7 = Math_fround($14 * $7);
}
$16 = Math_fround($18 * $18);
$25 = Math_fround($27 * $27);
$30 = Math_fround($16 + $25);
$28 = Math_fround($18 + $18);
$14 = Math_fround(Math_fround($30 - $15) / Math_fround($28 * $27));
$13 = $14 < Math_fround(-1);
if ($13 | $14 > Math_fround(1)) {
$14 = $13 ? Math_fround(-.9950000047683716) : Math_fround(.9950000047683716);
$15 = Math_fround(Math_fround(Math_fround($18 * Math_fround($14 * Math_fround(-2))) * $27) + $30);
$9 = sqrt_28float_29($15);
}
$27 = HEAPF32[17509];
$14 = acos_28float_29($14);
$18 = acos_28float_29(Math_fround(Math_fround(Math_fround($16 + $15) - $25) / Math_fround($28 * $9)));
$10 = atan2_28float_2c_20float_29($10, $11);
$7 = atan2_28float_2c_20float_29($7, $21);
$11 = HEAPF32[17095];
$9 = Math_fround(0);
$13 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($8 + 544 | 0, Vector__Vector_28float_2c_20float_2c_20float_29($8 + 528 | 0, Math_fround(0), Math_fround(1), Math_fround(0)), $10, 1);
$24 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($8 + 528 | 0, Vector__Vector_28float_2c_20float_2c_20float_29($8 + 512 | 0, Math_fround(-1), Math_fround(0), Math_fround(0)), Math_fround($11 + Math_fround($7 - $18)), 1);
$19 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($8 + 512 | 0, Vector__Vector_28float_2c_20float_2c_20float_29($8 + 496 | 0, Math_fround(0), Math_fround(1), Math_fround(0)), Math_fround(0), 1);
$13 = Quaternion__Quaternion_28Quaternion_20const__29($8 + 496 | 0, $13);
Quaternion__setCompose_28Quaternion_20const__29($13, $24);
Quaternion__setCompose_28Quaternion_20const__29($13, $19);
$10 = HEAPF32[17509];
$3 = HEAP32[$0 + 228 >> 2] + ($2 << 4) | 0;
$7 = HEAPF32[$3 - -64 >> 2];
$22 = Vector__Vector_28Vector_20const__29($8 + 480 | 0, $22);
Vector__setSubtract_28Vector_20const__29($22, $20);
Quaternion__rotateVector_28Vector__29_20const($13, $22);
$11 = Math_fround($10 - $7);
$20 = $3 + 52 | 0;
$15 = acos_28float_29(Math_fround(-Vector__cosAngleWith_28Vector_20const__29_20const($22, Vector__Vector_28Vector_20const__29_1($8 + 464 | 0, $20))));
label$17: {
if (!($11 < $15)) {
break label$17;
}
$9 = acos_28float_29(Math_fround(-Vector__cosAngleWith_28Vector_20const__29_20const($12, Vector__Vector_28Vector_20const__29_1($8 + 464 | 0, $20))));
$7 = sphTriFaceAngle_28float_2c_20float_2c_20float_29($18, $9, $15);
$10 = sphTriFaceAngle_28float_2c_20float_2c_20float_29($18, $9, $11);
if ($10 < Math_fround(0)) {
$33 = +$11;
HEAPF64[$8 + 320 >> 3] = $33;
HEAPF64[$8 + 328 >> 3] = HEAPF32[17095];
$34 = +$10;
HEAPF64[$8 + 304 >> 3] = $34;
HEAPF64[$8 + 312 >> 3] = $15;
eprintf_28char_20const__2c_20____29(27028, $8 + 304 | 0);
HEAPF64[$8 + 296 >> 3] = $33;
HEAPF64[$8 + 288 >> 3] = $9;
HEAPF64[$8 + 280 >> 3] = $18;
HEAPF64[$8 + 272 >> 3] = $34;
eprintf_28char_20const__2c_20____29(47306, $8 + 272 | 0);
$10 = HEAPF32[17095];
}
$3 = HEAPU8[67561];
$9 = Math_fround($10 - $7);
$18 = HEAPF32[HEAP32[$0 + 228 >> 2] + 4 >> 2];
$21 = Math_fround(-$18);
label$19: {
if ($9 < $21) {
if (!($3 & 255)) {
$9 = $2 ? $21 : $18;
break label$17;
}
HEAPF64[$8 + 232 >> 3] = $10;
HEAPF64[$8 + 224 >> 3] = $7;
HEAPF64[$8 + 216 >> 3] = $18;
HEAPF64[$8 + 208 >> 3] = $9;
eprintf_28char_20const__2c_20____29(28369, $8 + 208 | 0);
$9 = Math_fround(-HEAPF32[HEAP32[$0 + 228 >> 2] + 4 >> 2]);
break label$19;
}
if (!($3 & 255)) {
$9 = $2 ? $9 : Math_fround(-$9);
break label$17;
}
HEAPF64[$8 + 256 >> 3] = $10;
HEAPF64[$8 + 248 >> 3] = $7;
HEAPF64[$8 + 240 >> 3] = $9;
eprintf_28char_20const__2c_20____29(28430, $8 + 240 | 0);
}
$9 = $2 ? $9 : Math_fround(-$9);
if (!HEAPU8[67561]) {
break label$17;
}
HEAPF64[$8 + 200 >> 3] = $9;
HEAPF64[$8 + 192 >> 3] = $10;
HEAPF64[$8 + 184 >> 3] = $7;
HEAPF64[$8 + 176 >> 3] = $11;
HEAPF64[$8 + 168 >> 3] = $15;
HEAP32[$8 + 160 >> 2] = $2 ? 82 : 76;
eprintf_28char_20const__2c_20____29(26353, $8 + 160 | 0);
}
$10 = $2 ? Math_fround(-$6) : $6;
$7 = SphereInterpolator__interpolate_28Vector_20const__29_20const(HEAP32[($2 ? $0 + 92 | 0 : $0 + 96 | 0) >> 2], $12);
if (HEAPU8[67567] | HEAPU8[67592]) {
HEAPF64[$8 + 152 >> 3] = $6;
HEAP32[$8 + 144 >> 2] = $2 ? 82 : 76;
eprintf_28char_20const__2c_20____29(28012, $8 + 144 | 0);
}
$10 = Math_fround($10 + $7);
if (HEAPU8[67566]) {
HEAPF64[$8 + 128 >> 3] = $10;
eprintf_28char_20const__2c_20____29(28335, $8 + 128 | 0);
}
$24 = absREAL_28float_29($9) > absREAL_28float_29(Math_fround(0));
$7 = $24 ? $9 : Math_fround(0);
if (HEAPU8[67567]) {
HEAP32[$8 + 120 >> 2] = 0;
HEAP32[$8 + 124 >> 2] = 0;
HEAPF64[$8 + 112 >> 3] = $9;
HEAPF64[$8 + 104 >> 3] = $7;
HEAPF64[$8 + 96 >> 3] = $10;
eprintf_28char_20const__2c_20____29(28230, $8 + 96 | 0);
}
$19 = absREAL_28float_29($10) > absREAL_28float_29($7);
$7 = $19 ? $10 : $7;
label$26: {
if (!HEAPU8[67601]) {
break label$26;
}
$26 = $2 ? 82 : 76;
HEAP32[$8 + 80 >> 2] = $26;
HEAP32[$8 + 84 >> 2] = $19 ? 6698 : $24 ? 5297 : 10364;
eprintf_28char_20const__2c_20____29(25833, $8 + 80 | 0);
if (!HEAPU8[67601]) {
break label$26;
}
HEAPF64[$8 - -64 >> 3] = $7;
HEAP32[$8 + 56 >> 2] = 0;
HEAP32[$8 + 60 >> 2] = 0;
HEAP32[$8 + 48 >> 2] = 0;
HEAP32[$8 + 52 >> 2] = -1071382528;
HEAP32[$8 + 40 >> 2] = 0;
HEAP32[$8 + 44 >> 2] = 0;
HEAPF64[$8 + 32 >> 3] = $10;
HEAP32[$8 + 16 >> 2] = $26;
HEAPF64[$8 + 24 >> 3] = $9;
eprintf_28char_20const__2c_20____29(28482, $8 + 16 | 0);
eprintf_28char_20const__2c_20____29(19869, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19855, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($22, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19842, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($20, HEAP32[16886], 3);
eputc_28char_29(10);
}
label$27: {
if ($7 == Math_fround(0)) {
break label$27;
}
$2 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($8 + 464 | 0, $12, $7, 0);
if (HEAPU8[67561]) {
eprintf_28char_20const__2c_20____29(16370, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($2, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(23979, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($13, HEAP32[16886], 3);
eputc_28char_29(10);
}
Quaternion__setPreCompose_28Quaternion_20const__29($13, $2);
if (!HEAPU8[67561]) {
break label$27;
}
eprintf_28char_20const__2c_20____29(23961, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($13, HEAP32[16886], 3);
eputc_28char_29(10);
}
if ($29) {
$2 = Quaternion__Quaternion_28Quaternion_20const__29($8 + 464 | 0, $17);
Quaternion__setInverse_28_29($2);
Quaternion__setPreCompose_28Quaternion_20const__29($13, $2);
}
$2 = Vector__Vector_28_29($8 + 448 | 0);
$12 = HEAP32[$35 + 28 >> 2];
$12 = Vector__Vector_28Vector_20const__29_1($8 + 464 | 0, HEAP32[$12 + 36 >> 2] + 8 | 0);
$3 = HEAP32[$12 + 4 >> 2];
HEAP32[$2 >> 2] = HEAP32[$12 >> 2];
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
$9 = Math_fround($27 - $14);
$12 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($8 + 464 | 0, $2, $9, 1);
$2 = Quaternion__Quaternion_28Quaternion_20const__29($8 + 432 | 0, $17);
Quaternion__setCompose_28Quaternion_20const__29($2, $13);
Quaternion__setCompose_28Quaternion_20const__29($2, $12);
Quaternion__setInverse_28_29($2);
Quaternion__setCompose_28Quaternion_20const__29($2, $4);
Quaternion__setCompose_28Quaternion_20const__29($2, $5);
$22 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 16 >> 2]]($22, $17);
$17 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 20 >> 2]]($17, $23);
$17 = HEAP32[$1 + 4 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 16 >> 2]]($17, $13);
$17 = HEAP32[$1 + 4 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 28 >> 2]]($17, $23);
$23 = HEAP32[$1 + 8 >> 2];
label$30: {
if (HEAP32[HEAP32[$23 + 4 >> 2] + 24 >> 2] == 5) {
HEAPF32[$23 + 20 >> 2] = $9;
break label$30;
}
HEAP32[$8 + 416 >> 2] = 0;
fixForearmRot_28Quaternion__2c_20Quaternion__2c_20float__2c_20float_29($2, $12, $8 + 416 | 0, HEAPF32[HEAP32[$0 + 228 >> 2] + 44 >> 2]);
HEAPF32[HEAP32[$1 + 8 >> 2] + 32 >> 2] = $9;
HEAPF32[HEAP32[$1 + 8 >> 2] + 36 >> 2] = HEAPF32[$8 + 416 >> 2];
}
$1 = HEAP32[$1 + 12 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2);
if (HEAPU8[67561]) {
$1 = Vector__Vector_28float_2c_20float_2c_20float_29($8 + 416 | 0, Math_fround(0), Math_fround(-1), Math_fround(0));
Quaternion__rotateVector_28Vector__29_20const($13, $1);
$9 = Vector__angleWith_28Vector_20const__29_20const($1, Vector__Vector_28Vector_20const__29_1($8 + 400 | 0, $20));
eprintf_28char_20const__2c_20____29(19883, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
HEAPF64[$8 + 8 >> 3] = $11;
HEAPF64[$8 >> 3] = $9;
eprintf_28char_20const__2c_20____29(28553, $8);
}
__stack_pointer = $8 + 688 | 0;
}
function hexfloat($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$6 = __stack_pointer - 432 | 0;
__stack_pointer = $6;
$13 = HEAP32[$1 + 4 >> 2];
label$1: {
if (($13 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$1 + 4 >> 2] = $13 + 1;
$13 = HEAPU8[$13 | 0];
break label$1;
}
$13 = __shgetc($1);
}
label$3: {
label$4: {
while (1) {
label$6: {
if (($13 | 0) != 48) {
if (($13 | 0) != 46) {
break label$3;
}
$13 = HEAP32[$1 + 4 >> 2];
if (($13 | 0) == HEAP32[$1 + 104 >> 2]) {
break label$6;
}
HEAP32[$1 + 4 >> 2] = $13 + 1;
$13 = HEAPU8[$13 | 0];
break label$4;
}
$13 = HEAP32[$1 + 4 >> 2];
if (($13 | 0) != HEAP32[$1 + 104 >> 2]) {
$8 = 1;
HEAP32[$1 + 4 >> 2] = $13 + 1;
$13 = HEAPU8[$13 | 0];
} else {
$8 = 1;
$13 = __shgetc($1);
}
continue;
}
break;
}
$13 = __shgetc($1);
}
$28 = 1;
if (($13 | 0) != 48) {
break label$3;
}
while (1) {
$12 = $23;
$8 = $12 - 1 | 0;
$23 = $8;
$9 = $24;
$11 = !$12;
$11 = $9 - $11 | 0;
$24 = $11;
$13 = HEAP32[$1 + 4 >> 2];
label$11: {
if (($13 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$1 + 4 >> 2] = $13 + 1;
$13 = HEAPU8[$13 | 0];
break label$11;
}
$13 = __shgetc($1);
}
if (($13 | 0) == 48) {
continue;
}
break;
}
$8 = 1;
}
$16 = 1073676288;
label$13: {
while (1) {
label$15: {
$9 = $13 | 32;
label$16: {
label$17: {
$7 = $13 - 48 | 0;
if ($7 >>> 0 < 10) {
break label$17;
}
if (($13 | 0) != 46 & $9 - 97 >>> 0 >= 6) {
break label$13;
}
if (($13 | 0) != 46) {
break label$17;
}
if ($28) {
break label$15;
}
$28 = 1;
$23 = $17;
$11 = $19;
$24 = $11;
break label$16;
}
$13 = ($13 | 0) > 57 ? $9 - 87 | 0 : $7;
$11 = $19;
$9 = $17;
label$18: {
if (($11 | 0) <= 0 & $9 >>> 0 <= 7 | ($11 | 0) < 0) {
$22 = ($22 << 4) + $13 | 0;
break label$18;
}
$9 = $19;
$7 = $17;
if (!$9 & $7 >>> 0 <= 28) {
__floatsitf($6 + 48 | 0, $13);
$7 = $25;
$9 = $16;
__multf3($6 + 32 | 0, $26, $7, $18, $9, 0, 0, 0, 1073414144);
$11 = HEAP32[$6 + 48 >> 2];
$10 = $11;
$12 = HEAP32[$6 + 52 >> 2];
$9 = $12;
$12 = HEAP32[$6 + 56 >> 2];
$8 = $12;
$11 = HEAP32[$6 + 60 >> 2];
$7 = $11;
$11 = HEAP32[$6 + 32 >> 2];
$26 = $11;
$12 = HEAP32[$6 + 36 >> 2];
$25 = $12;
$12 = HEAP32[$6 + 40 >> 2];
$18 = $12;
$11 = HEAP32[$6 + 44 >> 2];
$16 = $11;
$11 = $9;
$12 = $7;
$9 = $25;
$7 = $16;
__multf3($6 + 16 | 0, $10, $11, $8, $12, $26, $9, $18, $7);
$7 = HEAP32[$6 + 16 >> 2];
$13 = $7;
$7 = HEAP32[$6 + 28 >> 2];
$8 = $7;
$9 = HEAP32[$6 + 20 >> 2];
$7 = $9;
$9 = HEAP32[$6 + 24 >> 2];
$10 = $9;
$9 = $8;
$12 = $15;
$11 = $21;
__addtf3($6, $13, $7, $10, $9, $14, $12, $20, $11);
$11 = HEAP32[$6 + 8 >> 2];
$20 = $11;
$12 = HEAP32[$6 + 12 >> 2];
$21 = $12;
$12 = HEAP32[$6 >> 2];
$14 = $12;
$11 = HEAP32[$6 + 4 >> 2];
$15 = $11;
break label$18;
}
if (!$13 | $30) {
break label$18;
}
$11 = $25;
$12 = $16;
__multf3($6 + 80 | 0, $26, $11, $18, $12, 0, 0, 0, 1073610752);
$7 = HEAP32[$6 + 80 >> 2];
$13 = $7;
$7 = HEAP32[$6 + 92 >> 2];
$8 = $7;
$9 = HEAP32[$6 + 84 >> 2];
$7 = $9;
$9 = HEAP32[$6 + 88 >> 2];
$10 = $9;
$9 = $8;
$12 = $15;
$11 = $21;
__addtf3($6 - -64 | 0, $13, $7, $10, $9, $14, $12, $20, $11);
$11 = HEAP32[$6 + 72 >> 2];
$20 = $11;
$12 = HEAP32[$6 + 76 >> 2];
$21 = $12;
$30 = 1;
$12 = HEAP32[$6 + 64 >> 2];
$14 = $12;
$11 = HEAP32[$6 + 68 >> 2];
$15 = $11;
}
$11 = $19;
$8 = $11;
$9 = $17;
$10 = $9 + 1 | 0;
$8 = $10 ? $8 : $8 + 1 | 0;
$17 = $10;
$19 = $8;
$8 = 1;
}
$13 = HEAP32[$1 + 4 >> 2];
if (($13 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$1 + 4 >> 2] = $13 + 1;
$13 = HEAPU8[$13 | 0];
} else {
$13 = __shgetc($1);
}
continue;
}
break;
}
$13 = 46;
}
label$23: {
if (!$8) {
$11 = $1;
$8 = HEAP32[$11 + 112 >> 2];
$9 = HEAP32[$1 + 116 >> 2];
label$25: {
label$26: {
if (($9 | 0) > 0 | ($9 | 0) >= 0) {
$13 = HEAP32[$1 + 4 >> 2];
HEAP32[$1 + 4 >> 2] = $13 - 1;
if (!$5) {
break label$26;
}
HEAP32[$1 + 4 >> 2] = $13 - 2;
if (!$28) {
break label$25;
}
HEAP32[$1 + 4 >> 2] = $13 - 3;
break label$25;
}
if ($5) {
break label$25;
}
}
__shlim($1, 0, 0);
}
__extenddftf2($6 + 96 | 0, +($4 | 0) * 0);
$11 = HEAP32[$6 + 96 >> 2];
$14 = $11;
$9 = HEAP32[$6 + 100 >> 2];
$15 = $9;
$11 = HEAP32[$6 + 108 >> 2];
$27 = $11;
$9 = HEAP32[$6 + 104 >> 2];
break label$23;
}
$11 = $19;
$7 = $17;
if (($11 | 0) <= 0 & $7 >>> 0 <= 7 | ($11 | 0) < 0) {
$18 = $17;
$7 = $19;
$16 = $7;
while (1) {
$22 = $22 << 4;
$7 = $16;
$8 = $18;
$12 = $8 + 1 | 0;
$10 = $12 ? $7 : $7 + 1 | 0;
$18 = $12;
$7 = $12;
$16 = $10;
if (($7 | 0) != 8 | $10) {
continue;
}
break;
}
}
label$30: {
label$31: {
label$32: {
if (($13 & -33) == 80) {
$7 = scanexp($1, $5);
$18 = $7;
$10 = i64toi32_i32$HIGH_BITS;
$16 = $10;
$9 = $18;
if ($9 | ($10 | 0) != -2147483648) {
break label$30;
}
if ($5) {
$8 = $1;
$9 = HEAP32[$8 + 112 >> 2];
$10 = HEAP32[$1 + 116 >> 2];
if (($10 | 0) > 0 | ($10 | 0) >= 0) {
break label$32;
}
break label$31;
}
$14 = 0;
$15 = 0;
__shlim($1, 0, 0);
$9 = 0;
break label$23;
}
$18 = 0;
$16 = 0;
$7 = $1;
$8 = HEAP32[$7 + 112 >> 2];
$10 = HEAP32[$1 + 116 >> 2];
if (($10 | 0) < 0) {
break label$30;
}
}
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
}
$18 = 0;
$16 = 0;
}
if (!$22) {
__extenddftf2($6 + 112 | 0, +($4 | 0) * 0);
$7 = HEAP32[$6 + 112 >> 2];
$14 = $7;
$10 = HEAP32[$6 + 116 >> 2];
$15 = $10;
$7 = HEAP32[$6 + 124 >> 2];
$27 = $7;
$10 = HEAP32[$6 + 120 >> 2];
$9 = $10;
break label$23;
}
$11 = $28;
$8 = $11 ? $23 : $17;
$7 = $24;
$10 = $19;
$9 = $11 ? $7 : $10;
$1 = $8 << 2;
$8 = $9 << 2 | $8 >>> 30;
$11 = $16;
$12 = $8 + $11 | 0;
$9 = $1;
$7 = $18;
$10 = $9 + $7 | 0;
$12 = $7 >>> 0 > $10 >>> 0 ? $12 + 1 | 0 : $12;
$8 = $10;
$11 = $8 - 32 | 0;
$17 = $11;
$10 = $8 >>> 0 < 32;
$10 = $12 - $10 | 0;
$19 = $10;
$7 = 0 - $3 | 0;
if ($11 >>> 0 > $7 >>> 0 & ($10 | 0) >= 0 | ($10 | 0) > 0) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__floatsitf($6 + 160 | 0, $4);
$12 = HEAP32[$6 + 160 >> 2];
$3 = $12;
$12 = HEAP32[$6 + 172 >> 2];
$1 = $12;
$10 = HEAP32[$6 + 164 >> 2];
$12 = $10;
$10 = HEAP32[$6 + 168 >> 2];
$2 = $10;
$10 = $1;
__multf3($6 + 144 | 0, $3, $12, $2, $10, -1, -1, -1, 2147418111);
$8 = HEAP32[$6 + 144 >> 2];
$3 = $8;
$8 = HEAP32[$6 + 156 >> 2];
$1 = $8;
$7 = HEAP32[$6 + 148 >> 2];
$8 = $7;
$7 = HEAP32[$6 + 152 >> 2];
$2 = $7;
$7 = $1;
__multf3($6 + 128 | 0, $3, $8, $2, $7, -1, -1, -1, 2147418111);
$12 = HEAP32[$6 + 128 >> 2];
$14 = $12;
$10 = HEAP32[$6 + 132 >> 2];
$15 = $10;
$12 = HEAP32[$6 + 140 >> 2];
$27 = $12;
$10 = HEAP32[$6 + 136 >> 2];
$9 = $10;
break label$23;
}
$10 = $3 - 226 | 0;
$12 = $10 >> 31;
$7 = $10;
$8 = $17;
$10 = $19;
if ($7 >>> 0 <= $8 >>> 0 & ($12 | 0) <= ($10 | 0) | ($12 | 0) < ($10 | 0)) {
if (($22 | 0) >= 0) {
while (1) {
$7 = $15;
$12 = $21;
__addtf3($6 + 416 | 0, $14, $7, $20, $12, 0, 0, 0, -1073807360);
$8 = $12;
$13 = __getf2($14, $7, $20, $8, 0, 0, 0, 1073610752);
$12 = HEAP32[$6 + 420 >> 2];
$5 = $12;
$12 = $7;
$7 = HEAP32[$6 + 416 >> 2];
$1 = ($13 | 0) < 0;
$9 = $1;
$10 = $9 ? $14 : $7;
$16 = $10;
$7 = $5;
$8 = $9 ? $12 : $7;
$11 = $8;
$10 = HEAP32[$6 + 428 >> 2];
$5 = $10;
$8 = HEAP32[$6 + 424 >> 2];
$7 = $1;
$12 = $7 ? $20 : $8;
$10 = $21;
$8 = $5;
$9 = $7 ? $10 : $8;
$10 = $9;
$9 = $15;
$7 = $11;
__addtf3($6 + 400 | 0, $14, $9, $20, $21, $16, $7, $12, $10);
$12 = $17;
$8 = $12 - 1 | 0;
$17 = $8;
$10 = $19;
$11 = !$12;
$11 = $10 - $11 | 0;
$19 = $11;
$11 = HEAP32[$6 + 408 >> 2];
$20 = $11;
$12 = HEAP32[$6 + 412 >> 2];
$21 = $12;
$12 = HEAP32[$6 + 400 >> 2];
$14 = $12;
$11 = HEAP32[$6 + 404 >> 2];
$15 = $11;
$22 = $22 << 1 | ($13 | 0) >= 0;
if (($22 | 0) >= 0) {
continue;
}
break;
}
}
$12 = $3;
$11 = $12 >> 31;
$1 = $11;
$10 = $17;
$9 = $12;
$7 = $10 - $9 | 0;
$11 = $19;
$12 = $1;
$8 = $12 + ($9 >>> 0 > $10 >>> 0) | 0;
$8 = $11 - $8 | 0;
$11 = $7;
$7 = $8;
$12 = $11 + 32 | 0;
$7 = $12 >>> 0 < 32 ? $7 + 1 | 0 : $7;
$13 = $12;
$9 = $2;
$8 = $13;
$13 = ($7 | 0) <= 0 & $9 >>> 0 > $8 >>> 0 | ($7 | 0) < 0 ? ($8 | 0) > 0 ? $8 : 0 : $9;
label$40: {
if (($13 | 0) >= 113) {
__floatsitf($6 + 384 | 0, $4);
$8 = HEAP32[$6 + 392 >> 2];
$23 = $8;
$7 = HEAP32[$6 + 396 >> 2];
$24 = $7;
$7 = HEAP32[$6 + 384 >> 2];
$26 = $7;
$8 = HEAP32[$6 + 388 >> 2];
$25 = $8;
$18 = 0;
break label$40;
}
__extenddftf2($6 + 352 | 0, scalbn(1, 144 - $13 | 0));
__floatsitf($6 + 336 | 0, $4);
$8 = HEAP32[$6 + 352 >> 2];
$4 = $8;
$7 = HEAP32[$6 + 356 >> 2];
$2 = $7;
$7 = HEAP32[$6 + 360 >> 2];
$3 = $7;
$8 = HEAP32[$6 + 364 >> 2];
$1 = $8;
$8 = HEAP32[$6 + 336 >> 2];
$26 = $8;
$7 = HEAP32[$6 + 340 >> 2];
$25 = $7;
$7 = HEAP32[$6 + 344 >> 2];
$23 = $7;
$8 = HEAP32[$6 + 348 >> 2];
$24 = $8;
$8 = $2;
$7 = $1;
$9 = $25;
$11 = $24;
copysignl($6 + 368 | 0, $4, $8, $3, $7, $26, $9, $23, $11);
$11 = HEAP32[$6 + 376 >> 2];
$29 = $11;
$9 = HEAP32[$6 + 380 >> 2];
$27 = $9;
$11 = HEAP32[$6 + 372 >> 2];
$31 = $11;
$9 = HEAP32[$6 + 368 >> 2];
$18 = $9;
}
$11 = $31;
$16 = $11;
$11 = $15;
$9 = $21;
$13 = !($22 & 1) & ((__letf2($14, $11, $20, $9, 0, 0, 0, 0) | 0) != 0 & ($13 | 0) < 32);
__floatunsitf($6 + 320 | 0, $22 + $13 | 0);
$8 = HEAP32[$6 + 320 >> 2];
$2 = $8;
$7 = HEAP32[$6 + 324 >> 2];
$9 = $7;
$7 = HEAP32[$6 + 328 >> 2];
$1 = $7;
$8 = HEAP32[$6 + 332 >> 2];
$11 = $8;
$8 = $25;
$7 = $24;
__multf3($6 + 304 | 0, $26, $8, $23, $7, $2, $9, $1, $11);
$11 = HEAP32[$6 + 304 >> 2];
$3 = $11;
$11 = HEAP32[$6 + 316 >> 2];
$1 = $11;
$9 = HEAP32[$6 + 308 >> 2];
$11 = $9;
$9 = HEAP32[$6 + 312 >> 2];
$2 = $9;
$9 = $1;
$7 = $16;
$8 = $27;
__addtf3($6 + 272 | 0, $3, $11, $2, $9, $18, $7, $29, $8);
$10 = $13;
$11 = $10 ? 0 : $14;
$3 = $11;
$7 = $15;
$9 = $10 ? 0 : $7;
$7 = $10;
$8 = $7 ? 0 : $20;
$2 = $8;
$11 = $21;
$10 = $7 ? 0 : $11;
$1 = $10;
$10 = $25;
$8 = $24;
$7 = $9;
$9 = $1;
__multf3($6 + 288 | 0, $26, $10, $23, $8, $3, $7, $2, $9);
$9 = HEAP32[$6 + 288 >> 2];
$11 = $9;
$7 = HEAP32[$6 + 292 >> 2];
$2 = $7;
$7 = HEAP32[$6 + 296 >> 2];
$5 = $7;
$9 = HEAP32[$6 + 300 >> 2];
$1 = $9;
$9 = HEAP32[$6 + 272 >> 2];
$4 = $9;
$7 = HEAP32[$6 + 276 >> 2];
$8 = $7;
$7 = HEAP32[$6 + 280 >> 2];
$3 = $7;
$9 = HEAP32[$6 + 284 >> 2];
$10 = $9;
$9 = $2;
$7 = $1;
__addtf3($6 + 256 | 0, $11, $9, $5, $7, $4, $8, $3, $10);
$10 = HEAP32[$6 + 256 >> 2];
$3 = $10;
$10 = HEAP32[$6 + 268 >> 2];
$1 = $10;
$8 = HEAP32[$6 + 260 >> 2];
$10 = $8;
$8 = HEAP32[$6 + 264 >> 2];
$2 = $8;
$8 = $1;
$7 = $16;
$9 = $27;
__subtf3($6 + 240 | 0, $3, $10, $2, $8, $18, $7, $29, $9);
$9 = HEAP32[$6 + 240 >> 2];
$14 = $9;
$9 = HEAP32[$6 + 252 >> 2];
$21 = $9;
$7 = HEAP32[$6 + 244 >> 2];
$15 = $7;
$9 = $7;
$7 = HEAP32[$6 + 248 >> 2];
$20 = $7;
$7 = $21;
if (!__letf2($14, $9, $20, $7, 0, 0, 0, 0)) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
$10 = $15;
$8 = $21;
scalbnl($6 + 224 | 0, $14, $10, $20, $8, $17);
$8 = HEAP32[$6 + 224 >> 2];
$14 = $8;
$10 = HEAP32[$6 + 228 >> 2];
$15 = $10;
$8 = HEAP32[$6 + 236 >> 2];
$27 = $8;
$10 = HEAP32[$6 + 232 >> 2];
$9 = $10;
break label$23;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__floatsitf($6 + 208 | 0, $4);
$8 = HEAP32[$6 + 208 >> 2];
$3 = $8;
$8 = HEAP32[$6 + 220 >> 2];
$1 = $8;
$10 = HEAP32[$6 + 212 >> 2];
$8 = $10;
$10 = HEAP32[$6 + 216 >> 2];
$2 = $10;
$10 = $1;
__multf3($6 + 192 | 0, $3, $8, $2, $10, 0, 0, 0, 65536);
$9 = HEAP32[$6 + 192 >> 2];
$3 = $9;
$9 = HEAP32[$6 + 204 >> 2];
$1 = $9;
$7 = HEAP32[$6 + 196 >> 2];
$9 = $7;
$7 = HEAP32[$6 + 200 >> 2];
$2 = $7;
$7 = $1;
__multf3($6 + 176 | 0, $3, $9, $2, $7, 0, 0, 0, 65536);
$8 = HEAP32[$6 + 176 >> 2];
$14 = $8;
$10 = HEAP32[$6 + 180 >> 2];
$15 = $10;
$8 = HEAP32[$6 + 188 >> 2];
$27 = $8;
$10 = HEAP32[$6 + 184 >> 2];
$9 = $10;
}
$8 = $27;
$19 = $8;
$10 = $0;
HEAP32[$10 >> 2] = $14;
$8 = $15;
HEAP32[$10 + 4 >> 2] = $8;
$17 = $9;
HEAP32[$10 + 8 >> 2] = $17;
$8 = $19;
HEAP32[$10 + 12 >> 2] = $8;
__stack_pointer = $6 + 432 | 0;
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = +$1;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
$12 = __stack_pointer - 560 | 0;
__stack_pointer = $12;
HEAP32[$12 + 44 >> 2] = 0;
$14 = __DOUBLE_BITS($1);
$11 = i64toi32_i32$HIGH_BITS;
$10 = $11;
label$1: {
if (($11 | 0) < 0) {
$19 = 1;
$24 = 1706;
$1 = -$1;
$8 = __DOUBLE_BITS($1);
$11 = i64toi32_i32$HIGH_BITS;
$10 = $11;
break label$1;
}
if ($4 & 2048) {
$19 = 1;
$24 = 1709;
break label$1;
}
$19 = $4 & 1;
$24 = $19 ? 1712 : 1707;
$25 = !$19;
}
$11 = $10;
$8 = $11 & 2146435072;
$11 = 0;
label$4: {
if (!$11 & ($8 | 0) == 2146435072) {
$6 = $19 + 3 | 0;
pad($0, 32, $2, $6, $4 & -65537);
out($0, $24, $19);
$7 = $5 & 32;
out($0, $1 != $1 ? $7 ? 6513 : 11595 : $7 ? 7511 : 12197, 3);
pad($0, 32, $2, $6, $4 ^ 8192);
$8 = ($2 | 0) < ($6 | 0) ? $6 : $2;
break label$4;
}
$21 = $12 + 16 | 0;
label$6: {
label$7: {
label$8: {
$1 = frexp($1, $12 + 44 | 0);
$1 = $1 + $1;
if ($1 != 0) {
$6 = HEAP32[$12 + 44 >> 2];
HEAP32[$12 + 44 >> 2] = $6 - 1;
$22 = $5 | 32;
if (($22 | 0) != 97) {
break label$8;
}
break label$6;
}
$22 = $5 | 32;
if (($22 | 0) == 97) {
break label$6;
}
$23 = HEAP32[$12 + 44 >> 2];
$13 = ($3 | 0) < 0 ? 6 : $3;
break label$7;
}
$23 = $6 - 29 | 0;
HEAP32[$12 + 44 >> 2] = $23;
$1 = $1 * 268435456;
$13 = ($3 | 0) < 0 ? 6 : $3;
}
$16 = ($12 + 48 | 0) + (($23 | 0) < 0 ? 0 : 288) | 0;
$7 = $16;
while (1) {
if ($1 < 4294967296 & $1 >= 0) {
$6 = ~~$1 >>> 0;
} else {
$6 = 0;
}
HEAP32[$7 >> 2] = $6;
$7 = $7 + 4 | 0;
$1 = ($1 - +($6 >>> 0)) * 1e9;
if ($1 != 0) {
continue;
}
break;
}
label$13: {
if (($23 | 0) <= 0) {
$3 = $23;
$6 = $7;
$9 = $16;
break label$13;
}
$9 = $16;
$3 = $23;
while (1) {
$3 = ($3 | 0) < 29 ? $3 : 29;
$6 = $7 - 4 | 0;
label$16: {
if ($9 >>> 0 > $6 >>> 0) {
break label$16;
}
$14 = 0;
while (1) {
$8 = 0;
$10 = $8;
$8 = HEAP32[$6 >> 2];
$11 = $8;
$20 = $3;
$15 = $20 & 31;
if (($20 & 63) >>> 0 >= 32) {
$8 = $11 << $15;
$20 = 0;
} else {
$8 = (1 << $15) - 1 & $11 >>> 32 - $15;
$20 = $11 << $15;
}
$15 = $20 + $14 | 0;
$11 = $8;
$8 = $10;
$8 = $11 + $8 | 0;
$8 = $15 >>> 0 < $20 >>> 0 ? $8 + 1 | 0 : $8;
$26 = $8;
$14 = __wasm_i64_udiv($15, $8, 1e9, 0);
$8 = i64toi32_i32$HIGH_BITS;
$10 = $8;
$20 = __wasm_i64_mul($14, $8, 1e9, 0);
$8 = i64toi32_i32$HIGH_BITS;
$27 = $8;
$11 = $15 - $20 | 0;
$8 = $26;
$15 = ($15 >>> 0 < $20 >>> 0) + $27 | 0;
HEAP32[$6 >> 2] = $11;
$6 = $6 - 4 | 0;
if ($9 >>> 0 <= $6 >>> 0) {
continue;
}
break;
}
$6 = $14;
if (!$6) {
break label$16;
}
$9 = $9 - 4 | 0;
HEAP32[$9 >> 2] = $6;
}
while (1) {
$6 = $7;
if ($9 >>> 0 < $6 >>> 0) {
$7 = $6 - 4 | 0;
if (!HEAP32[$7 >> 2]) {
continue;
}
}
break;
}
$3 = HEAP32[$12 + 44 >> 2] - $3 | 0;
HEAP32[$12 + 44 >> 2] = $3;
$7 = $6;
if (($3 | 0) > 0) {
continue;
}
break;
}
}
if (($3 | 0) < 0) {
$17 = (($13 + 25 >>> 0) / 9 | 0) + 1 | 0;
$15 = ($22 | 0) == 102;
while (1) {
$7 = 0 - $3 | 0;
$10 = ($7 | 0) < 9 ? $7 : 9;
label$22: {
if ($6 >>> 0 <= $9 >>> 0) {
$7 = HEAP32[$9 >> 2];
break label$22;
}
$11 = 1e9 >>> $10 | 0;
$14 = -1 << $10 ^ -1;
$3 = 0;
$7 = $9;
while (1) {
$8 = HEAP32[$7 >> 2];
HEAP32[$7 >> 2] = ($8 >>> $10 | 0) + $3;
$3 = Math_imul($8 & $14, $11);
$7 = $7 + 4 | 0;
if ($7 >>> 0 < $6 >>> 0) {
continue;
}
break;
}
$7 = HEAP32[$9 >> 2];
if (!$3) {
break label$22;
}
HEAP32[$6 >> 2] = $3;
$6 = $6 + 4 | 0;
}
$3 = HEAP32[$12 + 44 >> 2] + $10 | 0;
HEAP32[$12 + 44 >> 2] = $3;
$9 = (!$7 << 2) + $9 | 0;
$7 = $15 ? $16 : $9;
$6 = $6 - $7 >> 2 > ($17 | 0) ? $7 + ($17 << 2) | 0 : $6;
if (($3 | 0) < 0) {
continue;
}
break;
}
}
$3 = 0;
label$25: {
if ($6 >>> 0 <= $9 >>> 0) {
break label$25;
}
$3 = Math_imul($16 - $9 >> 2, 9);
$7 = 10;
$8 = HEAP32[$9 >> 2];
if ($8 >>> 0 < 10) {
break label$25;
}
while (1) {
$3 = $3 + 1 | 0;
$7 = Math_imul($7, 10);
if ($8 >>> 0 >= $7 >>> 0) {
continue;
}
break;
}
}
$7 = ($13 - (($22 | 0) == 102 ? 0 : $3) | 0) - (($22 | 0) == 103 & ($13 | 0) != 0) | 0;
if (($7 | 0) < (Math_imul($6 - $16 >> 2, 9) - 9 | 0)) {
$8 = $7 + 9216 | 0;
$11 = ($8 | 0) / 9 | 0;
$10 = (((($23 | 0) < 0 ? 4 : 292) + $12 | 0) + ($11 << 2) | 0) - 4048 | 0;
$7 = 10;
$8 = $8 - Math_imul($11, 9) | 0;
if (($8 | 0) <= 7) {
while (1) {
$7 = Math_imul($7, 10);
$8 = $8 + 1 | 0;
if (($8 | 0) != 8) {
continue;
}
break;
}
}
$8 = HEAP32[$10 >> 2];
$17 = ($8 >>> 0) / ($7 >>> 0) | 0;
$11 = $8 - Math_imul($7, $17) | 0;
$14 = $10 + 4 | 0;
label$30: {
if (!$11 & ($14 | 0) == ($6 | 0)) {
break label$30;
}
label$31: {
if (!($17 & 1)) {
$1 = 9007199254740992;
if (!(HEAP8[$10 - 4 | 0] & 1) | (($7 | 0) != 1e9 | $9 >>> 0 >= $10 >>> 0)) {
break label$31;
}
}
$1 = 9007199254740994;
}
$18 = ($6 | 0) == ($14 | 0) ? 1 : 1.5;
$14 = $7 >>> 1 | 0;
$18 = $11 >>> 0 < $14 >>> 0 ? .5 : ($14 | 0) == ($11 | 0) ? $18 : 1.5;
if (!(HEAPU8[$24 | 0] != 45 | $25)) {
$18 = -$18;
$1 = -$1;
}
$8 = $8 - $11 | 0;
HEAP32[$10 >> 2] = $8;
if ($1 + $18 == $1) {
break label$30;
}
$7 = $7 + $8 | 0;
HEAP32[$10 >> 2] = $7;
if ($7 >>> 0 >= 1e9) {
while (1) {
HEAP32[$10 >> 2] = 0;
$10 = $10 - 4 | 0;
if ($10 >>> 0 < $9 >>> 0) {
$9 = $9 - 4 | 0;
HEAP32[$9 >> 2] = 0;
}
$7 = HEAP32[$10 >> 2] + 1 | 0;
HEAP32[$10 >> 2] = $7;
if ($7 >>> 0 > 999999999) {
continue;
}
break;
}
}
$3 = Math_imul($16 - $9 >> 2, 9);
$7 = 10;
$8 = HEAP32[$9 >> 2];
if ($8 >>> 0 < 10) {
break label$30;
}
while (1) {
$3 = $3 + 1 | 0;
$7 = Math_imul($7, 10);
if ($8 >>> 0 >= $7 >>> 0) {
continue;
}
break;
}
}
$7 = $10 + 4 | 0;
$6 = $6 >>> 0 > $7 >>> 0 ? $7 : $6;
}
while (1) {
$7 = $6;
$8 = $6 >>> 0 <= $9 >>> 0;
if (!$8) {
$6 = $7 - 4 | 0;
if (!HEAP32[$6 >> 2]) {
continue;
}
}
break;
}
label$40: {
if (($22 | 0) != 103) {
$10 = $4 & 8;
break label$40;
}
$6 = $13 ? $13 : 1;
$10 = ($6 | 0) > ($3 | 0) & ($3 | 0) > -5;
$13 = ($10 ? $3 ^ -1 : -1) + $6 | 0;
$5 = ($10 ? -1 : -2) + $5 | 0;
$10 = $4 & 8;
if ($10) {
break label$40;
}
$6 = -9;
label$42: {
if ($8) {
break label$42;
}
$10 = HEAP32[$7 - 4 >> 2];
if (!$10) {
break label$42;
}
$8 = 10;
$6 = 0;
if (($10 >>> 0) % 10 | 0) {
break label$42;
}
while (1) {
$11 = $6;
$6 = $6 + 1 | 0;
$8 = Math_imul($8, 10);
if (!(($10 >>> 0) % ($8 >>> 0) | 0)) {
continue;
}
break;
}
$6 = $11 ^ -1;
}
$8 = Math_imul($7 - $16 >> 2, 9);
if (($5 & -33) == 70) {
$10 = 0;
$6 = ($6 + $8 | 0) - 9 | 0;
$6 = ($6 | 0) > 0 ? $6 : 0;
$13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
break label$40;
}
$10 = 0;
$6 = (($3 + $8 | 0) + $6 | 0) - 9 | 0;
$6 = ($6 | 0) > 0 ? $6 : 0;
$13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
}
$8 = -1;
$11 = $10 | $13;
if ((($11 ? 2147483645 : 2147483646) | 0) < ($13 | 0)) {
break label$4;
}
$14 = ((($11 | 0) != 0) + $13 | 0) + 1 | 0;
$15 = $5 & -33;
label$45: {
if (($15 | 0) == 70) {
if ((2147483647 - $14 | 0) < ($3 | 0)) {
break label$4;
}
$6 = ($3 | 0) > 0 ? $3 : 0;
break label$45;
}
$6 = $3 >> 31;
$6 = fmt_u(($6 ^ $3) - $6 | 0, 0, $21);
if (($21 - $6 | 0) <= 1) {
while (1) {
$6 = $6 - 1 | 0;
HEAP8[$6 | 0] = 48;
if (($21 - $6 | 0) < 2) {
continue;
}
break;
}
}
$17 = $6 - 2 | 0;
HEAP8[$17 | 0] = $5;
HEAP8[$6 - 1 | 0] = ($3 | 0) < 0 ? 45 : 43;
$6 = $21 - $17 | 0;
if (($6 | 0) > (2147483647 - $14 | 0)) {
break label$4;
}
}
$6 = $6 + $14 | 0;
if (($6 | 0) > ($19 ^ 2147483647)) {
break label$4;
}
$14 = $6 + $19 | 0;
pad($0, 32, $2, $14, $4);
out($0, $24, $19);
pad($0, 48, $2, $14, $4 ^ 65536);
label$49: {
label$50: {
label$51: {
if (($15 | 0) == 70) {
$10 = $12 + 16 | 8;
$3 = $12 + 16 | 9;
$8 = $9 >>> 0 > $16 >>> 0 ? $16 : $9;
$9 = $8;
while (1) {
$15 = HEAP32[$9 >> 2];
$6 = fmt_u($15, 0, $3);
label$54: {
if (($9 | 0) != ($8 | 0)) {
if ($12 + 16 >>> 0 >= $6 >>> 0) {
break label$54;
}
while (1) {
$6 = $6 - 1 | 0;
HEAP8[$6 | 0] = 48;
if ($12 + 16 >>> 0 < $6 >>> 0) {
continue;
}
break;
}
break label$54;
}
if (($3 | 0) != ($6 | 0)) {
break label$54;
}
HEAP8[$12 + 24 | 0] = 48;
$6 = $10;
}
out($0, $6, $3 - $6 | 0);
$9 = $9 + 4 | 0;
if ($16 >>> 0 >= $9 >>> 0) {
continue;
}
break;
}
if ($11) {
out($0, 14595, 1);
}
if (($13 | 0) <= 0 | $7 >>> 0 <= $9 >>> 0) {
break label$51;
}
while (1) {
$8 = HEAP32[$9 >> 2];
$6 = fmt_u($8, 0, $3);
if ($6 >>> 0 > $12 + 16 >>> 0) {
while (1) {
$6 = $6 - 1 | 0;
HEAP8[$6 | 0] = 48;
if ($12 + 16 >>> 0 < $6 >>> 0) {
continue;
}
break;
}
}
out($0, $6, ($13 | 0) < 9 ? $13 : 9);
$6 = $13 - 9 | 0;
$9 = $9 + 4 | 0;
if ($9 >>> 0 >= $7 >>> 0) {
break label$50;
}
$8 = ($13 | 0) > 9;
$13 = $6;
if ($8) {
continue;
}
break;
}
break label$50;
}
label$61: {
if (($13 | 0) < 0) {
break label$61;
}
$11 = $7 >>> 0 > $9 >>> 0 ? $7 : $9 + 4 | 0;
$16 = $12 + 16 | 8;
$3 = $12 + 16 | 9;
$7 = $9;
while (1) {
$15 = HEAP32[$7 >> 2];
$6 = fmt_u($15, 0, $3);
if (($6 | 0) == ($3 | 0)) {
HEAP8[$12 + 24 | 0] = 48;
$6 = $16;
}
label$64: {
if (($7 | 0) != ($9 | 0)) {
if ($12 + 16 >>> 0 >= $6 >>> 0) {
break label$64;
}
while (1) {
$6 = $6 - 1 | 0;
HEAP8[$6 | 0] = 48;
if ($12 + 16 >>> 0 < $6 >>> 0) {
continue;
}
break;
}
break label$64;
}
out($0, $6, 1);
$6 = $6 + 1 | 0;
if (!($10 | $13)) {
break label$64;
}
out($0, 14595, 1);
}
$8 = $3 - $6 | 0;
out($0, $6, ($8 | 0) > ($13 | 0) ? $13 : $8);
$13 = $13 - $8 | 0;
$7 = $7 + 4 | 0;
if ($11 >>> 0 <= $7 >>> 0) {
break label$61;
}
if (($13 | 0) >= 0) {
continue;
}
break;
}
}
pad($0, 48, $13 + 18 | 0, 18, 0);
out($0, $17, $21 - $17 | 0);
break label$49;
}
$6 = $13;
}
pad($0, 48, $6 + 9 | 0, 9, 0);
}
pad($0, 32, $2, $14, $4 ^ 8192);
$8 = ($2 | 0) < ($14 | 0) ? $14 : $2;
break label$4;
}
$14 = ($5 << 26 >> 31 & 9) + $24 | 0;
label$67: {
if ($3 >>> 0 > 11) {
break label$67;
}
$6 = 12 - $3 | 0;
$18 = 16;
while (1) {
$18 = $18 * 16;
$6 = $6 - 1 | 0;
if ($6) {
continue;
}
break;
}
if (HEAPU8[$14 | 0] == 45) {
$1 = -($18 + (-$1 - $18));
break label$67;
}
$1 = $1 + $18 - $18;
}
$6 = HEAP32[$12 + 44 >> 2];
$7 = $6;
$6 = $6 >> 31;
$6 = fmt_u(($7 ^ $6) - $6 | 0, 0, $21);
if (($21 | 0) == ($6 | 0)) {
HEAP8[$12 + 15 | 0] = 48;
$6 = $12 + 15 | 0;
}
$10 = $19 | 2;
$9 = $5 & 32;
$7 = HEAP32[$12 + 44 >> 2];
$11 = $6 - 2 | 0;
HEAP8[$11 | 0] = $5 + 15;
HEAP8[$6 - 1 | 0] = ($7 | 0) < 0 ? 45 : 43;
$8 = $4 & 8;
$7 = $12 + 16 | 0;
while (1) {
$6 = $7;
if (Math_abs($1) < 2147483648) {
$7 = ~~$1;
} else {
$7 = -2147483648;
}
HEAP8[$6 | 0] = HEAPU8[$7 + 55248 | 0] | $9;
$1 = ($1 - +($7 | 0)) * 16;
$7 = $6 + 1 | 0;
if (!(!(($3 | 0) > 0 | $8) & $1 == 0 | ($7 - ($12 + 16 | 0) | 0) != 1)) {
HEAP8[$6 + 1 | 0] = 46;
$7 = $6 + 2 | 0;
}
if ($1 != 0) {
continue;
}
break;
}
$8 = -1;
$17 = $21 - $11 | 0;
$6 = $17 + $10 | 0;
if ((2147483645 - $6 | 0) < ($3 | 0)) {
break label$4;
}
label$75: {
label$76: {
if (!$3) {
break label$76;
}
$9 = $7 - ($12 + 16 | 0) | 0;
if (($9 - 2 | 0) >= ($3 | 0)) {
break label$76;
}
$7 = $3 + 2 | 0;
break label$75;
}
$9 = $7 - ($12 + 16 | 0) | 0;
$7 = $9;
}
$6 = $7 + $6 | 0;
pad($0, 32, $2, $6, $4);
out($0, $14, $10);
pad($0, 48, $2, $6, $4 ^ 65536);
out($0, $12 + 16 | 0, $9);
pad($0, 48, $7 - $9 | 0, 0, 0);
out($0, $11, $17);
pad($0, 32, $2, $6, $4 ^ 8192);
$8 = ($2 | 0) < ($6 | 0) ? $6 : $2;
}
__stack_pointer = $12 + 560 | 0;
return $8 | 0;
}
function storeAtts($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
label$1: {
label$2: {
$18 = HEAP32[$0 + 340 >> 2];
$5 = $18 + 20 | 0;
$10 = lookup($5, HEAP32[$3 >> 2], 0);
label$3: {
if ($10) {
break label$3;
}
$7 = 1;
$6 = poolCopyString($18 + 80 | 0, HEAP32[$3 >> 2]);
if (!$6) {
break label$2;
}
$10 = lookup($5, $6, 24);
if (!$10) {
break label$2;
}
if (!HEAPU8[$0 + 232 | 0]) {
break label$3;
}
if (!setElementTypePrefix($0, $10)) {
break label$2;
}
}
$6 = HEAP32[$10 + 12 >> 2];
$5 = FUNCTION_TABLE[HEAP32[$1 + 36 >> 2]]($1, $2, HEAP32[$0 + 364 >> 2], HEAP32[$0 + 376 >> 2]) | 0;
$9 = $6 + $5 | 0;
$8 = HEAP32[$0 + 364 >> 2];
label$4: {
if (($9 | 0) <= ($8 | 0)) {
break label$4;
}
$9 = $9 + 16 | 0;
HEAP32[$0 + 364 >> 2] = $9;
$9 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]](HEAP32[$0 + 376 >> 2], $9 << 4) | 0;
if (!$9) {
break label$1;
}
HEAP32[$0 + 376 >> 2] = $9;
if (($5 | 0) <= ($8 | 0)) {
break label$4;
}
FUNCTION_TABLE[HEAP32[$1 + 36 >> 2]]($1, $2, $5, $9) | 0;
}
$15 = ($5 | 0) > 0 ? $5 : 0;
$2 = ($6 | 0) > 0 ? $6 : 0;
$17 = $0 + 400 | 0;
$12 = HEAP32[$0 + 376 >> 2];
$8 = 0;
$9 = 0;
while (1) {
label$6: {
label$7: {
label$8: {
if (($8 | 0) != ($15 | 0)) {
$7 = 1;
$11 = $8 << 4;
$5 = HEAP32[$11 + HEAP32[$0 + 376 >> 2] >> 2];
$6 = getAttributeId($0, $1, $5, (FUNCTION_TABLE[HEAP32[$1 + 28 >> 2]]($1, $5) | 0) + $5 | 0);
if (!$6) {
break label$2;
}
$5 = HEAP32[$6 >> 2] - 1 | 0;
if (HEAPU8[$5 | 0]) {
$7 = 8;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$2;
}
HEAP32[$0 + 272 >> 2] = HEAP32[HEAP32[$0 + 376 >> 2] + ($8 << 4) >> 2];
return 8;
}
HEAP8[$5 | 0] = 1;
HEAP32[($9 << 2) + $12 >> 2] = HEAP32[$6 >> 2];
$14 = $9 + 1 | 0;
$11 = HEAP32[$0 + 376 >> 2] + $11 | 0;
if (HEAPU8[$11 + 12 | 0]) {
break label$8;
}
$5 = 0;
$16 = 1;
if (!HEAPU8[$6 + 8 | 0]) {
break label$7;
}
while (1) {
if (($2 | 0) == ($5 | 0)) {
break label$7;
}
$7 = HEAP32[$10 + 20 >> 2] + Math_imul($5, 12) | 0;
if (HEAP32[$7 >> 2] == ($6 | 0)) {
$16 = HEAPU8[$7 + 4 | 0];
break label$7;
} else {
$5 = $5 + 1 | 0;
continue;
}
}
}
HEAP32[$0 + 368 >> 2] = $9;
label$14: {
label$15: {
$6 = HEAP32[$10 + 8 >> 2];
if (!$6) {
$5 = -1;
break label$15;
}
$5 = -1;
$6 = HEAP32[$6 >> 2];
if (!HEAPU8[$6 - 1 | 0]) {
break label$15;
}
$5 = 0;
while (1) {
if (($5 | 0) >= ($9 | 0)) {
break label$14;
}
if (HEAP32[($5 << 2) + $12 >> 2] == ($6 | 0)) {
break label$15;
}
$5 = $5 + 2 | 0;
continue;
}
}
HEAP32[$0 + 372 >> 2] = $5;
}
$5 = 0;
while (1) {
if (($2 | 0) != ($5 | 0)) {
$6 = HEAP32[$10 + 20 >> 2] + Math_imul($5, 12) | 0;
$1 = HEAP32[$6 >> 2];
$8 = HEAP32[$1 >> 2] - 1 | 0;
label$20: {
if (HEAPU8[$8 | 0]) {
break label$20;
}
$7 = HEAP32[$6 + 8 >> 2];
if (!$7) {
break label$20;
}
$11 = HEAP32[$1 + 4 >> 2];
label$21: {
if ($11) {
if (HEAPU8[$1 + 9 | 0]) {
$7 = addBinding($0, $11, $1, $7, $4);
if (!$7) {
break label$20;
}
break label$2;
}
HEAP8[$8 | 0] = 2;
$13 = $13 + 1 | 0;
break label$21;
}
HEAP8[$8 | 0] = 1;
}
$1 = ($9 << 2) + $12 | 0;
HEAP32[$1 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$6 + 8 >> 2];
$9 = $9 + 2 | 0;
}
$5 = $5 + 1 | 0;
continue;
}
break;
}
HEAP32[($9 << 2) + $12 >> 2] = 0;
$1 = 0;
label$24: {
label$25: {
if (!$13) {
break label$25;
}
label$26: {
$5 = HEAPU8[$0 + 388 | 0];
label$27: {
if ($13 << 1 >> $5) {
while (1) {
$6 = $5 & 255;
$2 = $5 + 1 | 0;
$5 = $2;
if ($13 >> $6) {
continue;
}
break;
}
$5 = $2 & 255;
$5 = $5 >>> 0 > 3 ? $5 : 3;
HEAP8[$0 + 388 | 0] = $5;
$6 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]](HEAP32[$0 + 380 >> 2], 12 << $5) | 0;
if (!$6) {
break label$1;
}
HEAP32[$0 + 380 >> 2] = $6;
$15 = 1 << $5;
break label$27;
}
$15 = 1 << $5;
$6 = HEAP32[$0 + 384 >> 2];
if ($6) {
break label$26;
}
}
$6 = -1;
$5 = $15;
while (1) {
if (!$5) {
break label$26;
}
$5 = $5 - 1 | 0;
HEAP32[HEAP32[$0 + 380 >> 2] + Math_imul($5, 12) >> 2] = -1;
continue;
}
}
$16 = $6 - 1 | 0;
HEAP32[$0 + 384 >> 2] = $16;
$21 = 0 - $15 | 0;
$22 = $18 + 40 | 0;
$19 = $15 - 1 | 0;
$23 = $19 >>> 2 | 0;
while (1) {
if (($1 | 0) >= ($9 | 0)) {
break label$25;
}
$20 = ($1 << 2) + $12 | 0;
$2 = HEAP32[$20 >> 2];
$5 = $2 - 1 | 0;
$6 = HEAPU8[$5 | 0];
HEAP8[$5 | 0] = 0;
label$32: {
if (($6 | 0) != 2) {
break label$32;
}
$11 = HEAP32[HEAP32[lookup($22, $2, 0) + 4 >> 2] + 4 >> 2];
if (!$11) {
break label$24;
}
$5 = 0;
$8 = 0;
while (1) {
if (HEAP32[$11 + 20 >> 2] > ($5 | 0)) {
$7 = HEAPU8[HEAP32[$11 + 16 >> 2] + $5 | 0];
$6 = HEAP32[$0 + 412 >> 2];
if (($6 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($17)) {
break label$1;
}
$6 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $7;
$5 = $5 + 1 | 0;
$8 = Math_imul($8, 1000003) ^ $7;
continue;
}
break;
}
while (1) {
$6 = HEAPU8[$2 | 0];
$5 = $2 + 1 | 0;
$2 = $5;
if (($6 | 0) != 58) {
continue;
}
break;
}
while (1) {
$7 = HEAPU8[$5 | 0];
$2 = $7;
$6 = HEAP32[$0 + 412 >> 2];
if (($6 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($17)) {
break label$1;
}
$6 = HEAP32[$0 + 412 >> 2];
$2 = HEAPU8[$5 | 0];
}
HEAP32[$0 + 412 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $2;
$8 = Math_imul($8, 1000003) ^ $7;
$6 = HEAPU8[$5 | 0];
$5 = $5 + 1 | 0;
if ($6) {
continue;
}
break;
}
$24 = $8 & $21;
$7 = $8 & $19;
$25 = HEAP32[$0 + 380 >> 2];
$14 = 0;
while (1) {
$2 = Math_imul($7, 12);
$5 = $25 + $2 | 0;
if (HEAP32[$5 >> 2] == ($16 | 0)) {
label$41: {
if (HEAP32[$5 + 4 >> 2] != ($8 | 0)) {
break label$41;
}
$6 = HEAP32[$5 + 8 >> 2];
$5 = HEAP32[$0 + 416 >> 2];
while (1) {
$2 = HEAPU8[$5 | 0];
if (!(!$2 | HEAPU8[$6 | 0] != ($2 | 0))) {
$6 = $6 + 1 | 0;
$5 = $5 + 1 | 0;
continue;
}
break;
}
if ($2) {
break label$41;
}
return 8;
}
$14 = $14 & 255 ? $14 : $24 >>> HEAPU8[$0 + 388 | 0] - 1 & $23 | 1;
$5 = $14 & 255;
$7 = ($7 - $5 | 0) + ($5 >>> 0 > $7 >>> 0 ? $15 : 0) | 0;
continue;
}
break;
}
if (HEAPU8[$0 + 233 | 0]) {
HEAP8[HEAP32[$0 + 412 >> 2] - 1 | 0] = HEAPU8[$0 + 456 | 0];
$5 = HEAP32[HEAP32[$11 >> 2] >> 2];
while (1) {
$6 = HEAP32[$0 + 412 >> 2];
if (($6 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($17)) {
break label$1;
}
$6 = HEAP32[$0 + 412 >> 2];
}
$7 = HEAPU8[$5 | 0];
HEAP32[$0 + 412 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $7;
$6 = HEAPU8[$5 | 0];
$5 = $5 + 1 | 0;
if ($6) {
continue;
}
break;
}
}
$5 = HEAP32[$0 + 416 >> 2];
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
HEAP32[$20 >> 2] = $5;
HEAP32[HEAP32[$0 + 380 >> 2] + $2 >> 2] = $16;
HEAP32[(HEAP32[$0 + 380 >> 2] + $2 | 0) + 4 >> 2] = $8;
HEAP32[(HEAP32[$0 + 380 >> 2] + $2 | 0) + 8 >> 2] = $5;
$13 = $13 - 1 | 0;
if ($13) {
break label$32;
}
$1 = $1 + 2 | 0;
break label$25;
}
$1 = $1 + 2 | 0;
continue;
}
}
while (1) {
if (($1 | 0) >= ($9 | 0)) {
while (1) {
$5 = HEAP32[$4 >> 2];
if ($5) {
HEAP8[HEAP32[HEAP32[$5 + 12 >> 2] >> 2] - 1 | 0] = 0;
$4 = $5 + 4 | 0;
continue;
}
break;
}
} else {
HEAP8[HEAP32[($1 << 2) + $12 >> 2] - 1 | 0] = 0;
$1 = $1 + 2 | 0;
continue;
}
break;
}
$7 = 0;
if (!HEAPU8[$0 + 232 | 0]) {
break label$2;
}
$5 = HEAP32[$10 + 4 >> 2];
label$53: {
if ($5) {
$1 = HEAP32[$5 + 4 >> 2];
if (!$1) {
break label$24;
}
$5 = HEAP32[$3 >> 2];
while (1) {
$6 = HEAPU8[$5 | 0];
$2 = $5 + 1 | 0;
$5 = $2;
if (($6 | 0) != 58) {
continue;
}
break;
}
break label$53;
}
$1 = HEAP32[$18 + 136 >> 2];
if (!$1) {
break label$2;
}
$2 = HEAP32[$3 >> 2];
}
$5 = 0;
$9 = 0;
label$56: {
if (!HEAPU8[$0 + 233 | 0]) {
break label$56;
}
$6 = 0;
$8 = HEAP32[HEAP32[$1 >> 2] >> 2];
if (!$8) {
break label$56;
}
while (1) {
$10 = $6 + $8 | 0;
$9 = $6 + 1 | 0;
$6 = $9;
if (HEAPU8[$10 | 0]) {
continue;
}
break;
}
}
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 20 >> 2];
$6 = HEAP32[HEAP32[$1 >> 2] >> 2];
HEAP32[$3 + 20 >> 2] = $9;
HEAP32[$3 + 8 >> 2] = $6;
while (1) {
$6 = $5;
$5 = $5 + 1 | 0;
if (HEAPU8[$2 + $6 | 0]) {
continue;
}
break;
}
$10 = HEAP32[$1 + 20 >> 2];
$8 = $10 + ($5 + $9 | 0) | 0;
label$60: {
if (($8 | 0) <= HEAP32[$1 + 24 >> 2]) {
$7 = HEAP32[$1 + 16 >> 2];
break label$60;
}
$10 = $8 + 24 | 0;
$7 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($10) | 0;
if (!$7) {
break label$1;
}
HEAP32[$1 + 24 >> 2] = $10;
$8 = __memcpy($7, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
$10 = $0 + 348 | 0;
while (1) {
$10 = HEAP32[$10 >> 2];
if ($10) {
if (HEAP32[$10 + 12 >> 2] != HEAP32[$1 + 16 >> 2]) {
continue;
}
HEAP32[$10 + 12 >> 2] = $8;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$1 + 16 >> 2]);
HEAP32[$1 + 16 >> 2] = $8;
$10 = HEAP32[$1 + 20 >> 2];
}
$5 = __memcpy($7 + $10 | 0, $2, $5);
if ($9) {
$5 = $5 + $6 | 0;
HEAP8[$5 | 0] = HEAPU8[$0 + 456 | 0];
__memcpy($5 + 1 | 0, HEAP32[HEAP32[$1 >> 2] >> 2], $9);
}
HEAP32[$3 >> 2] = HEAP32[$1 + 16 >> 2];
$7 = 0;
break label$2;
}
return 27;
}
$5 = poolStoreString($17, $1, HEAP32[$11 + 4 >> 2], HEAP32[$11 + 8 >> 2]);
HEAP32[($14 << 2) + $12 >> 2] = $5;
if (!$5) {
break label$2;
}
break label$6;
}
$7 = storeAttributeValue($0, $1, $16 & 255, HEAP32[$11 + 4 >> 2], HEAP32[$11 + 8 >> 2], $17);
if ($7) {
break label$2;
}
HEAP32[($14 << 2) + $12 >> 2] = HEAP32[$0 + 416 >> 2];
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$5 = HEAP32[$6 + 4 >> 2];
label$65: {
if ($5) {
if (HEAPU8[$6 + 9 | 0]) {
$7 = addBinding($0, $5, $6, HEAP32[($14 << 2) + $12 >> 2], $4);
if (!$7) {
break label$65;
}
break label$2;
}
HEAP8[HEAP32[$6 >> 2] - 1 | 0] = 2;
$13 = $13 + 1 | 0;
}
$9 = $9 + 2 | 0;
}
$8 = $8 + 1 | 0;
continue;
}
}
return $7;
}
return 1;
}
function little2_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$4 = $2 - $1 | 0;
label$18: {
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$18;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 | 0];
$7 = -2;
$8 = 18;
label$20: {
label$21: {
label$22: {
label$23: {
label$24: {
label$25: {
label$26: {
label$27: {
label$28: {
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 2 | 0) {
case 3:
break label$10;
case 17:
break label$11;
case 9:
break label$12;
case 34:
break label$13;
case 30:
break label$14;
case 29:
break label$15;
case 2:
break label$20;
case 18:
break label$21;
case 33:
break label$22;
case 28:
break label$23;
case 8:
case 19:
break label$24;
case 7:
break label$25;
case 0:
break label$26;
case 11:
break label$27;
case 10:
break label$28;
case 20:
case 22:
break label$5;
case 23:
case 24:
case 25:
break label$6;
case 27:
break label$7;
case 5:
break label$8;
case 4:
break label$9;
default:
break label$3;
}
}
return little2_scanLit(12, $0, $1 + 2 | 0, $2, $3) | 0;
}
return little2_scanLit(13, $0, $1 + 2 | 0, $2, $3) | 0;
}
$5 = $1 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$18;
}
$4 = HEAPU8[$1 + 2 | 0];
label$31: {
label$32: {
label$33: {
label$34: {
label$35: {
$6 = HEAPU8[$1 + 3 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 15 | 0) {
case 2:
case 3:
case 4:
case 5:
case 6:
case 8:
break label$31;
case 0:
break label$32;
case 1:
break label$33;
case 7:
case 9:
break label$34;
default:
break label$35;
}
}
if ($4 - 5 >>> 0 < 3) {
break label$34;
}
if (($4 | 0) != 29) {
break label$31;
}
}
HEAP32[$3 >> 2] = $1;
return 29;
}
return little2_scanDecl($0, $1 + 4 | 0, $2, $3) | 0;
}
return little2_scanPi($0, $1 + 4 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $5;
return 0;
}
if (($1 + 2 | 0) != ($2 | 0)) {
break label$24;
}
HEAP32[$3 >> 2] = $2;
return -15;
}
label$38: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$38;
}
$5 = HEAPU8[$4 + 2 | 0];
label$40: {
label$41: {
label$42: {
$6 = HEAPU8[$4 + 3 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 9 | 0) {
case 1:
continue;
case 0:
break label$41;
default:
break label$42;
}
}
if (($5 | 0) != 21) {
break label$40;
}
continue;
}
if (($4 + 4 | 0) != ($2 | 0)) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $1;
return 15;
}
HEAP32[$3 >> 2] = $2;
return 15;
}
return little2_scanPercent($0, $1 + 2 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $1 + 2;
return 38;
}
HEAP32[$3 >> 2] = $1 + 2;
return 25;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -26;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$1 + 2 | 0] != 93) {
break label$16;
}
$5 = $1 + 4 | 0;
if (($5 | 0) != ($2 | 0)) {
break label$17;
}
}
return -1;
}
if (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 4 | 0] != 62) {
break label$16;
}
HEAP32[$3 >> 2] = $1 + 6;
return 34;
}
HEAP32[$3 >> 2] = $4;
return 26;
}
HEAP32[$3 >> 2] = $1 + 2;
return 23;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -24;
}
$2 = HEAPU8[$1 + 2 | 0];
label$47: {
label$48: {
label$49: {
label$50: {
label$51: {
label$52: {
$5 = HEAPU8[$1 + 3 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
switch ($2 - 32 | 0) {
case 0:
case 3:
case 4:
break label$2;
case 2:
break label$49;
case 1:
break label$51;
default:
break label$52;
}
}
switch ($2 - 9 | 0) {
case 0:
case 1:
case 2:
break label$2;
case 3:
case 4:
case 5:
break label$47;
case 6:
break label$50;
default:
break label$48;
}
}
HEAP32[$3 >> 2] = $1 + 4;
return 36;
}
HEAP32[$3 >> 2] = $1 + 4;
return 35;
}
HEAP32[$3 >> 2] = $1 + 4;
return 37;
}
if (($2 | 0) == 21) {
break label$2;
}
}
HEAP32[$3 >> 2] = $4;
return 0;
}
HEAP32[$3 >> 2] = $1 + 2;
return 21;
}
HEAP32[$3 >> 2] = $1 + 2;
return 17;
}
return little2_scanPoundName($0, $1 + 2 | 0, $2, $3) | 0;
}
if (($2 - $1 | 0) < 2) {
break label$4;
}
break label$3;
}
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$4;
}
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$4;
}
$7 = 1 << $4;
$4 = $4 >>> 5 << 2;
if ($7 & HEAP32[($4 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2]) {
break label$5;
}
$8 = 19;
$9 = 1;
if (!(HEAP32[(HEAPU8[$6 + 51504 | 0] << 5 | $4) + 49968 >> 2] & $7)) {
break label$3;
}
break label$5;
}
$8 = 19;
$9 = 1;
}
label$55: {
label$56: {
label$57: {
label$58: {
label$59: {
label$60: {
label$61: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$55;
}
$5 = HEAPU8[$4 + 2 | 0];
label$63: {
label$64: {
$7 = HEAPU8[$4 + 3 | 0];
if ($7) {
$6 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 10:
break label$56;
case 28:
break label$57;
case 29:
break label$58;
case 4:
case 5:
case 6:
case 15:
case 16:
case 25:
case 27:
case 30:
case 31:
break label$59;
case 2:
break label$60;
case 1:
break label$61;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$63;
case 24:
break label$64;
default:
break label$3;
}
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
continue;
}
break;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$4;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$4;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$4;
}
HEAP32[$3 >> 2] = $1;
return $8 | 0;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 32;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 31;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 30;
}
$7 = 0 - $8 | 0;
}
return $7 | 0;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
HEAP32[$3 >> 2] = $4;
return 24;
}
function big2_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$4 = $2 - $1 | 0;
label$18: {
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$18;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 + 1 | 0];
$7 = -2;
$8 = 18;
label$20: {
label$21: {
label$22: {
label$23: {
label$24: {
label$25: {
label$26: {
label$27: {
label$28: {
$6 = HEAPU8[$1 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 2 | 0) {
case 3:
break label$10;
case 17:
break label$11;
case 9:
break label$12;
case 34:
break label$13;
case 30:
break label$14;
case 29:
break label$15;
case 2:
break label$20;
case 18:
break label$21;
case 33:
break label$22;
case 28:
break label$23;
case 8:
case 19:
break label$24;
case 7:
break label$25;
case 0:
break label$26;
case 11:
break label$27;
case 10:
break label$28;
case 20:
case 22:
break label$5;
case 23:
case 24:
case 25:
break label$6;
case 27:
break label$7;
case 5:
break label$8;
case 4:
break label$9;
default:
break label$3;
}
}
return big2_scanLit(12, $0, $1 + 2 | 0, $2, $3) | 0;
}
return big2_scanLit(13, $0, $1 + 2 | 0, $2, $3) | 0;
}
$5 = $1 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$18;
}
$4 = HEAPU8[$1 + 3 | 0];
label$31: {
label$32: {
label$33: {
label$34: {
label$35: {
$6 = HEAPU8[$1 + 2 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 15 | 0) {
case 2:
case 3:
case 4:
case 5:
case 6:
case 8:
break label$31;
case 0:
break label$32;
case 1:
break label$33;
case 7:
case 9:
break label$34;
default:
break label$35;
}
}
if ($4 - 5 >>> 0 < 3) {
break label$34;
}
if (($4 | 0) != 29) {
break label$31;
}
}
HEAP32[$3 >> 2] = $1;
return 29;
}
return big2_scanDecl($0, $1 + 4 | 0, $2, $3) | 0;
}
return big2_scanPi($0, $1 + 4 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $5;
return 0;
}
if (($1 + 2 | 0) != ($2 | 0)) {
break label$24;
}
HEAP32[$3 >> 2] = $2;
return -15;
}
label$38: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$38;
}
$5 = HEAPU8[$4 + 3 | 0];
label$40: {
label$41: {
label$42: {
$6 = HEAPU8[$4 + 2 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 9 | 0) {
case 1:
continue;
case 0:
break label$41;
default:
break label$42;
}
}
if (($5 | 0) != 21) {
break label$40;
}
continue;
}
if (($4 + 4 | 0) != ($2 | 0)) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $1;
return 15;
}
HEAP32[$3 >> 2] = $2;
return 15;
}
return big2_scanPercent($0, $1 + 2 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $1 + 2;
return 38;
}
HEAP32[$3 >> 2] = $1 + 2;
return 25;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -26;
}
if (HEAPU8[$1 + 2 | 0] | HEAPU8[$1 + 3 | 0] != 93) {
break label$16;
}
$5 = $1 + 4 | 0;
if (($5 | 0) != ($2 | 0)) {
break label$17;
}
}
return -1;
}
if (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] != 62) {
break label$16;
}
HEAP32[$3 >> 2] = $1 + 6;
return 34;
}
HEAP32[$3 >> 2] = $4;
return 26;
}
HEAP32[$3 >> 2] = $1 + 2;
return 23;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -24;
}
$2 = HEAPU8[$1 + 3 | 0];
label$47: {
label$48: {
label$49: {
label$50: {
label$51: {
label$52: {
$5 = HEAPU8[$1 + 2 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
switch ($2 - 32 | 0) {
case 0:
case 3:
case 4:
break label$2;
case 2:
break label$49;
case 1:
break label$51;
default:
break label$52;
}
}
switch ($2 - 9 | 0) {
case 0:
case 1:
case 2:
break label$2;
case 3:
case 4:
case 5:
break label$47;
case 6:
break label$50;
default:
break label$48;
}
}
HEAP32[$3 >> 2] = $1 + 4;
return 36;
}
HEAP32[$3 >> 2] = $1 + 4;
return 35;
}
HEAP32[$3 >> 2] = $1 + 4;
return 37;
}
if (($2 | 0) == 21) {
break label$2;
}
}
HEAP32[$3 >> 2] = $4;
return 0;
}
HEAP32[$3 >> 2] = $1 + 2;
return 21;
}
HEAP32[$3 >> 2] = $1 + 2;
return 17;
}
return big2_scanPoundName($0, $1 + 2 | 0, $2, $3) | 0;
}
if (($2 - $1 | 0) < 2) {
break label$4;
}
break label$3;
}
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$4;
}
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$4;
}
$7 = 1 << $4;
$4 = $4 >>> 5 << 2;
if ($7 & HEAP32[($4 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2]) {
break label$5;
}
$8 = 19;
$9 = 1;
if (!(HEAP32[(HEAPU8[$6 + 51504 | 0] << 5 | $4) + 49968 >> 2] & $7)) {
break label$3;
}
break label$5;
}
$8 = 19;
$9 = 1;
}
label$55: {
label$56: {
label$57: {
label$58: {
label$59: {
label$60: {
label$61: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$55;
}
$5 = HEAPU8[$4 + 3 | 0];
label$63: {
label$64: {
$7 = HEAPU8[$4 + 2 | 0];
if ($7) {
$6 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 10:
break label$56;
case 28:
break label$57;
case 29:
break label$58;
case 4:
case 5:
case 6:
case 15:
case 16:
case 25:
case 27:
case 30:
case 31:
break label$59;
case 2:
break label$60;
case 1:
break label$61;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$63;
case 24:
break label$64;
default:
break label$3;
}
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
continue;
}
break;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$4;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$4;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$4;
}
HEAP32[$3 >> 2] = $1;
return $8 | 0;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 32;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 31;
}
if ($9) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 4;
return 30;
}
$7 = 0 - $8 | 0;
}
return $7 | 0;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
HEAP32[$3 >> 2] = $4;
return 24;
}
function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
$19 = __stack_pointer - 112 | 0;
__stack_pointer = $19;
$14 = $7;
$20 = $14;
$11 = $8;
$12 = $11 & 2147483647;
$21 = $12;
$12 = $2;
$17 = !($12 | $1);
$11 = $3;
$15 = $11;
$12 = $4;
$14 = $12 & 2147483647;
$16 = $14;
$10 = 2147418112;
$10 = $14 - $10 | 0;
$12 = $15;
$9 = $12;
label$1: {
label$2: {
$14 = $16;
if (!($14 | $9 ? $10 >>> 0 < 2147549184 : $17)) {
$13 = $5;
$14 = $6;
$14 = ($13 | $14) != 0;
$13 = $21;
$9 = 2147418112;
$9 = $13 - $9 | 0;
$12 = $20;
$11 = $12;
$12 = ($9 | 0) == -2147418112 & ($11 | 0) != 0 | $9 >>> 0 > 2147549184;
$13 = $9;
$10 = $11;
if (!$10 & ($13 | 0) == -2147418112 ? $14 : $12) {
break label$2;
}
}
$10 = $16;
$13 = $10 >>> 0 < 2147418112;
$12 = $10;
$9 = $15;
if (!(!$9 & ($12 | 0) == 2147418112 ? $17 : $13)) {
$13 = $3;
$7 = $13;
$9 = $4;
$12 = $9 | 32768;
$8 = $12;
$5 = $1;
$12 = $2;
$6 = $12;
break label$1;
}
$12 = $6;
$11 = !($12 | $5);
$12 = $21;
$13 = $12 >>> 0 < 2147418112;
$9 = $12;
$10 = $20;
if (!(!$10 & ($9 | 0) == 2147418112 ? $11 : $13)) {
$13 = $7;
$7 = $13;
$10 = $8;
$9 = $10 | 32768;
$8 = $9;
break label$1;
}
$9 = $16;
$13 = $9 ^ 2147418112;
$11 = $13;
$10 = $15;
$12 = $10;
$9 = $1;
$13 = $2;
$10 = $11;
$10 = $13 | $10;
if (!($12 | $9 | $10)) {
$12 = $5;
$13 = $1;
$11 = $12 ^ $13;
$9 = $6;
$10 = $2;
$9 = $9 ^ $10;
$5 = $9;
$13 = $8;
$9 = $4;
$13 = $13 ^ $9;
$12 = $7;
$10 = $3;
$9 = $12 ^ $10;
$12 = $9;
$10 = $13 ^ -2147483648;
$9 = $10;
$10 = $5;
$9 = $9 | $10;
$13 = $11;
$17 = !($9 | ($12 | $13));
$14 = $17;
$12 = $14 ? 0 : $3;
$7 = $12;
$13 = $4;
$10 = $14 ? 2147450880 : $13;
$8 = $10;
$13 = $14;
$9 = $13 ? 0 : $1;
$5 = $9;
$12 = $2;
$14 = $13 ? 0 : $12;
$6 = $14;
break label$1;
}
$14 = $21;
$9 = $14 ^ 2147418112;
$14 = $5;
$13 = $20;
$10 = $13;
$13 = $9;
$9 = $6;
$13 = $13 | $9;
if (!($14 | $10 | $13)) {
break label$1;
}
$14 = $16;
$13 = $2;
$14 = $14 | $13;
$9 = $1;
$10 = $15;
if (!($14 | ($9 | $10))) {
$14 = $6;
$9 = $21;
$9 = $14 | $9;
$13 = $5;
$10 = $20;
$14 = $13 | $10;
if ($9 | $14) {
break label$1;
}
$13 = $5;
$10 = $1;
$5 = $13 & $10;
$14 = $2;
$9 = $6;
$9 = $14 & $9;
$6 = $9;
$14 = $3;
$13 = $7;
$7 = $14 & $13;
$9 = $4;
$10 = $8;
$10 = $9 & $10;
$8 = $10;
break label$1;
}
$14 = $21;
$10 = $6;
$14 = $14 | $10;
$13 = $20;
$9 = $5;
if ($14 | ($13 | $9)) {
break label$2;
}
$5 = $1;
$14 = $2;
$6 = $14;
$7 = $3;
$14 = $4;
$8 = $14;
break label$1;
}
$14 = $2;
$9 = $6;
$13 = $5;
$10 = $1;
$11 = ($14 | 0) == ($9 | 0) & $13 >>> 0 > $10 >>> 0 | $14 >>> 0 < $9 >>> 0;
$14 = $21;
$10 = $16;
$13 = $15;
$9 = $20;
$12 = ($14 | 0) == ($10 | 0) & $13 >>> 0 < $9 >>> 0 | $10 >>> 0 < $14 >>> 0;
$13 = $10;
$9 = $15;
$10 = $14;
$14 = $20;
$18 = ($9 | 0) == ($14 | 0) & ($10 | 0) == ($13 | 0) ? $11 : $12;
$12 = $18;
$10 = $12 ? $5 : $1;
$15 = $10;
$9 = $6;
$13 = $2;
$14 = $12 ? $9 : $13;
$16 = $14;
$9 = $12 ? $7 : $3;
$20 = $9;
$14 = $8;
$10 = $4;
$12 = $12 ? $14 : $10;
$21 = $12;
$22 = $9;
$9 = $12 & 65535;
$23 = $9;
$10 = $18;
$14 = $10 ? $3 : $7;
$24 = $14;
$9 = $4;
$13 = $8;
$12 = $10 ? $9 : $13;
$25 = $12;
$26 = $12 >>> 16 & 32767;
$14 = $21;
$17 = $14 >>> 16 & 32767;
if (!$17) {
$10 = $23;
$17 = !($10 | $22);
$13 = $17;
$9 = $13 ? $15 : $22;
$10 = $16;
$12 = $23;
$14 = $13 ? $10 : $12;
$10 = Math_clz32($14);
$11 = 0;
$9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
$10 = $17 << 6;
$12 = $9 + $10 | 0;
$11 = $16;
$9 = $23;
__ashlti3($19 + 96 | 0, $15, $11, $22, $9, $12 - 15 | 0);
$17 = 16 - $12 | 0;
$13 = $19;
$9 = HEAP32[$13 + 104 >> 2];
$22 = $9;
$11 = HEAP32[$13 + 108 >> 2];
$23 = $11;
$9 = HEAP32[$13 + 100 >> 2];
$16 = $9;
$11 = HEAP32[$13 + 96 >> 2];
$15 = $11;
}
$14 = $18;
$10 = $14 ? $1 : $5;
$5 = $10;
$9 = $2;
$11 = $6;
$13 = $14 ? $9 : $11;
$6 = $13;
$14 = $24;
$7 = $14;
$13 = $25;
$10 = $13 & 65535;
$8 = $10;
if (!$26) {
$10 = $8;
$18 = !($7 | $10);
$11 = $18;
$9 = $11 ? $5 : $7;
$10 = $6;
$14 = $8;
$13 = $11 ? $10 : $14;
$10 = Math_clz32($13);
$12 = 0;
$9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
$10 = $18 << 6;
$14 = $9 + $10 | 0;
$12 = $6;
$9 = $8;
__ashlti3($19 + 80 | 0, $5, $12, $7, $9, $14 - 15 | 0);
$26 = 16 - $14 | 0;
$11 = $19;
$9 = HEAP32[$11 + 88 >> 2];
$7 = $9;
$12 = HEAP32[$11 + 92 >> 2];
$8 = $12;
$9 = HEAP32[$11 + 84 >> 2];
$6 = $9;
$12 = HEAP32[$11 + 80 >> 2];
$5 = $12;
}
$11 = $7;
$2 = $11 << 3;
$9 = $8;
$12 = $9 << 3 | $11 >>> 29;
$1 = $12;
$12 = $6;
$10 = $12 >>> 29 | 0;
$11 = 0;
$9 = $11;
$11 = $1;
$9 = $11 | $9;
$12 = $2;
$11 = $12 | $10;
$3 = $11;
$12 = $9 | 524288;
$4 = $12;
$9 = $22;
$12 = $23;
$11 = $12 << 3 | $9 >>> 29;
$1 = $11;
$11 = $16;
$10 = $11 >>> 29 | 0;
$11 = $9 << 3;
$7 = $11 | $10;
$9 = 0;
$12 = $9;
$9 = $1;
$12 = $12 | $9;
$8 = $12;
$9 = $5;
$1 = $9 << 3;
$12 = $6;
$11 = $12 << 3 | $9 >>> 29;
$2 = $11;
$12 = $20;
$10 = $24;
$5 = $12 ^ $10;
$11 = $21;
$9 = $25;
$9 = $11 ^ $9;
$6 = $9;
label$10: {
if (($17 | 0) == ($26 | 0)) {
break label$10;
}
$18 = $17 - $26 | 0;
if ($18 >>> 0 > 127) {
$3 = 0;
$4 = 0;
$1 = 1;
$2 = 0;
break label$10;
}
$9 = $2;
$12 = $4;
__ashlti3($19 - -64 | 0, $1, $9, $3, $12, 128 - $18 | 0);
$12 = $9;
$9 = $4;
__lshrti3($19 + 48 | 0, $1, $12, $3, $9, $18);
$11 = $19;
$9 = HEAP32[$11 + 48 >> 2];
$4 = $9;
$12 = HEAP32[$11 + 52 >> 2];
$3 = $12;
$12 = HEAP32[$11 + 64 >> 2];
$2 = $12;
$9 = HEAP32[$11 + 68 >> 2];
$1 = $9;
$9 = HEAP32[$11 + 72 >> 2];
$10 = $9;
$12 = HEAP32[$11 + 76 >> 2];
$9 = $12;
$12 = $1;
$9 = $12 | $9;
$11 = $2;
$12 = $11 | $10;
$11 = ($9 | $12) != 0;
$10 = $4;
$1 = $11 | $10;
$12 = $3;
$9 = $12;
$2 = $9;
$12 = $19;
$9 = HEAP32[$12 + 56 >> 2];
$3 = $9;
$10 = HEAP32[$12 + 60 >> 2];
$4 = $10;
}
$12 = $7;
$24 = $12;
$10 = $8;
$9 = $10 | 524288;
$25 = $9;
$10 = $15;
$22 = $10 << 3;
$9 = $16;
$12 = $9 << 3 | $10 >>> 29;
$23 = $12;
$12 = $6;
label$12: {
if (($12 | 0) < 0) {
$5 = 0;
$6 = 0;
$7 = 0;
$8 = 0;
$11 = $1;
$10 = $22;
$10 = $11 ^ $10;
$12 = $23;
$9 = $2;
$12 = $12 ^ $9;
$14 = $12;
$11 = $25;
$12 = $4;
$11 = $11 ^ $12;
$13 = $11;
$12 = $10;
$9 = $3;
$10 = $24;
$10 = $9 ^ $10;
$11 = $14;
$9 = $13;
$9 = $11 | $9;
if (!($12 | $10 | $9)) {
break label$1;
}
$11 = $22;
$10 = $1;
$13 = $11 - $10 | 0;
$15 = $13;
$9 = $23;
$12 = $2;
$14 = $12 + ($10 >>> 0 > $11 >>> 0) | 0;
$14 = $9 - $14 | 0;
$16 = $14;
$9 = $24;
$10 = $3;
$12 = $9 - $10 | 0;
$14 = $25;
$11 = $4;
$13 = $11 + ($10 >>> 0 > $9 >>> 0) | 0;
$13 = $14 - $13 | 0;
$3 = $13;
$13 = $2;
$9 = $23;
$14 = $1;
$10 = $22;
$9 = ($13 | 0) == ($9 | 0) & $14 >>> 0 > $10 >>> 0 | $13 >>> 0 > $9 >>> 0;
$10 = $12;
$11 = $10 - $9 | 0;
$7 = $11;
$14 = $3;
$12 = $10 >>> 0 < $9 >>> 0;
$12 = $14 - $12 | 0;
$8 = $12;
if ($12 >>> 0 > 524287) {
break label$12;
}
$14 = $8;
$18 = !($7 | $14);
$13 = $18;
$10 = $13 ? $15 : $7;
$14 = $16;
$12 = $8;
$9 = $13 ? $14 : $12;
$14 = Math_clz32($9);
$10 = ($14 | 0) == 32 ? Math_clz32($10) + 32 | 0 : $14;
$11 = 0;
$14 = $18 << 6;
$12 = $14 + $10 | 0;
$18 = $12 - 12 | 0;
$11 = $16;
$10 = $8;
__ashlti3($19 + 32 | 0, $15, $11, $7, $10, $18);
$17 = $17 - $18 | 0;
$13 = $19;
$10 = HEAP32[$13 + 40 >> 2];
$7 = $10;
$11 = HEAP32[$13 + 44 >> 2];
$8 = $11;
$11 = HEAP32[$13 + 32 >> 2];
$15 = $11;
$10 = HEAP32[$13 + 36 >> 2];
$16 = $10;
break label$12;
}
$11 = $23;
$10 = $2;
$12 = $11 + $10 | 0;
$14 = $22;
$13 = $1;
$9 = $14 + $13 | 0;
$15 = $9;
$12 = $9 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
$16 = $12;
$13 = $10;
$14 = $1;
$1 = ($12 | 0) == ($13 | 0) & $14 >>> 0 > $9 >>> 0 | $13 >>> 0 > $12 >>> 0;
$12 = $25;
$10 = $4;
$9 = $12 + $10 | 0;
$14 = $3;
$13 = $24;
$11 = $14 + $13 | 0;
$9 = $11 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$13 = $11;
$11 = $9;
$10 = $1;
$12 = $13 + $10 | 0;
$11 = $12 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
$7 = $12;
$8 = $11;
$10 = $11 & 1048576;
if (!$10) {
break label$12;
}
$11 = $15;
$3 = $11 & 1;
$9 = 0;
$2 = $9;
$10 = $7;
$11 = $10 << 31;
$1 = $11;
$11 = $16;
$10 = $11 >>> 1 | 0;
$9 = $15;
$13 = ($11 & 1) << 31 | $9 >>> 1;
$9 = $10;
$10 = $1;
$9 = $9 | $10;
$11 = 0;
$13 = $11 | $13;
$10 = $3;
$15 = $13 | $10;
$11 = $9;
$9 = $2;
$11 = $11 | $9;
$16 = $11;
$17 = $17 + 1 | 0;
$11 = $8;
$10 = $11 >>> 1 | 0;
$9 = $7;
$7 = ($11 & 1) << 31 | $9 >>> 1;
$8 = $10;
}
$1 = 0;
$10 = $21;
$9 = $10 & -2147483648;
$2 = $9;
if (($17 | 0) >= 32767) {
$10 = $1;
$7 = $10;
$9 = $2;
$11 = $9 | 2147418112;
$8 = $11;
$5 = 0;
$6 = 0;
break label$1;
}
$18 = 0;
label$15: {
if (($17 | 0) > 0) {
$18 = $17;
break label$15;
}
$11 = $16;
$10 = $8;
__ashlti3($19 + 16 | 0, $15, $11, $7, $10, $17 + 127 | 0);
$10 = $11;
$11 = $8;
__lshrti3($19, $15, $10, $7, $11, 1 - $17 | 0);
$9 = $19;
$11 = HEAP32[$9 >> 2];
$6 = $11;
$10 = HEAP32[$9 + 4 >> 2];
$5 = $10;
$10 = HEAP32[$9 + 16 >> 2];
$4 = $10;
$11 = HEAP32[$9 + 20 >> 2];
$3 = $11;
$11 = HEAP32[$9 + 24 >> 2];
$13 = $11;
$10 = HEAP32[$9 + 28 >> 2];
$11 = $10;
$10 = $3;
$11 = $11 | $10;
$9 = $4;
$10 = $13 | $9;
$13 = $6;
$9 = ($11 | $10) != 0;
$15 = $13 | $9;
$10 = $5;
$16 = $10;
$10 = $19;
$11 = HEAP32[$10 + 8 >> 2];
$7 = $11;
$13 = HEAP32[$10 + 12 >> 2];
$8 = $13;
}
$10 = $7;
$11 = $10 << 29;
$3 = $11;
$11 = $16;
$10 = $11 >>> 3 | 0;
$13 = $15;
$9 = ($11 & 7) << 29 | $13 >>> 3;
$11 = 0;
$5 = $11 | $9;
$13 = $10;
$10 = $3;
$13 = $13 | $10;
$6 = $13;
$13 = $8;
$11 = $13 >>> 3 | 0;
$10 = $7;
$13 = ($13 & 7) << 29 | $10 >>> 3;
$3 = $13;
$10 = $11 & 65535;
$11 = $18;
$13 = $11 << 16;
$11 = $13;
$11 = $11 | $10;
$9 = 0;
$10 = $3;
$13 = $9 | $10;
$7 = $13 | $1;
$10 = $2;
$10 = $11 | $10;
$8 = $10;
$17 = $15 & 7;
label$17: {
label$18: {
label$19: {
switch (__fe_getround() | 0) {
case 0:
$10 = $6;
$11 = $5;
$9 = $17 >>> 0 > 4;
$14 = $11 + $9 | 0;
$12 = $14 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
$15 = $14;
$11 = $10;
$16 = $12;
$9 = $5;
$10 = $14;
$11 = ($11 | 0) == ($12 | 0) & $9 >>> 0 > $10 >>> 0 | $11 >>> 0 > $12 >>> 0;
$10 = $8;
$9 = $7;
$13 = $11 + $9 | 0;
$7 = $13;
$14 = $11 >>> 0 > $13 >>> 0 ? $10 + 1 | 0 : $10;
$8 = $14;
if (($17 | 0) != 4) {
$5 = $15;
$14 = $16;
$6 = $14;
break label$18;
}
$11 = $15;
$10 = $11;
$1 = $10 & 1;
$14 = $1;
$12 = $10 + $14 | 0;
$9 = 0;
$10 = $16;
$13 = $9 + $10 | 0;
$5 = $12;
$14 = $9;
$13 = $11 >>> 0 > $12 >>> 0 ? $13 + 1 | 0 : $13;
$6 = $13;
$11 = $1;
$9 = $12;
$14 = ($14 | 0) == ($13 | 0) & $11 >>> 0 > $9 >>> 0 | $14 >>> 0 > $13 >>> 0;
$9 = $8;
$11 = $7;
$10 = $11 + $14 | 0;
$7 = $10;
$12 = $10 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$8 = $12;
break label$17;
case 1:
$12 = $2;
$11 = ($17 | 0) != 0 & ($1 | $12) != 0;
$14 = $5;
$13 = $11 + $14 | 0;
$15 = $13;
$9 = $6;
$10 = $9;
$14 = $10;
$10 = $11 >>> 0 > $13 >>> 0 ? $10 + 1 | 0 : $10;
$16 = $10;
$11 = $5;
$9 = $13;
$14 = ($14 | 0) == ($10 | 0) & $11 >>> 0 > $9 >>> 0 | $14 >>> 0 > $10 >>> 0;
$9 = $8;
$11 = $7;
$12 = $11 + $14 | 0;
$13 = $12 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
$7 = $12;
$8 = $13;
$5 = $15;
$13 = $16;
$6 = $13;
break label$18;
case 2:
break label$19;
default:
break label$18;
}
}
$13 = $2;
$14 = !($13 | $1) & ($17 | 0) != 0;
$9 = $5;
$10 = $14 + $9 | 0;
$13 = $6;
$12 = $13;
$15 = $10;
$12 = $10 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
$16 = $12;
$9 = $13;
$14 = $5;
$9 = ($12 | 0) == ($9 | 0) & $14 >>> 0 > $10 >>> 0 | $9 >>> 0 > $12 >>> 0;
$13 = $8;
$10 = $13;
$14 = $7;
$11 = $14 + $9 | 0;
$10 = $11 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
$7 = $11;
$8 = $10;
$5 = $15;
$10 = $16;
$6 = $10;
}
if (!$17) {
break label$1;
}
}
__fe_raise_inexact();
}
$14 = $0;
HEAP32[$14 >> 2] = $5;
$10 = $6;
HEAP32[$14 + 4 >> 2] = $10;
HEAP32[$14 + 8 >> 2] = $7;
$10 = $8;
HEAP32[$14 + 12 >> 2] = $10;
__stack_pointer = $19 + 112 | 0;
}
function OneArmAnimator__reset_28OneHConcretePosture__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$7 = __stack_pointer - 272 | 0;
__stack_pointer = $7;
label$1: {
label$2: {
label$3: {
label$4: {
while (1) {
if (($4 | 0) == 4) {
label$7: {
HEAP32[$0 >> 2] = 0;
$8 = OneHConcretePosture__OneHConcretePosture_28OneHConcretePosture_20const__29($7 + 160 | 0, $1);
$3 = HEAP32[$0 + 12 >> 2];
label$8: {
if ($3) {
$5 = HEAP32[$1 + 56 >> 2];
HEAP32[19359] = 0;
invoke_vii(67, $3 | 0, $5 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$4 = HEAP32[$0 + 12 >> 2];
break label$8;
}
HEAP32[19359] = 0;
$5 = invoke_ii(64, 64) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$4 = HEAP32[$1 + 56 >> 2];
HEAP32[19359] = 0;
$4 = invoke_iii(68, $5 | 0, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$7;
}
HEAP32[$0 + 12 >> 2] = $4;
}
HEAP32[$8 + 56 >> 2] = $4;
$3 = HEAP32[$0 + 976 >> 2];
label$10: {
if ($3) {
$1 = HEAP32[$1 + 56 >> 2];
HEAP32[19359] = 0;
invoke_vii(67, $3 | 0, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$10;
}
break label$2;
}
HEAP32[19359] = 0;
$1 = invoke_ii(64, 64) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$5 = invoke_iii(68, $1 | 0, $4 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$4;
}
HEAP32[$0 + 976 >> 2] = $5;
}
HEAP32[19359] = 0;
$9 = invoke_ii(69, $7 + 144 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
invoke_viii(70, $8 | 0, $3 | 0, $9 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
if (HEAPU8[67561]) {
HEAP32[19359] = 0;
invoke_vii(71, 25166, 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
}
$1 = HEAPU8[$0 + 8 | 0];
$5 = HEAP32[$0 + 4 >> 2];
$4 = 0;
HEAP32[19359] = 0;
$10 = $8 + 40 | 0;
invoke_viiiiiiff(72, $5 | 0, $0 + 16 | 0, $1 | 0, $9 | 0, $10 | 0, $8 + 76 | 0, Math_fround(Math_fround(0)), Math_fround(Math_fround(0)));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
label$13: {
label$14: {
while (1) {
$3 = HEAP32[17051];
if (($4 | 0) == 4) {
if (HEAPF32[$3 + 32 >> 2] != Math_fround(0)) {
$4 = $3 + 32 | 0;
$6 = HEAP32[$4 >> 2];
$5 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 + 152 >> 2] = $6;
HEAP32[$0 + 156 >> 2] = $5;
$6 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 160 >> 2] = $5;
HEAP32[$0 + 164 >> 2] = $6;
}
HEAP32[19359] = 0;
$3 = $0 + 36 | 0;
invoke_vif(73, $3 | 0, Math_fround($2));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
$5 = invoke_iii(74, $7 + 80 | 0, $9 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vii(75, $3 | 0, $5 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
$5 = invoke_iii(74, $7 - -64 | 0, $9 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vii(76, $3 | 0, $5 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
$4 = HEAP32[17051];
if (HEAPF32[$4 + 48 >> 2] != Math_fround(0)) {
$4 = $4 + 48 | 0;
$6 = HEAP32[$4 >> 2];
$5 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 + 676 >> 2] = $6;
HEAP32[$0 + 680 >> 2] = $5;
$6 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 684 >> 2] = $5;
HEAP32[$0 + 688 >> 2] = $6;
}
HEAP32[19359] = 0;
$3 = $0 + 224 | 0;
invoke_vif(77, $3 | 0, Math_fround($2));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
$5 = invoke_iii(78, $7 + 48 | 0, $10 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vii(79, $3 | 0, $5 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
$5 = invoke_iii(78, $7 + 32 | 0, $10 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vii(80, $3 | 0, $5 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
$4 = HEAP32[17051];
if (HEAPF32[$4 + 64 >> 2] != Math_fround(0)) {
$4 = $4 - -64 | 0;
$6 = HEAP32[$4 >> 2];
$5 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 + 884 >> 2] = $6;
HEAP32[$0 + 888 >> 2] = $5;
$6 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 892 >> 2] = $5;
HEAP32[$0 + 896 >> 2] = $6;
}
HEAP32[19359] = 0;
$1 = $0 + 868 | 0;
invoke_vif(81, $1 | 0, Math_fround($2));
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vif(82, $1 | 0, Math_fround(Math_fround(0)));
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
$3 = HEAP32[17051];
$6 = HEAP32[$3 + 32 >> 2];
$5 = HEAP32[$3 + 36 >> 2];
$4 = HEAP32[$0 + 220 >> 2];
HEAP32[$4 + 16 >> 2] = $6;
HEAP32[$4 + 20 >> 2] = $5;
$6 = HEAP32[$3 + 44 >> 2];
$5 = HEAP32[$3 + 40 >> 2];
HEAP32[$4 + 24 >> 2] = $5;
HEAP32[$4 + 28 >> 2] = $6;
HEAP32[19359] = 0;
$3 = $0 + 184 | 0;
invoke_vif(83, $3 | 0, Math_fround($2));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$13;
}
HEAP32[19359] = 0;
$1 = invoke_iii(74, $7 + 16 | 0, $9 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$13;
}
HEAP32[19359] = 0;
invoke_vii(84, $3 | 0, $1 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$13;
}
HEAP32[19359] = 0;
$1 = invoke_iii(74, $7 | 0, $9 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$13;
}
HEAP32[19359] = 0;
invoke_vii(85, $3 | 0, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$13;
}
OneHConcretePosture___OneHConcretePosture_28_29($8);
__stack_pointer = $7 + 272 | 0;
return;
}
$3 = (($4 | 0) == 3 ? 80 : 96) + $3 | 0;
if (HEAPF32[$3 >> 2] != Math_fround(0)) {
$5 = HEAP32[$3 + 12 >> 2];
$6 = HEAP32[$3 + 8 >> 2];
$11 = $6;
$1 = Math_imul($4, 644) + $0 | 0;
$6 = $1 + 1440 | 0;
HEAP32[$6 >> 2] = $11;
HEAP32[$6 + 4 >> 2] = $5;
$6 = HEAP32[$3 + 4 >> 2];
$5 = HEAP32[$3 >> 2];
$11 = $5;
$5 = $1 + 1432 | 0;
HEAP32[$5 >> 2] = $11;
HEAP32[$5 + 4 >> 2] = $6;
}
$3 = (Math_imul($4, 644) + $0 | 0) + 980 | 0;
$5 = HEAP32[HEAP32[$3 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
invoke_vif($5 | 0, $3 | 0, Math_fround($2));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[19359] = 0;
$1 = invoke_ii(86, $7 + 128 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
$6 = HEAP32[(($4 << 2) + $0 | 0) + 16 >> 2];
$5 = HEAP32[HEAP32[$6 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
invoke_vii($5 | 0, $6 | 0, $1 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[19359] = 0;
$5 = invoke_iii(78, $7 + 112 | 0, $1 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
$6 = HEAP32[HEAP32[$3 >> 2] + 16 >> 2];
HEAP32[19359] = 0;
invoke_vii($6 | 0, $3 | 0, $5 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[19359] = 0;
$6 = invoke_iii(78, $7 + 96 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$14;
}
$5 = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_vii($5 | 0, $3 | 0, $6 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$14;
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
} else {
$3 = HEAP32[(($4 << 2) + $0 | 0) + 16 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3);
$4 = $4 + 1 | 0;
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
OneHConcretePosture___OneHConcretePosture_28_29($8);
__resumeException($4 | 0);
abort();
}
function DeleteSiGMLTables_28_29() {
var $0 = 0;
DeleteNonmanualTables_28_29();
$0 = HEAP32[18791];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18791] = 0;
}
$0 = HEAP32[18792];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20HashAny_char_20const__2c_20int______HashAny_28_29($0));
HEAP32[18792] = 0;
}
$0 = HEAP32[18795];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18795] = 0;
}
$0 = HEAP32[18796];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18796] = 0;
}
$0 = HEAP32[18797];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18797] = 0;
}
$0 = HEAP32[18798];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18798] = 0;
}
$0 = HEAP32[18799];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18799] = 0;
}
$0 = HEAP32[18800];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18800] = 0;
}
$0 = HEAP32[18801];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18801] = 0;
}
$0 = HEAP32[18802];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18802] = 0;
}
$0 = HEAP32[18803];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18803] = 0;
}
$0 = HEAP32[18804];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18804] = 0;
}
$0 = HEAP32[18805];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18805] = 0;
}
$0 = HEAP32[18806];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18806] = 0;
}
$0 = HEAP32[18807];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18807] = 0;
}
$0 = HEAP32[18808];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18808] = 0;
}
$0 = HEAP32[18809];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18809] = 0;
}
$0 = HEAP32[18810];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18810] = 0;
}
$0 = HEAP32[18811];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18811] = 0;
}
$0 = HEAP32[18812];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18812] = 0;
}
$0 = HEAP32[18813];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18813] = 0;
}
$0 = HEAP32[18814];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18814] = 0;
}
$0 = HEAP32[18815];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18815] = 0;
}
$0 = HEAP32[18816];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18816] = 0;
}
$0 = HEAP32[18817];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18817] = 0;
}
$0 = HEAP32[18818];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18818] = 0;
}
$0 = HEAP32[18819];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18819] = 0;
}
$0 = HEAP32[18820];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18820] = 0;
}
$0 = HEAP32[18821];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18821] = 0;
}
$0 = HEAP32[18822];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18822] = 0;
}
$0 = HEAP32[18823];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18823] = 0;
}
$0 = HEAP32[18824];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18824] = 0;
}
$0 = HEAP32[18825];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18825] = 0;
}
$0 = HEAP32[18826];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18826] = 0;
}
$0 = HEAP32[18827];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18827] = 0;
}
$0 = HEAP32[18828];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18828] = 0;
}
$0 = HEAP32[18829];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18829] = 0;
}
$0 = HEAP32[18830];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18830] = 0;
}
$0 = HEAP32[18831];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18831] = 0;
}
$0 = HEAP32[18832];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18832] = 0;
}
$0 = HEAP32[18833];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18833] = 0;
}
$0 = HEAP32[18834];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18834] = 0;
}
$0 = HEAP32[18835];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18835] = 0;
}
$0 = HEAP32[18836];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18836] = 0;
}
$0 = HEAP32[18837];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18837] = 0;
}
$0 = HEAP32[18838];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18838] = 0;
}
$0 = HEAP32[18839];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18839] = 0;
}
$0 = HEAP32[18840];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18840] = 0;
}
$0 = HEAP32[18841];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18841] = 0;
}
$0 = HEAP32[18842];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18842] = 0;
}
$0 = HEAP32[18843];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18843] = 0;
}
$0 = HEAP32[18844];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18844] = 0;
}
$0 = HEAP32[18208];
if ($0) {
dlfree($0);
HEAP32[18208] = 0;
}
$0 = HEAP32[18209];
if ($0) {
dlfree($0);
HEAP32[18209] = 0;
}
$0 = HEAP32[18210];
if ($0) {
dlfree($0);
HEAP32[18210] = 0;
}
$0 = HEAP32[18211];
if ($0) {
dlfree($0);
HEAP32[18211] = 0;
}
$0 = HEAP32[18212];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18212] = 0;
}
$0 = HEAP32[18213];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18213] = 0;
}
$0 = HEAP32[18214];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18214] = 0;
}
$0 = HEAP32[18215];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18215] = 0;
}
$0 = HEAP32[18216];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18216] = 0;
}
$0 = HEAP32[18217];
if ($0) {
dlfree($0);
HEAP32[18217] = 0;
}
$0 = HEAP32[18218];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18218] = 0;
}
$0 = HEAP32[18219];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18219] = 0;
}
$0 = HEAP32[18220];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18220] = 0;
}
$0 = HEAP32[18221];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18221] = 0;
}
$0 = HEAP32[18222];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18222] = 0;
}
$0 = HEAP32[18776];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18776] = 0;
}
$0 = HEAP32[18777];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18777] = 0;
}
$0 = HEAP32[18778];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18778] = 0;
}
$0 = HEAP32[18779];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18779] = 0;
}
$0 = HEAP32[18780];
if ($0) {
operator_20delete_28void__29(SpecialHandshapes___SpecialHandshapes_28_29($0));
HEAP32[18780] = 0;
}
$0 = HEAP32[18781];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18781] = 0;
}
$0 = HEAP32[18784];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18784] = 0;
}
$0 = HEAP32[18785];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18785] = 0;
}
$0 = HEAP32[18786];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18786] = 0;
}
$0 = HEAP32[18787];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18787] = 0;
}
$0 = HEAP32[18788];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18788] = 0;
}
$0 = HEAP32[18789];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18789] = 0;
}
$0 = HEAP32[18790];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18790] = 0;
}
$0 = HEAP32[18793];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18793] = 0;
}
$0 = HEAP32[18794];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18794] = 0;
}
$0 = HEAP32[18783];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[18783] = 0;
}
$0 = HEAP32[18782];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18782] = 0;
}
$0 = HEAP32[18862];
if ($0) {
operator_20delete_28void__29(DynamicArrayP_Site____DynamicArrayP_28_29($0));
HEAP32[18862] = 0;
}
HEAP32[18864] = 0;
$0 = HEAP32[18863];
if ($0) {
operator_20delete_28void__29(DynamicArrayP_Site____DynamicArrayP_28_29($0));
HEAP32[18863] = 0;
}
HEAP32[18865] = 0;
}
function normal_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$5 = 18;
$4 = 1;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
label$19: {
label$20: {
label$21: {
label$22: {
label$23: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 2 | 0) {
case 10:
return normal_scanLit(12, $0, $1 + 1 | 0, $2, $3) | 0;
case 11:
return normal_scanLit(13, $0, $1 + 1 | 0, $2, $3) | 0;
case 0:
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
label$27: {
label$28: {
label$29: {
label$30: {
label$31: {
$5 = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0];
switch ($5 - 15 | 0) {
case 2:
case 3:
case 4:
case 5:
case 6:
case 8:
break label$27;
case 0:
break label$28;
case 1:
break label$29;
case 7:
case 9:
break label$30;
default:
break label$31;
}
}
if ($5 - 5 >>> 0 < 3) {
break label$30;
}
if (($5 | 0) != 29) {
break label$27;
}
}
HEAP32[$3 >> 2] = $1;
return 29;
}
return normal_scanDecl($0, $1 + 2 | 0, $2, $3) | 0;
}
return normal_scanPi($0, $1 + 2 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $4;
return 0;
case 5:
break label$10;
case 4:
break label$11;
case 3:
break label$12;
case 17:
break label$13;
case 9:
break label$14;
case 34:
break label$15;
case 30:
break label$16;
case 29:
break label$17;
case 2:
break label$18;
case 18:
break label$19;
case 33:
break label$20;
case 28:
break label$21;
case 8:
case 19:
break label$22;
case 7:
break label$23;
case 20:
case 22:
break label$5;
case 23:
case 24:
case 25:
break label$6;
default:
break label$9;
}
}
if (($1 + 1 | 0) != ($2 | 0)) {
break label$22;
}
HEAP32[$3 >> 2] = $2;
return -15;
}
label$32: {
while (1) {
$4 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$32;
}
label$34: {
label$35: {
label$36: {
$5 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($5 - 9 | 0) {
case 1:
continue;
case 0:
break label$35;
default:
break label$36;
}
}
if (($5 | 0) == 21) {
continue;
}
break label$34;
}
if (($4 + 2 | 0) != ($2 | 0)) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $1;
return 15;
}
HEAP32[$3 >> 2] = $2;
return 15;
}
return normal_scanPercent($0, $1 + 1 | 0, $2, $3) | 0;
}
HEAP32[$3 >> 2] = $1 + 1;
return 38;
}
HEAP32[$3 >> 2] = $1 + 1;
return 25;
}
$0 = $1 + 1 | 0;
if (($2 | 0) == ($0 | 0)) {
return -26;
}
label$38: {
if (HEAPU8[$1 + 1 | 0] != 93) {
break label$38;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 2 | 0] != 62) {
break label$38;
}
HEAP32[$3 >> 2] = $1 + 3;
return 34;
}
HEAP32[$3 >> 2] = $0;
return 26;
}
HEAP32[$3 >> 2] = $1 + 1;
return 23;
}
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
return -24;
}
label$40: {
label$41: {
label$42: {
label$43: {
label$44: {
label$45: {
$2 = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0];
switch ($2 - 32 | 0) {
case 0:
case 3:
case 4:
break label$3;
case 2:
break label$42;
case 1:
break label$44;
default:
break label$45;
}
}
switch ($2 - 9 | 0) {
case 0:
case 1:
case 2:
break label$3;
case 3:
case 4:
case 5:
break label$40;
case 6:
break label$43;
default:
break label$41;
}
}
HEAP32[$3 >> 2] = $1 + 2;
return 36;
}
HEAP32[$3 >> 2] = $1 + 2;
return 35;
}
HEAP32[$3 >> 2] = $1 + 2;
return 37;
}
if (($2 | 0) == 21) {
break label$3;
}
}
HEAP32[$3 >> 2] = $4;
return 0;
}
HEAP32[$3 >> 2] = $1 + 1;
return 21;
}
HEAP32[$3 >> 2] = $1 + 1;
return 17;
}
return normal_scanPoundName($0, $1 + 1 | 0, $2, $3) | 0;
}
$4 = 2;
if (($2 - $1 | 0) < 2) {
break label$4;
}
if (FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0)) {
break label$9;
}
break label$6;
}
$4 = 3;
if (($2 - $1 | 0) < 3) {
break label$4;
}
if (FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0) {
break label$5;
}
if (FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0) {
break label$6;
}
break label$9;
}
$4 = 4;
if (($2 - $1 | 0) < 4) {
break label$4;
}
if (FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0) {
break label$5;
}
if (FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0) {
break label$6;
}
}
HEAP32[$3 >> 2] = $1;
return 0;
}
$5 = 19;
$6 = 1;
}
$1 = $1 + $4 | 0;
label$46: {
label$47: {
label$48: {
label$49: {
label$50: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$47;
}
$4 = 1;
label$52: {
label$53: {
label$54: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$4;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$53;
}
break label$46;
case 1:
if (($2 - $1 | 0) < 3) {
break label$4;
}
$4 = 3;
if (!(FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0)) {
break label$46;
}
break label$53;
case 10:
break label$48;
case 28:
break label$49;
case 29:
break label$50;
case 4:
case 5:
case 6:
case 15:
case 16:
case 25:
case 27:
case 30:
case 31:
break label$52;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$53;
case 2:
break label$54;
default:
break label$46;
}
}
if (($2 - $1 | 0) < 4) {
break label$4;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$46;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $1;
return $5 | 0;
}
if ($6) {
break label$46;
}
HEAP32[$3 >> 2] = $1 + 1;
return 32;
}
if ($6) {
break label$46;
}
HEAP32[$3 >> 2] = $1 + 1;
return 31;
}
if ($6) {
break label$46;
}
HEAP32[$3 >> 2] = $1 + 1;
return 30;
}
return 0 - $5 | 0;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
return -2;
}
HEAP32[$3 >> 2] = $4;
return 24;
}
return -1;
}
function CreateNonmanualTables_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 688 | 0;
__stack_pointer = $0;
HEAP32[$0 + 680 >> 2] = 17;
HEAP32[$0 + 684 >> 2] = 0;
HEAP32[$0 + 676 >> 2] = 11288;
HEAP32[$0 + 672 >> 2] = 16;
HEAP32[$0 + 668 >> 2] = 11170;
HEAP32[$0 + 664 >> 2] = 15;
HEAP32[$0 + 660 >> 2] = 11292;
HEAP32[$0 + 656 >> 2] = 14;
HEAP32[$0 + 652 >> 2] = 11174;
HEAP32[$0 + 648 >> 2] = 13;
HEAP32[$0 + 644 >> 2] = 12176;
HEAP32[$0 + 640 >> 2] = 12;
HEAP32[$0 + 636 >> 2] = 11228;
HEAP32[$0 + 632 >> 2] = 11;
HEAP32[$0 + 628 >> 2] = 11513;
HEAP32[$0 + 624 >> 2] = 10;
HEAP32[$0 + 620 >> 2] = 12187;
HEAP32[$0 + 616 >> 2] = 9;
HEAP32[$0 + 612 >> 2] = 11232;
HEAP32[$0 + 608 >> 2] = 8;
HEAP32[$0 + 604 >> 2] = 11518;
HEAP32[$0 + 600 >> 2] = 7;
HEAP32[$0 + 596 >> 2] = 12209;
HEAP32[$0 + 592 >> 2] = 6;
HEAP32[$0 + 588 >> 2] = 11255;
HEAP32[$0 + 584 >> 2] = 5;
HEAP32[$0 + 580 >> 2] = 11241;
HEAP32[$0 + 576 >> 2] = 4;
HEAP32[$0 + 572 >> 2] = 11165;
HEAP32[$0 + 568 >> 2] = 3;
HEAP32[$0 + 564 >> 2] = 12180;
HEAP32[$0 + 560 >> 2] = 2;
HEAP32[$0 + 552 >> 2] = 1;
HEAP32[$0 + 544 >> 2] = 0;
HEAP32[$0 + 556 >> 2] = 12204;
HEAP32[$0 + 548 >> 2] = 11250;
wasm2js_i32$0 = 75380, wasm2js_i32$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 11236, $0 + 544 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75384, wasm2js_i32$1 = dlmalloc(52), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
while (1) if (($4 | 0) == 13) {
HEAP32[$0 + 528 >> 2] = 7;
HEAP32[$0 + 532 >> 2] = 0;
HEAP32[$0 + 520 >> 2] = 6;
HEAP32[$0 + 524 >> 2] = 38;
HEAP32[$0 + 512 >> 2] = 5;
HEAP32[$0 + 516 >> 2] = 37;
HEAP32[$0 + 504 >> 2] = 4;
HEAP32[$0 + 508 >> 2] = 36;
HEAP32[$0 + 496 >> 2] = 3;
HEAP32[$0 + 500 >> 2] = 35;
HEAP32[$0 + 488 >> 2] = 2;
HEAP32[$0 + 492 >> 2] = 34;
HEAP32[$0 + 480 >> 2] = 1;
HEAP32[$0 + 484 >> 2] = 33;
wasm2js_i32$0 = 75388, wasm2js_i32$1 = HashAny_int_2c_20int___makeHash_28int_2c_20int_2c_20____29(0, 32, $0 + 480 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(48, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
label$4: {
HEAP32[18848] = $2;
$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 32);
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 33);
$6 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 34);
$7 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 35);
$8 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 36);
$9 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 36);
$10 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 36);
$11 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 37);
$12 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 37);
$13 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 37);
$5 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 36);
$4 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 38);
HEAP32[$0 + 464 >> 2] = -1;
HEAP32[$0 + 456 >> 2] = 0;
HEAP32[$0 + 460 >> 2] = 0;
HEAP32[$0 + 452 >> 2] = $4;
HEAP32[$0 + 448 >> 2] = 12;
HEAP32[$0 + 444 >> 2] = $5;
HEAP32[$0 + 440 >> 2] = 11;
HEAP32[$0 + 436 >> 2] = $13;
HEAP32[$0 + 432 >> 2] = 10;
HEAP32[$0 + 428 >> 2] = $12;
HEAP32[$0 + 424 >> 2] = 9;
HEAP32[$0 + 420 >> 2] = $11;
HEAP32[$0 + 416 >> 2] = 8;
HEAP32[$0 + 412 >> 2] = $10;
HEAP32[$0 + 408 >> 2] = 7;
HEAP32[$0 + 404 >> 2] = $9;
HEAP32[$0 + 400 >> 2] = 6;
HEAP32[$0 + 396 >> 2] = $8;
HEAP32[$0 + 392 >> 2] = 5;
HEAP32[$0 + 388 >> 2] = $7;
HEAP32[$0 + 384 >> 2] = 4;
HEAP32[$0 + 380 >> 2] = $6;
HEAP32[$0 + 376 >> 2] = 3;
HEAP32[$0 + 372 >> 2] = $3;
HEAP32[$0 + 368 >> 2] = 2;
DynamicArrayP_char___setElements_28int_2c_20char__2c_20____29($2, 1, $1, $0 + 368 | 0);
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(54, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$4;
}
HEAP32[18850] = $2;
HEAP32[$0 + 272 >> 2] = 4;
HEAP32[$0 + 276 >> 2] = 6054;
HEAP32[$0 + 280 >> 2] = 5;
HEAP32[$0 + 284 >> 2] = 2361;
HEAP32[$0 + 288 >> 2] = 6;
HEAP32[$0 + 292 >> 2] = 2361;
HEAP32[$0 + 296 >> 2] = 7;
HEAP32[$0 + 300 >> 2] = 2361;
HEAP32[$0 + 304 >> 2] = 8;
HEAP32[$0 + 308 >> 2] = 2361;
HEAP32[$0 + 312 >> 2] = 9;
HEAP32[$0 + 316 >> 2] = 9027;
HEAP32[$0 + 320 >> 2] = 10;
HEAP32[$0 + 324 >> 2] = 9064;
HEAP32[$0 + 328 >> 2] = 11;
HEAP32[$0 + 332 >> 2] = 2361;
HEAP32[$0 + 336 >> 2] = 12;
HEAP32[$0 + 340 >> 2] = 2361;
HEAP32[$0 + 344 >> 2] = 0;
HEAP32[$0 + 348 >> 2] = 0;
HEAP32[$0 + 352 >> 2] = -1;
HEAP32[$0 + 256 >> 2] = 2;
HEAP32[$0 + 264 >> 2] = 3;
HEAP32[$0 + 260 >> 2] = 2361;
HEAP32[$0 + 268 >> 2] = 2361;
DynamicArrayP_char_20const___setElements_28int_2c_20char_20const__2c_20____29($2, 1, 2361, $0 + 256 | 0);
$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 46);
$2 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 47);
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 48);
$6 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 49);
$7 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 50);
$8 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 51);
$9 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 52);
$10 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 53);
$11 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 54);
$12 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 55);
$13 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 57);
$5 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 58);
HEAP32[$0 + 252 >> 2] = 0;
HEAP32[$0 + 248 >> 2] = $5;
HEAP32[$0 + 244 >> 2] = 12;
HEAP32[$0 + 240 >> 2] = $13;
HEAP32[$0 + 236 >> 2] = 11;
HEAP32[$0 + 232 >> 2] = $12;
HEAP32[$0 + 228 >> 2] = 10;
HEAP32[$0 + 224 >> 2] = $11;
HEAP32[$0 + 220 >> 2] = 9;
HEAP32[$0 + 216 >> 2] = $10;
HEAP32[$0 + 212 >> 2] = 8;
HEAP32[$0 + 208 >> 2] = $9;
HEAP32[$0 + 204 >> 2] = 7;
HEAP32[$0 + 200 >> 2] = $8;
HEAP32[$0 + 196 >> 2] = 6;
HEAP32[$0 + 192 >> 2] = $7;
HEAP32[$0 + 188 >> 2] = 5;
HEAP32[$0 + 184 >> 2] = $6;
HEAP32[$0 + 180 >> 2] = 4;
HEAP32[$0 + 176 >> 2] = $3;
HEAP32[$0 + 172 >> 2] = 3;
HEAP32[$0 + 168 >> 2] = $2;
HEAP32[$0 + 164 >> 2] = 2;
HEAP32[$0 + 160 >> 2] = $1;
wasm2js_i32$0 = 75404, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayA_28short_2c_20short_2c_20____29(0, 1, $0 + 160 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 32);
$2 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 33);
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 34);
$6 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 35);
$7 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 36);
$8 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 37);
$4 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 38);
HEAP32[$0 + 148 >> 2] = 0;
HEAP32[$0 + 144 >> 2] = $4;
HEAP32[$0 + 140 >> 2] = 7;
HEAP32[$0 + 136 >> 2] = $8;
HEAP32[$0 + 132 >> 2] = 6;
HEAP32[$0 + 128 >> 2] = $7;
HEAP32[$0 + 124 >> 2] = 5;
HEAP32[$0 + 120 >> 2] = $6;
HEAP32[$0 + 116 >> 2] = 4;
HEAP32[$0 + 112 >> 2] = $3;
HEAP32[$0 + 108 >> 2] = 3;
HEAP32[$0 + 104 >> 2] = $2;
HEAP32[$0 + 100 >> 2] = 2;
HEAP32[$0 + 96 >> 2] = $1;
wasm2js_i32$0 = 75396, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayA_28short_2c_20short_2c_20____29(0, 1, $0 + 96 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 16 >> 2] = 3;
HEAP32[$0 + 20 >> 2] = 49;
HEAP32[$0 + 24 >> 2] = 4;
HEAP32[$0 + 28 >> 2] = 50;
HEAP32[$0 + 32 >> 2] = 5;
HEAP32[$0 + 36 >> 2] = 51;
HEAP32[$0 + 40 >> 2] = 6;
HEAP32[$0 + 44 >> 2] = 52;
HEAP32[$0 + 48 >> 2] = 7;
HEAP32[$0 + 52 >> 2] = 53;
HEAP32[$0 + 56 >> 2] = 8;
HEAP32[$0 + 60 >> 2] = 54;
$5 = $0 - -64 | 0;
HEAP32[$5 >> 2] = 9;
HEAP32[$5 + 4 >> 2] = 55;
HEAP32[$0 + 72 >> 2] = 10;
HEAP32[$0 + 76 >> 2] = 57;
HEAP32[$0 + 80 >> 2] = 11;
HEAP32[$0 + 84 >> 2] = 58;
HEAP32[$0 + 88 >> 2] = 12;
HEAP32[$0 + 92 >> 2] = 0;
HEAP32[$0 >> 2] = 1;
HEAP32[$0 + 4 >> 2] = 47;
HEAP32[$0 + 8 >> 2] = 2;
HEAP32[$0 + 12 >> 2] = 48;
wasm2js_i32$0 = 75408, wasm2js_i32$1 = HashAny_int_2c_20int___makeHash_28int_2c_20int_2c_20____29(0, 46, $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18853] = $1;
HEAP32[HEAP32[18846] + 4 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18854] = $1;
HEAP32[HEAP32[18846] + 8 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18855] = $1;
HEAP32[HEAP32[18846] + 12 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18856] = $1;
HEAP32[HEAP32[18846] + 16 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18857] = $1;
HEAP32[HEAP32[18846] + 20 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18858] = $1;
HEAP32[HEAP32[18846] + 24 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18859] = $1;
HEAP32[HEAP32[18846] + 28 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18860] = $1;
HEAP32[HEAP32[18846] + 32 >> 2] = $1;
$1 = InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29(-1, 0, 0);
HEAP32[18861] = $1;
HEAP32[HEAP32[18846] + 48 >> 2] = $1;
__stack_pointer = $0 + 688 | 0;
return;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
} else {
HEAP32[HEAP32[18846] + ($4 << 2) >> 2] = 0;
$4 = $4 + 1 | 0;
continue;
}
}
function TorsoCurve__ForceOutside_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$3 = __stack_pointer - 608 | 0;
__stack_pointer = $3;
$9 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = $9;
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$6 = Vector__x_28_29_20const($2);
$9 = HEAPU8[67572];
$5 = HEAPF32[$0 + 124 >> 2];
label$1: {
if ($5 <= Math_fround($6 - $5)) {
if ($9 & 255) {
eprintf_28char_20const__2c_20____29(15518, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
$5 = HEAPF32[$0 + 104 >> 2];
$6 = HEAPF32[$0 + 100 >> 2];
$4 = HEAPF32[$0 + 124 >> 2];
$7 = HEAPF32[$0 + 128 >> 2];
$8 = Vector__z_28_29_20const(TorsoCurve__left_28_29_20const($0));
$10 = HEAPF32[$0 + 96 >> 2];
$11 = HEAPF32[$0 + 92 >> 2];
HEAPF64[$3 + 576 >> 3] = $8;
HEAPF64[$3 + 568 >> 3] = $6;
HEAPF64[$3 + 560 >> 3] = $5;
HEAPF64[$3 + 592 >> 3] = $10;
HEAPF64[$3 + 584 >> 3] = $11;
HEAPF64[$3 + 552 >> 3] = $7;
HEAPF64[$3 + 544 >> 3] = $4;
eprintf_28char_20const__2c_20____29(7799, $3 + 544 | 0);
}
$9 = $0 + 104 | 0;
$6 = Math_fround(Math_fround(Vector__z_28_29_20const($2) - HEAPF32[$0 + 128 >> 2]) - HEAPF32[$9 >> 2]);
$5 = Vector__x_28_29_20const($2);
$8 = HEAPF32[$0 + 124 >> 2];
$5 = Math_fround($5 - $8);
$8 = Vector__z_28_29_20const(TorsoCurve__left_28_29_20const($0));
$4 = HEAPF32[$0 + 72 >> 2];
$7 = Math_fround(Math_fround(Math_fround($8 - Math_fround(HEAPF32[$0 + 100 >> 2] / $4)) - HEAPF32[$0 + 128 >> 2]) - HEAPF32[$0 + 104 >> 2]);
$8 = Math_fround($6 - $7);
if (HEAPU8[67572]) {
HEAPF64[$3 + 536 >> 3] = $4;
HEAPF64[$3 + 528 >> 3] = $7;
HEAPF64[$3 + 520 >> 3] = $5;
HEAPF64[$3 + 512 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27144, $3 + 512 | 0);
$4 = HEAPF32[$0 + 72 >> 2];
}
if ($5 < Math_fround($8 * $4)) {
$9 = $0 + 92 | 0;
$4 = EllipseInfo__error_28float_2c_20float_29_20const($9, $5, Math_fround($6 + HEAPF32[$0 + 104 >> 2]));
if ($4 >= Math_fround(0)) {
$1 = 0;
if (!HEAPU8[67572]) {
break label$1;
}
HEAPF64[$3 + 400 >> 3] = $4;
eprintf_28char_20const__2c_20____29(26754, $3 + 400 | 0);
$4 = HEAPF32[$0 + 96 >> 2];
$7 = HEAPF32[$0 + 92 >> 2];
$8 = HEAPF32[$0 + 104 >> 2];
HEAPF64[$3 + 368 >> 3] = $6;
HEAPF64[$3 + 384 >> 3] = $4;
HEAPF64[$3 + 376 >> 3] = $8;
HEAPF64[$3 + 352 >> 3] = $5;
HEAPF64[$3 + 360 >> 3] = $7;
eprintf_28char_20const__2c_20____29(28128, $3 + 352 | 0);
break label$1;
}
$5 = Math_fround($5 / $8);
if (HEAPU8[67572]) {
$6 = HEAPF32[$0 + 72 >> 2];
HEAPF64[$3 + 344 >> 3] = $5;
HEAPF64[$3 + 336 >> 3] = $7;
HEAPF64[$3 + 320 >> 3] = $4;
HEAPF64[$3 + 328 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27263, $3 + 320 | 0);
}
HEAP32[$3 + 604 >> 2] = 0;
HEAP32[$3 + 600 >> 2] = 0;
$1 = IntersectLineEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29(HEAPF32[$0 + 92 >> 2], HEAPF32[$0 + 96 >> 2], $5, $7, $3 + 604 | 0, $3 + 600 | 0);
if ($1) {
Vector__set_x_28float_29($2, Math_fround(HEAPF32[$3 + 604 >> 2] + HEAPF32[$0 + 124 >> 2]));
Vector__set_z_28float_29($2, Math_fround(Math_fround(HEAPF32[$3 + 600 >> 2] + HEAPF32[$0 + 104 >> 2]) + HEAPF32[$0 + 128 >> 2]));
if (!HEAPU8[67572]) {
break label$1;
}
wasm2js_i32$0 = $3, wasm2js_f64$0 = +EllipseInfo__error_28float_2c_20float_29_20const($9, Vector__x_28_29_20const($2), Vector__z_28_29_20const($2)), 
HEAPF64[wasm2js_i32$0 + 304 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(26796, $3 + 304 | 0);
break label$1;
}
if (!HEAPU8[67572]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(30166, 0);
break label$1;
}
$5 = Vector__z_28_29_20const($2);
$6 = HEAPF32[$0 + 128 >> 2];
$4 = Vector__x_28_29_20const($2);
$7 = HEAPF32[$0 + 124 >> 2];
$8 = HEAPF32[$0 + 60 >> 2];
$5 = Math_fround($5 - $6);
$10 = sqr_28float_29($5);
$6 = Math_fround(Math_fround($4 - $7) - $8);
$4 = sqr_28float_29($6);
$7 = sqr_28float_29(HEAPF32[$0 - -64 >> 2]);
$9 = HEAPU8[67572];
$4 = Math_fround($10 + $4);
if ($7 <= $4) {
$1 = 0;
if (!($9 & 255)) {
break label$1;
}
$4 = sqrt_28float_29($4);
$7 = absREAL_28float_29(HEAPF32[$0 + 64 >> 2]);
HEAPF64[$3 + 496 >> 3] = $4;
HEAPF64[$3 + 504 >> 3] = $7;
HEAPF64[$3 + 488 >> 3] = $5;
HEAPF64[$3 + 480 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26885, $3 + 480 | 0);
break label$1;
}
if ($9 & 255) {
$7 = sqrt_28float_29($4);
$8 = HEAPF32[$0 + 64 >> 2];
HEAPF64[$3 + 464 >> 3] = $7;
HEAPF64[$3 + 472 >> 3] = $8;
HEAPF64[$3 + 456 >> 3] = $5;
HEAPF64[$3 + 448 >> 3] = $6;
eprintf_28char_20const__2c_20____29(15436, $3 + 448 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
}
$7 = HEAPF32[$0 + 64 >> 2];
$4 = sqrt_28float_29($4);
$8 = HEAPF32[$0 + 128 >> 2];
$4 = Math_fround($7 / $4);
$6 = Math_fround(Math_fround($6 * $4) + Math_fround(HEAPF32[$0 + 124 >> 2] + HEAPF32[$0 + 60 >> 2]));
Vector__set_x_28float_29($2, $6);
$5 = Math_fround($8 + Math_fround($5 * $4));
Vector__set_z_28float_29($2, $5);
$1 = 1;
if (!HEAPU8[67572]) {
break label$1;
}
wasm2js_i32$0 = $3, wasm2js_f64$0 = +CircleInfo__error_28float_2c_20float_29_20const($0 + 60 | 0, Vector__x_28_29_20const($2), Vector__z_28_29_20const($2)), 
HEAPF64[wasm2js_i32$0 + 432 >> 3] = wasm2js_f64$0;
HEAPF64[$3 + 424 >> 3] = $5;
HEAPF64[$3 + 416 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26664, $3 + 416 | 0);
break label$1;
}
if ($9 & 255) {
eprintf_28char_20const__2c_20____29(15501, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
$5 = HEAPF32[$0 + 120 >> 2];
$6 = HEAPF32[$0 + 116 >> 2];
$4 = HEAPF32[$0 + 124 >> 2];
$7 = HEAPF32[$0 + 132 >> 2];
$8 = Vector__z_28_29_20const(TorsoCurve__right_28_29_20const($0));
$10 = HEAPF32[$0 + 112 >> 2];
$11 = HEAPF32[$0 + 108 >> 2];
HEAPF64[$3 + 272 >> 3] = $8;
HEAPF64[$3 + 264 >> 3] = $6;
HEAPF64[$3 + 256 >> 3] = $5;
HEAPF64[$3 + 288 >> 3] = $10;
HEAPF64[$3 + 280 >> 3] = $11;
HEAPF64[$3 + 248 >> 3] = $7;
HEAPF64[$3 + 240 >> 3] = $4;
eprintf_28char_20const__2c_20____29(7724, $3 + 240 | 0);
}
$9 = $0 + 120 | 0;
$6 = Math_fround(Math_fround(Vector__z_28_29_20const($2) - HEAPF32[$0 + 132 >> 2]) - HEAPF32[$9 >> 2]);
$5 = Vector__x_28_29_20const($2);
$8 = HEAPF32[$0 + 124 >> 2];
$5 = Math_fround($5 - $8);
$8 = Vector__z_28_29_20const(TorsoCurve__right_28_29_20const($0));
$4 = HEAPF32[$0 + 88 >> 2];
$7 = Math_fround(Math_fround(Math_fround($8 - Math_fround(HEAPF32[$0 + 116 >> 2] / $4)) - HEAPF32[$0 + 132 >> 2]) - HEAPF32[$0 + 120 >> 2]);
$8 = Math_fround($6 - $7);
if (HEAPU8[67572]) {
HEAPF64[$3 + 232 >> 3] = $4;
HEAPF64[$3 + 224 >> 3] = $7;
HEAPF64[$3 + 216 >> 3] = $5;
HEAPF64[$3 + 208 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27092, $3 + 208 | 0);
$4 = HEAPF32[$0 + 88 >> 2];
}
if ($5 > Math_fround($8 * $4)) {
$9 = $0 + 108 | 0;
$4 = EllipseInfo__error_28float_2c_20float_29_20const($9, $5, Math_fround($6 + HEAPF32[$0 + 120 >> 2]));
if ($4 >= Math_fround(0)) {
$1 = 0;
if (!HEAPU8[67572]) {
break label$1;
}
HEAPF64[$3 + 96 >> 3] = $4;
eprintf_28char_20const__2c_20____29(26711, $3 + 96 | 0);
$4 = HEAPF32[$0 + 112 >> 2];
$7 = HEAPF32[$0 + 108 >> 2];
$8 = HEAPF32[$0 + 120 >> 2];
HEAPF64[$3 - -64 >> 3] = $6;
HEAPF64[$3 + 80 >> 3] = $4;
HEAPF64[$3 + 72 >> 3] = $8;
HEAPF64[$3 + 48 >> 3] = $5;
HEAPF64[$3 + 56 >> 3] = $7;
eprintf_28char_20const__2c_20____29(28077, $3 + 48 | 0);
break label$1;
}
$5 = Math_fround($5 / $8);
if (HEAPU8[67572]) {
$6 = HEAPF32[$0 + 88 >> 2];
HEAPF64[$3 + 40 >> 3] = $5;
HEAPF64[$3 + 32 >> 3] = $7;
HEAPF64[$3 + 16 >> 3] = $4;
HEAPF64[$3 + 24 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27195, $3 + 16 | 0);
}
HEAP32[$3 + 604 >> 2] = 0;
HEAP32[$3 + 600 >> 2] = 0;
$1 = IntersectLineEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29(HEAPF32[$0 + 108 >> 2], HEAPF32[$0 + 112 >> 2], $5, $7, $3 + 604 | 0, $3 + 600 | 0);
if ($1) {
Vector__set_x_28float_29($2, Math_fround(HEAPF32[$3 + 604 >> 2] + HEAPF32[$0 + 124 >> 2]));
Vector__set_z_28float_29($2, Math_fround(Math_fround(HEAPF32[$3 + 600 >> 2] + HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 132 >> 2]));
if (!HEAPU8[67572]) {
break label$1;
}
wasm2js_i32$0 = $3, wasm2js_f64$0 = +EllipseInfo__error_28float_2c_20float_29_20const($9, Vector__x_28_29_20const($2), Vector__z_28_29_20const($2)), 
HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(26796, $3);
break label$1;
}
if (!HEAPU8[67572]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(30092, 0);
break label$1;
}
$5 = Vector__z_28_29_20const($2);
$6 = HEAPF32[$0 + 132 >> 2];
$4 = Vector__x_28_29_20const($2);
$7 = HEAPF32[$0 + 124 >> 2];
$8 = HEAPF32[$0 + 76 >> 2];
$5 = Math_fround($5 - $6);
$10 = sqr_28float_29($5);
$6 = Math_fround(Math_fround($4 - $7) - $8);
$4 = sqr_28float_29($6);
$7 = sqr_28float_29(HEAPF32[$0 + 80 >> 2]);
$9 = HEAPU8[67572];
$4 = Math_fround($10 + $4);
if ($7 <= $4) {
$1 = 0;
if (!($9 & 255)) {
break label$1;
}
$4 = sqrt_28float_29($4);
$7 = absREAL_28float_29(HEAPF32[$0 + 80 >> 2]);
HEAPF64[$3 + 192 >> 3] = $4;
HEAPF64[$3 + 200 >> 3] = $7;
HEAPF64[$3 + 184 >> 3] = $5;
HEAPF64[$3 + 176 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26819, $3 + 176 | 0);
break label$1;
}
if ($9 & 255) {
$7 = sqrt_28float_29($4);
$8 = HEAPF32[$0 + 80 >> 2];
HEAPF64[$3 + 160 >> 3] = $7;
HEAPF64[$3 + 168 >> 3] = $8;
HEAPF64[$3 + 152 >> 3] = $5;
HEAPF64[$3 + 144 >> 3] = $6;
eprintf_28char_20const__2c_20____29(15370, $3 + 144 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
}
$7 = HEAPF32[$0 + 80 >> 2];
$4 = sqrt_28float_29($4);
$8 = HEAPF32[$0 + 132 >> 2];
$4 = Math_fround(Math_fround(-$7) / $4);
$6 = Math_fround(Math_fround($6 * $4) + Math_fround(HEAPF32[$0 + 124 >> 2] + HEAPF32[$0 + 76 >> 2]));
Vector__set_x_28float_29($2, $6);
$5 = Math_fround($8 + Math_fround($5 * $4));
Vector__set_z_28float_29($2, $5);
$1 = 1;
if (!HEAPU8[67572]) {
break label$1;
}
wasm2js_i32$0 = $3, wasm2js_f64$0 = +CircleInfo__error_28float_2c_20float_29_20const($0 + 76 | 0, Vector__x_28_29_20const($2), Vector__z_28_29_20const($2)), 
HEAPF64[wasm2js_i32$0 + 128 >> 3] = wasm2js_f64$0;
HEAPF64[$3 + 120 >> 3] = $5;
HEAPF64[$3 + 112 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26664, $3 + 112 | 0);
}
__stack_pointer = $3 + 608 | 0;
return $1;
}
function handle_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20XMLCell__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 144 | 0;
__stack_pointer = $3;
if ($2) {
$8 = HEAP32[$2 + 8 >> 2];
$4 = HEAP32[$2 + 4 >> 2];
}
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 4192, $3 + 143 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 2661, $3 + 142 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 6599, $3 + 141 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 6615, $3 + 140 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 6607, $3 + 139 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 8954, $3 + 138 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 9909, $3 + 137 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 4596, $3 + 136 | 0, 0);
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($4, 10537, $3 + 135 | 0, 1);
label$2: {
if (!(HEAPU8[$3 + 139 | 0] | (HEAPU8[$3 + 141 | 0] | HEAPU8[$3 + 140 | 0]))) {
if (!HEAPU8[$3 + 138 | 0]) {
break label$2;
}
}
HEAP8[$3 + 143 | 0] = 1;
}
$4 = 0;
label$4: {
if (!$8 | !HEAP32[$8 + 12 >> 2]) {
break label$4;
}
$4 = 5;
if (HEAPU8[$3 + 143 | 0]) {
break label$4;
}
$4 = whichHands_28XMLCell__29($2);
}
$2 = HEAPU8[$3 + 142 | 0];
$5 = ($4 | 0) == 1 ? $2 ? 2 : 1 : $4;
label$5: {
if (!$2) {
break label$5;
}
if (HEAPU8[$3 + 143 | 0]) {
LogTime_28_29();
HEAP32[$3 + 96 >> 2] = $0;
eprintf_28char_20const__2c_20____29(37058, $3 + 96 | 0);
BadSiGML_28_29();
HEAP8[$3 + 142 | 0] = 0;
break label$5;
}
if (($5 | 0) != 5) {
break label$5;
}
LogTime_28_29();
HEAP32[$3 + 80 >> 2] = $0;
eprintf_28char_20const__2c_20____29(34679, $3 + 80 | 0);
BadSiGML_28_29();
HEAP8[$3 + 142 | 0] = 0;
}
$9 = ($5 | 0) != 5;
if (!($9 | !HEAPU8[$3 + 136 | 0])) {
LogTime_28_29();
HEAP32[$3 + 64 >> 2] = $0;
eprintf_28char_20const__2c_20____29(34770, $3 - -64 | 0);
HEAP8[$3 + 136 | 0] = 0;
}
$2 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
$4 = HEAPU8[$3 + 135 | 0];
$4 = invoke_iiiii(360, $2 | 0, $0 | 0, $1 | 0, $4 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
label$9: {
HEAP8[$4 + 13 | 0] = HEAPU8[$3 + 143 | 0] | HEAPU8[$4 + 13 | 0] & 254;
$2 = HaveDomHand_28SET_OF_HANDS_29($5);
HEAP8[$4 + 13 | 0] = HEAPU8[$4 + 13 | 0] & 251 | ($2 ? 4 : 0);
$2 = HaveNondomHand_28SET_OF_HANDS_29($5);
HEAP8[$4 + 13 | 0] = HEAPU8[$4 + 13 | 0] & 247 | ($2 ? 8 : 0);
$2 = HEAP8[$3 + 141 | 0] & 1;
wasm2js_i32$0 = $4, wasm2js_i32$1 = HEAPU8[Mirroring__Mirroring_28short_2c_20short_2c_20short_2c_20short_29($3 + 128 | 0, !$2 & HEAPU8[$3 + 143 | 0] != 0, $2, HEAPU8[$3 + 140 | 0], HEAPU8[$3 + 139 | 0]) | 0], 
HEAP8[wasm2js_i32$0 + 14 | 0] = wasm2js_i32$1;
HEAP8[$4 + 13 | 0] = HEAPU8[$4 + 13 | 0] & 207 | HEAPU8[$3 + 138 | 0] << 4 | HEAPU8[$3 + 137 | 0] << 5;
label$10: {
if (HEAPU8[$3 + 136 | 0]) {
break label$10;
}
if (!HaveDomHand_28SET_OF_HANDS_29($5)) {
SetUnusedHand_28Gesture__2c_20bool_29($4, 1);
}
if (HaveNondomHand_28SET_OF_HANDS_29($5)) {
break label$10;
}
SetUnusedHand_28Gesture__2c_20bool_29($4, 0);
}
$6 = 0;
$10 = StaticGestureFromXML_28Gesture__2c_20DynamicArrayP_XMLCell___2c_20int_29($4, $8, 0);
$6 = $8 ? HEAP32[$8 + 12 >> 2] - $10 & 65535 : $6;
$7 = HEAPU8[$4 + 13 | 0] & 64;
$11 = $7 ? ($5 | 0) == 1 : ($5 | 0) == 2;
label$13: {
if (!$5) {
$0 = 0;
if (HEAPU8[$3 + 136 | 0]) {
break label$13;
}
$2 = operator_20new_28unsigned_20long_29(536);
$1 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29(1, ($7 | 0) != 0);
HEAP32[19359] = 0;
$1 = invoke_iiii(376, $2 | 0, $1 | 0, $4 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
label$15: {
if (($7 | 0) != 1) {
BasicMovement__setManner_28Manner_29($1, 1);
$2 = operator_20new_28unsigned_20long_29(536);
$7 = HEAPU8[$4 + 13 | 0];
$7 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29(2, ($7 & 64) >>> 6 | 0);
HEAP32[19359] = 0;
$7 = invoke_iiii(376, $2 | 0, $7 | 0, $4 | 0) | 0;
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$15;
}
BasicMovement__setManner_28Manner_29($7, 1);
$0 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($1, $7, (HEAPU8[$4 + 13 | 0] & 64) >>> 6 | 0);
break label$13;
}
break label$9;
}
break label$9;
}
$2 = operator_20new_28unsigned_20long_29(536);
$0 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29($5, ($7 | 0) != 0);
HEAP32[19359] = 0;
$0 = invoke_iiii(376, $2 | 0, $0 | 0, $4 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$9;
}
BasicMovement__setManner_28Manner_29($0, $6 ? 1 : 3);
if (!(!HEAPU8[$3 + 136 | 0] & $9)) {
break label$13;
}
$2 = operator_20new_28unsigned_20long_29(536);
$7 = HEAPU8[$4 + 13 | 0];
$7 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29(($5 | 0) == 1 ? 2 : 1, ($7 & 64) >>> 6 | 0);
HEAP32[19359] = 0;
$7 = invoke_iiii(376, $2 | 0, $7 | 0, $4 | 0) | 0;
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) == 1) {
break label$9;
}
BasicMovement__setManner_28Manner_29($7, 1);
$0 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($0, $7, $11);
}
CompletePosture_28Gesture__29($4);
label$17: {
if (!$6) {
if (!HEAPU8[$3 + 136 | 0]) {
$5 = $0;
break label$17;
}
if (!($5 ? ($5 | 0) != 5 : 0)) {
$2 = operator_20new_28unsigned_20long_29(528);
HEAP32[19359] = 0;
$5 = invoke_iii(377, $2 | 0, 5) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
break label$17;
}
break label$9;
}
$2 = operator_20new_28unsigned_20long_29(528);
$6 = HEAPU8[$4 + 13 | 0];
$5 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29(($5 | 0) == 1 ? 2 : 1, ($6 & 64) >>> 6 | 0);
HEAP32[19359] = 0;
$6 = invoke_iii(377, $2 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$5 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($0, $6, $11);
break label$17;
}
break label$9;
}
$2 = operator_20new_28unsigned_20long_29(580);
if (($5 | 0) == 5) {
HEAP32[19359] = 0;
$5 = invoke_iii(378, $2 | 0, 5) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
CompoundMovement__addComponent_28BasicMovement__29($5, $0);
HEAP32[$4 + 44 >> 2] = $5;
$2 = HaveDomHand_28SET_OF_HANDS_29(5);
$6 = HaveNondomHand_28SET_OF_HANDS_29(5);
$0 = HEAPU16[$4 + 14 >> 1];
HEAP16[$3 + 14 >> 1] = $0;
HEAP16[$3 + 120 >> 1] = $0;
AddMovementsFromXML_28Gesture_20const__2c_20SeqMovement__2c_20DynamicArrayP_XMLCell___2c_20int_2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($4, $5, $8, $10, $2, $6, $3 + 14 | 0, 0);
break label$17;
}
break label$9;
}
$6 = HEAPU8[$4 + 13 | 0];
$6 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29($5, ($6 & 64) >>> 6 | 0);
HEAP32[19359] = 0;
$6 = invoke_iii(378, $2 | 0, $6 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$9;
}
$2 = HaveDomHand_28SET_OF_HANDS_29($5);
$1 = HaveNondomHand_28SET_OF_HANDS_29($5);
$7 = HEAPU16[$4 + 14 >> 1];
HEAP16[$3 + 62 >> 1] = $7;
HEAP16[$3 + 112 >> 1] = $7;
AddMovementsFromXML_28Gesture_20const__2c_20SeqMovement__2c_20DynamicArrayP_XMLCell___2c_20int_2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($4, $6, $8, $10, $2, $1, $3 + 62 | 0, 0);
label$24: {
if (HEAP32[$6 + 540 >> 2] != 1) {
$1 = $6;
break label$24;
}
$8 = $6 + 528 | 0;
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($8, 0);
if (HEAPU8[67565]) {
$12 = HEAPF32[$1 + 52 >> 2];
HEAPF64[$3 + 40 >> 3] = HEAPF32[$6 + 52 >> 2];
HEAPF64[$3 + 32 >> 3] = $12;
eprintf_28char_20const__2c_20____29(27755, $3 + 32 | 0);
}
BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($1, $6);
if (HEAPU8[67565]) {
HEAPF64[$3 + 16 >> 3] = HEAPF32[$1 + 52 >> 2];
eprintf_28char_20const__2c_20____29(27715, $3 + 16 | 0);
}
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($8, 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 4 >> 2]]($6);
}
$2 = operator_20new_28unsigned_20long_29(528);
$6 = HEAPU8[$4 + 13 | 0];
$5 = AbsoluteHand_28SET_OF_HANDS_2c_20bool_29(($5 | 0) == 1 ? 2 : 1, ($6 & 64) >>> 6 | 0);
HEAP32[19359] = 0;
$6 = invoke_iii(377, $2 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$28: {
if (($5 | 0) != 1) {
if (!HEAPU8[$3 + 136 | 0]) {
break label$28;
}
$2 = operator_20new_28unsigned_20long_29(580);
HEAP32[19359] = 0;
$8 = invoke_iii(378, $2 | 0, 5) | 0;
$10 = HEAP32[19359];
HEAP32[19359] = 0;
if (($10 | 0) == 1) {
break label$9;
}
CompoundMovement__addComponent_28BasicMovement__29($8, $0);
CompoundMovement__addComponent_28BasicMovement__29($8, $1);
$5 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($8, $6, $11);
break label$17;
}
break label$9;
}
$1 = MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($1, $6, $11);
$2 = operator_20new_28unsigned_20long_29(580);
HEAP32[19359] = 0;
$5 = invoke_iii(378, $2 | 0, 5) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$9;
}
CompoundMovement__addComponent_28BasicMovement__29($5, $0);
CompoundMovement__addComponent_28BasicMovement__29($5, $1);
}
HEAP32[$4 + 44 >> 2] = $5;
Gesture__PostProcess_28_29($4);
__stack_pointer = $3 + 144 | 0;
return $4;
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($3 | 0);
abort();
}
function __intscan($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$16 = __stack_pointer - 16 | 0;
__stack_pointer = $16;
label$1: {
if (!(($1 | 0) != 1 & $1 >>> 0 <= 36)) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$3 = 0;
$4 = 0;
break label$1;
}
while (1) {
$5 = HEAP32[$0 + 4 >> 2];
label$4: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$4;
}
$5 = __shgetc($0);
}
if (isspace($5)) {
continue;
}
break;
}
label$6: {
label$7: {
switch ($5 - 43 | 0) {
case 0:
case 2:
break label$7;
default:
break label$6;
}
}
$17 = ($5 | 0) == 45 ? -1 : 0;
$5 = HEAP32[$0 + 4 >> 2];
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$6;
}
$5 = __shgetc($0);
}
label$9: {
label$10: {
label$11: {
label$12: {
if (!(($1 | 0) != 0 & ($1 | 0) != 16 | ($5 | 0) != 48)) {
$5 = HEAP32[$0 + 4 >> 2];
label$14: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$14;
}
$5 = __shgetc($0);
}
if (($5 & -33) == 88) {
$1 = 16;
$5 = HEAP32[$0 + 4 >> 2];
label$17: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$17;
}
$5 = __shgetc($0);
}
if (HEAPU8[$5 + 55489 | 0] < 16) {
break label$11;
}
$3 = 0;
$4 = 0;
$8 = HEAP32[$0 + 112 >> 2];
$5 = HEAP32[$0 + 116 >> 2];
label$19: {
if (($5 | 0) > 0 | ($5 | 0) >= 0) {
$5 = HEAP32[$0 + 4 >> 2];
HEAP32[$0 + 4 >> 2] = $5 - 1;
if (!$2) {
break label$19;
}
HEAP32[$0 + 4 >> 2] = $5 - 2;
break label$1;
}
if ($2) {
break label$1;
}
}
__shlim($0, 0, 0);
break label$1;
}
if ($1) {
break label$12;
}
$1 = 8;
break label$11;
}
$1 = $1 ? $1 : 10;
if ($1 >>> 0 > HEAPU8[$5 + 55489 | 0]) {
break label$12;
}
$3 = 0;
$4 = 0;
$9 = HEAP32[$0 + 112 >> 2];
$5 = HEAP32[$0 + 116 >> 2];
if (($5 | 0) > 0 | ($5 | 0) >= 0) {
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
}
__shlim($0, 0, 0);
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$1;
}
if (($1 | 0) != 10) {
break label$11;
}
$2 = $5 - 48 | 0;
if ($2 >>> 0 <= 9) {
$1 = 0;
while (1) {
$1 = Math_imul($1, 10);
$1 = $2 + $1 | 0;
$6 = $1 >>> 0 < 429496729;
$5 = HEAP32[$0 + 4 >> 2];
label$24: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$24;
}
$5 = __shgetc($0);
}
$2 = $5 - 48 | 0;
if ($6 & $2 >>> 0 <= 9) {
continue;
}
break;
}
$11 = $1;
}
label$26: {
if ($2 >>> 0 > 9) {
break label$26;
}
$5 = __wasm_i64_mul($11, 0, 10, 0);
$13 = $5;
$6 = i64toi32_i32$HIGH_BITS;
$1 = $6;
$14 = $2;
while (1) {
$5 = HEAP32[$0 + 4 >> 2];
label$28: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$28;
}
$5 = __shgetc($0);
}
$2 = $5 - 48 | 0;
$8 = $13;
$9 = $14;
$10 = $8 + $9 | 0;
$6 = $1;
$7 = $6;
$7 = $9 >>> 0 > $10 >>> 0 ? $7 + 1 | 0 : $7;
$11 = $10;
$12 = $7;
$6 = $10;
if (($7 | 0) == 429496729 & $6 >>> 0 >= 2576980378 | $7 >>> 0 > 429496729 | $2 >>> 0 > 9) {
break label$26;
}
$6 = $12;
$7 = __wasm_i64_mul($11, $6, 10, 0);
$13 = $7;
$14 = $2;
$6 = i64toi32_i32$HIGH_BITS;
$1 = $6;
$7 = $6;
$8 = $2 ^ -1;
$6 = $13;
if (($7 | 0) == -1 & $8 >>> 0 >= $6 >>> 0 | ($7 | 0) != -1) {
continue;
}
break;
}
$1 = 10;
break label$10;
}
$1 = 10;
if ($2 >>> 0 <= 9) {
break label$10;
}
break label$9;
}
if ($1 - 1 & $1) {
$8 = HEAPU8[$5 + 55489 | 0];
if ($8 >>> 0 < $1 >>> 0) {
$2 = 0;
while (1) {
$2 = Math_imul($1, $2);
$2 = $8 + $2 | 0;
$5 = HEAP32[$0 + 4 >> 2];
label$33: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$33;
}
$5 = __shgetc($0);
}
$8 = HEAPU8[$5 + 55489 | 0];
if ($8 >>> 0 < $1 >>> 0 & $2 >>> 0 < 119304647) {
continue;
}
break;
}
$11 = $2;
}
if ($1 >>> 0 <= $8 >>> 0) {
break label$10;
}
$13 = $1;
while (1) {
$6 = $12;
$7 = __wasm_i64_mul($11, $6, $13, 0);
$14 = $7;
$6 = i64toi32_i32$HIGH_BITS;
$2 = $6;
$15 = $8 & 255;
$6 = $15;
$9 = $6 ^ -1;
$8 = $2;
if (($8 | 0) == -1 & $9 >>> 0 < $7 >>> 0) {
break label$10;
}
$7 = $2;
$9 = $14;
$6 = $15;
$5 = $9 + $6 | 0;
$10 = $5 >>> 0 < $6 >>> 0 ? $7 + 1 | 0 : $7;
$11 = $5;
$12 = $10;
$5 = HEAP32[$0 + 4 >> 2];
label$36: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$36;
}
$5 = __shgetc($0);
}
$8 = HEAPU8[$5 + 55489 | 0];
if ($1 >>> 0 <= $8 >>> 0) {
break label$10;
}
$7 = $12;
__multi3($16, $13, 0, 0, 0, $11, $7, 0, 0);
$9 = $16;
$6 = HEAP32[$9 + 8 >> 2];
$7 = HEAP32[$9 + 12 >> 2];
if (!($6 | $7)) {
continue;
}
break;
}
break label$10;
}
$14 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 55745 | 0];
$2 = HEAPU8[$5 + 55489 | 0];
if ($2 >>> 0 < $1 >>> 0) {
while (1) {
$8 = $8 << $14;
$8 = $8 | $2;
$5 = HEAP32[$0 + 4 >> 2];
label$40: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$40;
}
$5 = __shgetc($0);
}
$2 = HEAPU8[$5 + 55489 | 0];
if ($2 >>> 0 < $1 >>> 0 & $8 >>> 0 < 134217728) {
continue;
}
break;
}
$11 = $8;
}
if ($1 >>> 0 <= $2 >>> 0) {
break label$10;
}
$10 = $14;
$8 = $10 & 31;
if (($10 & 63) >>> 0 >= 32) {
$15 = -1 >>> $8 | 0;
} else {
$6 = -1 >>> $8 | 0;
$15 = (1 << $8) - 1 << 32 - $8 | -1 >>> $8;
}
$18 = $6;
$10 = $11;
$7 = $15;
if (!$6 & $10 >>> 0 > $7 >>> 0) {
break label$10;
}
while (1) {
$7 = $12;
$10 = $11;
$9 = $14;
$8 = $9 & 31;
if (($9 & 63) >>> 0 >= 32) {
$6 = $10 << $8;
$11 = 0;
} else {
$6 = (1 << $8) - 1 & $10 >>> 32 - $8 | $7 << $8;
$11 = $10 << $8;
}
$12 = $6;
$7 = $2;
$13 = $7 & 255;
$9 = $13;
$6 = $11;
$11 = $9 | $6;
$10 = $12;
$5 = HEAP32[$0 + 4 >> 2];
label$43: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$43;
}
$5 = __shgetc($0);
}
$2 = HEAPU8[$5 + 55489 | 0];
if ($1 >>> 0 <= $2 >>> 0) {
break label$10;
}
$6 = $18;
$7 = $12;
$9 = $15;
$10 = $11;
if (($6 | 0) == ($7 | 0) & $9 >>> 0 >= $10 >>> 0 | $6 >>> 0 > $7 >>> 0) {
continue;
}
break;
}
}
if (HEAPU8[$5 + 55489 | 0] >= $1 >>> 0) {
break label$9;
}
while (1) {
$5 = HEAP32[$0 + 4 >> 2];
label$46: {
if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
$5 = HEAPU8[$5 | 0];
break label$46;
}
$5 = __shgetc($0);
}
if (HEAPU8[$5 + 55489 | 0] < $1 >>> 0) {
continue;
}
break;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$7 = 0;
$9 = $3;
$17 = $7 | $9 & 1 ? 0 : $17;
$11 = $9;
$10 = $4;
$7 = $10;
$12 = $7;
}
$7 = HEAP32[$0 + 112 >> 2];
$9 = HEAP32[$0 + 116 >> 2];
if (($9 | 0) > 0 | ($9 | 0) >= 0) {
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
}
label$49: {
$9 = $12;
$10 = $4;
$6 = $3;
$7 = $11;
if (($9 | 0) == ($10 | 0) & $6 >>> 0 > $7 >>> 0 | $10 >>> 0 > $9 >>> 0) {
break label$49;
}
if (!($3 & 1 | $17)) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$7 = $3;
$8 = $7 - 1 | 0;
$3 = $8;
$5 = !$7;
$5 = $4 - $5 | 0;
$4 = $5;
break label$1;
}
$5 = $4;
$7 = $12;
$9 = $11;
$6 = $3;
if (($5 | 0) == ($7 | 0) & $9 >>> 0 <= $6 >>> 0 | $5 >>> 0 > $7 >>> 0) {
break label$49;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$1;
}
$5 = $17;
$6 = $5 >> 31;
$3 = $5;
$4 = $6;
$5 = $6;
$6 = $12;
$5 = $5 ^ $6;
$9 = $11;
$7 = $3;
$6 = $9 ^ $7;
$10 = $6 - $7 | 0;
$3 = $10;
$9 = $4;
$8 = $9 + ($6 >>> 0 < $7 >>> 0) | 0;
$8 = $5 - $8 | 0;
$4 = $8;
}
__stack_pointer = $16 + 16 | 0;
$8 = $4;
i64toi32_i32$HIGH_BITS = $8;
$6 = $3;
return $6;
}
function little2_scanAtts($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
while (1) {
HEAP32[$8 + 12 >> 2] = $1;
$6 = -1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$7 = HEAPU8[$1 + 1 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 5 | 0) {
case 9:
break label$11;
case 4:
case 5:
case 16:
break label$12;
case 2:
break label$13;
case 1:
break label$14;
case 0:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$16;
case 24:
break label$17;
default:
break label$2;
}
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$7 + 51504 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$2;
}
}
$1 = $1 + 2 | 0;
continue;
}
$6 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$5;
}
$5 = HEAPU8[$4 + 2 | 0];
label$21: {
label$22: {
$4 = HEAPU8[$4 + 3 | 0];
if ($4) {
$4 = unicode_byte_type($4 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 9 | 0) {
case 5:
break label$11;
case 0:
case 1:
continue;
case 2:
case 3:
case 4:
break label$21;
default:
break label$22;
}
}
if (($4 | 0) == 21) {
continue;
}
}
break;
}
HEAP32[$8 + 12 >> 2] = $1;
break label$2;
}
label$25: {
while (1) {
$5 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $5;
if (($2 | 0) == ($5 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 2 | 0];
$7 = HEAPU8[$1 + 3 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
if (($4 & -2) == 12) {
break label$25;
}
if ($4 >>> 0 <= 21) {
$1 = $5;
if (1 << $4 & 2098688) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $5;
$6 = 0;
break label$1;
}
$1 = $1 + 4 | 0;
label$30: while (1) {
HEAP32[$8 + 12 >> 2] = $1;
label$31: {
label$32: {
label$33: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 | 0];
$7 = HEAPU8[$1 + 1 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if (($5 | 0) == ($4 | 0)) {
break label$31;
}
label$37: {
switch ($5 | 0) {
case 5:
if (($2 - $1 | 0) >= 2) {
break label$32;
}
break label$3;
case 6:
if (($2 - $1 | 0) < 3) {
break label$3;
}
$1 = $1 + 3 | 0;
continue label$30;
case 7:
if (($2 - $1 | 0) < 4) {
break label$3;
}
$1 = $1 + 4 | 0;
continue label$30;
case 0:
case 1:
case 2:
case 8:
break label$33;
case 3:
break label$37;
default:
break label$32;
}
}
$1 = little2_scanRef($0, $1 + 2 | 0, $2, $8 + 12 | 0);
if (($1 | 0) > 0) {
$1 = HEAP32[$8 + 12 >> 2];
continue;
}
break;
}
$6 = $1;
if ($1) {
break label$1;
}
HEAP32[$3 >> 2] = HEAP32[$8 + 12 >> 2];
$6 = 0;
break label$1;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
break label$1;
}
$1 = $1 + 2 | 0;
continue;
}
break;
}
$4 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $4;
if (($2 | 0) == ($4 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 2 | 0];
label$42: {
label$43: {
$7 = HEAPU8[$1 + 3 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 9 | 0) {
case 3:
case 4:
case 5:
case 6:
case 7:
break label$4;
case 0:
case 1:
break label$42;
case 8:
break label$6;
case 2:
break label$7;
default:
break label$43;
}
}
if (($5 | 0) != 21) {
break label$4;
}
}
label$46: {
label$47: {
while (1) {
$1 = $4;
$4 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $4;
if (($2 | 0) == ($4 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 2 | 0];
label$49: {
$9 = HEAPU8[$1 + 3 | 0];
if ($9) {
$7 = unicode_byte_type($9 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 0:
break label$46;
case 17:
case 19:
break label$47;
case 4:
case 5:
case 16:
continue;
case 24:
break label$49;
case 12:
break label$6;
case 6:
break label$7;
case 2:
break label$8;
case 1:
break label$9;
default:
break label$4;
}
}
break;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$9 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$4;
}
}
$1 = $1 + 4 | 0;
continue;
}
break;
}
$6 = -2;
if (($2 - $4 | 0) >= 2) {
break label$4;
}
break label$1;
}
$6 = -2;
if (($2 - $4 | 0) >= 3) {
break label$4;
}
break label$1;
}
$6 = -2;
if (($2 - $4 | 0) >= 4) {
break label$4;
}
break label$1;
}
HEAP32[$3 >> 2] = $1 + 4;
$6 = 1;
break label$1;
}
$1 = $4 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
if (!(!HEAPU8[$4 + 3 | 0] & HEAPU8[$1 | 0] == 62)) {
HEAP32[$3 >> 2] = $1;
$6 = 0;
break label$1;
}
HEAP32[$3 >> 2] = $4 + 4;
$6 = 3;
break label$1;
}
HEAP32[$8 + 12 >> 2] = $2;
break label$1;
}
HEAP32[$3 >> 2] = $4;
$6 = 0;
break label$1;
}
$6 = -2;
break label$1;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
__stack_pointer = $8 + 16 | 0;
return $6;
}
function big2_scanAtts($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
while (1) {
HEAP32[$8 + 12 >> 2] = $1;
$6 = -1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$7 = HEAPU8[$1 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 5 | 0) {
case 9:
break label$11;
case 4:
case 5:
case 16:
break label$12;
case 2:
break label$13;
case 1:
break label$14;
case 0:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$16;
case 24:
break label$17;
default:
break label$2;
}
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$7 + 51504 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$2;
}
}
$1 = $1 + 2 | 0;
continue;
}
$6 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$5;
}
$5 = HEAPU8[$4 + 3 | 0];
label$21: {
label$22: {
$4 = HEAPU8[$4 + 2 | 0];
if ($4) {
$4 = unicode_byte_type($4 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 9 | 0) {
case 5:
break label$11;
case 0:
case 1:
continue;
case 2:
case 3:
case 4:
break label$21;
default:
break label$22;
}
}
if (($4 | 0) == 21) {
continue;
}
}
break;
}
HEAP32[$8 + 12 >> 2] = $1;
break label$2;
}
label$25: {
while (1) {
$5 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $5;
if (($2 | 0) == ($5 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 3 | 0];
$7 = HEAPU8[$1 + 2 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
if (($4 & -2) == 12) {
break label$25;
}
if ($4 >>> 0 <= 21) {
$1 = $5;
if (1 << $4 & 2098688) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $5;
$6 = 0;
break label$1;
}
$1 = $1 + 4 | 0;
label$30: while (1) {
HEAP32[$8 + 12 >> 2] = $1;
label$31: {
label$32: {
label$33: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 1 | 0];
$7 = HEAPU8[$1 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if (($5 | 0) == ($4 | 0)) {
break label$31;
}
label$37: {
switch ($5 | 0) {
case 5:
if (($2 - $1 | 0) >= 2) {
break label$32;
}
break label$3;
case 6:
if (($2 - $1 | 0) < 3) {
break label$3;
}
$1 = $1 + 3 | 0;
continue label$30;
case 7:
if (($2 - $1 | 0) < 4) {
break label$3;
}
$1 = $1 + 4 | 0;
continue label$30;
case 0:
case 1:
case 2:
case 8:
break label$33;
case 3:
break label$37;
default:
break label$32;
}
}
$1 = big2_scanRef($0, $1 + 2 | 0, $2, $8 + 12 | 0);
if (($1 | 0) > 0) {
$1 = HEAP32[$8 + 12 >> 2];
continue;
}
break;
}
$6 = $1;
if ($1) {
break label$1;
}
HEAP32[$3 >> 2] = HEAP32[$8 + 12 >> 2];
$6 = 0;
break label$1;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
break label$1;
}
$1 = $1 + 2 | 0;
continue;
}
break;
}
$4 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $4;
if (($2 | 0) == ($4 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 3 | 0];
label$42: {
label$43: {
$7 = HEAPU8[$1 + 2 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 9 | 0) {
case 3:
case 4:
case 5:
case 6:
case 7:
break label$4;
case 0:
case 1:
break label$42;
case 8:
break label$6;
case 2:
break label$7;
default:
break label$43;
}
}
if (($5 | 0) != 21) {
break label$4;
}
}
label$46: {
label$47: {
while (1) {
$1 = $4;
$4 = $1 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $4;
if (($2 | 0) == ($4 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 3 | 0];
label$49: {
$9 = HEAPU8[$1 + 2 | 0];
if ($9) {
$7 = unicode_byte_type($9 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 0:
break label$46;
case 17:
case 19:
break label$47;
case 4:
case 5:
case 16:
continue;
case 24:
break label$49;
case 12:
break label$6;
case 6:
break label$7;
case 2:
break label$8;
case 1:
break label$9;
default:
break label$4;
}
}
break;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$9 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$4;
}
}
$1 = $1 + 4 | 0;
continue;
}
break;
}
$6 = -2;
if (($2 - $4 | 0) >= 2) {
break label$4;
}
break label$1;
}
$6 = -2;
if (($2 - $4 | 0) >= 3) {
break label$4;
}
break label$1;
}
$6 = -2;
if (($2 - $4 | 0) >= 4) {
break label$4;
}
break label$1;
}
HEAP32[$3 >> 2] = $1 + 4;
$6 = 1;
break label$1;
}
$1 = $4 + 2 | 0;
HEAP32[$8 + 12 >> 2] = $1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
if (!(!HEAPU8[$1 | 0] & HEAPU8[$4 + 3 | 0] == 62)) {
HEAP32[$3 >> 2] = $1;
$6 = 0;
break label$1;
}
HEAP32[$3 >> 2] = $4 + 4;
$6 = 3;
break label$1;
}
HEAP32[$8 + 12 >> 2] = $2;
break label$1;
}
HEAP32[$3 >> 2] = $4;
$6 = 0;
break label$1;
}
$6 = -2;
break label$1;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
__stack_pointer = $8 + 16 | 0;
return $6;
}
function __rem_pio2_large($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
$8 = __stack_pointer - 560 | 0;
__stack_pointer = $8;
$7 = ($2 - 3 | 0) / 24 | 0;
$18 = ($7 | 0) > 0 ? $7 : 0;
$12 = Math_imul($18, -24) + $2 | 0;
$14 = HEAP32[($4 << 2) + 51920 >> 2];
$15 = $3 - 1 | 0;
if (($14 + $15 | 0) >= 0) {
$6 = $3 + $14 | 0;
$2 = $18 - $15 | 0;
$7 = 0;
while (1) {
$5 = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 51936 >> 2];
HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = $5;
$2 = $2 + 1 | 0;
$7 = $7 + 1 | 0;
if (($7 | 0) != ($6 | 0)) {
continue;
}
break;
}
}
$17 = $12 - 24 | 0;
$6 = 0;
$10 = ($14 | 0) > 0 ? $14 : 0;
$11 = ($3 | 0) <= 0;
while (1) {
label$6: {
if ($11) {
$5 = 0;
break label$6;
}
$7 = $6 + $15 | 0;
$2 = 0;
$5 = 0;
while (1) {
$5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
$2 = $2 + 1 | 0;
if (($3 | 0) != ($2 | 0)) {
continue;
}
break;
}
}
HEAPF64[($6 << 3) + $8 >> 3] = $5;
$2 = ($6 | 0) == ($10 | 0);
$6 = $6 + 1 | 0;
if (!$2) {
continue;
}
break;
}
$23 = 47 - $12 | 0;
$21 = 48 - $12 | 0;
$24 = $12 - 25 | 0;
$6 = $14;
label$9: {
while (1) {
$5 = HEAPF64[($6 << 3) + $8 >> 3];
$2 = 0;
$7 = $6;
$15 = ($6 | 0) <= 0;
if (!$15) {
while (1) {
$10 = $2 << 2;
$10 = $10 + ($8 + 480 | 0) | 0;
$9 = $5 * 5.960464477539063e-8;
label$14: {
if (Math_abs($9) < 2147483648) {
$11 = ~~$9;
break label$14;
}
$11 = -2147483648;
}
$9 = +($11 | 0);
$5 = $9 * -16777216 + $5;
label$13: {
if (Math_abs($5) < 2147483648) {
$11 = ~~$5;
break label$13;
}
$11 = -2147483648;
}
HEAP32[$10 >> 2] = $11;
$7 = $7 - 1 | 0;
$5 = HEAPF64[($7 << 3) + $8 >> 3] + $9;
$2 = $2 + 1 | 0;
if (($6 | 0) != ($2 | 0)) {
continue;
}
break;
}
}
$5 = scalbn($5, $17);
$5 = $5 + floor($5 * .125) * -8;
label$17: {
if (Math_abs($5) < 2147483648) {
$16 = ~~$5;
break label$17;
}
$16 = -2147483648;
}
$5 = $5 - +($16 | 0);
label$19: {
label$20: {
label$21: {
$22 = ($17 | 0) <= 0;
label$22: {
if (!$22) {
$7 = ($6 << 2) + $8 | 0;
$2 = $7 + 476 | 0;
$11 = $2;
$2 = HEAP32[$7 + 476 >> 2];
$7 = $2;
$2 = $2 >> $21;
$7 = $7 - ($2 << $21) | 0;
HEAP32[$11 >> 2] = $7;
$16 = $2 + $16 | 0;
$13 = $7 >> $23;
break label$22;
}
if ($17) {
break label$21;
}
$13 = HEAP32[(($6 << 2) + $8 | 0) + 476 >> 2] >> 23;
}
if (($13 | 0) <= 0) {
break label$19;
}
break label$20;
}
$13 = 2;
if ($5 >= .5) {
break label$20;
}
$13 = 0;
break label$19;
}
$2 = 0;
$11 = 0;
if (!$15) {
while (1) {
$15 = ($8 + 480 | 0) + ($2 << 2) | 0;
$7 = HEAP32[$15 >> 2];
$10 = 16777215;
label$26: {
label$27: {
if ($11) {
break label$27;
}
$10 = 16777216;
if ($7) {
break label$27;
}
$11 = 0;
break label$26;
}
HEAP32[$15 >> 2] = $10 - $7;
$11 = 1;
}
$2 = $2 + 1 | 0;
if (($6 | 0) != ($2 | 0)) {
continue;
}
break;
}
}
label$28: {
if ($22) {
break label$28;
}
$2 = 8388607;
label$29: {
switch ($24 | 0) {
case 1:
$2 = 4194303;
break;
case 0:
break label$29;
default:
break label$28;
}
}
$10 = ($6 << 2) + $8 | 0;
$7 = $10 + 476 | 0;
HEAP32[$7 >> 2] = HEAP32[$10 + 476 >> 2] & $2;
}
$16 = $16 + 1 | 0;
if (($13 | 0) != 2) {
break label$19;
}
$5 = 1 - $5;
$13 = 2;
if (!$11) {
break label$19;
}
$5 = $5 - scalbn(1, $17);
}
if ($5 == 0) {
$7 = 0;
label$32: {
$2 = $6;
if (($14 | 0) >= ($2 | 0)) {
break label$32;
}
while (1) {
$2 = $2 - 1 | 0;
$7 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $7;
if (($2 | 0) > ($14 | 0)) {
continue;
}
break;
}
if (!$7) {
break label$32;
}
$12 = $17;
while (1) {
$12 = $12 - 24 | 0;
$6 = $6 - 1 | 0;
if (!HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2]) {
continue;
}
break;
}
break label$9;
}
$2 = 1;
while (1) {
$7 = $2;
$2 = $2 + 1 | 0;
if (!HEAP32[($8 + 480 | 0) + ($14 - $7 << 2) >> 2]) {
continue;
}
break;
}
$10 = $6 + $7 | 0;
while (1) {
$7 = $3 + $6 | 0;
$6 = $6 + 1 | 0;
HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 51936 >> 2];
$2 = 0;
$5 = 0;
if (($3 | 0) > 0) {
while (1) {
$5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
$2 = $2 + 1 | 0;
if (($3 | 0) != ($2 | 0)) {
continue;
}
break;
}
}
HEAPF64[($6 << 3) + $8 >> 3] = $5;
if (($6 | 0) < ($10 | 0)) {
continue;
}
break;
}
$6 = $10;
continue;
}
break;
}
$5 = scalbn($5, 24 - $12 | 0);
label$39: {
if ($5 >= 16777216) {
$3 = $6 << 2;
$3 = $3 + ($8 + 480 | 0) | 0;
$9 = $5 * 5.960464477539063e-8;
label$42: {
if (Math_abs($9) < 2147483648) {
$2 = ~~$9;
break label$42;
}
$2 = -2147483648;
}
$5 = +($2 | 0) * -16777216 + $5;
label$41: {
if (Math_abs($5) < 2147483648) {
$7 = ~~$5;
break label$41;
}
$7 = -2147483648;
}
HEAP32[$3 >> 2] = $7;
$6 = $6 + 1 | 0;
break label$39;
}
if (Math_abs($5) < 2147483648) {
$2 = ~~$5;
} else {
$2 = -2147483648;
}
$12 = $17;
}
HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2] = $2;
}
$5 = scalbn(1, $12);
label$47: {
if (($6 | 0) < 0) {
break label$47;
}
$3 = $6;
while (1) {
$2 = $3;
HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
$3 = $2 - 1 | 0;
$5 = $5 * 5.960464477539063e-8;
if ($2) {
continue;
}
break;
}
if (($6 | 0) < 0) {
break label$47;
}
$2 = $6;
while (1) {
$7 = $2;
$0 = $6 - $2 | 0;
$5 = 0;
$2 = 0;
while (1) {
label$51: {
$5 = HEAPF64[($2 << 3) + 54704 >> 3] * HEAPF64[($2 + $7 << 3) + $8 >> 3] + $5;
if (($2 | 0) >= ($14 | 0)) {
break label$51;
}
$3 = $0 >>> 0 > $2 >>> 0;
$2 = $2 + 1 | 0;
if ($3) {
continue;
}
}
break;
}
HEAPF64[($8 + 160 | 0) + ($0 << 3) >> 3] = $5;
$2 = $7 - 1 | 0;
if (($7 | 0) > 0) {
continue;
}
break;
}
}
label$52: {
label$53: {
label$54: {
switch ($4 | 0) {
case 3:
label$57: {
if (($6 | 0) <= 0) {
break label$57;
}
$5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
$2 = $6;
while (1) {
$3 = $2 - 1 | 0;
$7 = ($8 + 160 | 0) + ($3 << 3) | 0;
$9 = HEAPF64[$7 >> 3];
$19 = $9;
$9 = $9 + $5;
HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
HEAPF64[$7 >> 3] = $9;
$7 = $2 >>> 0 > 1;
$5 = $9;
$2 = $3;
if ($7) {
continue;
}
break;
}
if (($6 | 0) < 2) {
break label$57;
}
$5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
$2 = $6;
while (1) {
$3 = $2 - 1 | 0;
$7 = ($8 + 160 | 0) + ($3 << 3) | 0;
$9 = HEAPF64[$7 >> 3];
$19 = $9;
$9 = $9 + $5;
HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
HEAPF64[$7 >> 3] = $9;
$7 = $2 >>> 0 > 2;
$5 = $9;
$2 = $3;
if ($7) {
continue;
}
break;
}
if (($6 | 0) <= 1) {
break label$57;
}
while (1) {
$20 = $20 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
$2 = ($6 | 0) > 2;
$6 = $6 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
$5 = HEAPF64[$8 + 160 >> 3];
if ($13) {
break label$53;
}
HEAPF64[$1 >> 3] = $5;
$5 = HEAPF64[$8 + 168 >> 3];
HEAPF64[$1 + 16 >> 3] = $20;
HEAPF64[$1 + 8 >> 3] = $5;
break label$52;
case 0:
$5 = 0;
if (($6 | 0) >= 0) {
while (1) {
$2 = $6;
$6 = $2 - 1 | 0;
$5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
if ($2) {
continue;
}
break;
}
}
HEAPF64[$1 >> 3] = $13 ? -$5 : $5;
break label$52;
case 1:
case 2:
break label$54;
default:
break label$52;
}
}
$5 = 0;
if (($6 | 0) >= 0) {
$3 = $6;
while (1) {
$2 = $3;
$3 = $2 - 1 | 0;
$5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
if ($2) {
continue;
}
break;
}
}
HEAPF64[$1 >> 3] = $13 ? -$5 : $5;
$5 = HEAPF64[$8 + 160 >> 3] - $5;
$2 = 1;
if (($6 | 0) > 0) {
while (1) {
$5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
$3 = ($2 | 0) != ($6 | 0);
$2 = $2 + 1 | 0;
if ($3) {
continue;
}
break;
}
}
HEAPF64[$1 + 8 >> 3] = $13 ? -$5 : $5;
break label$52;
}
HEAPF64[$1 >> 3] = -$5;
$5 = HEAPF64[$8 + 168 >> 3];
HEAPF64[$1 + 16 >> 3] = -$20;
HEAPF64[$1 + 8 >> 3] = -$5;
}
__stack_pointer = $8 + 560 | 0;
return $16 & 7;
}
function RepeatMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$3 = __stack_pointer - 208 | 0;
__stack_pointer = $3;
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24934, 0);
}
$12 = $0 + 60 | 0;
TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29(HEAP32[$0 + 696 >> 2] + 60 | 0, $12);
$6 = HEAP32[$0 + 696 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($6, $1, $2);
$6 = HEAP32[$0 + 696 >> 2];
$9 = HEAP32[$0 + 24 >> 2];
$5 = $0 + 20 | 0;
HEAP32[$3 + 136 >> 2] = HEAP32[$5 >> 2];
$8 = HEAP32[$0 + 16 >> 2];
$11 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 128 >> 2] = $11;
HEAP32[$3 + 132 >> 2] = $8;
BasicMovement__scaleDuration_28float_2c_20bool_29($6, durationScale_28MannerFlags_2c_20PathShape_29($3 + 128 | 0, $9), 1);
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
$6 = $0 + 592 | 0;
$2 = HEAP32[$0 + 696 >> 2];
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($6, $2 + 288 | 0, $2 - -64 | 0);
$9 = $0 + 640 | 0;
$2 = HEAP32[$0 + 696 >> 2];
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($9, $2 + 400 | 0, $2 + 176 | 0);
TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29($0 + 284 | 0, HEAP32[$0 + 696 >> 2] + (HEAPU8[$0 + 570 | 0] ? 60 : 284) | 0);
$2 = $0 + 568 | 0;
$4 = Math_fround(1);
label$2: {
if (HEAPU8[70600]) {
break label$2;
}
if (HEAPU8[$0 + 571 | 0]) {
$7 = HEAP32[$0 + 696 >> 2];
$4 = Math_fround(TwoHPostureDistance_28TwoHConcretePosture_20const__2c_20TwoHConcretePosture_20const__29($7 + 60 | 0, $7 + 284 | 0) * HEAPF32[$0 + 576 >> 2]);
break label$2;
}
$4 = HEAPF32[$0 + 576 >> 2];
}
RepSpec__setReturnRatio_28float_29($2, $4);
$4 = Math_fround(HEAPF32[HEAP32[$0 + 696 >> 2] + 40 >> 2] * HEAPF32[$0 + 588 >> 2]);
HEAPF32[$0 + 40 >> 2] = $4;
if (HEAPU8[$0 + 20 | 0]) {
$2 = HEAP32[$1 >> 2];
$10 = Math_fround(HEAPF32[$2 + 268 >> 2] * HEAPF32[$2 + 232 >> 2]);
HEAPF32[$0 + 44 >> 2] = $10;
HEAPF32[$0 + 40 >> 2] = $4 + $10;
}
$2 = HEAP32[$0 + 536 >> 2];
label$5: {
if ($2) {
$5 = HEAP32[$0 + 540 >> 2];
$4 = HEAPF32[(($5 << 2) + 68592 | 0) + 180 >> 2];
HEAPF32[$0 + 688 >> 2] = $4;
if (($2 | 0) != 2) {
break label$5;
}
HEAPF32[$0 + 688 >> 2] = Math_fround(1) / $4;
break label$5;
}
HEAP32[$0 + 688 >> 2] = 1065353216;
}
$2 = $0 + 544 | 0;
label$7: {
if (Direction3__defined_28_29_20const($2)) {
$5 = HEAP32[$0 + 564 >> 2];
$4 = HEAPF32[(($5 << 2) + 68592 | 0) + 180 >> 2];
HEAPF32[$0 + 692 >> 2] = $4;
if (HEAP32[$0 + 560 >> 2] != 2) {
break label$7;
}
HEAPF32[$0 + 692 >> 2] = Math_fround(1) / $4;
break label$7;
}
HEAP32[$0 + 692 >> 2] = 1065353216;
}
label$9: {
if (!Direction3__defined_28_29_20const($2)) {
break label$9;
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$5 = Direction3__Direction3_28Direction3_20const__29($3 + 192 | 0, $2);
$7 = HEAP32[$0 + 556 >> 2];
$8 = HEAPU16[35148];
HEAP16[$3 + 184 >> 1] = $8;
$11 = HEAPU8[$1 + 13 | 0];
HEAP16[$3 + 126 >> 1] = $8;
$8 = $0 + 628 | 0;
ConvertDirectionSize_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($8, $5, $7, $3 + 126 | 0, ($11 & 32) >>> 5 | 0);
Vector__setScale_28float_29($8, Math_fround(HEAPF32[$0 + 48 >> 2] * HEAPF32[17155]));
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$2 = Direction3__Direction3_28Direction3_20const__29($3 + 168 | 0, $2);
$5 = HEAP32[$0 + 556 >> 2];
$7 = HEAPU16[35148];
HEAP16[$3 + 160 >> 1] = $7;
$1 = HEAPU8[$1 + 13 | 0];
HEAP16[$3 + 124 >> 1] = $7;
$7 = $0 + 676 | 0;
ConvertDirectionSize_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($7, $2, $5, $3 + 124 | 0, ($1 & 32) >>> 5 | 0);
Vector__setScale_28float_29($7, Math_fround(HEAPF32[$0 + 48 >> 2] * HEAPF32[17155]));
}
$1 = HEAPU8[67556];
if (!HEAP32[16886] | !$1) {
break label$9;
}
$1 = $0 + 628 | 0;
$4 = Vector__x_28_29_20const($1);
$10 = Vector__y_28_29_20const($1);
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Vector__z_28_29_20const($1), HEAPF64[wasm2js_i32$0 + 112 >> 3] = wasm2js_f64$0;
HEAPF64[$3 + 104 >> 3] = $10;
HEAPF64[$3 + 96 >> 3] = $4;
eprintf_28char_20const__2c_20____29(27330, $3 + 96 | 0);
$1 = $0 + 676 | 0;
$4 = Vector__x_28_29_20const($1);
$10 = Vector__y_28_29_20const($1);
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Vector__z_28_29_20const($1), HEAPF64[wasm2js_i32$0 + 80 >> 3] = wasm2js_f64$0;
HEAPF64[$3 + 72 >> 3] = $10;
HEAPF64[$3 + 64 >> 3] = $4;
eprintf_28char_20const__2c_20____29(27378, $3 - -64 | 0);
}
if (HEAPU8[67567]) {
$1 = HEAPU8[$0 + 571 | 0];
$4 = HEAPF32[HEAP32[$0 + 696 >> 2] + 40 >> 2];
HEAPF64[$3 + 48 >> 3] = HEAPF32[$0 + 576 >> 2];
HEAPF64[$3 + 40 >> 3] = $4;
HEAP32[$3 + 32 >> 2] = $1 ? 84 : 70;
eprintf_28char_20const__2c_20____29(26447, $3 + 32 | 0);
}
label$13: {
label$14: {
if (HEAPU8[$0 + 571 | 0]) {
$1 = operator_20new_28unsigned_20long_29(536);
$5 = HEAP32[$0 + 8 >> 2];
HEAP32[19359] = 0;
invoke_iiii(376, $1 | 0, $5 | 0, 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$13;
}
HEAP32[$0 + 700 >> 2] = $1;
$2 = HEAP32[$0 + 696 >> 2];
__memcpy($1 + 60 | 0, $2 + 284 | 0, 224);
__memcpy($1 + 284 | 0, $2 + 60 | 0, 224);
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = $0 + 604 | 0;
Vector__setFrom_28Vector_20const__29($1, $6);
Vector__setScale_28float_29($1, HEAPF32[$0 + 580 >> 2]);
$2 = HEAP32[$0 + 700 >> 2];
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($2 + 288 | 0, $2 - -64 | 0, $1);
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$2 = $0 + 652 | 0;
Vector__setFrom_28Vector_20const__29($2, $9);
Vector__setScale_28float_29($2, HEAPF32[$0 + 580 >> 2]);
$5 = HEAP32[$0 + 700 >> 2];
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($5 + 400 | 0, $5 + 176 | 0, $2);
}
HEAP16[HEAP32[$0 + 700 >> 2] + 508 >> 1] = HEAPU16[HEAP32[$0 + 696 >> 2] + 508 >> 1];
HEAP16[HEAP32[$0 + 700 >> 2] + 510 >> 1] = HEAPU16[HEAP32[$0 + 696 >> 2] + 510 >> 1];
$4 = HEAPF32[$0 + 576 >> 2];
HEAPF32[HEAP32[$0 + 700 >> 2] + 40 >> 2] = HEAPF32[HEAP32[$0 + 696 >> 2] + 40 >> 2] * (HEAPU8[70600] ? Math_fround(1) : $4);
MannerFlags__setManner_28Manner_29(HEAP32[$0 + 700 >> 2] + 12 | 0, 1);
$2 = HEAP32[$0 + 700 >> 2];
$5 = HEAP32[$0 + 24 >> 2];
HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
$11 = HEAP32[$0 + 16 >> 2];
$8 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = $8;
HEAP32[$3 + 20 >> 2] = $11;
BasicMovement__scaleDuration_28float_2c_20bool_29($2, durationScale_28MannerFlags_2c_20PathShape_29($3 + 16 | 0, $5), 1);
break label$14;
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = $0 + 604 | 0;
Vector__setFrom_28Vector_20const__29($1, $6);
Vector__setScale_28float_29($1, Math_fround(-1));
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$14;
}
$1 = $0 + 652 | 0;
Vector__setFrom_28Vector_20const__29($1, $9);
Vector__setScale_28float_29($1, Math_fround(-1));
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($0 + 616 | 0, $6, $0 + 604 | 0);
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($0 + 664 | 0, $9, $0 + 652 | 0);
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = Vector__Vector_28_29($3 + 144 | 0);
$2 = HEAPU8[$0 + 570 | 0];
CalcStartEndRepDisp_28Vector__2c_20Vector__2c_20int_2c_20bool_2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_29($1, 0, HEAP16[$0 + 568 >> 1] - !$2 | 0, $2, $6, $0 + 604 | 0, $0 + 616 | 0, $0 + 628 | 0, HEAPF32[$0 + 692 >> 2], HEAPF32[$0 + 688 >> 2]);
Vector__setAdd_28Vector_20const__29($0 + 288 | 0, $1);
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = Vector__Vector_28_29($3 + 144 | 0);
$2 = HEAPU8[$0 + 570 | 0];
CalcStartEndRepDisp_28Vector__2c_20Vector__2c_20int_2c_20bool_2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_29($1, 0, HEAP16[$0 + 568 >> 1] - !$2 | 0, $2, $9, $0 + 652 | 0, $0 + 664 | 0, $0 + 676 | 0, HEAPF32[$0 + 692 >> 2], HEAPF32[$0 + 688 >> 2]);
Vector__setAdd_28Vector_20const__29($0 + 400 | 0, $1);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (HEAPU8[67589]) {
HEAPF64[$3 >> 3] = HEAPF32[$0 + 40 >> 2];
eprintf_28char_20const__2c_20____29(30807, $3);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($12, HEAP32[16886]);
}
label$24: {
if (!HEAPU8[67570]) {
break label$24;
}
if (TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const($0 + 284 | 0, HEAP32[$0 + 8 >> 2])) {
break label$24;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(33544, 0);
$0 = HEAP32[$0 + 8 >> 2];
TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const($12, HEAP32[16886], $0);
}
__stack_pointer = $3 + 208 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function SiGMLHandshape__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 9172, HEAP32[$0 >> 2], HEAP32[18776]);
if (HEAPU8[$0 + 4 | 0]) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15169);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 4 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
label$2: {
label$3: {
label$4: {
label$5: {
$4 = HEAP32[$0 + 8 >> 2];
label$6: {
if ($4) {
printFingerbendAttrib_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20FingerbendType_2c_20char_20const__29($1, $4, 10061);
break label$6;
}
$4 = $0 + 12 | 0;
if (!FingerBending__defined_28_29_20const($4)) {
break label$6;
}
$2 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$3 + 72 >> 2] = $5;
HEAP32[$3 + 76 >> 2] = $2;
$5 = HEAP32[$4 + 4 >> 2];
$2 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
HEAP32[$3 + 64 >> 2] = $2;
HEAP32[$3 + 68 >> 2] = $5;
invoke_viii(432, $1 | 0, $3 - -64 | 0, 10061);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$5;
}
FingerBending___FingerBending_28_29($3 - -64 | 0);
}
$4 = HEAP32[$0 + 28 >> 2];
label$8: {
if ($4) {
printThumbbendAttrib_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20ThumbbendType_2c_20char_20const__29($1, $4);
break label$8;
}
$4 = $0 + 32 | 0;
if (!FingerBending__defined_28_29_20const($4)) {
break label$8;
}
$2 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$3 + 56 >> 2] = $5;
HEAP32[$3 + 60 >> 2] = $2;
$5 = HEAP32[$4 + 4 >> 2];
$2 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
HEAP32[$3 + 48 >> 2] = $2;
HEAP32[$3 + 52 >> 2] = $5;
invoke_viii(432, $1 | 0, $3 + 48 | 0, 3667);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$4;
}
FingerBending___FingerBending_28_29($3 + 48 | 0);
}
HEAP8[$3 + 46 | 0] = 0;
HEAP8[$3 + 47 | 0] = 0;
HEAP8[$3 + 42 | 0] = 98;
HEAP8[$3 + 43 | 0] = 101;
HEAP8[$3 + 44 | 0] = 110;
HEAP8[$3 + 45 | 0] = 100;
$8 = $0 + 12 | 0;
$4 = 0;
$7 = 0;
while (1) {
if (($4 | 0) == 5) {
$4 = $0 + 160 | 0;
if (ThumbBending__defined_28_29_20const($4)) {
HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
$2 = HEAP32[$4 + 12 >> 2];
$5 = HEAP32[$4 + 8 >> 2];
HEAP32[$3 + 8 >> 2] = $5;
HEAP32[$3 + 12 >> 2] = $2;
$5 = HEAP32[$4 + 4 >> 2];
$2 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
HEAP32[$3 >> 2] = $2;
HEAP32[$3 + 4 >> 2] = $5;
invoke_vii(433, $1 | 0, $3 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$3;
}
ThumbBending___ThumbBending_28_29($3);
}
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 7280, HEAP32[$0 + 48 >> 2], HEAP32[18778]);
printDigitsAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20short_29($1, 0, 3546, HEAP16[$0 + 52 >> 1]);
printDigitsAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20short_29($1, 0, 3220, HEAP16[$0 + 54 >> 1]);
printDigitPairAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20DigitIndex_2c_20DigitIndex_29($1, 0, 4584, HEAP32[$0 + 180 >> 2], HEAP32[$0 + 184 >> 2]);
printLocationAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Location_29($1, 10028, HEAP32[$0 + 204 >> 2]);
printDigitPairAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20DigitIndex_2c_20DigitIndex_29($1, 0, 4577, HEAP32[$0 + 188 >> 2], HEAP32[$0 + 192 >> 2]);
printLocationAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Location_29($1, 10021, HEAP32[$0 + 208 >> 2]);
printDigitPairAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20DigitIndex_2c_20DigitIndex_29($1, 0, 6500, HEAP32[$0 + 196 >> 2], HEAP32[$0 + 200 >> 2]);
printLocationAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Location_29($1, 2935, HEAP32[$0 + 212 >> 2]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 3561, HEAP32[$0 + 56 >> 2], HEAP32[18779]);
if (HEAPU8[$0 + 216 | 0]) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15249);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 216 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
__stack_pointer = $3 + 80 | 0;
return;
}
HEAP8[$3 + 46 | 0] = $7 + 49;
label$14: {
$6 = HEAP32[(($4 << 2) + $0 | 0) + 60 >> 2];
label$15: {
if ($6) {
if (HEAP32[$0 + 8 >> 2] == ($6 | 0)) {
break label$15;
}
printFingerbendAttrib_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20FingerbendType_2c_20char_20const__29($1, $6, $3 + 42 | 0);
break label$15;
}
if (!$4) {
break label$15;
}
$6 = (($4 << 4) + $0 | 0) + 80 | 0;
if (!FingerBending__defined_28_29_20const($6)) {
break label$15;
}
if (!operator___28FingerBending_20const__2c_20FingerBending_20const__29($6, $8)) {
break label$15;
}
$2 = HEAP32[$6 + 12 >> 2];
$5 = HEAP32[$6 + 8 >> 2];
HEAP32[$3 + 32 >> 2] = $5;
HEAP32[$3 + 36 >> 2] = $2;
$5 = HEAP32[$6 + 4 >> 2];
$2 = HEAP32[$6 >> 2];
HEAP32[19359] = 0;
HEAP32[$3 + 24 >> 2] = $2;
HEAP32[$3 + 28 >> 2] = $5;
invoke_viii(432, $1 | 0, $3 + 24 | 0, $3 + 42 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$14;
}
FingerBending___FingerBending_28_29($3 + 24 | 0);
}
$7 = $7 + 1 | 0;
$4 = $4 + 1 | 0;
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
FingerBending___FingerBending_28_29($3 + 24 | 0);
break label$2;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
FingerBending___FingerBending_28_29($3 - -64 | 0);
break label$2;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
FingerBending___FingerBending_28_29($3 + 48 | 0);
break label$2;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ThumbBending___ThumbBending_28_29($3);
}
__resumeException($4 | 0);
abort();
}
function Gesture__transfer_28Transform__2c_20Joint__2c_20Joint__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$7 = __stack_pointer - 160 | 0;
__stack_pointer = $7;
if (HEAPU8[67598]) {
$8 = $3 ? HEAP32[$3 >> 2] : 14681;
$5 = HEAP32[$0 + 4 >> 2];
$6 = $2 ? HEAP32[$2 >> 2] : 14681;
HEAP32[$7 + 56 >> 2] = $6;
HEAP32[$7 + 52 >> 2] = $8;
HEAP32[$7 + 48 >> 2] = $5;
eprintf_28char_20const__2c_20____29(25755, $7 + 48 | 0);
}
$10 = DynamicArrayP_Joint___DynamicArrayP_28int_29($7 + 144 | 0, 10);
HEAP32[19359] = 0;
invoke_vii(366, $3 | 0, $10 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$6: {
label$7: {
label$8: {
label$9: {
if (($3 | 0) != 1) {
HEAP32[19359] = 0;
$9 = invoke_iii(139, $7 + 128 | 0, 10) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$9;
}
if (!$2) {
break label$8;
}
HEAP32[19359] = 0;
invoke_vii(366, $2 | 0, $9 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
$3 = HEAP32[$9 + 12 >> 2];
$5 = HEAP32[$10 + 12 >> 2];
while (1) {
if (($5 | 0) <= 0 | ($3 | 0) <= 0) {
break label$8;
}
if ((DynamicArrayP_Joint___getElement_28int_29_20const($10, $5 - 1 | 0) | 0) != (DynamicArrayP_Joint___getElement_28int_29_20const($9, HEAP32[$9 + 12 >> 2] - 1 | 0) | 0)) {
break label$8;
}
$5 = HEAP32[$10 + 12 >> 2] - 1 | 0;
HEAP32[$10 + 12 >> 2] = $5;
$3 = HEAP32[$9 + 12 >> 2] - 1 | 0;
HEAP32[$9 + 12 >> 2] = $3;
continue;
}
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$6;
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$6;
}
if (HEAPU8[67598]) {
$3 = HEAP32[$9 + 12 >> 2];
$8 = HEAP32[$10 + 12 >> 2];
HEAP32[19359] = 0;
HEAP32[$7 + 32 >> 2] = $8;
HEAP32[$7 + 36 >> 2] = $3;
invoke_vii(71, 30476, $7 + 32 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
}
HEAP32[19359] = 0;
invoke_vi(367, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
$6 = HEAP32[$10 + 12 >> 2];
while (1) {
if (($6 | 0) <= 0) {
if ($2) {
HEAP32[19359] = 0;
$2 = invoke_ii(368, $7 + 80 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
$8 = HEAP32[$9 + 12 >> 2];
label$16: {
while (1) {
if (($8 | 0) <= 0) {
HEAP32[19359] = 0;
invoke_vi(369, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$16;
}
break label$7;
}
$8 = $8 - 1 | 0;
$5 = DynamicArrayP_Joint___getElement_28int_29_20const($9, $8);
label$19: {
if (!HEAPU8[67598]) {
break label$19;
}
$6 = HEAP32[$5 >> 2];
HEAP32[19359] = 0;
HEAP32[$7 + 16 >> 2] = $6;
invoke_vii(71, 32890, $7 + 16 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
label$20: {
if (($6 | 0) == 1) {
break label$20;
}
$6 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$5 + 4 >> 2] << 2) >> 2];
$4 = HEAP32[HEAP32[$6 >> 2] + 64 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $6 | 0, HEAP32[16886], 3);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$20;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
break label$19;
}
}
break label$7;
}
HEAP32[19359] = 0;
$3 = invoke_ii(86, $7 - -64 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$21: {
if (($4 | 0) == 1) {
break label$21;
}
$4 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$5 + 4 >> 2] << 2) >> 2];
$11 = HEAP32[HEAP32[$4 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
invoke_vii($11 | 0, $4 | 0, $3 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$21;
}
HEAP32[19359] = 0;
$4 = invoke_ii(370, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$21;
}
HEAP32[19359] = 0;
invoke_viii(371, $2 | 0, $4 | 0, $3 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$21;
}
if (!HEAPU8[67598]) {
continue;
}
HEAP32[19359] = 0;
invoke_vii(71, 16362, 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$21;
}
HEAP32[19359] = 0;
$6 = HEAP32[16886];
invoke_viii(372, $3 | 0, $6 | 0, 3);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$21;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
}
break;
}
break label$7;
}
HEAP32[19359] = 0;
invoke_vii(373, $1 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
}
if (HEAPU8[67598]) {
HEAP32[19359] = 0;
invoke_vii(71, 2679, 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$3 = HEAP32[16886];
invoke_viii(374, $1 | 0, $3 | 0, 3);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
}
DynamicArrayP_Joint____DynamicArrayP_28_29($9);
DynamicArrayP_Joint____DynamicArrayP_28_29($10);
__stack_pointer = $7 + 160 | 0;
return;
}
$6 = $6 - 1 | 0;
$5 = DynamicArrayP_Joint___getElement_28int_29_20const($10, $6);
HEAP32[19359] = 0;
$8 = invoke_ii(86, $7 + 112 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
if (HEAPU8[67598]) {
$4 = HEAP32[$5 >> 2];
HEAP32[19359] = 0;
HEAP32[$7 >> 2] = $4;
invoke_vii(71, 32938, $7 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
$4 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$5 + 4 >> 2] << 2) >> 2];
$11 = HEAP32[HEAP32[$4 >> 2] + 64 >> 2];
HEAP32[19359] = 0;
invoke_viii($11 | 0, $4 | 0, HEAP32[16886], 3);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
}
$4 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$5 + 4 >> 2] << 2) >> 2];
$11 = HEAP32[HEAP32[$4 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
invoke_vii($11 | 0, $4 | 0, $8 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
if (HEAPU8[67598]) {
HEAP32[19359] = 0;
invoke_vii(71, 16362, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_viii(372, $8 | 0, $4 | 0, 3);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
}
HEAP32[19359] = 0;
$4 = invoke_ii(370, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_viii(371, $1 | 0, $4 | 0, $8 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArrayP_Joint____DynamicArrayP_28_29($9);
}
DynamicArrayP_Joint____DynamicArrayP_28_29($10);
__resumeException($5 | 0);
abort();
}
function AtomicTimedMorph__AtomicTimedMorph_28int_2c_20float_2c_20float_2c_20float_2c_20char_20const__29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$8 = __stack_pointer - 48 | 0;
__stack_pointer = $8;
$6 = AbstractTimedMorph__AbstractTimedMorph_28TimedMorphType_29($0, 1);
HEAP16[$6 + 48 >> 1] = 1;
HEAPF32[$6 + 36 >> 2] = $4;
HEAPF32[$6 + 32 >> 2] = $3;
HEAPF32[$6 + 28 >> 2] = $2;
HEAP32[$6 + 24 >> 2] = $1;
HEAP32[$6 >> 2] = 61564;
label$1: {
label$2: {
label$3: {
label$4: {
switch (strlen($5) - 5 | 0) {
case 0:
HEAP8[$6 + 48 | 0] = 1;
$0 = HEAP8[$5 | 0];
HEAP32[19359] = 0;
$3 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29(HEAP8[$5 + 1 | 0]), 
HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
$0 = HEAP8[$5 + 2 | 0];
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$7 = HEAP8[$5 + 3 | 0];
$1 = 0;
HEAP32[19359] = 0;
$4 = Math_fround(invoke_fi(438, $7 | 0));
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$1;
}
$0 = HEAP8[$5 + 4 | 0];
$7 = $2 < Math_fround(0);
HEAP8[$6 + 49 | 0] = $7;
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29($0), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
if (!$7) {
break label$2;
}
break label$3;
case 1:
$0 = HEAP8[$5 | 0];
HEAP32[19359] = 0;
$7 = invoke_iii(439, $0 | 0, 1) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
HEAP8[$6 + 48 | 0] = $7;
$0 = HEAP8[$5 + 1 | 0];
HEAP32[19359] = 0;
$3 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29(HEAP8[$5 + 2 | 0]), 
HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
$0 = HEAP8[$5 + 3 | 0];
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$0 = HEAP8[$5 + 4 | 0];
HEAP32[19359] = 0;
$4 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$1 = HEAP8[$5 + 5 | 0];
$0 = $2 < Math_fround(0);
HEAP8[$6 + 49 | 0] = $0;
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29($1), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
$1 = 0;
if ($0) {
break label$3;
}
break label$2;
case 2:
$0 = HEAP8[$5 | 0];
HEAP32[19359] = 0;
$7 = invoke_iii(439, $0 | 0, 1) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
HEAP8[$6 + 48 | 0] = $7;
$0 = HEAP8[$5 + 1 | 0];
HEAP32[19359] = 0;
$3 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29(HEAP8[$5 + 2 | 0]), 
HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
$0 = HEAP8[$5 + 3 | 0];
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$0 = HEAP8[$5 + 4 | 0];
HEAP32[19359] = 0;
$4 = Math_fround(invoke_fi(438, $0 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = CharToMorphTempo_28char_29(HEAP8[$5 + 5 | 0]), 
HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
$1 = HEAP8[$5 + 6 | 0];
HEAP32[19359] = 0;
$1 = invoke_iii(439, $1 | 0, 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$1;
}
HEAP8[$6 + 49 | 0] = $1;
$2 = $2 < Math_fround(0) ? $1 ? Math_fround(2) : $2 : $2;
break label$2;
default:
break label$4;
}
}
HEAP32[19359] = 0;
$10 = invoke_ii(440, $5 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
$1 = 0;
$0 = 0;
label$9: {
label$10: {
label$11: {
while (1) {
if (($0 | 0) == 7) {
if (($1 | 0) >= 6) {
break label$10;
}
break label$11;
}
HEAP32[19359] = 0;
$7 = invoke_ii(441, $10 | 0) | 0;
$9 = HEAP32[19359];
HEAP32[19359] = 0;
label$14: {
if (($9 | 0) == 1) {
break label$14;
}
HEAP32[19359] = 0;
$9 = invoke_ii(290, $7 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$14;
}
HEAP32[($8 + 16 | 0) + ($0 << 2) >> 2] = $9;
$0 = $0 + 1 | 0;
$1 = $9 ? $0 : $1;
continue;
}
break;
}
break label$1;
}
while (1) {
if (($1 | 0) > 0) {
$0 = ($8 + 16 | 0) + ($1 << 2) | 0;
$1 = $1 - 1 | 0;
HEAP32[$0 >> 2] = HEAP32[($8 + 16 | 0) + ($1 << 2) >> 2];
continue;
}
break;
}
HEAP32[$8 + 16 >> 2] = 0;
$0 = 0;
break label$9;
}
$0 = HEAP32[$8 + 16 >> 2];
}
HEAP32[19359] = 0;
$7 = invoke_iii(442, $0 | 0, 1) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$17: {
if (($0 | 0) == 1) {
break label$17;
}
HEAP8[$6 + 48 | 0] = $7;
HEAP32[19359] = 0;
$3 = Math_fround(invoke_fi(443, HEAP32[$8 + 20 >> 2]));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$17;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = StringToMorphTempo_28char_20const__29(HEAP32[$8 + 24 >> 2]), 
HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fi(443, HEAP32[$8 + 28 >> 2]));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$17;
}
HEAP32[19359] = 0;
$4 = Math_fround(invoke_fi(443, HEAP32[$8 + 32 >> 2]));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$17;
}
wasm2js_i32$0 = $6, wasm2js_i32$1 = StringToMorphTempo_28char_20const__29(HEAP32[$8 + 36 >> 2]), 
HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
HEAP32[19359] = 0;
$9 = $2 < Math_fround(0);
$0 = invoke_iii(442, HEAP32[$8 + 40 >> 2], $9 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$17;
}
HEAP8[$6 + 49 | 0] = $0;
$9 = $0 & $9;
$1 = 0;
while (1) {
if (($1 | 0) == 7) {
if ($10) {
operator_20delete_28void__29(TokenStream___TokenStream_28_29($10));
}
$2 = $9 ? Math_fround(2) : $2;
$1 = HEAPU8[$6 + 49 | 0];
break label$2;
}
$0 = ($8 + 16 | 0) + ($1 << 2) | 0;
$7 = HEAP32[$0 >> 2];
if ($7) {
dlfree($7);
HEAP32[$0 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
break label$1;
}
break label$1;
}
$2 = Math_fround(2);
$1 = 1;
}
if (!(HEAPU8[$6 + 48 | 0] | $1 & 255)) {
HEAP8[$6 + 48 | 0] = 1;
HEAP32[19359] = 0;
invoke_i(305) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
HEAP32[$8 >> 2] = $5;
invoke_vii(71, 43602, $8 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
}
HEAP32[$6 + 4 >> 2] = 0;
$3 = Math_fround($3 + Math_fround(0));
HEAPF32[$6 + 8 >> 2] = $3;
$2 = Math_fround($2 + $3);
HEAPF32[$6 + 12 >> 2] = $2;
HEAPF32[$6 + 16 >> 2] = $4 + $2;
__stack_pointer = $8 + 48 | 0;
return $6 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AbstractTimedMorph___AbstractTimedMorph_28_29($6);
__resumeException($1 | 0);
abort();
}
function handle_nonmanual_tier_28XMLCell__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 80 | 0;
__stack_pointer = $4;
$12 = HEAP32[$0 + 4 >> 2];
$13 = HEAP32[$0 + 8 >> 2];
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$7 = invoke_iii(399, $3 | 0, 1) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) != 1) {
while (1) {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
if (HEAP32[$13 + 12 >> 2] <= ($10 | 0)) {
if (HEAP32[$7 + 12 >> 2]) {
break label$8;
}
DynamicArray1_DynamicArray1_AtomicNonmanual_____deleteAll_28_29($7);
operator_20delete_28void__29(DynamicArray1_DynamicArray1_AtomicNonmanual______DynamicArray1_28_29($7));
$1 = 0;
break label$7;
}
$8 = DynamicArrayP_XMLCell___getElement_28int_29_20const($13, $10);
$1 = HEAP32[$8 >> 2];
$1 = SiGML__convertElement_28char_20const__29($1);
if (HEAPU8[67583]) {
HEAP32[$4 + 40 >> 2] = HEAP32[$8 >> 2];
HEAP32[$4 + 36 >> 2] = $1;
HEAP32[$4 + 32 >> 2] = $10;
eprintf_28char_20const__2c_20____29(46927, $4 + 32 | 0);
}
$3 = $1 - 39 | 0;
if ($3 >>> 0 <= 19) {
$3 = 1 << $3;
if ($3 & 917376) {
break label$5;
}
if (!($3 & 127)) {
break label$4;
}
$6 = HEAP32[$8 + 8 >> 2];
if (!HEAP32[$6 + 12 >> 2]) {
break label$4;
}
$3 = operator_20new_28unsigned_20long_29(16);
$2 = HEAP32[$6 + 12 >> 2];
HEAP32[19359] = 0;
$5 = invoke_iii(400, $3 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
HEAP32[$4 + 44 >> 2] = $5;
$3 = 0;
while (1) {
label$13: {
if (HEAP32[$6 + 12 >> 2] <= ($3 | 0)) {
$1 = HEAP32[$4 + 44 >> 2];
if (HEAP32[$1 + 12 >> 2] <= 0) {
break label$13;
}
$9 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($8, 2184, Math_fround(1));
if ($9 != Math_fround(1)) {
ScaleParNonManual_28DynamicArray1_AtomicNonmanual___2c_20float_29(HEAP32[$4 + 44 >> 2], $9);
}
DynamicArray1_DynamicArray1_AtomicNonmanual_____appendElement_28DynamicArray1_AtomicNonmanual___20const__29($7, $4 + 44 | 0);
break label$4;
}
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($6, $3);
$5 = SiGML__convertElement_28char_20const__29(HEAP32[$2 >> 2]);
$1 = $5 - 46 | 0;
label$16: {
if (!($1 >>> 0 > 12 | ($1 | 0) == 10)) {
$1 = AtomicNonmanual__AtomicNonmanual_28_29($4 + 48 | 0);
HEAP32[19359] = 0;
$11 = HEAP32[18852];
$11 = invoke_iii(401, $11 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$18: {
label$19: {
if (($5 | 0) == 1) {
break label$19;
}
HEAP32[19359] = 0;
invoke_viii(402, $1 | 0, $11 | 0, $2 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$19;
}
if (!AtomicNonmanual__defined_28_29_20const($1)) {
break label$18;
}
HEAP32[19359] = 0;
$5 = HEAP32[$4 + 44 >> 2];
invoke_vii(403, $5 | 0, $1 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
break label$18;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AtomicNonmanual___AtomicNonmanual_28_29($1);
break label$1;
}
AtomicNonmanual___AtomicNonmanual_28_29($1);
break label$16;
}
LogTime_28_29();
$1 = HEAP32[$2 >> 2];
HEAP32[$4 + 24 >> 2] = HEAP32[$8 >> 2];
HEAP32[$4 + 20 >> 2] = $5;
HEAP32[$4 + 16 >> 2] = $1;
eprintf_28char_20const__2c_20____29(45132, $4 + 16 | 0);
BadSiGML_28_29();
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
operator_20delete_28void__29(DynamicArray1_AtomicNonmanual____DynamicArray1_28_29($1));
break label$4;
}
LogTime_28_29();
$3 = HEAP32[$8 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$0 >> 2];
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $3;
eprintf_28char_20const__2c_20____29(45132, $4);
BadSiGML_28_29();
break label$4;
}
$9 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2184, Math_fround(1));
if ($9 != Math_fround(1)) {
ScaleSeqNonManual_28DynamicArray1_DynamicArray1_AtomicNonmanual_____2c_20float_29($7, $9);
}
$1 = NonmanualMovement__NonmanualMovement_28_29(operator_20new_28unsigned_20long_29(28));
wasm2js_i32$0 = $1, wasm2js_i32$1 = SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29(HEAP32[18793], HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($12, 6084)), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
$3 = SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29(HEAP32[18794], HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($12, 6064));
HEAP32[$1 + 4 >> 2] = $7;
HEAP32[$1 + 12 >> 2] = $3;
}
__stack_pointer = $4 + 80 | 0;
return $1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
break label$1;
}
$3 = AtomicNonmanual__AtomicNonmanual_28_29($4 + 48 | 0);
HEAP32[19359] = 0;
$6 = HEAP32[18852];
$6 = invoke_iii(401, $6 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$21: {
label$22: {
if (($1 | 0) == 1) {
break label$22;
}
HEAP32[19359] = 0;
invoke_viii(402, $3 | 0, $6 | 0, $8 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$22;
}
label$23: {
if (!AtomicNonmanual__defined_28_29_20const($3)) {
break label$23;
}
HEAP32[19359] = 0;
$6 = invoke_ii(64, 16) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$24: {
label$25: {
if (($2 | 0) == 1) {
break label$25;
}
HEAP32[19359] = 0;
$2 = invoke_ii(404, $6 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$24;
}
HEAP32[19359] = 0;
HEAP32[$4 + 44 >> 2] = $2;
invoke_vii(403, $2 | 0, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$25;
}
HEAP32[19359] = 0;
invoke_vii(405, $7 | 0, $4 + 44 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$23;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$21;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
break label$21;
}
AtomicNonmanual___AtomicNonmanual_28_29($3);
break label$4;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
AtomicNonmanual___AtomicNonmanual_28_29($3);
break label$1;
}
$10 = $10 + 1 | 0;
continue;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
}
__resumeException($2 | 0);
abort();
}
function AvatarJointIndex__AvatarJointIndex_28HanimAvatar__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
$6 = __stack_pointer - 112 | 0;
__stack_pointer = $6;
$12 = DynamicArrayP_Joint___DynamicArrayP_28_29($0 + 236 | 0);
HEAP32[19359] = 0;
$13 = invoke_ii(268, $0 + 252 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
if (($4 | 0) != 1) {
$8 = HEAP32[$1 + 68 >> 2];
if (!$8) {
break label$4;
}
$3 = HEAP32[$8 >> 2];
HEAP32[19359] = 0;
$3 = invoke_iii(269, $1 | 0, $3 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
HEAP32[$0 >> 2] = $3;
if (!$3) {
$2 = HEAP32[$8 >> 2];
HEAP32[19359] = 0;
HEAP32[$6 + 96 >> 2] = $2;
invoke_vii(71, 36005, $6 + 96 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
}
$2 = HEAP32[$8 + 4 >> 2];
HEAP32[19359] = 0;
$2 = invoke_iii(269, $1 | 0, $2 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
HEAP32[$0 + 8 >> 2] = $2;
label$8: {
if ($2) {
$10 = !$3;
break label$8;
}
$4 = HEAP32[$8 + 4 >> 2];
HEAP32[19359] = 0;
HEAP32[$6 + 80 >> 2] = $4;
invoke_vii(71, 36005, $6 + 80 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
$10 = 1;
if (($4 | 0) == 1) {
break label$3;
}
}
$14 = $0 + 8 | 0;
label$10: while (1) {
if (($9 | 0) == 2) {
$3 = HEAP32[$0 + 20 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
if (!$10) {
break label$5;
}
$4 = AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 14);
HEAP32[19359] = 0;
invoke_viii(270, $4 | 0, 60484, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$3;
}
break label$1;
}
$7 = $9 << 2;
$3 = $8 + $7 | 0;
$4 = $3 + 8 | 0;
$2 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
$2 = invoke_iii(269, $1 | 0, $2 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
$4 = $0 + $7 | 0;
HEAP32[$4 + 12 >> 2] = $2;
if (!$2) {
$5 = HEAP32[$3 + 8 >> 2];
HEAP32[19359] = 0;
HEAP32[$6 + 64 >> 2] = $5;
invoke_vii(71, 36005, $6 - -64 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
$10 = 1;
if (($5 | 0) == 1) {
break label$3;
}
}
$5 = HEAP32[$3 + 92 >> 2];
HEAP32[19359] = 0;
$7 = invoke_iii(269, $1 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
HEAP32[$4 + 212 >> 2] = $7;
$5 = HEAP32[$3 + 100 >> 2];
HEAP32[19359] = 0;
$7 = invoke_iii(269, $1 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
HEAP32[$4 + 220 >> 2] = $7;
$2 = HEAP32[$3 + 108 >> 2];
HEAP32[19359] = 0;
$5 = invoke_iii(269, $1 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
HEAP32[$4 + 228 >> 2] = $5;
$5 = 0;
$3 = 0;
while (1) {
if (($3 | 0) != 4) {
$11 = $3 << 2;
$4 = $9 << 4;
$15 = $11 + ($4 + $8 | 0) | 0;
$2 = HEAP32[$15 + 16 >> 2];
HEAP32[19359] = 0;
$2 = invoke_iii(269, $1 | 0, $2 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
label$15: {
if (($7 | 0) != 1) {
HEAP32[(($0 + $4 | 0) + $11 | 0) + 20 >> 2] = $2;
if ($2) {
break label$15;
}
$2 = HEAP32[$15 + 16 >> 2];
HEAP32[19359] = 0;
HEAP32[$6 + 48 >> 2] = $2;
invoke_vii(71, 36005, $6 + 48 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
$10 = 1;
if (($2 | 0) != 1) {
break label$15;
}
}
break label$3;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
label$17: while (1) {
if (($5 | 0) == 5) {
$9 = $9 + 1 | 0;
continue label$10;
}
AvatarNameIndex__MakeJointName_28SideIndex_2c_20DigitIndex_2c_20KnuckleIndex_29_20const($8, $9, $5, 3);
HEAP32[19359] = 0;
$4 = invoke_iii(271, $1 | 0, 69872) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$19: {
if (($2 | 0) != 1) {
HEAP32[((Math_imul($9, 20) + $0 | 0) + ($5 << 2) | 0) + 172 >> 2] = $4;
if ($4) {
break label$19;
}
HEAP32[19359] = 0;
HEAP32[$6 + 32 >> 2] = 69872;
invoke_vii(71, 36426, $6 + 32 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
$10 = 1;
if (($4 | 0) != 1) {
break label$19;
}
}
break label$3;
}
$3 = 0;
while (1) {
if (($3 | 0) == 3) {
$5 = $5 + 1 | 0;
continue label$17;
}
AvatarNameIndex__MakeJointName_28SideIndex_2c_20DigitIndex_2c_20KnuckleIndex_29_20const($8, $9, $5, $3);
HEAP32[19359] = 0;
$2 = invoke_iii(269, $1 | 0, 69872) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$3;
}
$11 = ((Math_imul($9, 60) + $0 | 0) + Math_imul($5, 12) | 0) + ($3 << 2) | 0;
$4 = $11 + 52 | 0;
HEAP32[$4 >> 2] = $2;
label$23: {
if ($2) {
break label$23;
}
HEAP32[19359] = 0;
HEAP32[$6 + 16 >> 2] = 69872;
invoke_vii(71, 36005, $6 + 16 | 0);
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$3;
}
$10 = 1;
if (HEAP32[$11 + 52 >> 2]) {
break label$23;
}
HEAP32[19359] = 0;
HEAP32[$6 >> 2] = 69872;
invoke_vii(71, 36005, $6 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
}
$3 = $3 + 1 | 0;
continue;
}
}
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$3 = HEAP32[$3 + 8 >> 2];
label$24: {
while (1) {
$4 = HEAP32[$14 >> 2];
if (!$4 | ($3 | 0) == ($4 | 0)) {
break label$24;
}
HEAP32[19359] = 0;
invoke_vii(272, $13 | 0, $4 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$14 = $4 + 8 | 0;
continue;
}
break;
}
break label$3;
}
while (1) {
if (!$3 | HEAP32[$0 >> 2] == ($3 | 0)) {
break label$4;
}
HEAP32[19359] = 0;
invoke_vii(272, $12 | 0, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
$3 = HEAP32[$3 + 8 >> 2];
continue;
}
}
__stack_pointer = $6 + 112 | 0;
return $0 | 0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArrayP_Joint____DynamicArrayP_28_29($13);
}
DynamicArrayP_Joint____DynamicArrayP_28_29($12);
__resumeException($3 | 0);
}
abort();
}
function dlfree($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
$3 = $0 - 8 | 0;
$1 = HEAP32[$0 - 4 >> 2];
$0 = $1 & -8;
$5 = $3 + $0 | 0;
label$3: {
if ($1 & 1) {
break label$3;
}
if (!($1 & 3)) {
break label$2;
}
$1 = HEAP32[$3 >> 2];
$3 = $3 - $1 | 0;
$4 = HEAP32[19239];
if ($3 >>> 0 < $4 >>> 0) {
break label$2;
}
$0 = $0 + $1 | 0;
if (HEAP32[19240] != ($3 | 0)) {
if ($1 >>> 0 <= 255) {
$6 = $1 >>> 3 | 0;
$2 = ($6 << 3) + 76980 | 0;
$4 = HEAP32[$3 + 8 >> 2];
$1 = HEAP32[$3 + 12 >> 2];
if (($4 | 0) == ($1 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $6), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$3;
}
HEAP32[$4 + 12 >> 2] = $1;
HEAP32[$1 + 8 >> 2] = $4;
break label$3;
}
$7 = HEAP32[$3 + 24 >> 2];
$2 = HEAP32[$3 + 12 >> 2];
label$7: {
if (($2 | 0) != ($3 | 0)) {
$1 = HEAP32[$3 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = $2;
HEAP32[$2 + 8 >> 2] = $1;
break label$7;
}
label$9: {
$1 = $3 + 20 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
break label$9;
}
$1 = $3 + 16 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
break label$9;
}
$2 = 0;
break label$7;
}
while (1) {
$6 = $1;
$2 = $4;
$1 = $2 + 20 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
continue;
}
$1 = $2 + 16 | 0;
$4 = HEAP32[$2 + 16 >> 2];
if ($4) {
continue;
}
break;
}
HEAP32[$6 >> 2] = 0;
}
if (!$7) {
break label$3;
}
$4 = HEAP32[$3 + 28 >> 2];
$1 = ($4 << 2) + 77244 | 0;
label$11: {
if (HEAP32[$1 >> 2] == ($3 | 0)) {
HEAP32[$1 >> 2] = $2;
if ($2) {
break label$11;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$3;
}
HEAP32[(HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $7 >> 2] = $2;
if (!$2) {
break label$3;
}
}
HEAP32[$2 + 24 >> 2] = $7;
$1 = HEAP32[$3 + 16 >> 2];
if ($1) {
HEAP32[$2 + 16 >> 2] = $1;
HEAP32[$1 + 24 >> 2] = $2;
}
$1 = HEAP32[$3 + 20 >> 2];
if (!$1) {
break label$3;
}
HEAP32[$2 + 20 >> 2] = $1;
HEAP32[$1 + 24 >> 2] = $2;
break label$3;
}
$1 = HEAP32[$5 + 4 >> 2];
if (($1 & 3) != 3) {
break label$3;
}
HEAP32[19237] = $0;
HEAP32[$5 + 4 >> 2] = $1 & -2;
break label$1;
}
if ($3 >>> 0 >= $5 >>> 0) {
break label$2;
}
$1 = HEAP32[$5 + 4 >> 2];
if (!($1 & 1)) {
break label$2;
}
label$14: {
if (!($1 & 2)) {
if (HEAP32[19241] == ($5 | 0)) {
HEAP32[19241] = $3;
$0 = HEAP32[19238] + $0 | 0;
HEAP32[19238] = $0;
HEAP32[$3 + 4 >> 2] = $0 | 1;
if (HEAP32[19240] != ($3 | 0)) {
break label$2;
}
HEAP32[19237] = 0;
HEAP32[19240] = 0;
return;
}
if (HEAP32[19240] == ($5 | 0)) {
HEAP32[19240] = $3;
$0 = HEAP32[19237] + $0 | 0;
HEAP32[19237] = $0;
break label$1;
}
$0 = ($1 & -8) + $0 | 0;
label$18: {
if ($1 >>> 0 <= 255) {
$6 = $1 >>> 3 | 0;
$2 = ($6 << 3) + 76980 | 0;
$4 = HEAP32[$5 + 8 >> 2];
$1 = HEAP32[$5 + 12 >> 2];
if (($4 | 0) == ($1 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $6), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$18;
}
HEAP32[$4 + 12 >> 2] = $1;
HEAP32[$1 + 8 >> 2] = $4;
break label$18;
}
$7 = HEAP32[$5 + 24 >> 2];
$2 = HEAP32[$5 + 12 >> 2];
label$21: {
if (($5 | 0) != ($2 | 0)) {
$1 = HEAP32[$5 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = $2;
HEAP32[$2 + 8 >> 2] = $1;
break label$21;
}
label$23: {
$1 = $5 + 20 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
break label$23;
}
$1 = $5 + 16 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
break label$23;
}
$2 = 0;
break label$21;
}
while (1) {
$6 = $1;
$2 = $4;
$1 = $2 + 20 | 0;
$4 = HEAP32[$1 >> 2];
if ($4) {
continue;
}
$1 = $2 + 16 | 0;
$4 = HEAP32[$2 + 16 >> 2];
if ($4) {
continue;
}
break;
}
HEAP32[$6 >> 2] = 0;
}
if (!$7) {
break label$18;
}
$4 = HEAP32[$5 + 28 >> 2];
$1 = ($4 << 2) + 77244 | 0;
label$25: {
if (HEAP32[$1 >> 2] == ($5 | 0)) {
HEAP32[$1 >> 2] = $2;
if ($2) {
break label$25;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$18;
}
HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
if (!$2) {
break label$18;
}
}
HEAP32[$2 + 24 >> 2] = $7;
$1 = HEAP32[$5 + 16 >> 2];
if ($1) {
HEAP32[$2 + 16 >> 2] = $1;
HEAP32[$1 + 24 >> 2] = $2;
}
$1 = HEAP32[$5 + 20 >> 2];
if (!$1) {
break label$18;
}
HEAP32[$2 + 20 >> 2] = $1;
HEAP32[$1 + 24 >> 2] = $2;
}
HEAP32[$3 + 4 >> 2] = $0 | 1;
HEAP32[$0 + $3 >> 2] = $0;
if (HEAP32[19240] != ($3 | 0)) {
break label$14;
}
HEAP32[19237] = $0;
return;
}
HEAP32[$5 + 4 >> 2] = $1 & -2;
HEAP32[$3 + 4 >> 2] = $0 | 1;
HEAP32[$0 + $3 >> 2] = $0;
}
if ($0 >>> 0 <= 255) {
$1 = $0 >>> 3 | 0;
$0 = ($1 << 3) + 76980 | 0;
$1 = 1 << $1;
$4 = HEAP32[19235];
label$29: {
if (!($1 & $4)) {
HEAP32[19235] = $1 | $4;
$1 = $0;
break label$29;
}
$1 = HEAP32[$0 + 8 >> 2];
}
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$1 + 12 >> 2] = $3;
HEAP32[$3 + 12 >> 2] = $0;
HEAP32[$3 + 8 >> 2] = $1;
return;
}
$1 = 31;
if ($0 >>> 0 <= 16777215) {
$1 = $0 >>> 8 | 0;
$2 = $1;
$1 = $1 + 1048320 >>> 16 & 8;
$4 = $2 << $1;
$2 = $4;
$4 = $4 + 520192 >>> 16 & 4;
$2 = $2 << $4;
$6 = $2;
$2 = $2 + 245760 >>> 16 & 2;
$1 = ($6 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
$1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
}
HEAP32[$3 + 28 >> 2] = $1;
HEAP32[$3 + 16 >> 2] = 0;
HEAP32[$3 + 20 >> 2] = 0;
$4 = ($1 << 2) + 77244 | 0;
label$32: {
label$33: {
$2 = HEAP32[19236];
$5 = 1 << $1;
label$34: {
if (!($2 & $5)) {
HEAP32[19236] = $2 | $5;
HEAP32[$4 >> 2] = $3;
break label$34;
}
$1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
$2 = HEAP32[$4 >> 2];
while (1) {
$4 = $2;
if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
break label$33;
}
$2 = $1 >>> 29 | 0;
$1 = $1 << 1;
$6 = ($2 & 4) + $4 | 0;
$5 = $6 + 16 | 0;
$2 = HEAP32[$5 >> 2];
if ($2) {
continue;
}
break;
}
HEAP32[$6 + 16 >> 2] = $3;
}
HEAP32[$3 + 24 >> 2] = $4;
HEAP32[$3 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $3;
break label$32;
}
$0 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = $3;
HEAP32[$4 + 8 >> 2] = $3;
HEAP32[$3 + 24 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $0;
}
$3 = HEAP32[19243] - 1 | 0;
HEAP32[19243] = $3 ? $3 : -1;
}
return;
}
HEAP32[$3 + 4 >> 2] = $0 | 1;
HEAP32[$0 + $3 >> 2] = $0;
}
function Handshape__NewHandshapeFromHandConfig_28bool_2c_20Handshape__2c_20HashAny_char_20const__2c_20char_20const___20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$5 = __stack_pointer + -64 | 0;
__stack_pointer = $5;
label$1: {
label$2: {
if (!$1) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(38736, 0);
break label$2;
}
HEAP8[$1 + 232 | 0] = $0;
$3 = SetHandshapeType_28HandshapeType__2c_20char_20const__29($1, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 9172)) | boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($2, 9182, $1 + 4 | 0, 0) | SetFingerBendInfo_28char_20const__2c_20FingerbendType__2c_20FingerBending__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 10061), $1 + 8 | 0, $1 + 12 | 0);
$8 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3667);
$9 = $1 + 28 | 0;
$10 = $1 + 160 | 0;
$4 = SetThumbBendInfo_28char_20const__2c_20ThumbbendType__2c_20ThumbBending__29($8, $9, $10);
$0 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 7280);
$6 = SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29(HEAP32[18778], $0);
if ($6) {
HEAP32[$1 + 48 >> 2] = $6;
}
$3 = $3 | $4;
$4 = ($0 | 0) != 0;
CeeOpeningFromThumbPos_28SiGMLHandshape__29($1);
$6 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3546);
SetDigits_28short__2c_20char_20const__29($1 + 52 | 0, $6);
$7 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3220);
SetDigits_28short__2c_20char_20const__29($1 + 54 | 0, $7);
$0 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3561);
if (HEAPU8[67593]) {
HEAP32[$5 + 48 >> 2] = $0;
eprintf_28char_20const__2c_20____29(48301, $5 + 48 | 0);
}
$3 = $3 | $4;
$4 = ($6 | 0) != 0;
$6 = HEAP32[18779];
$0 = SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29($6, $0);
if (HEAPU8[67593]) {
HEAP32[$5 + 32 >> 2] = $0;
eprintf_28char_20const__2c_20____29(48320, $5 + 32 | 0);
}
$3 = $3 | $4;
$4 = ($7 | 0) != 0;
if ($0) {
HEAP32[$1 + 56 >> 2] = $0;
}
$4 = $3 | $4;
$0 = 0;
label$8: {
label$9: {
label$10: {
while (1) {
if (($0 | 0) == 5) {
label$13: {
$3 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 9078);
if ($3) {
$7 = operator_20new_28unsigned_20long_29(220);
HEAP32[19359] = 0;
$0 = invoke_ii(435, $7 | 0) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$1;
}
HEAP32[$1 + 220 >> 2] = $0;
SetHandshapeType_28HandshapeType__2c_20char_20const__29($0, $3);
SetFingerBendInfo_28char_20const__2c_20FingerbendType__2c_20FingerBending__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 10054), $0 + 8 | 0, $0 + 12 | 0);
SetThumbBendInfo_28char_20const__2c_20ThumbbendType__2c_20ThumbBending__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3660), $0 + 28 | 0, $0 + 160 | 0);
$6 = SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29(HEAP32[18778], HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 7273));
if ($6) {
HEAP32[$0 + 48 >> 2] = $6;
}
CeeOpeningFromThumbPos_28SiGMLHandshape__29($0);
SetDigits_28short__2c_20char_20const__29($0 + 52 | 0, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3539));
SetDigits_28short__2c_20char_20const__29($0 + 54 | 0, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 3213));
wasm2js_i32$0 = $1, wasm2js_f32$0 = HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float_29($2, 5474, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 + 224 >> 2] = wasm2js_f32$0;
}
$4 = ($3 | 0) != 0 | $4;
SetDigitPairAttrib_28DigitIndex__2c_20DigitIndex__2c_20char_20const__2c_20char_20const__29($1 + 180 | 0, $1 + 184 | 0, 4584, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 4584));
SetLocationAttrib_28Location__2c_20char_20const__2c_20char_20const__29($1 + 204 | 0, 10028, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 10028));
SetDigitPairAttrib_28DigitIndex__2c_20DigitIndex__2c_20char_20const__2c_20char_20const__29($1 + 188 | 0, $1 + 192 | 0, 4577, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 4577));
SetLocationAttrib_28Location__2c_20char_20const__2c_20char_20const__29($1 + 208 | 0, 10021, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 10021));
SetDigitPairAttrib_28DigitIndex__2c_20DigitIndex__2c_20char_20const__2c_20char_20const__29($1 + 196 | 0, $1 + 200 | 0, 6500, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 6500));
SetLocationAttrib_28Location__2c_20char_20const__2c_20char_20const__29($1 + 212 | 0, 2935, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, 2935));
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__29($2, 10251, $1 + 216 | 0);
switch (HEAP32[$1 + 56 >> 2] - 1 | 0) {
case 1:
break label$10;
case 0:
break label$13;
default:
break label$8;
}
}
} else {
$7 = $0 << 2;
$3 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($2, HEAP32[$7 + 63168 >> 2]);
$6 = ($3 | 0) != 0;
label$17: {
if (!$3) {
break label$17;
}
if (!$0) {
if (!(!$8 | !HEAPU8[67600])) {
LogTime_28_29();
HEAP32[$5 + 20 >> 2] = $3;
HEAP32[$5 + 16 >> 2] = $8;
eprintf_28char_20const__2c_20____29(35299, $5 + 16 | 0);
}
SetThumbBendInfo_28char_20const__2c_20ThumbbendType__2c_20ThumbBending__29($3, $9, $10);
break label$17;
}
SetFingerBendInfo_28char_20const__2c_20FingerbendType__2c_20FingerBending__29($3, ($1 + $7 | 0) + 60 | 0, (($0 << 4) + $1 | 0) + 80 | 0);
}
$4 = $4 | $6;
$0 = $0 + 1 | 0;
continue;
}
break;
}
HEAP32[$1 + 228 >> 2] = -1082130432;
$11 = -1;
if (HEAPU8[67593]) {
break label$9;
}
break label$8;
}
HEAP32[$1 + 228 >> 2] = 1065353216;
$11 = 1;
if (!HEAPU8[67593]) {
break label$8;
}
}
HEAPF64[$5 + 8 >> 3] = $11;
HEAP32[$5 >> 2] = 1;
eprintf_28char_20const__2c_20____29(29899, $5);
}
if (!($4 & 1)) {
break label$2;
}
UNIMPLEMENTED_28char_20const__29(9108);
}
__stack_pointer = $5 - -64 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($7);
__resumeException($0 | 0);
abort();
}
function Trajectory__Trajectory_28TrajectoryParams_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
$4 = __stack_pointer - 96 | 0;
__stack_pointer = $4;
$2 = HEAP32[$1 + 4 >> 2];
$3 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
$3 = HEAP32[$1 + 20 >> 2];
$2 = HEAP32[$1 + 16 >> 2];
HEAP32[$0 + 16 >> 2] = $2;
HEAP32[$0 + 20 >> 2] = $3;
$2 = HEAP32[$1 + 12 >> 2];
$3 = HEAP32[$1 + 8 >> 2];
$1 = $3;
$3 = $0 + 8 | 0;
HEAP32[$3 >> 2] = $1;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[19359] = 0;
$5 = invoke_ii(64, 104) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
if (($2 | 0) == 1) {
break label$5;
}
HEAP32[19359] = 0;
$3 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[$4 + 88 >> 2] = $2;
HEAP32[$4 + 92 >> 2] = $3;
$2 = HEAP32[$0 + 4 >> 2];
$3 = HEAP32[$0 >> 2];
HEAP32[$4 + 80 >> 2] = $3;
HEAP32[$4 + 84 >> 2] = $2;
$1 = invoke_iii(336, $5 | 0, $4 + 80 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$4;
}
HEAPF32[$0 + 16 >> 2] = 1 / +HEAP32[15355];
HEAP32[19359] = 0;
invoke_vif(337, $1 | 0, Math_fround(Math_fround(0)));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$5;
}
HEAP32[19359] = 0;
invoke_vif(338, $1 | 0, Math_fround(Math_fround(1)));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$5;
}
HEAP32[$1 + 48 >> 2] = 0;
HEAP32[$1 + 52 >> 2] = 0;
$2 = 0;
while (1) {
label$7: {
$7 = HEAPF32[$0 + 20 >> 2];
$8 = HEAPF32[$1 + 68 >> 2];
if (!($7 > $8) | HEAP32[15355] <= ($2 | 0)) {
break label$7;
}
$7 = HEAPF32[$0 + 16 >> 2];
HEAP32[19359] = 0;
$6 = Math_fround($6 + $7);
invoke_vif(339, $1 | 0, Math_fround($6));
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$8: {
if (($3 | 0) != 1) {
$5 = ($2 >>> 0) % 100 | 0;
if ($5 | !HEAPU8[67596]) {
break label$8;
}
$7 = HEAPF32[$1 + 68 >> 2];
HEAP32[19359] = 0;
HEAPF64[$4 >> 3] = $6;
HEAPF64[$4 + 8 >> 3] = $7;
invoke_vii(71, 26223, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$8;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
$8 = Math_fround($6 / Math_fround(Math_fround(1) - HEAPF32[$0 + 24 >> 2]));
if (HEAPU8[67596]) {
HEAP32[19359] = 0;
invoke_vi(340, 16724);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$3 = HEAP32[16886];
invoke_vii(341, $0 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$7 = HEAPF32[$0 + 24 >> 2];
$9 = HEAPF32[$1 + 68 >> 2];
HEAP32[19359] = 0;
HEAP32[$4 + 48 >> 2] = $2;
HEAPF64[$4 + 56 >> 3] = $8;
HEAPF64[$4 - -64 >> 3] = $9;
HEAPF64[$4 + 40 >> 3] = $6;
HEAPF64[$4 + 32 >> 3] = $7;
invoke_vii(71, 26280, $4 + 32 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
}
HEAPF32[$0 + 16 >> 2] = $8 * HEAPF32[$0 + 16 >> 2];
Trajectory__allocateData_28_29($0);
HEAP32[19359] = 0;
invoke_vif(337, $1 | 0, Math_fround(Math_fround(0)));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vif(338, $1 | 0, Math_fround(Math_fround(1)));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAP32[$1 + 48 >> 2] = 0;
HEAP32[$1 + 52 >> 2] = 0;
$6 = Math_fround(0);
$2 = 0;
label$11: {
while (1) {
if (HEAP32[15355] <= ($2 | 0)) {
break label$11;
}
$7 = HEAPF32[$0 + 16 >> 2];
HEAP32[19359] = 0;
$6 = Math_fround($6 + $7);
invoke_vif(339, $1 | 0, Math_fround($6));
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAPF32[HEAP32[$0 + 28 >> 2] + ($2 << 2) >> 2] = HEAPF32[$1 + 68 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
operator_20delete_28void__29(Controller___Controller_28_29($1));
label$14: {
$2 = HEAP32[15355];
$6 = HEAPF32[(HEAP32[$0 + 28 >> 2] + ($2 << 2) | 0) - 4 >> 2];
if ($6 == Math_fround(0)) {
break label$14;
}
$1 = 0;
while (1) {
if (($1 | 0) >= ($2 | 0)) {
break label$14;
}
$2 = HEAP32[$0 + 28 >> 2] + ($1 << 2) | 0;
HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] / $6;
$1 = $1 + 1 | 0;
$2 = HEAP32[15355];
continue;
}
}
label$16: {
if (!HEAPU8[67596]) {
break label$16;
}
$1 = 0;
HEAP32[19359] = 0;
$5 = HEAP32[16886];
invoke_vii(341, $0 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
while (1) {
if (HEAP32[15355] <= ($1 | 0)) {
HEAP32[19359] = 0;
invoke_vi(307, 10);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$16;
}
break label$3;
}
$6 = HEAPF32[HEAP32[$0 + 28 >> 2] + ($1 << 2) >> 2];
$7 = HEAPF32[$0 + 16 >> 2];
HEAP32[19359] = 0;
HEAPF64[$4 + 16 >> 3] = Math_fround(Math_fround($7 * Math_fround($1 | 0)) / $8);
HEAPF64[$4 + 24 >> 3] = $6;
invoke_vii(71, 26210, $4 + 16 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$1 = $1 + 20 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
__stack_pointer = $4 + 96 | 0;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
TrajectoryParams___TrajectoryParams_28_29($0);
__resumeException($1 | 0);
abort();
}
function ASDdata__buildFromXMLCell_28XMLCell__2c_20char_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
$3 = __stack_pointer - 272 | 0;
__stack_pointer = $3;
$5 = $1;
label$1: {
label$2: {
while (1) {
if ($5) {
if (!strcmp(HEAP32[$5 >> 2], 11039)) {
break label$2;
}
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$5 + 8 >> 2], 0);
continue;
}
break;
}
if ($1) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($1));
}
HEAP32[$3 + 16 >> 2] = $2;
eprintf_28char_20const__2c_20____29(37886, $3 + 16 | 0);
HEAP32[$3 >> 2] = $2;
emscripten_asm_const_int(66088, 48911, $3 | 0) | 0;
break label$1;
}
$7 = XMLCell__element_28char_20const__29($5, 4881);
if (!$7) {
if ($1) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($1));
}
HEAP32[$3 + 48 >> 2] = $2;
eprintf_28char_20const__2c_20____29(37716, $3 + 48 | 0);
HEAP32[$3 + 32 >> 2] = $2;
emscripten_asm_const_int(66205, 48911, $3 + 32 | 0) | 0;
break label$1;
}
$4 = XMLCell__element_28char_20const__29($7, 5647);
if (!$4) {
if ($1) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($1));
}
HEAP32[$3 + 80 >> 2] = $2;
eprintf_28char_20const__2c_20____29(37800, $3 + 80 | 0);
HEAP32[$3 + 64 >> 2] = $2;
emscripten_asm_const_int(66312, 48911, $3 - -64 | 0) | 0;
break label$1;
}
$8 = XMLCell__element_28char_20const__29($4, 2262);
if (!$8) {
if ($1) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($1));
}
HEAP32[$3 + 112 >> 2] = $2;
eprintf_28char_20const__2c_20____29(37633, $3 + 112 | 0);
HEAP32[$3 + 96 >> 2] = $2;
emscripten_asm_const_int(66421, 48911, $3 + 96 | 0) | 0;
break label$1;
}
wasm2js_i32$0 = 60480, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($4, 9537, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_iiii(44, $4 | 0, -1, 1) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
HEAP32[$0 + 12 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(259, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
label$14: {
HEAP32[$0 + 16 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(260, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 20 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(261, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 24 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_iiii(44, $4 | 0, -1, 1) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 28 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(259, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 32 >> 2] = $2;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(260, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$14;
}
HEAP32[$0 + 36 >> 2] = $2;
wasm2js_i32$0 = $0, wasm2js_i32$1 = XMLCell__attrib_int32_28char_20const__2c_20int_29($5, 6327, -1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $0, wasm2js_i32$1 = copyString_28char_20const__29(XMLCell__attrib_string_28char_20const__29($7, 6327)), 
HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $0, wasm2js_i32$1 = copyString_28char_20const__29(XMLCell__attrib_string_28char_20const__29($7, 9332)), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
ASDdata__readJoint_28XMLCell__2c_20short_2c_20float_29($0, $8, -1, HEAPF32[15120]);
if ($1) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($1));
}
$5 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 28 >> 2], 11497);
$2 = DynamicArray_short_2c_20_28short_29_1___getElement_28int_29_20const(HEAP32[$0 + 32 >> 2], $5);
if (($2 | 0) == (InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 12 >> 2], 12843) | 0)) {
DynamicArray1_Vector___getElement_28int_29_20const($3 + 192 | 0, HEAP32[$0 + 20 >> 2], $2);
DynamicArray1_Quaternion___getElement_28int_29_20const($3 + 256 | 0, HEAP32[$0 + 24 >> 2], $2);
DynamicArray1_Vector___getElement_28int_29_20const($3 + 240 | 0, HEAP32[$0 + 36 >> 2], $5);
HEAP32[$3 + 176 >> 2] = $2;
eprintf_28char_20const__2c_20____29(16686, $3 + 176 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3 + 192 | 0, HEAP32[16886], 6);
HEAP32[$3 + 160 >> 2] = $2;
eprintf_28char_20const__2c_20____29(15557, $3 + 160 | 0);
Quaternion__print_28_IO_FILE__2c_20int_29($3 + 256 | 0, HEAP32[16886], 6);
HEAP32[$3 + 144 >> 2] = $5;
eprintf_28char_20const__2c_20____29(16666, $3 + 144 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3 + 240 | 0, HEAP32[16886], 6);
Quaternion__rotateVector_28Vector__29_20const($3 + 256 | 0, $3 + 240 | 0);
Vector__setAdd_28Vector_20const__29($3 + 240 | 0, $3 + 192 | 0);
HEAP32[$3 + 128 >> 2] = $5;
eprintf_28char_20const__2c_20____29(16651, $3 + 128 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3 + 240 | 0, HEAP32[16886], 6);
eputc_28char_29(10);
}
$4 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 28 >> 2], 11270);
$2 = DynamicArray_short_2c_20_28short_29_1___getElement_28int_29_20const(HEAP32[$0 + 32 >> 2], $4);
if (($2 | 0) == (InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 12 >> 2], 12784) | 0)) {
DynamicArray1_Vector___getElement_28int_29_20const($3 + 240 | 0, HEAP32[$0 + 20 >> 2], $2);
DynamicArray1_Quaternion___getElement_28int_29_20const($3 + 256 | 0, HEAP32[$0 + 24 >> 2], $2);
DynamicArray1_Vector___getElement_28int_29_20const($3 + 224 | 0, HEAP32[$0 + 36 >> 2], $4);
Quaternion__rotateVector_28Vector__29_20const($3 + 256 | 0, $3 + 224 | 0);
Vector__setAdd_28Vector_20const__29($3 + 224 | 0, $3 + 240 | 0);
$5 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 12 >> 2], 12838);
DynamicArray1_Vector___getElement_28int_29_20const($3 + 208 | 0, HEAP32[$0 + 20 >> 2], $5);
DynamicArray1_Quaternion___getElement_28int_29_20const($3 + 192 | 0, HEAP32[$0 + 24 >> 2], $5);
Quaternion__rotateVector_28Vector__29_20const($3 + 192 | 0, $3 + 224 | 0);
Vector__setAdd_28Vector_20const__29($3 + 224 | 0, $3 + 208 | 0);
}
__stack_pointer = $3 + 272 | 0;
return;
}
}
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($5 | 0);
abort();
}
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 11) | 0, 60484, 0);
abort();
}
function normal_scanAtts($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $1;
label$1: {
label$2: {
label$3: {
label$4: {
while (1) {
$7 = -1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$6: {
label$7: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 17:
case 19:
case 20:
case 21:
case 22:
$1 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
case 0:
if (($2 - $1 | 0) < 2) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $1 + 2 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
case 1:
if (($2 - $1 | 0) < 3) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $1 + 3 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
case 2:
if (($2 - $1 | 0) < 4) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $1 + 4 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
case 9:
break label$6;
case 4:
case 5:
case 16:
break label$7;
default:
break label$3;
}
}
while (1) {
$1 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$13: {
$5 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($5 - 9 | 0) {
case 0:
case 1:
continue;
case 2:
case 3:
case 4:
break label$3;
case 5:
break label$6;
default:
break label$13;
}
}
if (($5 | 0) == 21) {
continue;
}
break;
}
break label$3;
}
label$14: {
while (1) {
$5 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $5;
if (($2 | 0) == ($5 | 0)) {
break label$1;
}
$6 = HEAPU8[(HEAPU8[$5 | 0] + $0 | 0) + 72 | 0];
if (($6 & 254) == 12) {
break label$14;
}
if ($6 >>> 0 <= 21) {
$1 = $5;
if (1 << $6 & 2098688) {
continue;
}
}
break;
}
$1 = $5;
break label$3;
}
label$17: while (1) {
$1 = $1 + 2 | 0;
label$18: while (1) {
HEAP32[$4 + 12 >> 2] = $1;
label$19: {
label$20: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
if (($6 | 0) == ($5 | 0)) {
break label$19;
}
label$22: {
switch ($5 | 0) {
case 5:
if (($2 - $1 | 0) < 2) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0)) {
continue label$17;
}
break label$3;
case 6:
if (($2 - $1 | 0) < 3) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0) {
break label$3;
}
$1 = $1 + 3 | 0;
continue label$18;
case 7:
if (($2 - $1 | 0) < 4) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0) {
break label$3;
}
$1 = $1 + 4 | 0;
continue label$18;
case 3:
break label$22;
case 0:
case 1:
case 2:
case 8:
break label$3;
default:
break label$20;
}
}
$1 = normal_scanRef($0, $1 + 1 | 0, $2, $4 + 12 | 0);
if (($1 | 0) > 0) {
$1 = HEAP32[$4 + 12 >> 2];
continue;
}
break;
}
$7 = $1;
if ($1) {
break label$1;
}
$1 = HEAP32[$4 + 12 >> 2];
break label$3;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
break;
}
$6 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $6;
if (($2 | 0) == ($6 | 0)) {
break label$1;
}
$5 = $1;
label$27: {
label$28: {
label$29: {
$1 = $6;
$6 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($6 - 9 | 0) {
case 2:
break label$27;
case 0:
case 1:
break label$28;
case 3:
case 4:
case 5:
case 6:
case 7:
break label$3;
case 8:
break label$4;
default:
break label$29;
}
}
if (($6 | 0) == 21) {
break label$28;
}
break label$3;
}
label$30: {
label$31: {
label$32: {
while (1) {
$5 = $1;
$1 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $1;
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$34: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 6:
break label$27;
case 2:
break label$30;
case 1:
break label$31;
case 0:
break label$32;
case 4:
case 5:
case 16:
continue;
case 17:
case 19:
break label$34;
case 12:
break label$4;
default:
break label$3;
}
}
break;
}
$1 = $5 + 2 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
}
if (($2 - $1 | 0) < 2) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $5 + 3 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
}
if (($2 - $1 | 0) < 3) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $5 + 4 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
}
if (($2 - $1 | 0) < 4) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$3;
}
$1 = $5 + 5 | 0;
HEAP32[$4 + 12 >> 2] = $1;
continue;
}
break;
}
$1 = $5 + 2 | 0;
$8 = 1;
break label$3;
}
$0 = $1 + 1 | 0;
HEAP32[$4 + 12 >> 2] = $0;
if (($0 | 0) == ($2 | 0)) {
break label$1;
}
$2 = HEAPU8[$1 + 1 | 0] == 62;
$1 = $2 ? $1 + 2 | 0 : $0;
$8 = $2 ? 3 : 0;
}
HEAP32[$3 >> 2] = $1;
$7 = $8;
break label$1;
}
$7 = -2;
}
__stack_pointer = $4 + 16 | 0;
return $7;
}
function SiteID__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = HEAP32[18213];
$4 = HEAPU8[$0 | 0];
label$1: {
if ($2) {
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 6271, $4, $3);
$3 = $0 + 2 | 0;
printDigitsAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20short_29($1, 0, 3235, (HEAPU16[$0 >> 1] | HEAPU8[$3 | 0] << 16) >>> 15 & 31);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if ($2 & 28672) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15199);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAP32[(HEAPU16[$0 >> 1] >>> 10 & 28) + 61328 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 & 3840) {
UNIMPLEMENTED_28char_20const__29(4117);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15222);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAP32[(((HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8) & 15) << 2) + 61360 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 << 8 >> 8 < 0) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15002);
$3 = $0 + 2 | 0;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, (HEAPU16[$0 >> 1] | HEAP8[$3 | 0] << 16) >= 0 ? 8921 : 8491);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
$0 = $2 >>> 20 & 7;
if (!$0) {
break label$1;
}
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 2948, $0, HEAP32[18218]);
return;
}
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 6318, $4, $3);
$3 = $0 + 2 | 0;
printDigitsAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20short_29($1, 0, 3242, (HEAPU16[$0 >> 1] | HEAPU8[$3 | 0] << 16) >>> 15 & 31);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if ($2 & 28672) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15206);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAP32[(HEAPU16[$0 >> 1] >>> 10 & 28) + 61328 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 & 3840) {
UNIMPLEMENTED_28char_20const__29(4069);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15229);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAP32[(((HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8) & 15) << 2) + 61360 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
$3 = $2 >>> 20 & 7;
if ($3) {
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 0, 2955, $3, HEAP32[18218]);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 << 8 >> 8 >= 0) {
break label$1;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15009);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, (HEAPU16[$0 >> 1] | HEAP8[$0 + 2 | 0] << 16) >= 0 ? 8921 : 8491);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
}
function dispose_chunk($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = $0 + $1 | 0;
$2 = HEAP32[$0 + 4 >> 2];
label$1: {
label$2: {
if ($2 & 1) {
break label$2;
}
if (!($2 & 3)) {
break label$1;
}
$2 = HEAP32[$0 >> 2];
$1 = $2 + $1 | 0;
label$3: {
$0 = $0 - $2 | 0;
if (($0 | 0) != HEAP32[19240]) {
if ($2 >>> 0 <= 255) {
$6 = $2 >>> 3 | 0;
$3 = ($6 << 3) + 76980 | 0;
$4 = HEAP32[$0 + 8 >> 2];
$2 = HEAP32[$0 + 12 >> 2];
if (($4 | 0) != ($2 | 0)) {
break label$3;
}
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $6), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$2;
}
$7 = HEAP32[$0 + 24 >> 2];
$3 = HEAP32[$0 + 12 >> 2];
label$6: {
if (($3 | 0) != ($0 | 0)) {
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $2;
break label$6;
}
label$8: {
$2 = $0 + 20 | 0;
$4 = HEAP32[$2 >> 2];
if ($4) {
break label$8;
}
$2 = $0 + 16 | 0;
$4 = HEAP32[$2 >> 2];
if ($4) {
break label$8;
}
$3 = 0;
break label$6;
}
while (1) {
$6 = $2;
$3 = $4;
$2 = $3 + 20 | 0;
$4 = HEAP32[$2 >> 2];
if ($4) {
continue;
}
$2 = $3 + 16 | 0;
$4 = HEAP32[$3 + 16 >> 2];
if ($4) {
continue;
}
break;
}
HEAP32[$6 >> 2] = 0;
}
if (!$7) {
break label$2;
}
$4 = HEAP32[$0 + 28 >> 2];
$2 = ($4 << 2) + 77244 | 0;
label$10: {
if (HEAP32[$2 >> 2] == ($0 | 0)) {
HEAP32[$2 >> 2] = $3;
if ($3) {
break label$10;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$2;
}
HEAP32[(HEAP32[$7 + 16 >> 2] == ($0 | 0) ? 16 : 20) + $7 >> 2] = $3;
if (!$3) {
break label$2;
}
}
HEAP32[$3 + 24 >> 2] = $7;
$2 = HEAP32[$0 + 16 >> 2];
if ($2) {
HEAP32[$3 + 16 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $3;
}
$2 = HEAP32[$0 + 20 >> 2];
if (!$2) {
break label$2;
}
HEAP32[$3 + 20 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $3;
break label$2;
}
$2 = HEAP32[$5 + 4 >> 2];
if (($2 & 3) != 3) {
break label$2;
}
HEAP32[19237] = $1;
HEAP32[$5 + 4 >> 2] = $2 & -2;
HEAP32[$0 + 4 >> 2] = $1 | 1;
HEAP32[$5 >> 2] = $1;
return;
}
HEAP32[$4 + 12 >> 2] = $2;
HEAP32[$2 + 8 >> 2] = $4;
}
$2 = HEAP32[$5 + 4 >> 2];
label$13: {
if (!($2 & 2)) {
if (HEAP32[19241] == ($5 | 0)) {
HEAP32[19241] = $0;
$1 = HEAP32[19238] + $1 | 0;
HEAP32[19238] = $1;
HEAP32[$0 + 4 >> 2] = $1 | 1;
if (HEAP32[19240] != ($0 | 0)) {
break label$1;
}
HEAP32[19237] = 0;
HEAP32[19240] = 0;
return;
}
if (HEAP32[19240] == ($5 | 0)) {
HEAP32[19240] = $0;
$1 = HEAP32[19237] + $1 | 0;
HEAP32[19237] = $1;
HEAP32[$0 + 4 >> 2] = $1 | 1;
HEAP32[$0 + $1 >> 2] = $1;
return;
}
$1 = ($2 & -8) + $1 | 0;
label$17: {
if ($2 >>> 0 <= 255) {
$6 = $2 >>> 3 | 0;
$3 = ($6 << 3) + 76980 | 0;
$4 = HEAP32[$5 + 8 >> 2];
$2 = HEAP32[$5 + 12 >> 2];
if (($4 | 0) == ($2 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $6), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$17;
}
HEAP32[$4 + 12 >> 2] = $2;
HEAP32[$2 + 8 >> 2] = $4;
break label$17;
}
$7 = HEAP32[$5 + 24 >> 2];
$3 = HEAP32[$5 + 12 >> 2];
label$20: {
if (($5 | 0) != ($3 | 0)) {
$2 = HEAP32[$5 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $2;
break label$20;
}
label$22: {
$4 = $5 + 20 | 0;
$2 = HEAP32[$4 >> 2];
if ($2) {
break label$22;
}
$4 = $5 + 16 | 0;
$2 = HEAP32[$4 >> 2];
if ($2) {
break label$22;
}
$3 = 0;
break label$20;
}
while (1) {
$6 = $4;
$3 = $2;
$4 = $2 + 20 | 0;
$2 = HEAP32[$4 >> 2];
if ($2) {
continue;
}
$4 = $3 + 16 | 0;
$2 = HEAP32[$3 + 16 >> 2];
if ($2) {
continue;
}
break;
}
HEAP32[$6 >> 2] = 0;
}
if (!$7) {
break label$17;
}
$4 = HEAP32[$5 + 28 >> 2];
$2 = ($4 << 2) + 77244 | 0;
label$24: {
if (HEAP32[$2 >> 2] == ($5 | 0)) {
HEAP32[$2 >> 2] = $3;
if ($3) {
break label$24;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$17;
}
HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $3;
if (!$3) {
break label$17;
}
}
HEAP32[$3 + 24 >> 2] = $7;
$2 = HEAP32[$5 + 16 >> 2];
if ($2) {
HEAP32[$3 + 16 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $3;
}
$2 = HEAP32[$5 + 20 >> 2];
if (!$2) {
break label$17;
}
HEAP32[$3 + 20 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $3;
}
HEAP32[$0 + 4 >> 2] = $1 | 1;
HEAP32[$0 + $1 >> 2] = $1;
if (HEAP32[19240] != ($0 | 0)) {
break label$13;
}
HEAP32[19237] = $1;
return;
}
HEAP32[$5 + 4 >> 2] = $2 & -2;
HEAP32[$0 + 4 >> 2] = $1 | 1;
HEAP32[$0 + $1 >> 2] = $1;
}
if ($1 >>> 0 <= 255) {
$2 = $1 >>> 3 | 0;
$1 = ($2 << 3) + 76980 | 0;
$2 = 1 << $2;
$4 = HEAP32[19235];
label$28: {
if (!($2 & $4)) {
HEAP32[19235] = $2 | $4;
$2 = $1;
break label$28;
}
$2 = HEAP32[$1 + 8 >> 2];
}
HEAP32[$1 + 8 >> 2] = $0;
HEAP32[$2 + 12 >> 2] = $0;
HEAP32[$0 + 12 >> 2] = $1;
HEAP32[$0 + 8 >> 2] = $2;
return;
}
$2 = 31;
if ($1 >>> 0 <= 16777215) {
$2 = $1 >>> 8 | 0;
$3 = $2;
$2 = $2 + 1048320 >>> 16 & 8;
$4 = $3 << $2;
$3 = $4;
$4 = $4 + 520192 >>> 16 & 4;
$3 = $3 << $4;
$6 = $3;
$3 = $3 + 245760 >>> 16 & 2;
$2 = ($6 << $3 >>> 15 | 0) - ($2 | $4 | $3) | 0;
$2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
}
HEAP32[$0 + 28 >> 2] = $2;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
$4 = ($2 << 2) + 77244 | 0;
label$31: {
$3 = HEAP32[19236];
$5 = 1 << $2;
label$32: {
if (!($3 & $5)) {
HEAP32[19236] = $3 | $5;
HEAP32[$4 >> 2] = $0;
break label$32;
}
$2 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1 | 0) | 0);
$3 = HEAP32[$4 >> 2];
while (1) {
$4 = $3;
if ((HEAP32[$3 + 4 >> 2] & -8) == ($1 | 0)) {
break label$31;
}
$3 = $2 >>> 29 | 0;
$2 = $2 << 1;
$6 = ($3 & 4) + $4 | 0;
$5 = $6 + 16 | 0;
$3 = HEAP32[$5 >> 2];
if ($3) {
continue;
}
break;
}
HEAP32[$6 + 16 >> 2] = $0;
}
HEAP32[$0 + 24 >> 2] = $4;
HEAP32[$0 + 12 >> 2] = $0;
HEAP32[$0 + 8 >> 2] = $0;
return;
}
$1 = HEAP32[$4 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = $0;
HEAP32[$4 + 8 >> 2] = $0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $4;
HEAP32[$0 + 8 >> 2] = $1;
}
}
function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
$15 = __stack_pointer - 128 | 0;
__stack_pointer = $15;
label$1: {
label$2: {
$11 = $6;
$12 = $8;
label$3: {
if (!__letf2($5, $11, $7, $12, 0, 0, 0, 0)) {
break label$3;
}
$10 = $6;
$9 = $8;
$18 = __fpclassifyl($5, $10, $7, $9);
$9 = $4;
$21 = $9 >>> 16 | 0;
$16 = $21 & 32767;
if (($16 | 0) == 32767) {
break label$3;
}
if ($18) {
break label$2;
}
}
$10 = $2;
$12 = $4;
$9 = $6;
$11 = $8;
__multf3($15 + 16 | 0, $1, $10, $3, $12, $5, $9, $7, $11);
$12 = $15;
$11 = HEAP32[$12 + 16 >> 2];
$7 = $11;
$9 = HEAP32[$12 + 20 >> 2];
$8 = $9;
$11 = HEAP32[$12 + 28 >> 2];
$6 = $11;
$9 = HEAP32[$12 + 24 >> 2];
$5 = $9;
$11 = $8;
$9 = $6;
__divtf3($12, $7, $11, $5, $9, $7, $11, $5, $9);
$9 = $12;
$10 = HEAP32[$9 + 8 >> 2];
$3 = $10;
$12 = HEAP32[$9 + 12 >> 2];
$4 = $12;
$12 = HEAP32[$9 >> 2];
$7 = $12;
$10 = HEAP32[$9 + 4 >> 2];
$8 = $10;
break label$1;
}
$10 = $4;
$12 = $10 & 65535;
$10 = $16;
$9 = $10 << 16;
$10 = $9;
$9 = $12;
$10 = $9 | $10;
$19 = $10;
$11 = 0;
$12 = $3;
$17 = $11 | $12;
$10 = $8;
$12 = $10 & 65535;
$8 = $12;
$9 = $7;
$14 = 0 | $9;
$18 = $10 >>> 16 & 32767;
$12 = $18;
$10 = $12 << 16;
$12 = $10;
$10 = $8;
$12 = $12 | $10;
$13 = $12;
$12 = $2;
$9 = $19;
$10 = $6;
$11 = $13;
if ((__letf2($1, $12, $17, $9, $5, $10, $14, $11) | 0) <= 0) {
$11 = $2;
$10 = $19;
$9 = $6;
$12 = $13;
if (__letf2($1, $11, $17, $10, $5, $9, $14, $12)) {
$7 = $1;
$12 = $2;
$8 = $12;
break label$1;
}
$12 = $2;
$9 = $4;
__multf3($15 + 112 | 0, $1, $12, $3, $9, 0, 0, 0, 0);
$9 = $15;
$11 = HEAP32[$9 + 120 >> 2];
$3 = $11;
$10 = HEAP32[$9 + 124 >> 2];
$4 = $10;
$10 = HEAP32[$9 + 112 >> 2];
$7 = $10;
$11 = HEAP32[$9 + 116 >> 2];
$8 = $11;
break label$1;
}
if ($16) {
$7 = $1;
$11 = $2;
$10 = $11;
} else {
$11 = $2;
$10 = $19;
__multf3($15 + 96 | 0, $1, $11, $17, $10, 0, 0, 0, 1081540608);
$9 = HEAP32[$15 + 108 >> 2];
$19 = $9;
$10 = $15;
$12 = HEAP32[$10 + 104 >> 2];
$17 = $12;
$16 = ($9 >>> 16 | 0) - 120 | 0;
$9 = $10;
$12 = HEAP32[$9 + 96 >> 2];
$7 = $12;
$10 = HEAP32[$9 + 100 >> 2];
}
$8 = $10;
if (!$18) {
$10 = $6;
$12 = $13;
__multf3($15 + 80 | 0, $5, $10, $14, $12, 0, 0, 0, 1081540608);
$9 = HEAP32[$15 + 92 >> 2];
$13 = $9;
$12 = $15;
$11 = HEAP32[$12 + 88 >> 2];
$14 = $11;
$18 = ($9 >>> 16 | 0) - 120 | 0;
$9 = $12;
$11 = HEAP32[$9 + 80 >> 2];
$5 = $11;
$12 = HEAP32[$9 + 84 >> 2];
$6 = $12;
}
$12 = $13;
$11 = $12 & 65535;
$9 = $14;
$22 = $9;
$9 = $11 | 65536;
$20 = $9;
$9 = $19;
$12 = $9 & 65535;
$11 = $17;
$9 = $11;
$17 = $9;
$11 = $12 | 65536;
$19 = $11;
if (($16 | 0) > ($18 | 0)) {
while (1) {
$12 = $17;
$10 = $22;
$13 = $12 - $10 | 0;
$11 = $19;
$9 = $20;
$23 = $11 - ($9 + ($10 >>> 0 > $12 >>> 0) | 0) | 0;
$12 = $8;
$11 = $5;
$10 = $7;
$12 = ($12 | 0) == ($6 | 0) & $11 >>> 0 > $10 >>> 0 | $6 >>> 0 > $12 >>> 0;
$10 = $13;
$9 = $10 - $12 | 0;
$14 = $9;
$11 = $23;
$13 = $10 >>> 0 < $12 >>> 0;
$13 = $11 - $13 | 0;
label$11: {
if (($13 | 0) > 0 | ($13 | 0) >= 0) {
$12 = $7;
$10 = $5;
$7 = $12 - $10 | 0;
$11 = $8;
$9 = $6 + ($10 >>> 0 > $12 >>> 0) | 0;
$9 = $11 - $9 | 0;
$8 = $9;
$12 = $9;
$9 = $13;
$12 = $12 | $9;
$11 = $14;
$10 = $7;
if (!($12 | ($11 | $10))) {
$12 = $2;
$11 = $4;
__multf3($15 + 32 | 0, $1, $12, $3, $11, 0, 0, 0, 0);
$11 = $15;
$10 = HEAP32[$11 + 40 >> 2];
$3 = $10;
$9 = HEAP32[$11 + 44 >> 2];
$4 = $9;
$9 = HEAP32[$11 + 32 >> 2];
$7 = $9;
$10 = HEAP32[$11 + 36 >> 2];
$8 = $10;
break label$1;
}
$10 = $13;
$9 = $10 << 1 | $11 >>> 31;
$13 = $9;
$11 = 0;
$10 = $11;
$9 = $8;
$12 = $9 >>> 31 | 0;
$9 = $14 << 1;
$17 = $12 | $9;
$11 = $13;
$10 = $11 | $10;
$13 = 31;
break label$11;
}
$11 = $17;
$14 = $11 << 1;
$10 = $19;
$9 = $10 << 1 | $11 >>> 31;
$13 = $9;
$11 = 0;
$10 = $11;
$9 = $8;
$12 = $9 >>> 31 | 0;
$9 = $14;
$17 = $12 | $9;
$11 = $13;
$10 = $11 | $10;
$13 = 31;
}
$19 = $10;
$11 = $7;
$7 = $11 << 1;
$10 = $8;
$9 = $10 << 1 | $11 >>> 31;
$8 = $9;
$16 = $16 - 1 | 0;
if (($18 | 0) < ($16 | 0)) {
continue;
}
break;
}
$16 = $18;
}
$10 = $17;
$12 = $22;
$13 = $10 - $12 | 0;
$9 = $19;
$11 = $20;
$20 = $9 - ($11 + ($10 >>> 0 < $12 >>> 0) | 0) | 0;
$10 = $8;
$12 = $7;
$9 = $5;
$10 = ($10 | 0) == ($6 | 0) & $12 >>> 0 < $9 >>> 0 | $6 >>> 0 > $10 >>> 0;
$12 = $13;
$11 = $12 - $10 | 0;
$14 = $11;
$9 = $20;
$13 = $10 >>> 0 > $12 >>> 0;
$13 = $9 - $13 | 0;
label$14: {
if (($13 | 0) < 0) {
$14 = $17;
$9 = $19;
$13 = $9;
break label$14;
}
$10 = $7;
$12 = $5;
$7 = $10 - $12 | 0;
$9 = $8;
$11 = $6 + ($12 >>> 0 > $10 >>> 0) | 0;
$11 = $9 - $11 | 0;
$8 = $11;
$11 = $13;
$10 = $8;
$10 = $11 | $10;
$12 = $7;
$9 = $14;
$11 = $12 | $9;
if ($10 | $11) {
break label$14;
}
$11 = $2;
$10 = $4;
__multf3($15 + 48 | 0, $1, $11, $3, $10, 0, 0, 0, 0);
$10 = $15;
$9 = HEAP32[$10 + 56 >> 2];
$3 = $9;
$12 = HEAP32[$10 + 60 >> 2];
$4 = $12;
$12 = HEAP32[$10 + 48 >> 2];
$7 = $12;
$9 = HEAP32[$10 + 52 >> 2];
$8 = $9;
break label$1;
}
$9 = $13;
if (($9 | 0) == 65535 | $9 >>> 0 < 65535) {
while (1) {
$11 = $7;
$10 = $8;
$5 = $10 >>> 31 | 0;
$9 = 0;
$6 = $9;
$16 = $16 - 1 | 0;
$10 = $11;
$7 = $10 << 1;
$9 = $8;
$11 = $9 << 1 | $10 >>> 31;
$8 = $11;
$9 = $14;
$12 = $9 << 1;
$11 = $13;
$10 = $11 << 1 | $9 >>> 31;
$9 = $10;
$10 = $6;
$9 = $9 | $10;
$13 = $9;
$11 = $5;
$14 = $11 | $12;
if ($9 >>> 0 < 65536) {
continue;
}
break;
}
}
$18 = $21 & 32768;
if (($16 | 0) <= 0) {
$10 = $13;
$9 = $10 & 65535;
$10 = $16 + 120 | $18;
$12 = $10 << 16;
$10 = $12;
$10 = $9 | $10;
$1 = $10;
$10 = $8;
$11 = 0;
$9 = $14;
$2 = $11 | $9;
$9 = $1;
__multf3($15 - -64 | 0, $7, $10, $2, $9, 0, 0, 0, 1065811968);
$9 = $15;
$11 = HEAP32[$9 + 72 >> 2];
$3 = $11;
$12 = HEAP32[$9 + 76 >> 2];
$4 = $12;
$12 = HEAP32[$9 + 64 >> 2];
$7 = $12;
$11 = HEAP32[$9 + 68 >> 2];
$8 = $11;
break label$1;
}
$11 = $13;
$12 = $11 & 65535;
$9 = $14;
$10 = 0;
$3 = $9 | $10;
$11 = $16 | $18;
$9 = $11 << 16;
$11 = $9;
$9 = $12;
$11 = $11 | $9;
$4 = $11;
}
$12 = $0;
HEAP32[$12 >> 2] = $7;
$11 = $8;
HEAP32[$12 + 4 >> 2] = $11;
HEAP32[$12 + 8 >> 2] = $3;
$11 = $4;
HEAP32[$12 + 12 >> 2] = $11;
__stack_pointer = $15 + 128 | 0;
}
function little2_scanLt($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$7 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 17:
case 19:
break label$10;
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 13:
case 14:
case 15:
case 16:
case 18:
break label$3;
case 0:
break label$4;
case 1:
break label$5;
case 2:
break label$6;
case 11:
break label$7;
case 10:
break label$8;
case 12:
break label$9;
default:
break label$11;
}
}
if (($4 | 0) != 29) {
break label$3;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
}
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 2 | 0];
label$20: {
label$21: {
$8 = HEAPU8[$4 + 3 | 0];
if ($8) {
$6 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 12:
break label$14;
case 6:
break label$15;
case 4:
case 5:
case 16:
break label$16;
case 2:
break label$17;
case 1:
break label$18;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$20;
case 24:
break label$21;
default:
break label$3;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$3;
}
break;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$1 = $4 + 4 | 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 5 | 0) {
case 12:
break label$14;
case 6:
break label$15;
case 4:
case 5:
case 16:
break label$25;
case 2:
break label$26;
case 1:
break label$27;
case 0:
break label$28;
case 17:
case 19:
break label$29;
case 24:
break label$30;
default:
break label$3;
}
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$3;
}
}
return little2_scanAtts($0, $1 + 2 | 0, $2, $3);
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$1 = $1 + 2 | 0;
continue;
}
}
HEAP32[$3 >> 2] = $1 + 2;
return 2;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$1;
}
if (!(!HEAPU8[$1 + 3 | 0] & HEAPU8[$1 + 2 | 0] == 62)) {
HEAP32[$3 >> 2] = $4;
break label$2;
}
$7 = 4;
HEAP32[$3 >> 2] = $1 + 4;
break label$1;
}
return little2_scanEndTag($0, $1 + 2 | 0, $2, $3);
}
return little2_scanPi($0, $1 + 2 | 0, $2, $3);
}
$5 = $1 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 2 | 0];
label$35: {
$6 = HEAPU8[$1 + 3 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
if (($4 | 0) != 20) {
if (($4 | 0) != 27) {
break label$35;
}
return little2_scanComment($0, $1 + 4 | 0, $2, $3);
}
return little2_scanCdataSection($1 + 4 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $5;
break label$2;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
}
return 0;
}
return $7;
}
function big2_scanLt($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$7 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$6 = HEAPU8[$1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 17:
case 19:
break label$10;
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 13:
case 14:
case 15:
case 16:
case 18:
break label$3;
case 0:
break label$4;
case 1:
break label$5;
case 2:
break label$6;
case 11:
break label$7;
case 10:
break label$8;
case 12:
break label$9;
default:
break label$11;
}
}
if (($4 | 0) != 29) {
break label$3;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
}
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 3 | 0];
label$20: {
label$21: {
$8 = HEAPU8[$4 + 2 | 0];
if ($8) {
$6 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 12:
break label$14;
case 6:
break label$15;
case 4:
case 5:
case 16:
break label$16;
case 2:
break label$17;
case 1:
break label$18;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$20;
case 24:
break label$21;
default:
break label$3;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$3;
}
break;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$1 = $4 + 4 | 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
$6 = HEAPU8[$1 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($5 - 5 | 0) {
case 12:
break label$14;
case 6:
break label$15;
case 4:
case 5:
case 16:
break label$25;
case 2:
break label$26;
case 1:
break label$27;
case 0:
break label$28;
case 17:
case 19:
break label$29;
case 24:
break label$30;
default:
break label$3;
}
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$3;
}
}
return big2_scanAtts($0, $1 + 2 | 0, $2, $3);
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$1 = $1 + 2 | 0;
continue;
}
}
HEAP32[$3 >> 2] = $1 + 2;
return 2;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$1;
}
if (!(!HEAPU8[$1 + 2 | 0] & HEAPU8[$1 + 3 | 0] == 62)) {
HEAP32[$3 >> 2] = $4;
break label$2;
}
$7 = 4;
HEAP32[$3 >> 2] = $1 + 4;
break label$1;
}
return big2_scanEndTag($0, $1 + 2 | 0, $2, $3);
}
return big2_scanPi($0, $1 + 2 | 0, $2, $3);
}
$5 = $1 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 3 | 0];
label$35: {
$6 = HEAPU8[$1 + 2 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
if (($4 | 0) != 20) {
if (($4 | 0) != 27) {
break label$35;
}
return big2_scanComment($0, $1 + 4 | 0, $2, $3);
}
return big2_scanCdataSection($1 + 4 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $5;
break label$2;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
}
return 0;
}
return $7;
}
function HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$6 = __stack_pointer - 128 | 0;
__stack_pointer = $6;
if ($3) {
Vector__setZero_28_29($3);
}
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
if (HEAPU8[67579]) {
HEAP32[$6 + 48 >> 2] = $1 ? 88 : 65;
eprintf_28char_20const__2c_20____29(19160, $6 + 48 | 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputc_28char_29(10);
}
if (!$1) {
SiteID__defaultProximity_28_29($2);
$7 = $2 + 2 | 0;
HEAP8[$7 | 0] = HEAPU8[$2 + 2 | 0] & 127;
}
$7 = HEAP32[$2 >> 2];
HEAP32[$6 + 44 >> 2] = $7;
HEAP32[$6 + 120 >> 2] = $7;
$11 = $0 + 172 | 0;
$7 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($11, $6 + 44 | 0);
HEAP32[$5 >> 2] = $7;
label$4: {
if ($7) {
HEAP32[$4 >> 2] = HEAP32[$7 + 16 >> 2];
if (!$3) {
break label$4;
}
Vector__setFrom_28Vector_20const__29($3, Vector__Vector_28Vector_20const__29_1($6 + 96 | 0, Site__getGlobalBoneTranslation_28_29(HEAP32[$5 >> 2])));
if (!HEAPU8[67579]) {
break label$4;
}
eprintf_28char_20const__2c_20____29(19138, 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(16388, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
break label$4;
}
if ($1) {
break label$4;
}
label$6: {
if ((NumDigits_28short_29((HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 | 0] << 16) >>> 15 & 31) | 0) < 2) {
break label$6;
}
if (HEAPU8[67579]) {
$1 = $2 + 2 | 0;
wasm2js_i32$0 = $6, wasm2js_i32$1 = NumDigits_28short_29((HEAPU16[$2 >> 1] | HEAPU8[$1 | 0] << 16) >>> 15 & 31), 
HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(20723, $6 + 32 | 0);
$7 = HEAPU16[$2 >> 1];
$1 = HEAPU8[$2 + 2 | 0];
printDigits_28_IO_FILE__2c_20short_29(HEAP32[16886], ($7 | $1 << 16) >>> 15 & 31);
eputc_28char_29(10);
}
$1 = HEAPU8[$2 + 2 | 0];
$13 = HEAPU8[$2 + 3 | 0];
$7 = HEAPU16[$2 >> 1];
HEAP32[$6 + 112 >> 2] = 0;
HEAP32[$6 + 104 >> 2] = 0;
HEAP32[$6 + 108 >> 2] = 0;
HEAP32[$6 + 96 >> 2] = 0;
HEAP32[$6 + 100 >> 2] = 0;
$8 = $1 << 16 | $7;
$7 = $8 >>> 15 & 31;
$1 = 0;
while (1) if (($1 | 0) == 5) {
if ($9 << 16 >> 16 <= 0) {
break label$6;
}
if (($9 & 65535) != 1) {
UNIMPLEMENTED_28char_20const__29(8620);
}
$1 = HEAP32[$6 + 96 >> 2];
HEAP16[$2 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 14 | 0];
HEAP32[$5 >> 2] = $1;
HEAP32[$4 >> 2] = HEAP32[$1 + 16 >> 2];
if (!$3) {
break label$4;
}
Vector__setFrom_28Vector_20const__29($3, Vector__Vector_28Vector_20const__29_1($6 + 72 | 0, Site__getGlobalBoneTranslation_28_29(HEAP32[$5 >> 2])));
if (!HEAPU8[67579]) {
break label$4;
}
eprintf_28char_20const__2c_20____29(19116, 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(16388, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
break label$4;
} else {
label$12: {
if (!($7 & 1)) {
break label$12;
}
$10 = MakeDigit_28DigitIndex_29($1);
HEAP8[$6 + 91 | 0] = $13;
$8 = $8 & -1015809 | ($10 & 31) << 15;
HEAP16[$6 + 88 >> 1] = $8;
HEAP8[$6 + 90 | 0] = $8 >>> 16;
HEAP32[$6 + 92 >> 2] = 0;
HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 88 >> 2];
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 0, $6 + 28 | 0, 0, $6 + 72 | 0, $6 + 92 | 0);
$10 = HEAP32[$6 + 92 >> 2];
if (!$10) {
break label$12;
}
HEAP32[($6 + 96 | 0) + ($9 << 16 >> 16 << 2) >> 2] = $10;
$9 = $9 + 1 | 0;
}
$1 = $1 + 1 | 0;
$7 = $7 >>> 1 & 32767;
continue;
}
}
label$13: {
label$14: {
$1 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 | 0] << 16;
$7 = $1 >>> 20 & 7;
if (($7 | 0) != 1) {
HEAP16[$2 >> 1] = $1;
$8 = $2 + 2 | 0;
HEAP8[$8 | 0] = ($1 & 9437183 | 1048576) >>> 16;
$1 = HEAP32[$2 >> 2];
HEAP32[$6 + 24 >> 2] = $1;
HEAP32[$6 + 64 >> 2] = $1;
$1 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($11, $6 + 24 | 0);
HEAP32[$5 >> 2] = $1;
if ($1) {
break label$14;
}
$1 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 | 0] << 16;
}
$7 = $1 >>> 12 & 7;
if (!$7) {
break label$13;
}
HEAP8[$2 + 2 | 0] = $1 >>> 16;
HEAP16[$2 >> 1] = $1 & 36863;
$1 = HEAP32[$2 >> 2];
HEAP32[$6 + 12 >> 2] = $1;
HEAP32[$6 + 56 >> 2] = $1;
$1 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($11, $6 + 12 | 0);
HEAP32[$5 >> 2] = $1;
if (!$1) {
break label$13;
}
HEAP32[$4 >> 2] = HEAP32[$1 + 16 >> 2];
label$16: {
if (!$3) {
break label$16;
}
Vector__setFrom_28Vector_20const__29($3, Vector__Vector_28Vector_20const__29_1($6 + 96 | 0, Site__getGlobalBoneTranslation_28_29(HEAP32[$5 >> 2])));
if (!HEAPU8[67579]) {
break label$16;
}
HEAP32[$6 >> 2] = $7;
eprintf_28char_20const__2c_20____29(19066, $6);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(16388, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
}
UNIMPLEMENTED_28char_20const__29(3249);
break label$4;
}
HEAP32[$4 >> 2] = HEAP32[$1 + 16 >> 2];
if ($3) {
Vector__setFrom_28Vector_20const__29($3, Vector__Vector_28Vector_20const__29_1($6 + 96 | 0, Site__getGlobalBoneTranslation_28_29(HEAP32[$5 >> 2])));
}
$12 = HEAPF32[HEAP32[18211] + ($7 << 2) >> 2];
label$18: {
if ($12 == Math_fround(0)) {
break label$18;
}
$7 = HEAP32[$5 >> 2];
$1 = HEAP32[$7 + 24 >> 2];
if ($1) {
$1 = Vector__Vector_28Vector_20const__29($6 + 96 | 0, $1);
Vector__setScale_28float_29($1, $12);
if (!$3) {
break label$18;
}
Vector__setAdd_28Vector_20const__29($3, $1);
break label$18;
}
if (!HEAPU8[67579]) {
break label$18;
}
HEAP32[$6 + 16 >> 2] = HEAP32[$7 >> 2];
eprintf_28char_20const__2c_20____29(24161, $6 + 16 | 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputc_28char_29(10);
}
if (!$3 | !HEAPU8[67579]) {
break label$4;
}
eprintf_28char_20const__2c_20____29(19094, 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(16388, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
break label$4;
}
if (!HEAPU8[67570]) {
break label$4;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(19196, 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(40839, 0);
}
__stack_pointer = $6 + 128 | 0;
}
function AvatarConstraints__AvatarConstraints_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$7 = __stack_pointer - 32 | 0;
__stack_pointer = $7;
$4 = $0 + 84 | 0;
$5 = $0 + 52 | 0;
$3 = $5;
label$1: {
label$2: {
label$3: {
label$4: {
while (1) {
HEAP32[19359] = 0;
$6 = invoke_ii(263, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
$3 = $6 + 16 | 0;
if (($4 | 0) != ($3 | 0)) {
continue;
}
break;
}
HEAP32[19359] = 0;
$1 = HEAP32[17100];
$3 = invoke_iii(264, $1 | 0, 3181) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
if ($3) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vii(71, 35552, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$3;
}
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
if (($3 | 0) == ($5 | 0)) {
break label$1;
}
while (1) {
$3 = ShoulderConstraint___ShoulderConstraint_28_29($3 - 16 | 0);
if (($5 | 0) != ($3 | 0)) {
continue;
}
break;
}
break label$1;
}
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 3446, Math_fround(Math_fround(.5))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 8927, Math_fround(Math_fround(1.600000023841858))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 4 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 9426, Math_fround(Math_fround(.30000001192092896))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 8 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5675, Math_fround(Math_fround(.5))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 12 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5258, Math_fround(Math_fround(.699999988079071))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 16 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5537, Math_fround(Math_fround(.20000000298023224))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 20 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 9953, Math_fround(Math_fround(.699999988079071))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 24 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 6919, Math_fround(Math_fround(.699999988079071))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 28 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5101, Math_fround(Math_fround(.800000011920929))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 32 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 9984, Math_fround(Math_fround(.20000000298023224))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 36 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 2807, Math_fround(Math_fround(2))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 40 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5509, Math_fround(Math_fround(.5))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 44 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 5490, Math_fround(Math_fround(.5))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 48 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 9452, Math_fround(Math_fround(.6000000238418579))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$4 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 2759, Math_fround(Math_fround(1.5700000524520874))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 88 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 2709, Math_fround(Math_fround(1.5700000524520874))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 92 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 2742, Math_fround(Math_fround(1.5700000524520874))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 96 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 2725, Math_fround(Math_fround(1.5700000524520874))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 + 100 >> 2] = $2;
HEAP32[19359] = 0;
$2 = Math_fround(invoke_fiif(265, $3 | 0, 9442, Math_fround(Math_fround(1.9500000476837158))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAPF32[$0 - -64 >> 2] = $2;
HEAPF32[$0 + 80 >> 2] = $2;
HEAP32[19359] = 0;
$6 = invoke_iifff(266, $7 + 16 | 0, Math_fround(Math_fround(-1.5)), Math_fround(Math_fround(1)), Math_fround(Math_fround(1))) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$7: {
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_iiiii(267, $3 | 0, $0 + 68 | 0, 4356, $6 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$6 = invoke_iifff(266, $7 | 0, Math_fround(Math_fround(1.5)), Math_fround(Math_fround(1)), Math_fround(Math_fround(1))) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_iiiii(267, $3 | 0, $5 | 0, 4372, $6 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
__stack_pointer = $7 + 32 | 0;
return $0 | 0;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
while (1) {
$4 = ShoulderConstraint___ShoulderConstraint_28_29($4 - 16 | 0);
if (($5 | 0) != ($4 | 0)) {
continue;
}
break;
}
}
__resumeException($0 | 0);
abort();
}
function SiGMLHandshape__RecogniseSpecials_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (SiGMLHandshape__IsMiddleCrossedOverIndex_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(33882, 0);
}
$1 = $0 + 96 | 0;
if (FingerBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39869);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(.699999988079071), Math_fround(0), Math_fround(0), Math_fround(-2));
}
$1 = $0 + 112 | 0;
if (!FingerBending__isUndef_28_29_20const($1)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39902);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(-.20000000298023224), Math_fround(1), Math_fround(1), Math_fround(-2));
break label$1;
}
if (SiGMLHandshape__IsThumbToBentMiddle_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37237, 0);
}
$1 = $0 + 160 | 0;
if (ThumbBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39936);
}
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(3.5), Math_fround(.25), Math_fround(.5), Math_fround(.800000011920929), Math_fround(0));
}
$1 = $0 + 96 | 0;
if (FingerBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39869);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0));
}
$1 = $0 + 112 | 0;
if (!FingerBending__isUndef_28_29_20const($1)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39902);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(2.25), Math_fround(0), Math_fround(0), Math_fround(0));
break label$1;
}
if (SiGMLHandshape__IsFistAroundThumb_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(44773, 0);
}
$1 = $0 + 160 | 0;
if (ThumbBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39936);
}
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(2.799999952316284), Math_fround(.699999988079071), Math_fround(1.7999999523162842), Math_fround(2), Math_fround(1.600000023841858));
}
$1 = 1;
while (1) {
if (($1 | 0) == 5) {
break label$1;
}
$2 = (($1 << 4) + $0 | 0) + 80 | 0;
label$22: {
if (!FingerBending__isUndef_28_29_20const($2)) {
break label$22;
}
if (HasDigit_28short_2c_20short_29(HEAP16[$0 + 54 >> 1], $1 << 16 >> 16)) {
break label$22;
}
if (HEAPU8[67570]) {
LogTime_28_29();
HEAP32[$4 >> 2] = HEAP32[($1 << 2) + 61536 >> 2];
eprintf_28char_20const__2c_20____29(37204, $4);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($2, Math_fround(3.5), Math_fround(3.5), Math_fround(3.5), Math_fround(0));
}
$1 = $1 + 1 | 0;
continue;
}
}
if (SiGMLHandshape__IsPinchBentThumbToMiddle_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37297, 0);
}
$1 = $0 + 160 | 0;
if (ThumbBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39936);
}
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(3), Math_fround(.5), Math_fround(.5), Math_fround(1.2999999523162842), Math_fround(0));
}
$1 = $0 + 96 | 0;
if (!FingerBending__isUndef_28_29_20const($1)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39869);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0));
break label$1;
}
if (SiGMLHandshape__IsPinchNo2_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37145, 0);
}
$1 = $0 + 160 | 0;
if (ThumbBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39936);
}
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(4), Math_fround(3), Math_fround(2), Math_fround(1.399999976158142), Math_fround(1.899999976158142));
}
$1 = $0 + 96 | 0;
if (!FingerBending__isUndef_28_29_20const($1)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39869);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0));
break label$1;
}
if (SiGMLHandshape__IsIndexCrossOverThumb_28_29($0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(44709, 0);
}
$1 = $0 + 160 | 0;
if (ThumbBending__isUndef_28_29_20const($1)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39936);
}
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(4), Math_fround(1), Math_fround(0), Math_fround(2), Math_fround(0));
}
$1 = $0 + 96 | 0;
if (!FingerBending__isUndef_28_29_20const($1)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eputs_28char_20const__29(39869);
}
FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(3.5), Math_fround(2), Math_fround(0), Math_fround(0));
break label$1;
}
if (!SiGMLHandshape__IsThumbbetween23Fist_28_29($0)) {
break label$1;
}
label$42: {
if (!HEAPU8[67570]) {
break label$42;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(40516, 0);
if (!HEAPU8[67570]) {
break label$42;
}
LogTime_28_29();
eputs_28char_20const__29(39936);
if (!HEAPU8[67570]) {
break label$42;
}
LogTime_28_29();
eputs_28char_20const__29(39869);
}
$1 = HEAP32[18780];
$3 = HEAP32[$1 + 228 >> 2];
$2 = HEAP32[$1 + 232 >> 2];
HEAP32[$0 + 160 >> 2] = $3;
HEAP32[$0 + 164 >> 2] = $2;
HEAP32[$0 + 176 >> 2] = HEAP32[$1 + 244 >> 2];
$3 = HEAP32[$1 + 240 >> 2];
$2 = HEAP32[$1 + 236 >> 2];
HEAP32[$0 + 168 >> 2] = $2;
HEAP32[$0 + 172 >> 2] = $3;
$2 = HEAP32[$1 + 252 >> 2];
$3 = HEAP32[$1 + 248 >> 2];
HEAP32[$0 + 96 >> 2] = $3;
HEAP32[$0 + 100 >> 2] = $2;
$3 = HEAP32[$1 + 260 >> 2];
$2 = HEAP32[$1 + 256 >> 2];
HEAP32[$0 + 104 >> 2] = $2;
HEAP32[$0 + 108 >> 2] = $3;
}
__stack_pointer = $4 + 16 | 0;
}
function HanimAvatar__createFacePolygons_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$6 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$1 = invoke_iii(256, $6 | 0, 600) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
label$2: while (1) {
$5 = $2;
$11 = $2 << 16;
$7 = HEAP16[($11 >> 16 << 1) + 60560 >> 1];
if (($7 | 0) != -1) {
$6 = 0;
$2 = $5 + 2 | 0;
$3 = $2;
label$4: {
switch ($7 | 0) {
case 0:
while (1) {
$3 = ($2 << 16 >> 16 << 1) + 60560 | 0;
if (HEAPU16[$3 >> 1] != 65535) {
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3);
$6 = $6 + 1 | 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
;
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$3 = $6 << 16 >> 16;
if (($3 | 0) <= 2) {
HEAP32[$4 >> 2] = $3;
eprintf_28char_20const__2c_20____29(38567, $4);
}
$2 = $2 + 1 | 0;
continue;
case 1:
$2 = ($2 << 16 >> 16 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $2);
$3 = $2 + 2 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3);
$6 = $2 + 4 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $6);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $2 + 6 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $6);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$2 = $5 + 7 | 0;
continue;
case 2:
HEAP16[$4 + 14 >> 1] = HEAPU16[($2 << 16 >> 16 << 1) + 60560 >> 1];
$2 = $5 + 4 | 0;
while (1) {
$3 = $2 << 16 >> 16 << 1;
$6 = $3 + 60560 | 0;
if (HEAPU16[$6 >> 1] != 65535) {
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3 + 60558 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $6);
HEAP16[$4 + 12 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 12 | 0);
$2 = $2 + 1 | 0;
continue;
}
break;
}
;
$2 = $2 + 1 | 0;
continue;
case 3:
break label$4;
default:
continue;
}
}
while (1) {
$5 = $3;
$3 = $3 + 1 | 0;
$10 = $5 << 16;
if (HEAPU16[($10 >> 16 << 1) + 60560 >> 1] != 65535) {
continue;
}
break;
}
$8 = $2 << 16 >> 16;
$6 = $3;
while (1) {
$7 = $6;
$6 = $6 + 1 | 0;
if (HEAPU16[($7 << 16 >> 16 << 1) + 60560 >> 1] != 65535) {
continue;
}
break;
}
$9 = $3 << 16 >> 16;
$7 = $7 - $3 << 16 >> 16;
$5 = $5 - $2 << 16;
$3 = $5 >> 16;
label$15: {
if (($3 | 0) == ($7 + 2 | 0)) {
$10 = ($8 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $10);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, ($9 << 1) + 60560 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $10 + 2 | 0);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$3 = ($3 + $8 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3 - 2 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3 - 4 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, ($7 + $9 << 1) + 60558 | 0);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$8 = $11 + 196608 >> 16;
$3 = $5 - 131072 >> 16;
break label$15;
}
if (($7 - 2 | 0) != ($3 | 0)) {
break label$15;
}
$5 = ($9 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5 + 2 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, ($8 << 1) + 60560 | 0);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$5 = ($7 + $9 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5 - 2 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, ($3 + $8 << 1) + 60558 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5 - 4 | 0);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$9 = $10 + 131072 >> 16;
}
$2 = 1;
$7 = ($3 | 0) > 1 ? $3 : 1;
while (1) if (($2 | 0) == ($7 | 0)) {
$2 = $6;
continue label$2;
} else {
$5 = ($2 + $8 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5 - 2 | 0);
$3 = ($2 + $9 << 1) + 60560 | 0;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3 - 2 | 0);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $3);
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $5);
HEAP16[$4 + 14 >> 1] = 65535;
DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($1, $4 + 14 | 0);
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
$2 = IFS_spec__IFS_spec_28_29(operator_20new_28unsigned_20long_29(16));
$3 = HEAP32[$0 + 488 >> 2];
HEAP32[$2 + 4 >> 2] = $1;
HEAP32[$2 >> 2] = $3;
$1 = HEAP32[HEAP32[HEAP32[$0 + 72 >> 2] + 8 >> 2] + 20 >> 2];
if ($1) {
HEAP32[$1 + 16 >> 2] = $2;
__stack_pointer = $4 + 16 | 0;
return;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(34333, 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 14) | 0, 60484, 0);
abort();
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
__resumeException($1 | 0);
abort();
}
function RepeatMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 128 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
HEAP32[$3 + 112 >> 2] = $0;
fiprintf($1, 32330, $3 + 112 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
if (HEAP32[$0 + 528 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22685, $1);
HEAP32[$3 + 96 >> 2] = HEAP32[$0 + 528 >> 2];
fiprintf($1, 30758, $3 + 96 | 0);
}
if (HEAP32[$0 + 532 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22662, $1);
HEAP32[$3 + 80 >> 2] = HEAP32[$0 + 532 >> 2];
fiprintf($1, 30758, $3 + 80 | 0);
}
if (HEAP32[$0 + 536 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22545, $1);
HEAP32[$3 + 64 >> 2] = HEAP32[$0 + 536 >> 2];
fiprintf($1, 30758, $3 - -64 | 0);
}
if (HEAP32[$0 + 540 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22968, $1);
HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 540 >> 2];
fiprintf($1, 30758, $3 + 48 | 0);
}
$2 = $0 + 544 | 0;
if (!Direction3__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22061, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 556 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22919, $1);
HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 556 >> 2];
fiprintf($1, 30758, $3 + 32 | 0);
}
if (HEAP32[$0 + 560 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22521, $1);
HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 560 >> 2];
fiprintf($1, 30758, $3 + 16 | 0);
}
if (HEAP32[$0 + 564 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22939, $1);
HEAP32[$3 >> 2] = HEAP32[$0 + 564 >> 2];
fiprintf($1, 30758, $3);
}
$2 = $0 + 592 | 0;
label$10: {
label$11: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$11;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$11;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$10;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23393, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 640 | 0;
label$12: {
label$13: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$13;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$13;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$12;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23415, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 604 | 0;
label$14: {
label$15: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$15;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$15;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$14;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23249, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 652 | 0;
label$16: {
label$17: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$17;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$17;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$16;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23274, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 616 | 0;
label$18: {
label$19: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$19;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$19;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$18;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23321, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 664 | 0;
label$20: {
label$21: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$21;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$21;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$20;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23349, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 628 | 0;
label$22: {
label$23: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$23;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$23;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$22;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22102, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 676 | 0;
label$24: {
label$25: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$25;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$25;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$24;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22126, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
printIndent_28_IO_FILE__29($1);
fputs(20703, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = HEAP32[$0 + 696 >> 2];
label$26: {
if (!$2) {
fputs(14681, $1);
break label$26;
}
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 72 >> 2]]($2, $1);
}
HEAP16[33801] = HEAPU16[33801] - 1;
if (!HEAP32[$0 + 700 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__29($1);
fputs(20685, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$0 = HEAP32[$0 + 700 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
}
__stack_pointer = $3 + 128 | 0;
}
function appendAttributeValue($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
$10 = $0 + 424 | 0;
$9 = HEAP32[$0 + 340 >> 2];
$11 = ($9 + 80 | 0) != ($5 | 0);
label$1: {
label$2: {
while (1) {
label$4: {
$6 = 0;
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
$7 = FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($1, $3, $4, $8 + 12 | 0) | 0;
switch ($7 + 4 | 0) {
case 0:
break label$1;
case 13:
break label$11;
case 1:
break label$12;
case 10:
break label$13;
case 14:
break label$14;
case 3:
break label$15;
case 4:
break label$16;
case 11:
break label$6;
case 2:
case 5:
case 6:
case 7:
case 8:
case 9:
case 12:
break label$9;
default:
break label$10;
}
}
$6 = 4;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
HEAP32[$0 + 272 >> 2] = HEAP32[$8 + 12 >> 2];
break label$1;
}
$6 = 4;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
break label$2;
}
$6 = FUNCTION_TABLE[HEAP32[$1 + 40 >> 2]]($1, $3) | 0;
label$17: {
if (($6 | 0) < 0) {
$6 = 14;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$17;
}
break label$1;
}
if (!(($6 | 0) != 32 | $2)) {
$7 = HEAP32[$5 + 12 >> 2];
if (($7 | 0) == HEAP32[$5 + 16 >> 2] | HEAPU8[$7 - 1 | 0] == 32) {
break label$5;
}
}
$6 = XmlUtf8Encode($6, $8 + 8 | 0);
if ($6) {
$3 = 0;
$12 = ($6 | 0) > 0 ? $6 : 0;
while (1) {
if (($3 | 0) == ($12 | 0)) {
break label$5;
}
$6 = HEAP32[$5 + 12 >> 2];
if (($6 | 0) == HEAP32[$5 + 8 >> 2]) {
if (!poolGrow($5)) {
break label$4;
}
$6 = HEAP32[$5 + 12 >> 2];
}
$7 = HEAPU8[($8 + 8 | 0) + $3 | 0];
HEAP32[$5 + 12 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $7;
$3 = $3 + 1 | 0;
continue;
}
}
$6 = 14;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
}
HEAP32[$0 + 272 >> 2] = $3;
break label$1;
}
if (!poolAppend($5, $1, $3, HEAP32[$8 + 12 >> 2])) {
break label$4;
}
break label$5;
}
HEAP32[$8 + 12 >> 2] = HEAP32[$1 + 64 >> 2] + $3;
break label$6;
}
$6 = HEAP32[$1 + 64 >> 2];
$6 = FUNCTION_TABLE[HEAP32[$1 + 44 >> 2]]($1, $6 + $3 | 0, HEAP32[$8 + 12 >> 2] - $6 | 0) | 0;
if ($6 & 255) {
$3 = HEAP32[$5 + 12 >> 2];
if (($3 | 0) == HEAP32[$5 + 8 >> 2]) {
if (!poolGrow($5)) {
break label$4;
}
$3 = HEAP32[$5 + 12 >> 2];
}
HEAP32[$5 + 12 >> 2] = $3 + 1;
HEAP8[$3 | 0] = $6;
break label$5;
}
$6 = HEAP32[$1 + 64 >> 2];
$6 = poolStoreString($10, $1, $6 + $3 | 0, HEAP32[$8 + 12 >> 2] - $6 | 0);
if (!$6) {
break label$4;
}
$7 = lookup($9, $6, 0);
HEAP32[$0 + 436 >> 2] = HEAP32[$0 + 440 >> 2];
label$25: {
label$26: {
if (!$11) {
if (!HEAPU8[$9 + 130 | 0]) {
break label$26;
}
if (!HEAP32[$0 + 284 >> 2]) {
break label$8;
}
break label$25;
}
if (!HEAPU8[$9 + 129 | 0]) {
break label$8;
}
if (!HEAPU8[$9 + 130 | 0]) {
break label$25;
}
break label$8;
}
if (!HEAPU8[$9 + 129 | 0]) {
break label$8;
}
}
if (!$7) {
break label$5;
}
break label$7;
}
if (($7 | 0) == 39) {
break label$6;
}
}
$6 = 23;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$2;
}
break label$1;
}
if (!$7) {
$6 = 11;
break label$1;
}
if (HEAPU8[$7 + 34 | 0]) {
break label$7;
}
$6 = 24;
break label$1;
}
if (HEAPU8[$7 + 32 | 0]) {
$6 = 12;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$2;
}
break label$1;
}
if (HEAP32[$7 + 28 >> 2]) {
$6 = 15;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$2;
}
break label$1;
}
$6 = HEAP32[$7 + 4 >> 2];
if (!$6) {
$6 = 16;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$2;
}
break label$1;
}
HEAP8[$7 + 32 | 0] = 1;
$6 = appendAttributeValue($0, HEAP32[$0 + 224 >> 2], $2, $6, HEAP32[$7 + 8 >> 2] + $6 | 0, $5);
HEAP8[$7 + 32 | 0] = 0;
if (!$6) {
break label$5;
}
break label$1;
}
$3 = HEAP32[$5 + 12 >> 2];
if (!$2 & (HEAP32[$5 + 16 >> 2] == ($3 | 0) | HEAPU8[$3 - 1 | 0] == 32)) {
break label$5;
}
if (HEAP32[$5 + 8 >> 2] == ($3 | 0)) {
if (!poolGrow($5)) {
break label$4;
}
$3 = HEAP32[$5 + 12 >> 2];
}
HEAP32[$5 + 12 >> 2] = $3 + 1;
HEAP8[$3 | 0] = 32;
}
$3 = HEAP32[$8 + 12 >> 2];
continue;
}
break;
}
$6 = 1;
break label$1;
}
HEAP32[$0 + 272 >> 2] = $3;
}
__stack_pointer = $8 + 16 | 0;
return $6;
}
function HanimAvatar__normaliseSkeleton_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
$2 = __stack_pointer - 272 | 0;
__stack_pointer = $2;
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29(XMLCell__element_28char_20const__29(HEAP32[17100], 1322), 6010, Math_fround(1.100000023841858));
Vector__Vector_28float_2c_20float_2c_20float_29($2 + 256 | 0, Math_fround(0), Math_fround(-cos_28float_29($6)), sin_28float_29($6));
Vector__Vector_28float_2c_20float_2c_20float_29($2 + 240 | 0, Math_fround(0), Math_fround(-1), Math_fround(1));
label$1: while (1) {
if (($8 | 0) != 2) {
$1 = HEAP32[$0 + 72 >> 2] + ($8 << 4) | 0;
$4 = $1 + 28 | 0;
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$1 + 24 >> 2], HEAP32[$4 >> 2] + 40 | 0, 68080);
$10 = $1;
$11 = HEAP32[$1 + 28 >> 2];
$1 = $1 + 32 | 0;
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29($11, HEAP32[$1 >> 2] + 40 | 0, 68080);
$4 = Math_imul($8, 60);
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$10 + 32 >> 2], HEAP32[($4 + HEAP32[$0 + 72 >> 2] | 0) + 76 >> 2] + 40 | 0, 68080);
$3 = HEAP32[$0 + 72 >> 2] + $4 | 0;
$5 = HEAP32[$3 + 88 >> 2];
$9 = HEAP32[$3 - -64 >> 2];
$4 = Vector__Vector_28_29($2 + 224 | 0);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $9 + 68 | 0, $5 + 68 | 0);
Vector__set_y_28float_29($4, Math_fround(0));
Joint__setGlobalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$10 + 32 >> 2], $4, 68056);
$5 = $3 + 52 | 0;
$1 = 1;
while (1) if (($1 | 0) == 5) {
$9 = HEAP32[$5 >> 2];
$11 = HEAP32[$5 + 4 >> 2];
$14 = HEAP32[$5 + 8 >> 2];
$1 = Vector__Vector_28_29($2 + 208 | 0);
$3 = $11 + 68 | 0;
$12 = $9 + 68 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $12);
label$5: {
label$6: {
if (Vector__x_28_29_20const($1) != Math_fround(0)) {
break label$6;
}
if (Vector__z_28_29_20const($1) != Math_fround(0)) {
break label$6;
}
$6 = Math_fround(0);
if (!HEAPU8[67600]) {
break label$5;
}
HEAP32[$2 + 32 >> 2] = $8 ? 2792 : 2846;
eprintf_28char_20const__2c_20____29(42057, $2 + 32 | 0);
break label$5;
}
$6 = atan2_28float_2c_20float_29(Vector__x_28_29_20const($1), Vector__z_28_29_20const($1));
}
Joint__addGlobalRotation_28Quaternion_20const__29($9, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 192 | 0, 68044, Math_fround(-$6), 1));
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $12);
label$7: {
label$8: {
if (Vector__y_28_29_20const($1) != Math_fround(0)) {
break label$8;
}
if (Vector__z_28_29_20const($1) != Math_fround(0)) {
break label$8;
}
$6 = Math_fround(0);
if (!HEAPU8[67600]) {
break label$7;
}
HEAP32[$2 + 16 >> 2] = $8 ? 2792 : 2846;
eprintf_28char_20const__2c_20____29(42149, $2 + 16 | 0);
break label$7;
}
$6 = atan2_28float_2c_20float_29(Vector__z_28_29_20const($1), Math_fround(-Vector__y_28_29_20const($1)));
}
Joint__addGlobalRotation_28Quaternion_20const__29($9, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 176 | 0, 68032, $6, 1));
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $12);
$4 = Vector__Vector_28_29($2 + 160 | 0);
$5 = $14 + 68 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $5, $3);
$13 = Quaternion__Quaternion_28_29($2 + 144 | 0);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($13, $4, $1);
$7 = Vector__Vector_28_29($2 + 128 | 0);
Quaternion__getAxisAngle_28Vector__2c_20float__29_20const($13, $7, $2 + 124 | 0);
$10 = Vector__Vector_28_29($2 + 112 | 0);
Quaternion__getAxisAngle_28Vector__2c_20float__29_20const($14 + 52 | 0, $10, $2 + 108 | 0);
Transform__transformDirection_28Vector__29_20const($3, $10);
label$9: {
label$10: {
if (Vector__x_28_29_20const($7) != Math_fround(0)) {
break label$10;
}
if (Vector__z_28_29_20const($7) != Math_fround(0)) {
break label$10;
}
$6 = Math_fround(0);
if (!HEAPU8[67600]) {
break label$9;
}
HEAP32[$2 >> 2] = $8 ? 2792 : 2846;
eprintf_28char_20const__2c_20____29(34163, $2);
break label$9;
}
if (Vector__z_28_29_20const($7) < Math_fround(0)) {
Vector__setInverse_28_29($7);
}
$6 = atan2_28float_2c_20float_29(Vector__x_28_29_20const($7), Vector__z_28_29_20const($7));
}
Joint__addGlobalRotation_28Quaternion_20const__29($9, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 88 | 0, 68080, $6, 1));
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $12);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $5, $3);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($13, $4, $1);
Joint__addGlobalRotation_28Quaternion_20const__29($11, $13);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $5, $3);
$1 = Vector__Vector_28_29($2 + 72 | 0);
$9 = HEAP32[(HEAP32[$0 + 72 >> 2] + Math_imul($8, 20) | 0) + 172 >> 2];
$3 = Vector__Vector_28_29($2 + 56 | 0);
Site__getGlobalPosition_28Vector__29($9, $3);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $5);
$7 = Quaternion__Quaternion_28_29($2 + 40 | 0);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($7, $1, $4);
Joint__addGlobalRotation_28Quaternion_20const__29($14, $7);
Site__getGlobalPosition_28Vector__29($9, $3);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($1, $3, $5);
$8 = $8 + 1 | 0;
continue label$1;
} else {
$3 = Math_imul($1, 12) + $5 | 0;
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2] + 40 | 0, 68080);
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2] + 40 | 0, 68080);
Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29(HEAP32[$3 + 8 >> 2], Site__getLocalPosition_28_29(HEAP32[((HEAP32[$0 + 72 >> 2] + Math_imul($8, 20) | 0) + ($1 << 2) | 0) + 172 >> 2]), 68080);
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
HanimAvatar__initialiseStaticArmData_28_29($0);
__stack_pointer = $2 + 272 | 0;
}
function __floatscan($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$7 = __stack_pointer - 48 | 0;
__stack_pointer = $7;
label$1: {
if ($2 >>> 0 <= 2) {
$6 = $1;
$2 = $2 << 2;
$9 = HEAP32[$2 + 55468 >> 2];
$13 = HEAP32[$2 + 55456 >> 2];
while (1) {
$2 = HEAP32[$1 + 4 >> 2];
label$4: {
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$4;
}
$2 = __shgetc($1);
}
if (isspace($2)) {
continue;
}
break;
}
$8 = 1;
label$6: {
label$7: {
switch ($2 - 43 | 0) {
case 0:
case 2:
break label$7;
default:
break label$6;
}
}
$8 = ($2 | 0) == 45 ? -1 : 1;
$2 = HEAP32[$1 + 4 >> 2];
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$6;
}
$2 = __shgetc($1);
}
label$9: {
label$10: {
while (1) {
if (HEAP8[$4 + 1267 | 0] == ($2 | 32)) {
label$13: {
if ($4 >>> 0 > 6) {
break label$13;
}
$2 = HEAP32[$1 + 4 >> 2];
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$13;
}
$2 = __shgetc($1);
}
$4 = $4 + 1 | 0;
if (($4 | 0) != 8) {
continue;
}
break label$10;
}
break;
}
if (($4 | 0) != 3) {
if (($4 | 0) == 8) {
break label$10;
}
if (!$3 | $4 >>> 0 < 4) {
break label$9;
}
if (($4 | 0) == 8) {
break label$10;
}
}
$5 = HEAP32[$1 + 116 >> 2];
$10 = $5;
$2 = HEAP32[$1 + 112 >> 2];
if (($5 | 0) > 0 | ($5 | 0) >= 0) {
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
if (!$3 | $4 >>> 0 < 4) {
break label$10;
}
$5 = $10;
$1 = ($5 | 0) < 0;
while (1) {
if (!$1) {
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
$4 = $4 - 1 | 0;
if ($4 >>> 0 > 3) {
continue;
}
break;
}
}
__extendsftf2($7, Math_fround(Math_fround($8 | 0) * Math_fround(infinity)));
$11 = HEAP32[$7 + 8 >> 2];
$5 = HEAP32[$7 + 12 >> 2];
$8 = $5;
$5 = HEAP32[$7 >> 2];
$12 = $5;
$10 = HEAP32[$7 + 4 >> 2];
break label$1;
}
label$19: {
label$20: {
label$21: {
if ($4) {
break label$21;
}
$4 = 0;
while (1) {
if (HEAP8[$4 + 6513 | 0] != ($2 | 32)) {
break label$21;
}
label$23: {
if ($4 >>> 0 > 1) {
break label$23;
}
$2 = HEAP32[$1 + 4 >> 2];
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$23;
}
$2 = __shgetc($1);
}
$4 = $4 + 1 | 0;
if (($4 | 0) != 3) {
continue;
}
break;
}
break label$20;
}
label$25: {
switch ($4 | 0) {
case 0:
label$27: {
if (($2 | 0) != 48) {
break label$27;
}
$4 = HEAP32[$1 + 4 >> 2];
label$28: {
if (($4 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $4 + 1;
$4 = HEAPU8[$4 | 0];
break label$28;
}
$4 = __shgetc($1);
}
if (($4 & -33) == 88) {
hexfloat($7 + 16 | 0, $1, $13, $9, $8, $3);
$11 = HEAP32[$7 + 24 >> 2];
$5 = HEAP32[$7 + 28 >> 2];
$8 = $5;
$5 = HEAP32[$7 + 16 >> 2];
$12 = $5;
$10 = HEAP32[$7 + 20 >> 2];
break label$1;
}
$5 = HEAP32[$1 + 116 >> 2];
if (($5 | 0) < 0) {
break label$27;
}
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
decfloat($7 + 32 | 0, $1, $2, $13, $9, $8, $3);
$2 = HEAP32[$7 + 40 >> 2];
$11 = $2;
$5 = HEAP32[$7 + 44 >> 2];
$8 = $5;
$5 = HEAP32[$7 + 32 >> 2];
$12 = $5;
$2 = HEAP32[$7 + 36 >> 2];
$10 = $2;
break label$1;
case 3:
break label$20;
default:
break label$25;
}
}
$2 = HEAP32[$1 + 112 >> 2];
$5 = HEAP32[$1 + 116 >> 2];
if (($5 | 0) > 0 | ($5 | 0) >= 0) {
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
break label$19;
}
label$32: {
$2 = HEAP32[$1 + 4 >> 2];
label$33: {
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$33;
}
$2 = __shgetc($1);
}
if (($2 | 0) == 40) {
$4 = 1;
break label$32;
}
$8 = 2147450880;
$5 = HEAP32[$1 + 116 >> 2];
if (($5 | 0) < 0) {
break label$1;
}
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
break label$1;
}
while (1) {
label$37: {
$2 = HEAP32[$1 + 4 >> 2];
label$39: {
if (($2 | 0) != HEAP32[$1 + 104 >> 2]) {
HEAP32[$6 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$39;
}
$2 = __shgetc($1);
}
$8 = $2 - 65 | 0;
label$38: {
if ($2 - 48 >>> 0 < 10 | $8 >>> 0 < 26) {
break label$38;
}
$8 = $2 - 97 | 0;
if (($2 | 0) == 95) {
break label$38;
}
if ($8 >>> 0 >= 26) {
break label$37;
}
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
$8 = 2147450880;
if (($2 | 0) == 41) {
break label$1;
}
$5 = HEAP32[$1 + 116 >> 2];
$2 = $5;
$9 = HEAP32[$1 + 112 >> 2];
if (($5 | 0) > 0 | ($5 | 0) >= 0) {
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
label$42: {
if ($3) {
if ($4) {
break label$42;
}
break label$1;
}
break label$19;
}
while (1) {
$4 = $4 - 1 | 0;
if (($2 | 0) > 0 | ($2 | 0) >= 0) {
HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
}
if ($4) {
continue;
}
break;
}
break label$1;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__shlim($1, 0, 0);
$5 = 0;
}
$8 = 0;
}
$2 = $0;
HEAP32[$2 >> 2] = $12;
$5 = $10;
HEAP32[$2 + 4 >> 2] = $5;
HEAP32[$2 + 8 >> 2] = $11;
$5 = $8;
HEAP32[$2 + 12 >> 2] = $5;
__stack_pointer = $7 + 48 | 0;
}
function Gesture__printPostureSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20PostureChangeFlags_2c_20PostureChangeFlags_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
label$1: {
label$2: {
$4 = HEAPU8[$0 + 13 | 0];
if (($4 & 13) == 13) {
$5 = HEAP32[HEAP32[$0 + 20 >> 2] + 56 >> 2];
$4 = HEAP32[HEAP32[$0 + 24 >> 2] + 56 >> 2];
label$4: {
if (!(!$5 | !$4)) {
if (operator___28Handshape_20const__2c_20Handshape_20const__29($5, $4)) {
break label$4;
}
break label$2;
}
if (!$5 ^ !$4) {
break label$2;
}
}
if (!(HEAPU8[$2 | 0] & 64)) {
break label$1;
}
OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
break label$1;
}
if (($4 & 12) == 12) {
Gesture__printSplitHandshape_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, ((HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8) & 64) >>> 6 | 0, ((HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8) & 64) >>> 6 | 0);
$4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
$5 = ($4 & 16) >>> 4 | 0;
$6 = ($4 & 32) >>> 5 | 0;
$4 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
Gesture__printSplitOrientation_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_2c_20bool_2c_20bool_29_20const($0, $1, $5, $6, ($4 & 16) >>> 4 | 0, ($4 & 32) >>> 5 | 0);
Gesture__printSplitAbsTarget_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, ((HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8) & 2) >>> 1 | 0, ((HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8) & 2) >>> 1 | 0);
return;
}
label$7: {
if ($4 & 2) {
if (HEAPU8[$3 | 0] & 64) {
OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2], $1);
}
if (PostureChangeFlags__sets_handRot_28_29_20const($3)) {
OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2], $1);
}
if (!(HEAPU8[$3 | 0] & 2)) {
break label$7;
}
OneHAbstractPosture__printLocationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2], $1);
return;
}
if (HEAPU8[$2 | 0] & 64) {
OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
}
if (PostureChangeFlags__sets_handRot_28_29_20const($2)) {
OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
}
if (!(HEAPU8[$2 | 0] & 2)) {
break label$7;
}
OneHAbstractPosture__printLocationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
}
return;
}
Gesture__printSplitHandshape_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, ((HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8) & 64) >>> 6 | 0, ((HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8) & 64) >>> 6 | 0);
}
$4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
$5 = ($4 & 16) >>> 4 | 0;
$6 = ($4 & 32) >>> 5 | 0;
$4 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
Gesture__printSplitOrientation_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_2c_20bool_2c_20bool_29_20const($0, $1, $5, $6, ($4 & 16) >>> 4 | 0, ($4 & 32) >>> 5 | 0);
$4 = HEAP32[$0 + 40 >> 2];
if (!(!$4 | !HEAP32[$4 + 44 >> 2])) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 6160);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, 1, 2955, HEAP32[HEAP32[$0 + 40 >> 2] + 44 >> 2], HEAP32[18218]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2] + 16 | 0, $1);
SiteID__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2] + 16 | 0, $1);
SiteIDPair__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[(isArmHandLocation_28int_29(HEAPU8[HEAP32[$0 + 20 >> 2] + 4 | 0]) ? $0 + 24 | 0 : $0 + 20 | 0) >> 2] + 4 | 0, $1);
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 6160), 32284);
return;
}
Gesture__printSplitAbsTarget_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, ((HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8) & 2) >>> 1 | 0, ((HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8) & 2) >>> 1 | 0);
}
function normal_scanLt($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 10:
break label$10;
case 11:
break label$11;
case 2:
break label$12;
case 1:
break label$13;
case 0:
break label$14;
case 17:
case 19:
break label$8;
case 12:
break label$9;
default:
break label$2;
}
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 2 | 0;
break label$7;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 3 | 0;
break label$7;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 4 | 0;
break label$7;
}
$5 = $1 + 1 | 0;
$4 = -1;
if (($5 | 0) == ($2 | 0)) {
break label$5;
}
$4 = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0];
if (($4 | 0) == 20) {
break label$6;
}
if (($4 | 0) == 27) {
return normal_scanComment($0, $1 + 2 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $5;
return 0;
}
return normal_scanPi($0, $1 + 1 | 0, $2, $3);
}
return normal_scanEndTag($0, $1 + 1 | 0, $2, $3);
}
$1 = $1 + 1 | 0;
}
label$16: {
label$17: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = 1;
label$19: {
label$20: {
label$21: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$3;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$20;
}
break label$4;
case 1:
if (($2 - $1 | 0) < 3) {
break label$3;
}
$4 = 3;
if (!(FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0)) {
break label$4;
}
break label$20;
case 12:
break label$16;
case 6:
break label$17;
case 4:
case 5:
case 16:
break label$19;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$20;
case 2:
break label$21;
default:
break label$4;
}
}
if (($2 - $1 | 0) < 4) {
break label$3;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
label$24: {
label$25: {
label$26: {
while (1) {
$5 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$4 = 2;
label$28: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 12:
break label$16;
case 6:
break label$17;
case 17:
case 19:
break label$24;
case 2:
break label$25;
case 1:
break label$26;
case 4:
case 5:
case 16:
continue;
case 0:
break label$28;
default:
break label$4;
}
}
break;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$5;
}
$4 = 3;
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$4;
}
break label$24;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$5;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$4;
}
break label$24;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$5;
}
$4 = 5;
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
return normal_scanAtts($0, $4 + $5 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $1 + 1;
return 2;
}
$0 = $1 + 1 | 0;
$4 = -1;
if (($2 | 0) == ($0 | 0)) {
break label$5;
}
if (HEAPU8[$1 + 1 | 0] != 62) {
HEAP32[$3 >> 2] = $0;
return 0;
}
HEAP32[$3 >> 2] = $1 + 2;
return 4;
}
$4 = normal_scanCdataSection($1 + 2 | 0, $2, $3);
}
return $4;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
return -2;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
return -1;
}
function HanimAvatar__createTorsoMesh_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$1 = __stack_pointer - 352 | 0;
__stack_pointer = $1;
label$1: {
label$2: {
label$3: {
label$4: {
if (HEAP32[HEAP32[HEAP32[$0 + 72 >> 2] >> 2] + 20 >> 2]) {
$7 = IFS_spec__IFS_spec_28_29(operator_20new_28unsigned_20long_29(16));
HEAP32[HEAP32[HEAP32[HEAP32[$0 + 72 >> 2] >> 2] + 20 >> 2] + 16 >> 2] = $7;
$2 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_ii(260, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$2;
}
HEAP32[$7 >> 2] = $5;
$2 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_ii(259, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$3;
}
HEAP32[$7 + 4 >> 2] = $5;
$4 = 0;
$3 = 0;
while (1) {
Vector__Vector_28_29(($1 + 112 | 0) + Math_imul($3, 12) | 0);
$3 = $3 + 1 | 0;
if (($3 | 0) != 20) {
continue;
}
break;
}
label$7: while (1) {
if (($4 | 0) != 4) {
$8 = HEAP32[($4 << 2) + 49072 >> 2];
$3 = 0;
while (1) if (($3 | 0) == 5) {
$4 = $4 + 1 | 0;
continue label$7;
} else {
HEAP32[$1 + 88 >> 2] = 0;
HEAP32[$1 + 108 >> 2] = 0;
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($1 + 104 | 0, $8, HEAP32[($3 << 2) + 48928 >> 2], 0, 0, 1, 0);
HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 104 >> 2];
$2 = (($1 + 112 | 0) + Math_imul($4, 60) | 0) + Math_imul($3, 12) | 0;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $1 + 84 | 0, $2, $1 + 88 | 0, $1 + 108 | 0);
$6 = HEAPU8[67563];
$5 = HEAP32[$1 + 88 >> 2];
label$12: {
label$13: {
if (!$5) {
if (!($6 & 255)) {
break label$12;
}
$5 = 20145;
break label$13;
}
if ($6 & 255) {
HEAP32[$1 + 72 >> 2] = HEAP32[$5 >> 2];
HEAP32[$1 + 68 >> 2] = $3;
HEAP32[$1 + 64 >> 2] = $4;
eprintf_28char_20const__2c_20____29(17087, $1 - -64 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eputc_28char_29(10);
}
Vector__setAdd_28Vector_20const__29($2, $5 + 68 | 0);
if (!HEAPU8[67563]) {
break label$12;
}
$5 = 10670;
}
HEAP32[$1 + 52 >> 2] = $3;
HEAP32[$1 + 48 >> 2] = $4;
eprintf_28char_20const__2c_20____29($5, $1 + 48 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = $3 + 1 | 0;
continue;
}
}
break;
}
$5 = operator_20new_28unsigned_20long_29(12);
HEAP32[19359] = 0;
$4 = invoke_iii(330, $5 | 0, 4) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$4;
}
HEAP32[$0 + 80 >> 2] = $4;
$3 = 0;
while (1) {
if (($3 | 0) == 4) {
$4 = 0;
while (1) {
$3 = 0;
if (($4 | 0) == 4) {
$0 = HEAP32[$7 + 4 >> 2];
$6 = 0;
label$20: while (1) {
if (($6 | 0) != 3) {
$4 = Math_imul($6, 41);
$3 = 0;
while (1) if (($3 | 0) == 40) {
$6 = $6 + 1 | 0;
continue label$20;
} else {
HEAP32[$1 + 16 >> 2] = -1;
$2 = $3 + $4 | 0;
HEAP32[$1 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $2 + 1;
HEAP32[$1 + 8 >> 2] = $2 + 42;
HEAP32[$1 + 4 >> 2] = $2 + 41;
DynamicArray_short_2c_20_28short_29_1___appendElementsX_28int_2c_20____29($0, 5, $1);
$3 = $3 + 1 | 0;
continue;
}
}
break;
}
__stack_pointer = $1 + 352 | 0;
return;
} else {
while (1) {
if (($3 & 65535) >>> 0 < 41) {
$2 = Vector__Vector_28_29($1 + 88 | 0);
TorsoCurve__GetCurvePoint_28float_2c_20Vector__29_20const(HEAP32[HEAP32[HEAP32[$0 + 80 >> 2] + 8 >> 2] + ($4 << 2) >> 2], Math_fround(Math_fround($3 << 16 >> 16) / Math_fround(40)), $2);
Vector__checkValidVector_28_29_20const($2);
DynamicArray1_Vector___appendElement_28Vector_20const__29(HEAP32[$7 >> 2], $2);
$3 = $3 + 1 | 0;
continue;
}
break;
}
$4 = $4 + 1 | 0;
continue;
}
}
}
$5 = operator_20new_28unsigned_20long_29(136);
HEAP32[19359] = 0;
$2 = ($1 + 112 | 0) + Math_imul($3, 60) | 0;
$6 = invoke_iiiiiii(331, $5 | 0, $2 | 0, $2 + 12 | 0, $2 + 24 | 0, $2 + 36 | 0, $2 + 48 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
$2 = $3 << 2;
HEAP32[$2 + HEAP32[HEAP32[$0 + 80 >> 2] + 8 >> 2] >> 2] = $6;
if (HEAPU8[67572]) {
HEAP32[$1 + 32 >> 2] = $3;
eprintf_28char_20const__2c_20____29(33650, $1 + 32 | 0);
TorsoCurve__print_28_IO_FILE__2c_20short_29_20const(HEAP32[HEAP32[HEAP32[$0 + 80 >> 2] + 8 >> 2] + $2 >> 2], HEAP32[16886], 3);
eputc_28char_29(10);
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
break label$4;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(34305, 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 14) | 0, 60484, 0);
abort();
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
}
__resumeException($1 | 0);
abort();
}
function Handshape__CalcJointRotations_28Gesture_20const__2c_20HanimAvatar_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0);
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
HandJointRotations__setFrom_28Gesture_20const__2c_20SideIndex_29(HEAP32[$0 + 236 >> 2], $1, HEAPU8[$0 + 232 | 0]);
$8 = $0 + 160 | 0;
if (!ThumbBending__defined_28_29_20const($8)) {
ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($8, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0));
}
HEAP32[$3 - -64 >> 2] = 0;
HEAP32[$3 + 56 >> 2] = 0;
HEAP32[$3 + 60 >> 2] = 0;
HEAP32[$3 + 48 >> 2] = 0;
HEAP32[$3 + 52 >> 2] = 0;
HEAP16[$3 + 40 >> 1] = 65535;
HEAP32[$3 + 32 >> 2] = -1;
HEAP32[$3 + 36 >> 2] = -1;
$6 = 1;
label$2: {
label$3: {
while (1) {
label$5: {
if (($6 | 0) == 5) {
if (($10 & 65535) == 1) {
break label$5;
}
$1 = 0;
$2 = $10 << 16 >> 16;
$7 = (($2 | 0) > 0 ? $2 : 0) & 65535;
$9 = Math_fround($2 - 1 | 0);
while (1) {
if (($1 | 0) == ($7 | 0)) {
break label$3;
}
$4 = HEAP16[($3 + 32 | 0) + ($1 << 1) >> 1];
$2 = HEAP32[HEAP32[$0 + 236 >> 2] + Math_imul($4, 12) >> 2];
$4 = $4 << 2;
$5 = HEAPF32[$4 + 69120 >> 2];
wasm2js_i32$1 = $2, wasm2js_f32$0 = Math_fround(Math_fround(midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$4 + 69088 >> 2], $5, Math_fround(Math_fround($1 << 16 >> 16) / $9)) * HEAPF32[($3 + 48 | 0) + $4 >> 2]) * Math_fround(.25)), 
wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 40 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, Math_fround(wasm2js_f32$0));
$1 = $1 + 1 | 0;
continue;
}
}
$12 = $6 << 4;
$1 = $12 + $0 | 0;
$4 = HEAP32[$1 + 88 >> 2];
$2 = HEAP32[$1 + 92 >> 2];
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 20 >> 2] = $2;
$4 = HEAP32[$1 + 84 >> 2];
$2 = HEAP32[$1 + 80 >> 2];
HEAP32[$3 + 8 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $4;
label$8: {
if (!FingerBending__defined_28_29_20const($3 + 8 | 0)) {
break label$8;
}
$5 = HEAPF32[$3 + 20 >> 2];
label$9: {
if ($5 == Math_fround(-100)) {
break label$9;
}
HEAPF32[($3 + 48 | 0) + ($6 << 2) >> 2] = $5;
if ($5 == Math_fround(0)) {
break label$9;
}
HEAP16[($3 + 32 | 0) + ($10 << 16 >> 16 << 1) >> 1] = $6;
$10 = $10 + 1 | 0;
}
$13 = $12 + 60256 | 0;
$1 = 0;
while (1) {
if (($1 | 0) == 3) {
break label$8;
}
$2 = $1 << 2;
$5 = HEAPF32[$2 + ($12 + 60400 | 0) >> 2];
$9 = FingerBending__Bendn_28short_29_20const($3 + 8 | 0, $1 << 16 >> 16);
$4 = HEAP32[(HEAP32[$0 + 236 >> 2] + Math_imul($6, 12) | 0) + (HEAP32[$2 + 49152 >> 2] << 2) >> 2];
$7 = HEAP32[HEAP32[$4 >> 2] + 32 >> 2];
$11 = HEAPF32[$2 + $13 >> 2];
HEAP32[19359] = 0;
invoke_vif($7 | 0, $4 | 0, Math_fround(Math_fround($11 * Math_fround($5 + Math_fround(($9 == Math_fround(-100) ? Math_fround(0) : Math_fround($9 * Math_fround(.25))) * Math_fround(Math_fround(1) - $5))))));
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
$1 = $1 + 1 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
FingerBending___FingerBending_28_29($3 + 8 | 0);
break label$2;
}
$6 = $6 + 1 | 0;
FingerBending___FingerBending_28_29($3 + 8 | 0);
continue;
}
break;
}
$1 = HEAP16[$3 + 32 >> 1];
$7 = HEAP32[HEAP32[$0 + 236 >> 2] + Math_imul($1, 12) >> 2];
$2 = ($1 | 0) < 2 ? 69088 : 69120;
$1 = $1 << 2;
FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 40 >> 2]]($7, Math_fround(Math_fround(HEAPF32[$2 + $1 >> 2] * HEAPF32[($3 + 48 | 0) + $1 >> 2]) * Math_fround(.25)));
}
HEAP32[$3 + 24 >> 2] = HEAP32[$8 + 16 >> 2];
$2 = HEAP32[$8 + 12 >> 2];
$4 = HEAP32[$8 + 8 >> 2];
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 20 >> 2] = $2;
$4 = HEAP32[$8 + 4 >> 2];
$2 = HEAP32[$8 >> 2];
HEAP32[$3 + 8 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $4;
$11 = Math_fround(0);
label$12: {
label$13: {
if (!ThumbBending__defined_28_29_20const($3 + 8 | 0)) {
break label$13;
}
$5 = HEAPF32[$3 + 12 >> 2];
if ($5 != Math_fround(-100)) {
HEAPF32[$3 + 48 >> 2] = $5;
$11 = $5;
}
$1 = 0;
while (1) {
if (($1 | 0) == 3) {
break label$13;
}
$2 = $1 << 2;
$5 = HEAPF32[$2 + 60400 >> 2];
$9 = ThumbBending__Bendn_28short_29_20const($3 + 8 | 0, $1 << 16 >> 16);
$7 = HEAP32[HEAP32[$0 + 236 >> 2] + (HEAP32[$2 + 49152 >> 2] << 2) >> 2];
$6 = HEAP32[HEAP32[$7 >> 2] + 32 >> 2];
HEAP32[19359] = 0;
invoke_vif($6 | 0, $7 | 0, Math_fround(Math_fround(HEAPF32[$2 + 60256 >> 2] * Math_fround($5 + Math_fround(($9 == Math_fround(-100) ? Math_fround(0) : Math_fround($9 * Math_fround(.25))) * Math_fround(Math_fround(1) - $5))))));
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$12;
}
$1 = $1 + 1 | 0;
continue;
}
}
$1 = HEAP32[HEAP32[$0 + 236 >> 2] >> 2];
$4 = HEAP32[HEAP32[$1 >> 2] + 40 >> 2];
HEAP32[19359] = 0;
invoke_vif($4 | 0, $1 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[17620] * $11) * Math_fround(.25))));
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$12;
}
label$16: {
$5 = HEAPF32[$0 + 168 >> 2];
if ($5 == Math_fround(-100)) {
break label$16;
}
$4 = HEAP32[HEAP32[$1 >> 2] + 48 >> 2];
HEAP32[19359] = 0;
invoke_vif($4 | 0, $1 | 0, Math_fround(Math_fround(Math_fround($5 * HEAPF32[17620]) * Math_fround(.25))));
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$16;
}
break label$12;
}
ThumbBending___ThumbBending_28_29($3 + 8 | 0);
__stack_pointer = $3 + 80 | 0;
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ThumbBending___ThumbBending_28_29($3 + 8 | 0);
}
__resumeException($1 | 0);
abort();
}
function Gesture__SetConstellationDefaults_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$2 = __stack_pointer - 144 | 0;
__stack_pointer = $2;
$1 = HEAP32[$0 + 40 >> 2];
if ($1) {
$3 = SiteIDPair__defined_28_29_20const($1);
$5 = SiteIDPair__defined_28_29_20const(HEAP32[$0 + 40 >> 2] + 12 | 0);
$1 = HEAP32[$0 + 40 >> 2];
$4 = SiteIDPair__defined_28_29_20const($1 + 24 | 0);
label$2: {
if (!HEAPU8[67560]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(48363, 0);
$1 = HEAP32[$0 + 40 >> 2];
if (!$1) {
eputs_28char_20const__29(14681);
break label$2;
}
ArmHandConstellation__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
}
$1 = HEAPU8[$0 + 13 | 0];
if ($1 & 4) {
ArmHandConstellation__SetDefaultHandsite_28bool_2c_20bool_2c_20Handshape_20const__2c_20HanimAvatar_20const__29(HEAP32[$0 + 40 >> 2], 1, ($1 & 64) >>> 6 | 0, HEAP32[HEAP32[$0 + 20 >> 2] + 56 >> 2], HEAP32[$0 >> 2]);
$1 = HEAPU8[$0 + 13 | 0];
}
if ($1 & 8) {
ArmHandConstellation__SetDefaultHandsite_28bool_2c_20bool_2c_20Handshape_20const__2c_20HanimAvatar_20const__29(HEAP32[$0 + 40 >> 2], 0, ($1 & 64) >>> 6 | 0, HEAP32[HEAP32[$0 + 24 >> 2] + 56 >> 2], HEAP32[$0 >> 2]);
}
$1 = $4 & $5;
label$6: {
if (!($3 | $1)) {
Direction3__Direction3_28Direction3_20const__29($2 + 120 | 0, HEAP32[$0 + 20 >> 2] + 20 | 0);
DefaultSiteIDForExtfidir_28Direction3_29($2 + 136 | 0);
Direction3__Direction3_28Direction3_20const__29($2 + 96 | 0, HEAP32[$0 + 24 >> 2] + 20 | 0);
DefaultSiteIDForExtfidir_28Direction3_29($2 + 112 | 0);
if ($5) {
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 24 >> 1] = HEAPU16[$2 + 112 >> 1];
HEAP8[$1 + 26 | 0] = HEAPU8[$2 + 114 | 0];
break label$6;
}
if ($4) {
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 12 >> 1] = HEAPU16[$2 + 136 >> 1];
HEAP8[$1 + 14 | 0] = HEAPU8[$2 + 138 | 0];
break label$6;
}
$1 = HEAP32[$2 + 136 >> 2];
HEAP32[$2 + 80 >> 2] = $1;
$5 = HEAP32[$2 + 112 >> 2];
HEAP32[$2 + 72 >> 2] = $5;
HEAP32[$2 + 20 >> 2] = $1;
HEAP32[$2 + 16 >> 2] = $5;
MergeDefaultSiteIDs_28SiteID_2c_20SiteID_29($2 + 88 | 0, $2 + 20 | 0, $2 + 16 | 0);
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 12 >> 1] = HEAPU16[$2 + 88 >> 1];
HEAP8[$1 + 14 | 0] = HEAPU8[$2 + 90 | 0];
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 24 >> 1] = HEAPU16[$2 + 88 >> 1];
HEAP8[$1 + 26 | 0] = HEAPU8[$2 + 90 | 0];
break label$6;
}
if (!$1) {
break label$6;
}
if (!SiteID__isArmHandSite_28_29_20const(HEAP32[$0 + 40 >> 2] + 12 | 0)) {
break label$6;
}
if (!SiteID__isArmHandSite_28_29_20const(HEAP32[$0 + 40 >> 2] + 24 | 0)) {
break label$6;
}
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 36 >> 1] = HEAPU16[$1 + 24 >> 1];
HEAP8[$1 + 38 | 0] = HEAPU8[$1 + 26 | 0];
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 40 >> 1] = HEAPU16[$1 + 12 >> 1];
HEAP8[$1 + 42 | 0] = HEAPU8[$1 + 14 | 0];
Direction3__Direction3_28Direction3_20const__29($2 + 48 | 0, HEAP32[$0 + 20 >> 2] + 20 | 0);
DefaultSiteIDForExtfidir_28Direction3_29($2 - -64 | 0);
Direction3__Direction3_28Direction3_20const__29($2 + 24 | 0, HEAP32[$0 + 24 >> 2] + 20 | 0);
DefaultSiteIDForExtfidir_28Direction3_29($2 + 40 | 0);
HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 64 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 40 >> 2];
MergeDefaultSiteIDs_28SiteID_2c_20SiteID_29($2 + 136 | 0, $2 + 12 | 0, $2 + 8 | 0);
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 12 >> 1] = HEAPU16[$2 + 136 >> 1];
HEAP8[$1 + 14 | 0] = HEAPU8[$2 + 138 | 0];
$1 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 24 >> 1] = HEAPU16[$2 + 136 >> 1];
HEAP8[$1 + 26 | 0] = HEAPU8[$2 + 138 | 0];
}
$1 = HEAP32[HEAP32[$0 + 24 >> 2] + 56 >> 2];
$5 = HEAP32[HEAP32[$0 + 20 >> 2] + 56 >> 2];
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 36 | 0, $5);
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 40 | 0, $1);
label$10: {
if (!$3) {
break label$10;
}
$4 = HEAP32[18208];
$6 = HEAPU8[$4 + HEAP32[$5 >> 2] | 0];
$3 = HEAP32[$1 >> 2];
$4 = HEAPU8[$4 + $3 | 0];
label$11: {
if (($6 | 0) != ($4 | 0)) {
$3 = ($6 | 0) != 0;
$4 = ($4 | 0) != 0;
break label$11;
}
$3 = SiteID__isHandSite_28_29_20const(HEAP32[$0 + 40 >> 2] + 24 | 0);
$4 = SiteID__isHandSite_28_29_20const(HEAP32[$0 + 40 >> 2] + 12 | 0);
}
if (($4 | 0) == ($3 | 0)) {
break label$10;
}
$4 = HEAP32[$0 + 40 >> 2];
if ($3) {
$3 = HEAP32[$4 + 4 >> 2];
$6 = HEAP32[$4 >> 2];
HEAP32[$4 + 12 >> 2] = $6;
HEAP32[$4 + 16 >> 2] = $3;
HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 8 >> 2];
SiteIDPair__setUndefined_28_29(HEAP32[$0 + 40 >> 2]);
$3 = HEAP32[$0 + 40 >> 2];
HEAP16[$3 + 24 >> 1] = HEAPU16[$3 + 36 >> 1];
HEAP8[$3 + 26 | 0] = HEAPU8[$3 + 38 | 0];
SiteID__setUndefined_28_29(HEAP32[$0 + 40 >> 2] + 28 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($2 + 136 | 0, 1, DomSide_28bool_29((HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0));
$3 = HEAP32[$0 + 40 >> 2];
HEAP16[$3 + 36 >> 1] = HEAPU16[$2 + 136 >> 1];
HEAP8[$3 + 38 | 0] = HEAPU8[$2 + 138 | 0];
break label$10;
}
$6 = HEAP32[$4 + 4 >> 2];
$3 = HEAP32[$4 >> 2];
HEAP32[$4 + 24 >> 2] = $3;
HEAP32[$4 + 28 >> 2] = $6;
HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 8 >> 2];
SiteIDPair__setUndefined_28_29(HEAP32[$0 + 40 >> 2]);
$3 = HEAP32[$0 + 40 >> 2];
HEAP16[$3 + 12 >> 1] = HEAPU16[$3 + 40 >> 1];
HEAP8[$3 + 14 | 0] = HEAPU8[$3 + 42 | 0];
SiteID__setUndefined_28_29(HEAP32[$0 + 40 >> 2] + 16 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($2 + 136 | 0, 1, NondomSide_28bool_29((HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0));
$3 = HEAP32[$0 + 40 >> 2];
HEAP16[$3 + 40 >> 1] = HEAPU16[$2 + 136 >> 1];
HEAP8[$3 + 42 | 0] = HEAPU8[$2 + 138 | 0];
}
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 12 | 0, $5);
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 16 | 0, $5);
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 24 | 0, $1);
CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29(HEAP32[$0 + 40 >> 2] + 28 | 0, $1);
}
__stack_pointer = $2 + 144 | 0;
}
function HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 272 | 0;
__stack_pointer = $3;
MakeSiteID_28Location_29($3 + 264 | 0, $1);
HEAP32[$3 + 260 >> 2] = 0;
HEAP32[$3 + 256 >> 2] = 0;
HEAP32[$3 + 252 >> 2] = 0;
HEAP32[$3 + 248 >> 2] = 0;
$5 = Vector__Vector_28_29($3 + 232 | 0);
$10 = Vector__Vector_28_29($3 + 216 | 0);
$13 = Vector__Vector_28_29($3 + 200 | 0);
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 192 | 0, $3 + 264 | 0, 0);
HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 192 >> 2];
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $3 + 76 | 0, 0, $3 + 260 | 0, $3 + 256 | 0);
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 184 | 0, $3 + 264 | 0, 2);
HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 184 >> 2];
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $3 + 72 | 0, 0, $3 + 260 | 0, $3 + 252 | 0);
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 176 | 0, $3 + 264 | 0, 1);
HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 176 >> 2];
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $3 + 68 | 0, 0, $3 + 260 | 0, $3 + 248 | 0);
$4 = HEAP32[$3 + 252 >> 2];
label$1: {
if (!$4) {
break label$1;
}
$7 = HEAP32[$3 + 248 >> 2];
if (!$7) {
break label$1;
}
Site__getGlobalPosition_28Vector__29($4, $10);
Site__getGlobalPosition_28Vector__29($7, $13);
$6 = HEAP32[$3 + 256 >> 2];
label$2: {
if (!$6) {
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($5, $10, $13);
break label$2;
}
Site__getGlobalPosition_28Vector__29($6, $5);
}
if (HEAPU8[67563]) {
$11 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $1);
HEAP32[$3 + 52 >> 2] = $6;
HEAP32[$3 + 48 >> 2] = $11;
eprintf_28char_20const__2c_20____29(19202, $3 + 48 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
}
$6 = $6 ? HEAP32[$6 + 24 >> 2] : 0;
$11 = Vector__Vector_28_29($3 + 160 | 0);
$8 = Vector__Vector_28_29($3 + 144 | 0);
FakeFar_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20Vector__2c_20Vector__29($5, $10, $6, HEAP32[$4 + 24 >> 2], $2, $11, $8);
label$7: {
if (HEAP32[$4 + 24 >> 2]) {
if ($6) {
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 136 | 0, $3 + 264 | 0, 4);
$12 = HEAPF32[$4 + 20 >> 2];
HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 136 >> 2];
$9 = HEAP32[$3 + 260 >> 2];
$8 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $3 + 44 | 0, $9, $11, $12, $8);
break label$7;
}
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 128 | 0, $3 + 264 | 0, 4);
$12 = HEAPF32[$4 + 20 >> 2];
$9 = HEAP32[$3 + 260 >> 2];
$8 = Vector__Vector_28Vector_20const__29_1($3 + 112 | 0, HEAP32[$4 + 24 >> 2]);
HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 128 >> 2];
$8 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $3 + 40 | 0, $9, $11, $12, $8);
break label$7;
}
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 104 | 0, $3 + 264 | 0, 4);
$12 = HEAPF32[$4 + 20 >> 2];
HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 104 >> 2];
$9 = HEAP32[$3 + 260 >> 2];
$8 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $3 + 36 | 0, $9, $11, $12);
}
if (HEAPU8[67563]) {
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $1), 
HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(17230, $3 + 32 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($10, HEAP32[16886], 3);
eputc_28char_29(10);
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $1), 
HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(17214, $3 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputc_28char_29(10);
Site__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
Site__print_28_IO_FILE__29_20const($8, HEAP32[16886]);
}
$4 = Vector__Vector_28_29($3 + 160 | 0);
$10 = Vector__Vector_28_29($3 + 144 | 0);
FakeFar_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20Vector__2c_20Vector__29($5, $13, $6, HEAP32[$7 + 24 >> 2], $2, $4, $10);
label$11: {
if (HEAP32[$7 + 24 >> 2]) {
if ($6) {
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 96 | 0, $3 + 264 | 0, 3);
$2 = HEAPF32[$7 + 20 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 96 >> 2];
$5 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $3 + 12 | 0, $9, $4, $2, $10);
break label$11;
}
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 88 | 0, $3 + 264 | 0, 3);
$2 = HEAPF32[$7 + 20 >> 2];
$5 = Vector__Vector_28Vector_20const__29_1($3 + 112 | 0, HEAP32[$7 + 24 >> 2]);
HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 88 >> 2];
$5 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $3 + 8 | 0, $9, $4, $2, $5);
break label$11;
}
SiteID__makeSide_28AbsoluteBodySide_29_20const($3 + 80 | 0, $3 + 264 | 0, 3);
$2 = HEAPF32[$7 + 20 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 80 >> 2];
$5 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $3 + 4 | 0, $9, $4, $2);
}
if (!HEAPU8[67563]) {
break label$1;
}
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(16396, $3);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
eputc_28char_29(10);
Site__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
Site__print_28_IO_FILE__29_20const($5, HEAP32[16886]);
}
__stack_pointer = $3 + 272 | 0;
}
function normal_scanPi($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 2:
break label$7;
case 1:
break label$8;
case 0:
break label$9;
default:
break label$10;
}
}
label$11: {
switch ($4 - 22 | 0) {
case 1:
break label$4;
case 0:
case 2:
break label$6;
default:
break label$11;
}
}
break label$4;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$4;
}
$4 = $1 + 2 | 0;
break label$5;
}
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$1;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$4;
}
$4 = $1 + 3 | 0;
break label$5;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$1;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$4;
}
$4 = $1 + 4 | 0;
break label$5;
}
$4 = $1 + 1 | 0;
}
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
while (1) {
if (($2 | 0) == ($4 | 0)) {
break label$2;
}
$5 = 1;
$7 = $4;
label$19: {
label$20: {
label$21: {
switch (HEAPU8[(HEAPU8[$4 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $4 | 0) < 2) {
break label$12;
}
$5 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $4) | 0) {
break label$20;
}
break label$16;
case 1:
if (($2 - $4 | 0) < 3) {
break label$12;
}
$5 = 3;
if (FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $4) | 0) {
break label$20;
}
break label$16;
case 24:
break label$16;
case 10:
break label$17;
case 4:
case 5:
case 16:
break label$19;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$20;
case 2:
break label$21;
default:
break label$14;
}
}
if (($2 - $4 | 0) < 4) {
break label$12;
}
$5 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $4) | 0)) {
break label$16;
}
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
if (!normal_checkPiTarget($1, $4, $6 + 12 | 0)) {
break label$16;
}
$5 = $4 + 1 | 0;
while (1) {
$4 = $5;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
label$25: {
switch (HEAPU8[(HEAPU8[$4 | 0] + $0 | 0) + 72 | 0]) {
case 5:
if (($2 - $4 | 0) < 2) {
break label$12;
}
if (FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $4) | 0) {
break label$13;
}
$5 = $4 + 2 | 0;
continue;
case 6:
if (($2 - $4 | 0) < 3) {
break label$12;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $4) | 0) {
break label$13;
}
$5 = $4 + 3 | 0;
continue;
case 7:
if (($2 - $4 | 0) < 4) {
break label$12;
}
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $4) | 0) {
break label$13;
}
$5 = $4 + 4 | 0;
continue;
case 15:
$5 = $4 + 1 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$5 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $4 + 2;
$5 = HEAP32[$6 + 12 >> 2];
break label$1;
case 0:
case 1:
case 8:
break label$13;
default:
break label$25;
}
}
$5 = $4 + 1 | 0;
continue;
}
}
if (normal_checkPiTarget($1, $4, $6 + 12 | 0)) {
break label$15;
}
}
HEAP32[$3 >> 2] = $4;
break label$3;
}
$5 = -1;
$7 = $4 + 1 | 0;
if (($7 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$4 + 1 | 0] != 62) {
break label$14;
}
HEAP32[$3 >> 2] = $4 + 2;
$5 = HEAP32[$6 + 12 >> 2];
break label$1;
}
HEAP32[$3 >> 2] = $7;
break label$3;
}
HEAP32[$3 >> 2] = $4;
break label$3;
}
$5 = -2;
break label$1;
}
HEAP32[$3 >> 2] = $1;
}
$5 = 0;
break label$1;
}
$5 = -1;
}
__stack_pointer = $6 + 16 | 0;
return $5;
}
function CircularMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, $2, 3755, Direction3__Direction3_28Direction3_20const__29($4 + 48 | 0, $0 + 528 | 0));
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, $2, 3748, Direction3__Direction3_28Direction3_20const__29($4 + 32 | 0, $0 + 540 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8422, HEAP32[$0 + 552 >> 2], HEAP32[18787]);
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, $2, 2105, Direction2__Direction2_28Direction2_20const__29($4 + 24 | 0, $0 + 556 | 0));
if (HEAPU8[$0 + 564 | 0]) {
label$2: {
if ($2) {
$3 = 15263;
$5 = 15050;
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$5 = 15051;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $5);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 564 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
if (HEAPU8[$0 + 565 | 0]) {
label$5: {
if ($2) {
$3 = 15263;
$5 = 15030;
break label$5;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$5 = 15031;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $5);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 565 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, $2, 10066, Direction2__Direction2_28Direction2_20const__29($4 + 16 | 0, $0 + 568 | 0));
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, $2, 6029, Direction2__Direction2_28Direction2_20const__29($4 + 8 | 0, $0 + 576 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8302, HEAP32[$0 + 584 >> 2], HEAP32[18787]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 4871, HEAP32[$0 + 588 >> 2], HEAP32[18784]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8265, HEAP32[$0 + 592 >> 2], HEAP32[18787]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 9347, HEAP32[$0 + 596 >> 2], HEAP32[18785]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8279, HEAP32[$0 + 600 >> 2], HEAP32[18787]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 4864, HEAP32[$0 + 604 >> 2], HEAP32[18784]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8258, HEAP32[$0 + 608 >> 2], HEAP32[18787]);
if (HEAPU16[$0 + 612 >> 1]) {
label$8: {
if ($2) {
$3 = 15263;
$2 = 15184;
break label$8;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$2 = 15185;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $2);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29($1, HEAP16[$0 + 612 >> 1]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
__stack_pointer = $4 - -64 | 0;
}
function SimplifyMovement_28BasicMovement___29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 96 | 0;
__stack_pointer = $4;
$2 = HEAP32[$0 >> 2];
label$1: {
if (!$2) {
break label$1;
}
if (HEAPU8[67565]) {
$6 = HEAPF32[$2 + 52 >> 2];
$1 = HEAP32[$2 + 4 >> 2];
HEAPF64[$4 + 80 >> 3] = HEAPF32[$2 + 40 >> 2];
HEAP32[$4 + 64 >> 2] = $1;
HEAPF64[$4 + 72 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27875, $4 - -64 | 0);
$2 = HEAP32[$0 >> 2];
}
label$3: {
label$4: {
switch (HEAP32[$2 + 4 >> 2] - 5 | 0) {
case 0:
case 1:
$3 = $2 + 528 | 0;
label$7: {
label$8: {
label$9: {
label$10: {
$5 = HEAP32[$2 + 540 >> 2];
switch ($5 | 0) {
case 0:
break label$10;
case 1:
break label$9;
default:
break label$8;
}
}
$5 = operator_20new_28unsigned_20long_29(528);
$3 = HEAP32[$2 + 8 >> 2];
HEAP32[19359] = 0;
$3 = invoke_iii(377, $5 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[$0 >> 2] = $3;
BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
if (!HEAPU8[67590]) {
break label$3;
}
LogTime_28_29();
HEAP32[$4 + 32 >> 2] = HEAP32[1];
eprintf_28char_20const__2c_20____29(42639, $4 + 32 | 0);
break label$3;
}
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, 0);
HEAP32[$0 >> 2] = $1;
BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($1, $2);
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($3, 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
SimplifyMovement_28BasicMovement___29($0);
if (!HEAPU8[67590]) {
break label$3;
}
LogTime_28_29();
HEAP32[$4 + 48 >> 2] = HEAP32[1];
eprintf_28char_20const__2c_20____29(42560, $4 + 48 | 0);
break label$3;
}
$1 = 0;
$5 = ($5 | 0) > 0 ? $5 : 0;
while (1) if (($1 | 0) == ($5 | 0)) {
StripNulls_28DynamicArrayP_BasicMovement___29($3);
CompoundMovement__DeNest_28_29($2);
if (HEAP32[HEAP32[$0 >> 2] + 4 >> 2] != 5) {
break label$3;
}
MergeTargettedMovements_28DynamicArrayP_BasicMovement___29($3);
if (HEAP32[$2 + 540 >> 2] != 1) {
break label$3;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($3, 0, 0);
break label$3;
} else {
SimplifyMovement_28BasicMovement___29(DynamicArrayP_BasicMovement___getAddress_28int_29_20const($3, $1));
$1 = $1 + 1 | 0;
continue;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($1 | 0);
abort();
case 3:
SimplifyMovement_28BasicMovement___29($2 + 696 | 0);
break label$3;
case 2:
break label$4;
default:
break label$3;
}
}
$3 = $2 + 528 | 0;
SimplifyMovement_28BasicMovement___29($3);
$5 = $2 + 532 | 0;
SimplifyMovement_28BasicMovement___29($5);
$6 = Math_fround(0);
$1 = HEAP32[$2 + 532 >> 2];
if ($1) {
$7 = HEAPF32[$1 + 52 >> 2];
}
HEAPF32[$4 + 92 >> 2] = $7;
$1 = HEAP32[$2 + 528 >> 2];
if ($1) {
$6 = HEAPF32[$1 + 52 >> 2];
}
HEAPF32[$4 + 88 >> 2] = $6;
$6 = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($2 + 52 | 0, float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($4 + 92 | 0, $4 + 88 | 0)) >> 2];
$1 = HEAP32[$2 + 528 >> 2];
label$16: {
label$17: {
label$18: {
if (!(HEAP32[$1 + 4 >> 2] != 10 ? $1 : 0)) {
if (HEAPU8[67569]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(34361, 0);
$1 = HEAP32[$2 + 528 >> 2];
}
if (!$1) {
break label$17;
}
$3 = HEAP32[$2 + 532 >> 2];
HEAP32[$2 + 532 >> 2] = 0;
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$2 + 528 >> 2] = 0;
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$0 >> 2] = $3;
if ($3) {
break label$16;
}
$1 = 31631;
break label$18;
}
$1 = HEAP32[$2 + 532 >> 2];
if (HEAP32[$1 + 4 >> 2] != 10 ? $1 : 0) {
break label$17;
}
if (HEAPU8[67569]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(34418, 0);
$1 = HEAP32[$2 + 532 >> 2];
}
if (!$1) {
break label$17;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
$3 = HEAP32[$2 + 528 >> 2];
HEAP32[$2 + 528 >> 2] = 0;
HEAP32[$2 + 532 >> 2] = 0;
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$0 >> 2] = $3;
if ($3) {
break label$16;
}
$1 = 31596;
}
eprintf_28char_20const__2c_20____29($1, 0);
}
$3 = HEAP32[$0 >> 2];
if (!$3) {
break label$3;
}
}
HEAPF32[$3 + 52 >> 2] = $6;
}
if (!HEAPU8[67565]) {
break label$1;
}
$1 = HEAP32[$0 >> 2];
if ($1) {
$6 = HEAPF32[$1 + 52 >> 2];
$2 = HEAP32[$1 + 4 >> 2];
HEAPF64[$4 + 16 >> 3] = HEAPF32[$1 + 40 >> 2];
HEAP32[$4 >> 2] = $2;
HEAPF64[$4 + 8 >> 3] = $6;
eprintf_28char_20const__2c_20____29(27921, $4);
break label$1;
}
eprintf_28char_20const__2c_20____29(30363, 0);
}
__stack_pointer = $4 + 96 | 0;
}
function animgen_lite_initialise($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$6 = __stack_pointer - 128 | 0;
__stack_pointer = $6;
HEAP32[19359] = 0;
invoke_v(745);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[18884] = 0;
if (HEAPU8[67554]) {
HEAP32[19359] = 0;
$8 = invoke_i(746) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
$7 = invoke_i(747) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
HEAP32[$6 + 48 >> 2] = $8;
HEAP32[$6 + 52 >> 2] = $7;
invoke_vii(71, 36028, $6 + 48 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
}
HEAP32[19359] = 0;
$8 = invoke_i(748) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
HEAP32[18898] = $8;
$8 = invoke_ii(64, 12) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
$5 = invoke_ii(749, $8 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) != 1) {
HEAP32[19359] = 0;
HEAP32[18903] = $5;
invoke_vi(750, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[18904] = $0;
HEAP32[$6 + 112 >> 2] = 0;
HEAP32[$6 + 104 >> 2] = 0;
HEAP32[$6 + 108 >> 2] = 0;
HEAP32[$6 + 100 >> 2] = $2;
HEAP32[$6 + 96 >> 2] = 12333;
HEAP32[$6 + 92 >> 2] = 11224;
HEAP32[$6 + 88 >> 2] = 9932;
HEAP32[$6 + 84 >> 2] = $1;
HEAP32[$6 + 80 >> 2] = 4880;
$7 = 6;
if ($3) {
HEAP32[$6 + 104 >> 2] = 4338;
$7 = 7;
}
if ($4) {
HEAP32[($6 + 80 | 0) + ($7 << 2) >> 2] = 4331;
}
HEAP32[19359] = 0;
$5 = HEAP32[18903];
invoke_iii(751, $5 | 0, $6 + 80 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$9: {
if (($5 | 0) == 1) {
break label$9;
}
HEAP32[19359] = 0;
invoke_vi(752, HEAP32[18903]);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$9;
}
$7 = 0;
if (HEAP32[18884]) {
break label$1;
}
if (HEAPU8[67575]) {
HEAP32[19359] = 0;
$5 = HEAP32[18903];
$0 = HEAP32[16886];
invoke_vii(753, $5 | 0, $0 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$9;
}
}
HEAP32[19359] = 0;
invoke_v(754);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$9;
}
HEAP32[19359] = 0;
invoke_v(755);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$9;
}
HEAP32[19359] = 0;
$0 = invoke_ii(64, 28) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$11: {
label$12: {
if (($5 | 0) != 1) {
HEAP32[19359] = 0;
$2 = invoke_iiii(756, $0 | 0, 0, 10) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$12;
}
HEAP32[18905] = $2;
$5 = HEAP32[18906];
$0 = ParserData__ParserData_28HashAny_char_20const__2c_20Gesture____2c_20HanimAvatar_20const__29($6 + 56 | 0, $2, $5);
HEAP32[19359] = 0;
invoke_v(757);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$11;
}
HEAP32[19359] = 0;
invoke_v(758);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$11;
}
$7 = HEAP32[18884];
if (!$7) {
HEAP32[19359] = 0;
invoke_v(759);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$11;
}
HEAP8[75628] = 1;
}
ParserData___ParserData_28_29($0);
$7 = !$7;
break label$1;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = 59180;
break label$3;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = getTempRet0() | 0;
operator_20delete_28void__29($0);
break label$2;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = getTempRet0() | 0;
ParserData___ParserData_28_29($0);
break label$2;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = 59180;
break label$3;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = getTempRet0() | 0;
operator_20delete_28void__29($8);
break label$2;
}
$5 = __cxa_find_matching_catch_5(60484, 59180, 0) | 0;
$7 = 59180;
}
$7 = getTempRet0() | 0;
}
label$15: {
if ((llvm_eh_typeid_for(60484) | 0) == ($7 | 0)) {
__cxa_begin_catch($5 | 0) | 0;
HEAP32[$6 >> 2] = $1;
emscripten_asm_const_int(67395, 48911, $6 | 0) | 0;
break label$15;
}
$0 = llvm_eh_typeid_for(59180) | 0;
__cxa_begin_catch($5 | 0) | 0;
if (($0 | 0) == ($7 | 0)) {
HEAP32[$6 + 16 >> 2] = $1;
emscripten_asm_const_int(67279, 48911, $6 + 16 | 0) | 0;
break label$15;
}
HEAP32[$6 + 32 >> 2] = $1;
emscripten_asm_const_int(67158, 48911, $6 + 32 | 0) | 0;
}
__cxa_end_catch();
$7 = 0;
}
__stack_pointer = $6 + 128 | 0;
return $7;
}
function little2_scanPi($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
$9 = __stack_pointer - 16 | 0;
__stack_pointer = $9;
$7 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$8 = HEAPU8[$1 + 1 | 0];
if ($8) {
$4 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 2:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$9;
}
}
label$12: {
switch ($4 - 22 | 0) {
case 1:
break label$3;
case 0:
case 2:
break label$5;
default:
break label$12;
}
}
if (($4 | 0) != 29) {
break label$3;
}
$6 = $1;
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
break label$4;
}
break label$3;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$6 = $1;
}
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
label$19: {
while (1) {
$4 = $6;
$6 = $4 + 2 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 2 | 0];
label$21: {
label$22: {
$10 = HEAPU8[$4 + 3 | 0];
if ($10) {
$8 = unicode_byte_type($10 << 24 >> 24, $5 << 24 >> 24);
} else {
$8 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($8 - 5 | 0) {
case 10:
break label$16;
case 4:
case 5:
case 16:
break label$17;
case 2:
break label$18;
case 1:
break label$19;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$21;
case 24:
break label$22;
default:
break label$13;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$10 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$13;
}
break;
}
$7 = -2;
if (($2 - $6 | 0) >= 2) {
break label$13;
}
break label$1;
}
$7 = -2;
if (($2 - $6 | 0) >= 3) {
break label$13;
}
break label$1;
}
$7 = -2;
if (($2 - $6 | 0) >= 4) {
break label$13;
}
break label$1;
}
if (!little2_checkPiTarget($1, $6, $9 + 12 | 0)) {
break label$13;
}
$5 = $4 + 4 | 0;
while (1) {
$4 = $5;
if (($4 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 | 0];
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
label$31: {
$6 = HEAPU8[$4 + 1 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 | 0) {
case 15:
break label$27;
case 0:
case 1:
case 8:
break label$28;
case 7:
break label$29;
case 6:
break label$30;
case 5:
break label$31;
default:
break label$26;
}
}
if (($2 - $4 | 0) >= 2) {
break label$26;
}
break label$14;
}
if (($2 - $4 | 0) < 3) {
break label$14;
}
$5 = $4 + 3 | 0;
continue;
}
if (($2 - $4 | 0) < 4) {
break label$14;
}
$5 = $4 + 4 | 0;
continue;
}
HEAP32[$3 >> 2] = $4;
break label$2;
}
$5 = $4 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$4 + 3 | 0] | HEAPU8[$5 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $4 + 4;
break label$15;
}
$5 = $4 + 2 | 0;
continue;
}
}
if (!little2_checkPiTarget($1, $6, $9 + 12 | 0)) {
break label$13;
}
$6 = $4 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$4 + 5 | 0] | HEAPU8[$4 + 4 | 0] != 62) {
break label$13;
}
HEAP32[$3 >> 2] = $4 + 6;
}
$7 = HEAP32[$9 + 12 >> 2];
break label$1;
}
$7 = -2;
break label$1;
}
HEAP32[$3 >> 2] = $6;
break label$2;
}
HEAP32[$3 >> 2] = $1;
}
$7 = 0;
}
__stack_pointer = $9 + 16 | 0;
return $7;
}
function big2_scanPi($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
$9 = __stack_pointer - 16 | 0;
__stack_pointer = $9;
$7 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$8 = HEAPU8[$1 | 0];
if ($8) {
$4 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 2:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$9;
}
}
label$12: {
switch ($4 - 22 | 0) {
case 1:
break label$3;
case 0:
case 2:
break label$5;
default:
break label$12;
}
}
if (($4 | 0) != 29) {
break label$3;
}
$6 = $1;
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
break label$4;
}
break label$3;
}
$7 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$1;
}
$7 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$1;
}
$6 = $1;
}
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
label$18: {
label$19: {
while (1) {
$4 = $6;
$6 = $4 + 2 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 3 | 0];
label$21: {
label$22: {
$10 = HEAPU8[$4 + 2 | 0];
if ($10) {
$8 = unicode_byte_type($10 << 24 >> 24, $5 << 24 >> 24);
} else {
$8 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($8 - 5 | 0) {
case 10:
break label$16;
case 4:
case 5:
case 16:
break label$17;
case 2:
break label$18;
case 1:
break label$19;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$21;
case 24:
break label$22;
default:
break label$13;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$10 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$13;
}
break;
}
$7 = -2;
if (($2 - $6 | 0) >= 2) {
break label$13;
}
break label$1;
}
$7 = -2;
if (($2 - $6 | 0) >= 3) {
break label$13;
}
break label$1;
}
$7 = -2;
if (($2 - $6 | 0) >= 4) {
break label$13;
}
break label$1;
}
if (!big2_checkPiTarget($1, $6, $9 + 12 | 0)) {
break label$13;
}
$5 = $4 + 4 | 0;
while (1) {
$4 = $5;
if (($4 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 1 | 0];
label$26: {
label$27: {
label$28: {
label$29: {
label$30: {
label$31: {
$6 = HEAPU8[$4 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 | 0) {
case 15:
break label$27;
case 0:
case 1:
case 8:
break label$28;
case 7:
break label$29;
case 6:
break label$30;
case 5:
break label$31;
default:
break label$26;
}
}
if (($2 - $4 | 0) >= 2) {
break label$26;
}
break label$14;
}
if (($2 - $4 | 0) < 3) {
break label$14;
}
$5 = $4 + 3 | 0;
continue;
}
if (($2 - $4 | 0) < 4) {
break label$14;
}
$5 = $4 + 4 | 0;
continue;
}
HEAP32[$3 >> 2] = $4;
break label$2;
}
$5 = $4 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$5 | 0] | HEAPU8[$4 + 3 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $4 + 4;
break label$15;
}
$5 = $4 + 2 | 0;
continue;
}
}
if (!big2_checkPiTarget($1, $6, $9 + 12 | 0)) {
break label$13;
}
$6 = $4 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$4 + 4 | 0] | HEAPU8[$4 + 5 | 0] != 62) {
break label$13;
}
HEAP32[$3 >> 2] = $4 + 6;
}
$7 = HEAP32[$9 + 12 >> 2];
break label$1;
}
$7 = -2;
break label$1;
}
HEAP32[$3 >> 2] = $6;
break label$2;
}
HEAP32[$3 >> 2] = $1;
}
$7 = 0;
}
__stack_pointer = $9 + 16 | 0;
return $7;
}
function handle_hamgestural_sign_28void__2c_20XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = __stack_pointer - 48 | 0;
__stack_pointer = $5;
$2 = HEAP32[$1 + 4 >> 2];
$7 = convertGlossToID_28HashAny_char_20const__2c_20char_20const____29($2);
if (HEAPU8[67574]) {
eputs_28char_20const__29(48529);
LogTime_28_29();
HEAP32[$5 + 32 >> 2] = $7;
eprintf_28char_20const__2c_20____29(46126, $5 + 32 | 0);
$2 = 0;
}
$2 = 0;
$4 = 0;
$3 = HEAP32[$1 + 8 >> 2];
if ($3) {
$4 = HEAP32[$3 + 12 >> 2];
}
$13 = ($4 | 0) > 0 ? $4 : 0;
label$3: {
label$4: {
label$5: {
label$6: {
while (1) {
if (($2 | 0) == ($13 | 0)) {
label$9: {
label$10: {
if (!$9) {
break label$10;
}
$2 = HEAP32[$9 + 8 >> 2];
if (!$2 | HEAP32[$2 + 12 >> 2] <= 0) {
break label$10;
}
if (!strcmp(HEAP32[DynamicArrayP_XMLCell___getElement_28int_29_20const($2, 0) >> 2], 6774)) {
break label$9;
}
}
$3 = handle_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20XMLCell__29($7, HEAP32[$0 + 16 >> 2], $9);
HEAP32[$0 >> 2] = $3;
break label$6;
}
} else {
$10 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$1 + 8 >> 2], $2);
$3 = HEAP32[$10 >> 2];
label$12: {
label$13: {
if (!strcmp($3, 6774)) {
if (!$9) {
$9 = $10;
break label$12;
}
$3 = 46517;
break label$13;
}
if (strcmp($3, 6759)) {
break label$12;
}
if (!$12) {
$12 = $10;
break label$12;
}
$3 = 46452;
}
LogTime_28_29();
$4 = HEAP32[$1 >> 2];
HEAP32[$5 + 20 >> 2] = $7;
HEAP32[$5 + 16 >> 2] = $4;
eprintf_28char_20const__2c_20____29($3, $5 + 16 | 0);
BadSiGML_28_29();
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_ii(397, $3 | 0) | 0;
$10 = HEAP32[19359];
HEAP32[19359] = 0;
if (($10 | 0) == 1) {
break label$5;
}
handle_nested_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___2c_20XMLCell__29($7, HEAP32[$0 + 16 >> 2], $4, $9);
wasm2js_i32$0 = $0, wasm2js_i32$1 = ConcatGestures_28char_20const__2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___29($7, HEAP32[$0 + 16 >> 2], $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
operator_20delete_28void__29(DynamicArrayP_Gesture____DynamicArrayP_28_29($4));
$3 = HEAP32[$0 >> 2];
}
ProcessSpeed_28XMLCell__2c_20Gesture__29($1, $3);
if ($12) {
handle_sign_nonmanual_28Gesture__2c_20XMLCell__29($3, $12);
}
if (!HEAP32[$3 + 48 >> 2]) {
break label$3;
}
$2 = 0;
while (1) {
if (($2 | 0) == 8) {
$11 = ExplicitDurationForNonmanual_28XMLCell__2c_20Gesture__29($1, $3);
if ($11 > Math_fround(0)) {
$2 = 0;
while (1) {
if (($2 | 0) == 8) {
break label$3;
}
$4 = HEAP32[HEAP32[$3 + 48 >> 2] + ($2 << 2) >> 2];
if ($4) {
NonmanualMovement__setDuration_28float_2c_20bool_29($4, $11, 1);
}
$2 = $2 + 1 | 0;
continue;
}
}
} else {
$4 = HEAP32[HEAP32[$3 + 48 >> 2] + ($2 << 2) >> 2];
label$24: {
if (!$4) {
break label$24;
}
NonmanualMovement__setAvatarDependentValues_28_29($4);
$8 = maxREAL_28float_2c_20float_29($8, HEAPF32[$4 + 24 >> 2]);
$4 = HEAP32[$4 + 20 >> 2];
if (!$4) {
break label$24;
}
$11 = HEAPF32[$4 + 8 >> 2];
if ($6 == Math_fround(0)) {
$6 = $11;
break label$24;
}
$6 = minREAL_28float_2c_20float_29($6, $11);
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
$6 = Math_fround(InitialPostureTime_28BasicMovement_20const__29(HEAP32[$3 + 44 >> 2]) - $6);
if (!($6 > Math_fround(0))) {
break label$4;
}
$2 = 0;
while (1) {
if (($2 | 0) == 8) {
$8 = Math_fround($8 + $6);
break label$4;
}
$4 = HEAP32[HEAP32[$3 + 48 >> 2] + ($2 << 2) >> 2];
if ($4) {
$1 = HEAP32[$4 + 20 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1, $6);
}
HEAPF32[$4 + 24 >> 2] = $6 + HEAPF32[$4 + 24 >> 2];
}
$2 = $2 + 1 | 0;
continue;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($2 | 0);
abort();
}
$2 = HEAP32[$3 + 44 >> 2];
if (!(HEAPF32[$2 + 40 >> 2] < $8)) {
break label$3;
}
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 64 >> 2]]($2, $8, 0);
}
SpliceMorphs_28Gesture__29($3);
$2 = HEAP32[$0 + 4 >> 2];
if ($2) {
HashAny_char_20const__2c_20Gesture____addItem_28char_20const__2c_20Gesture__29($2, $7, $3);
}
AddToPlayList_28void__2c_20Gesture__29($0, $3);
if (HEAPU8[67573]) {
eprintf_28char_20const__2c_20____29(32986, 0);
Gesture__print_28_IO_FILE__29_20const($3, HEAP32[16886]);
}
if (HEAPU8[67574]) {
LogTime_28_29();
$8 = HEAPF32[HEAP32[$3 + 44 >> 2] + 40 >> 2];
HEAP32[$5 >> 2] = $7;
HEAPF64[$5 + 8 >> 3] = $8;
eprintf_28char_20const__2c_20____29(39962, $5);
}
__stack_pointer = $5 + 48 | 0;
}
function OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
if ($2) {
if (Direction3__defined_28_29_20const($0 + 20 | 0)) {
break label$2;
}
}
if (!$3) {
break label$1;
}
if (!Direction2__defined_28_29_20const($0 + 32 | 0)) {
break label$1;
}
}
$5 = HEAPU8[$0 + 41 | 0];
$6 = HEAPU8[$0 + 40 | 0];
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
label$4: {
if ($5 | $6) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 7474), 48530);
label$6: {
if (!$2) {
break label$6;
}
$2 = $0 + 20 | 0;
if (!Direction3__defined_28_29_20const($2)) {
break label$6;
}
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, 0, 4568, Direction3__Direction3_28Direction3_20const__29($4 + 32 | 0, $2));
if (!HEAPU8[$0 + 40 | 0]) {
break label$6;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15079);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 40 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
label$7: {
if (!$3) {
break label$7;
}
$2 = $0 + 32 | 0;
if (!Direction2__defined_28_29_20const($2)) {
break label$7;
}
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, 0, 4479, Direction2__Direction2_28Direction2_20const__29($4 + 24 | 0, $2));
if (!HEAPU8[$0 + 41 | 0]) {
break label$7;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15063);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 41 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
break label$4;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474);
label$8: {
if (!$2) {
break label$8;
}
$2 = $0 + 20 | 0;
if (!Direction3__defined_28_29_20const($2)) {
break label$8;
}
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, 1, 4568, Direction3__Direction3_28Direction3_20const__29($4 + 8 | 0, $2));
}
if (!$3) {
break label$4;
}
$0 = $0 + 32 | 0;
if (!Direction2__defined_28_29_20const($0)) {
break label$4;
}
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, 1, 4479, Direction2__Direction2_28Direction2_20const__29($4, $0));
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
__stack_pointer = $4 + 48 | 0;
}
function little2_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$6 = 1;
while (1) {
$8 = $1;
$10 = HEAPU8[$8 + 2 | 0];
$7 = $8 + 2 | 0;
$1 = $7;
$4 = $6;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
$11 = HEAPU8[$8 + 3 | 0];
if ($11) {
$12 = unicode_byte_type($11 << 24 >> 24, $10 << 24 >> 24);
} else {
$12 = HEAPU8[($0 + $10 | 0) + 72 | 0];
}
switch ($12 - 3 | 0) {
case 19:
case 21:
case 26:
break label$10;
case 4:
break label$11;
case 3:
break label$12;
case 2:
break label$13;
case 8:
case 14:
break label$4;
case 6:
case 7:
break label$5;
case 18:
break label$6;
case 0:
break label$7;
case 10:
break label$8;
case 9:
break label$9;
default:
continue;
}
}
$1 = $7;
if ($4) {
continue;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $7;
continue;
}
$1 = $8 + 3 | 0;
if ($4) {
continue;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $7;
continue;
}
$6 = $4;
label$16: {
if ($4) {
break label$16;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
break label$16;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $7;
$6 = 1;
}
$1 = $8 + 4 | 0;
continue;
}
$1 = $7;
if ($4) {
continue;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $7;
continue;
}
if (($4 | 0) != 2) {
$9 = 12;
$6 = 2;
$1 = $7;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP32[(($5 << 4) + $3 | 0) + 4 >> 2] = $8 + 4;
continue;
}
$6 = 2;
$1 = $7;
if (($9 | 0) != 12) {
continue;
}
if (($2 | 0) > ($5 | 0)) {
HEAP32[(($5 << 4) + $3 | 0) + 8 >> 2] = $7;
}
$5 = $5 + 1 | 0;
$9 = 12;
break label$2;
}
if (($4 | 0) != 2) {
$9 = 13;
$6 = 2;
$1 = $7;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP32[(($5 << 4) + $3 | 0) + 4 >> 2] = $8 + 4;
continue;
}
$6 = 2;
$1 = $7;
if (($9 | 0) != 13) {
continue;
}
if (($2 | 0) > ($5 | 0)) {
HEAP32[(($5 << 4) + $3 | 0) + 8 >> 2] = $7;
}
$5 = $5 + 1 | 0;
$9 = 13;
break label$2;
}
$1 = $7;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP8[(($5 << 4) + $3 | 0) + 12 | 0] = 0;
break label$3;
}
$6 = 0;
$1 = $7;
label$21: {
switch ($4 - 1 | 0) {
case 0:
continue;
case 1:
break label$21;
default:
break label$3;
}
}
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
if (!HEAPU8[$4 + 12 | 0]) {
continue;
}
label$22: {
if (HEAP32[$4 + 4 >> 2] == ($7 | 0) | $11 | ($10 | 0) != 32) {
break label$22;
}
$1 = HEAPU8[$8 + 4 | 0];
$8 = HEAPU8[$8 + 5 | 0];
label$23: {
if (!$8) {
if (($1 | 0) == 32) {
break label$22;
}
$8 = HEAPU8[($0 + $1 | 0) + 72 | 0];
break label$23;
}
$8 = unicode_byte_type($8 << 24 >> 24, $1 << 24 >> 24);
}
$1 = $7;
if (($9 | 0) != ($8 | 0)) {
continue;
}
}
HEAP8[$4 + 12 | 0] = 0;
$1 = $7;
continue;
}
$6 = 0;
$1 = $7;
label$25: {
switch ($4 - 1 | 0) {
case 0:
continue;
case 1:
break label$25;
default:
break label$3;
}
}
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP8[(($5 << 4) + $3 | 0) + 12 | 0] = 0;
continue;
}
$6 = 2;
$1 = $7;
if (($4 | 0) == 2) {
continue;
}
return $5 | 0;
}
$6 = $4;
continue;
}
$6 = 0;
continue;
}
}
function SiGMLHandshape__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 112 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
if (HEAP32[$0 + 8 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23542, $1);
HEAP32[$3 + 96 >> 2] = HEAP32[$0 + 8 >> 2];
fiprintf($1, 30758, $3 + 96 | 0);
}
$2 = $0 + 12 | 0;
if (!FingerBending__isUndef_28_29_20const($2)) {
fputs(23737, $1);
FingerBending__print_28_IO_FILE__29_20const($2, $1);
fputc(10, $1);
}
if (HEAP32[$0 + 28 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23524, $1);
HEAP32[$3 + 80 >> 2] = HEAP32[$0 + 28 >> 2];
fiprintf($1, 30758, $3 + 80 | 0);
$2 = 0;
}
$2 = $0 + 32 | 0;
if (!FingerBending__isUndef_28_29_20const($2)) {
fputs(23719, $1);
FingerBending__print_28_IO_FILE__29_20const($2, $1);
fputc(10, $1);
}
if (HEAP32[$0 + 48 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22858, $1);
HEAP32[$3 + 64 >> 2] = HEAP32[$0 + 48 >> 2];
fiprintf($1, 30758, $3 - -64 | 0);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$2 = 0;
fputs(19306, $1);
HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 28 >> 2];
fiprintf($1, 21821, $3 + 48 | 0);
fputs(17076, $1);
while (1) {
if (($2 | 0) == 5) {
fputc(10, $1);
$2 = 1;
while (1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
if (($2 | 0) == 5) {
HEAP32[$3 >> 2] = 11008;
fiprintf($1, 23946, $3);
HEAP16[33801] = HEAPU16[33801] + 1;
ThumbBending__print_28_IO_FILE__29_20const($0 + 160 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
if (HEAP32[$0 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(19293, $1);
printHandshapeType_28_IO_FILE__2c_20HandshapeType_29($1, HEAP32[$0 >> 2]);
fputc(10, $1);
}
if (HEAPU16[$0 + 52 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16633, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 52 >> 1]);
fputc(10, $1);
}
if (HEAPU16[$0 + 54 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16582, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 54 >> 1]);
fputc(10, $1);
}
if (HEAP32[$0 + 180 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21325, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 180 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 184 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21277, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 184 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 204 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(19533, $1);
$2 = HEAP32[$0 + 204 >> 2];
fputs(InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $2), $1);
fputc(10, $1);
}
if (HEAP32[$0 + 188 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21306, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 188 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 192 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21258, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 192 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 208 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(19511, $1);
$2 = HEAP32[$0 + 208 >> 2];
fputs(InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $2), $1);
fputc(10, $1);
}
if (HEAP32[$0 + 196 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21337, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 196 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 200 >> 2] != -1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21289, $1);
printDigit_28_IO_FILE__2c_20DigitIndex_29($1, HEAP32[$0 + 200 >> 2]);
fputc(10, $1);
}
if (HEAP32[$0 + 212 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16182, $1);
$2 = HEAP32[$0 + 212 >> 2];
fputs(InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $2), $1);
fputc(10, $1);
}
if (!HEAPU8[$0 + 216 | 0]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(30400, $1);
} else {
HEAP32[$3 + 16 >> 2] = HEAP32[($2 << 2) + 61536 >> 2];
fiprintf($1, 23946, $3 + 16 | 0);
HEAP16[33801] = HEAPU16[33801] + 1;
FingerBending__print_28_IO_FILE__29_20const((($2 << 4) + $0 | 0) + 80 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
$2 = $2 + 1 | 0;
continue;
}
break;
}
} else {
HEAP32[$3 + 32 >> 2] = HEAP32[(($2 << 2) + $0 | 0) + 60 >> 2];
fiprintf($1, 10740, $3 + 32 | 0);
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $3 + 112 | 0;
}
function __rem_pio2($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$7 = __stack_pointer - 48 | 0;
__stack_pointer = $7;
wasm2js_scratch_store_f64(+$0);
$4 = wasm2js_scratch_load_i32(1) | 0;
$11 = wasm2js_scratch_load_i32(0) | 0;
label$1: {
label$2: {
$3 = $4;
$8 = $4 & 2147483647;
label$3: {
if ($8 >>> 0 <= 1074752122) {
if (($3 & 1048575) == 598523) {
break label$3;
}
if ($8 >>> 0 <= 1073928572) {
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$0 = $0 + -1.5707963267341256;
$2 = $0 + -6.077100506506192e-11;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
$3 = 1;
break label$1;
}
$0 = $0 + 1.5707963267341256;
$2 = $0 + 6.077100506506192e-11;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
$3 = -1;
break label$1;
}
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$0 = $0 + -3.1415926534682512;
$2 = $0 + -1.2154201013012384e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
$3 = 2;
break label$1;
}
$0 = $0 + 3.1415926534682512;
$2 = $0 + 1.2154201013012384e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
$3 = -2;
break label$1;
}
if ($8 >>> 0 <= 1075594811) {
if ($8 >>> 0 <= 1075183036) {
if (($8 | 0) == 1074977148) {
break label$3;
}
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$0 = $0 + -4.712388980202377;
$2 = $0 + -1.8231301519518578e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
$3 = 3;
break label$1;
}
$0 = $0 + 4.712388980202377;
$2 = $0 + 1.8231301519518578e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
$3 = -3;
break label$1;
}
if (($8 | 0) == 1075388923) {
break label$3;
}
if (($4 | 0) > 0 | ($4 | 0) >= 0) {
$0 = $0 + -6.2831853069365025;
$2 = $0 + -2.430840202602477e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
$3 = 4;
break label$1;
}
$0 = $0 + 6.2831853069365025;
$2 = $0 + 2.430840202602477e-10;
HEAPF64[$1 >> 3] = $2;
HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
$3 = -4;
break label$1;
}
if ($8 >>> 0 > 1094263290) {
break label$2;
}
}
$2 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
$6 = $0 + $2 * -1.5707963267341256;
$10 = $2 * 6.077100506506192e-11;
$12 = $6 - $10;
$9 = $12 < -.7853981633974483;
if (Math_abs($2) < 2147483648) {
$3 = ~~$2;
} else {
$3 = -2147483648;
}
label$14: {
if ($9) {
$3 = $3 - 1 | 0;
$2 = $2 + -1;
$10 = $2 * 6.077100506506192e-11;
$6 = $0 + $2 * -1.5707963267341256;
break label$14;
}
if (!($12 > .7853981633974483)) {
break label$14;
}
$3 = $3 + 1 | 0;
$2 = $2 + 1;
$10 = $2 * 6.077100506506192e-11;
$6 = $0 + $2 * -1.5707963267341256;
}
$0 = $6 - $10;
HEAPF64[$1 >> 3] = $0;
wasm2js_scratch_store_f64(+$0);
$5 = wasm2js_scratch_load_i32(1) | 0;
wasm2js_scratch_load_i32(0) | 0;
$9 = $8 >>> 20 | 0;
label$16: {
if (($9 - ($5 >>> 20 & 2047) | 0) < 17) {
break label$16;
}
$0 = $2 * 6.077100506303966e-11;
$12 = $6 - $0;
$10 = $2 * 2.0222662487959506e-21 - ($6 - $12 - $0);
$0 = $12 - $10;
HEAPF64[$1 >> 3] = $0;
wasm2js_scratch_store_f64(+$0);
$5 = wasm2js_scratch_load_i32(1) | 0;
wasm2js_scratch_load_i32(0) | 0;
if (($9 - ($5 >>> 20 & 2047) | 0) < 50) {
$6 = $12;
break label$16;
}
$0 = $2 * 2.0222662487111665e-21;
$6 = $12 - $0;
$10 = $2 * 8.4784276603689e-32 - ($12 - $6 - $0);
$0 = $6 - $10;
HEAPF64[$1 >> 3] = $0;
}
HEAPF64[$1 + 8 >> 3] = $6 - $0 - $10;
break label$1;
}
if ($8 >>> 0 >= 2146435072) {
$0 = $0 - $0;
HEAPF64[$1 >> 3] = $0;
HEAPF64[$1 + 8 >> 3] = $0;
$3 = 0;
break label$1;
}
$5 = $4 & 1048575;
wasm2js_scratch_store_i32(0, $11 | 0);
$5 = $5 | 1096810496;
wasm2js_scratch_store_i32(1, $5 | 0);
$0 = +wasm2js_scratch_load_f64();
$3 = 0;
$9 = 1;
while (1) {
$3 = ($7 + 16 | 0) + ($3 << 3) | 0;
if (Math_abs($0) < 2147483648) {
$5 = ~~$0;
} else {
$5 = -2147483648;
}
$2 = +($5 | 0);
HEAPF64[$3 >> 3] = $2;
$0 = ($0 - $2) * 16777216;
$3 = 1;
$5 = $9 & 1;
$9 = 0;
if ($5) {
continue;
}
break;
}
HEAPF64[$7 + 32 >> 3] = $0;
label$22: {
if ($0 != 0) {
$9 = 3;
break label$22;
}
$3 = 2;
while (1) {
$9 = $3;
$3 = $3 - 1 | 0;
if (HEAPF64[($7 + 16 | 0) + ($3 << 3) >> 3] == 0) {
continue;
}
break;
}
}
$3 = __rem_pio2_large($7 + 16 | 0, $7, ($8 >>> 20 | 0) - 1046 | 0, $9, 1);
$0 = HEAPF64[$7 >> 3];
if (($4 | 0) < 0) {
HEAPF64[$1 >> 3] = -$0;
HEAPF64[$1 + 8 >> 3] = -HEAPF64[$7 + 8 >> 3];
$3 = 0 - $3 | 0;
break label$1;
}
HEAPF64[$1 >> 3] = $0;
HEAPF64[$1 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
}
__stack_pointer = $7 + 48 | 0;
return $3;
}
function HanimAvatar__createSiGMLHeadSites_28_29($0) {
var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
$1 = __stack_pointer - 96 | 0;
__stack_pointer = $1;
UNIMPLEMENTED_28char_20const__29(7022);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 16, 6, 68044);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 25, 44, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 25, 40, 41, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 80 | 0, Math_fround(1), Math_fround(0), Math_fround(1)));
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 26, 30, 31, 68056);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 27, 2, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 27, 32, 33, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 80 | 0, Math_fround(1), Math_fround(0), Math_fround(1)));
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 28, 30, 31, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 29, 28, 29, 68056);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 30, 48, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 30, 53, 55, 68056);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 31, 57, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 80 | 0, Math_fround(0), Math_fround(-1), Math_fround(.10000000149011612)));
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 32, 25, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 32, 11, 12, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 80 | 0, Math_fround(.30000001192092896), Math_fround(0), Math_fround(1)));
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 33, 14, 68056);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 34, 17, 68056);
HanimAvatar__GetFacePoint_28short_29($1 + 80 | 0, $0, 11);
$3 = Vector__x_28_29_20const($1 + 80 | 0);
HanimAvatar__GetFacePoint_28short_29($1 - -64 | 0, $0, 12);
$5 = Vector__x_28_29_20const($1 - -64 | 0);
HanimAvatar__GetFacePoint_28short_29($1 + 80 | 0, $0, 25);
$4 = HEAP16[24300] << 2;
$2 = $4 + ($1 + 80 | 0) | 0;
HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] + Math_fround(-.009999999776482582);
HanimAvatar__SetFaceSite_28Location_2c_20Vector_20const__2c_20Vector_20const__29($0, 36, $1 + 80 | 0, 68056);
MakeSiteID_28Location_29($1 + 56 | 0, 36);
HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 56 >> 2];
$3 = Math_fround(Math_fround(Math_fround($3 - $5) * Math_fround(.5)) * Math_fround(.6000000238418579));
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 12 | 0, $3, Math_fround(.5));
$2 = ($1 + 80 | 0) + (HEAP16[24299] << 2) | 0;
HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] + Math_fround(.004999999888241291);
HanimAvatar__SetFaceSite_28Location_2c_20Vector_20const__2c_20Vector_20const__29($0, 37, $1 + 80 | 0, 68056);
MakeSiteID_28Location_29($1 + 48 | 0, 37);
HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 48 >> 2];
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 8 | 0, $3, Math_fround(.5));
HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] + Math_fround(-.009999999776482582);
HanimAvatar__SetFaceSite_28Location_2c_20Vector_20const__2c_20Vector_20const__29($0, 38, $1 + 80 | 0, 68056);
MakeSiteID_28Location_29($1 + 40 | 0, 38);
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 40 >> 2];
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1 + 4 | 0, $3, Math_fround(.5));
$2 = Vector__Vector_28Vector_20const__29($1 - -64 | 0, $1 + 80 | 0);
$4 = $4 + $2 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] + Math_fround(-.007000000216066837);
HanimAvatar__SetFaceSite_28Location_2c_20Vector_20const__2c_20Vector_20const__29($0, 35, $2, 68056);
MakeSiteID_28Location_29($1 + 32 | 0, 35);
HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1, Math_fround($3 * Math_fround(.800000011920929)), Math_fround(.5));
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 39, 4, 68056);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 39, 3, 5, 68056);
HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, 40, 62, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 16 | 0, Math_fround(0), Math_fround(-2), Math_fround(1)));
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 40, 61, 63, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 16 | 0, Math_fround(1), Math_fround(-2), Math_fround(1)));
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 41, 9, 10, 68032);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 42, 80, 72, 68032);
HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, 43, 86, 85, Vector__Vector_28float_2c_20float_2c_20float_29($1 + 16 | 0, Math_fround(3), Math_fround(0), Math_fround(1)));
__stack_pointer = $1 + 96 | 0;
}
function IFS_spec__OctagonalCylinder_28short_2c_20Vector_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
$2 = __stack_pointer - 128 | 0;
__stack_pointer = $2;
$9 = $0 << 18 >> 16;
$8 = operator_20new_5b_5d_28unsigned_20long_29((wasm2js_i32$0 = -1, wasm2js_i32$1 = __wasm_i64_mul($9, 0, 12, 0), 
wasm2js_i32$2 = i64toi32_i32$HIGH_BITS, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
label$1: {
label$2: {
label$3: {
$11 = $0 << 2;
if ($11 & 65532) {
$5 = Math_imul($9, 12) + $8 | 0;
$3 = $8;
while (1) {
HEAP32[19359] = 0;
$6 = invoke_ii(69, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$3;
}
$3 = $6 + 12 | 0;
if (($5 | 0) != ($3 | 0)) {
continue;
}
break;
}
}
$0 = 0;
while (1) {
$0 = $0 << 16 >> 16;
if (($9 | 0) <= ($0 | 0)) {
label$8: {
$0 = 0;
$10 = IFS_spec__IFS_spec_28_29(operator_20new_28unsigned_20long_29(16));
$6 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_iii(255, $6 | 0, $9 << 1) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAP32[$10 >> 2] = $4;
$3 = $11 << 16 >> 16;
$3 = (($3 | 0) > 0 ? $3 : 0) & 65535;
while (1) {
if (($0 | 0) == ($3 | 0)) {
$0 = 0;
} else {
DynamicArray1_Vector___appendElement_28Vector_20const__29(HEAP32[$10 >> 2], Math_imul($0, 12) + $1 | 0);
$0 = $0 + 1 | 0;
continue;
}
break;
}
while (1) {
if (($0 | 0) != ($3 | 0)) {
DynamicArray1_Vector___appendElement_28Vector_20const__29(HEAP32[$10 >> 2], Math_imul($0, 12) + $8 | 0);
$0 = $0 + 1 | 0;
continue;
}
break;
}
$6 = 0;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$12 = invoke_iii(256, $3 | 0, 12) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$8;
}
HEAP32[$10 + 4 >> 2] = $12;
$1 = 4;
$13 = 1;
label$14: while (1) {
if (($1 | 0) < ($9 | 0)) {
$0 = 0;
while (1) {
if (($0 | 0) == 4) {
$6 = $6 + 4 | 0;
$1 = $1 + 4 | 0;
$13 = $13 ^ 1;
continue label$14;
}
$5 = $0 + $1 | 0;
$4 = $11 + $5 | 0;
$14 = $0 + 1 | 0;
$3 = $14 & 3;
$7 = $3 | $1;
$15 = $3 | $6;
$3 = $0 + $6 | 0;
$0 = $11 + $3 << 16 >> 16;
if ($13 & 1) {
HEAP32[$2 + 60 >> 2] = -1;
HEAP32[$2 + 44 >> 2] = -1;
HEAP32[$2 + 32 >> 2] = $0;
HEAP32[$2 + 28 >> 2] = -1;
HEAP32[$2 + 16 >> 2] = $3;
$4 = $4 << 16 >> 16;
HEAP32[$2 + 56 >> 2] = $4;
HEAP32[$2 + 52 >> 2] = $7 << 16 >> 16;
$7 = $15 << 16 >> 16;
HEAP32[$2 + 48 >> 2] = $7;
HEAP32[$2 + 40 >> 2] = $4;
HEAP32[$2 + 36 >> 2] = $7;
HEAP32[$2 + 24 >> 2] = $5 << 16 >> 16;
HEAP32[$2 + 20 >> 2] = $4;
HEAP32[$2 + 12 >> 2] = -1;
HEAP32[$2 + 4 >> 2] = $0;
HEAP32[$2 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = $4;
DynamicArray_short_2c_20_28short_29_1___appendElementsX_28int_2c_20____29($12, 16, $2);
} else {
HEAP32[$2 + 124 >> 2] = -1;
HEAP32[$2 + 112 >> 2] = $0;
HEAP32[$2 + 108 >> 2] = -1;
HEAP32[$2 + 96 >> 2] = $0;
HEAP32[$2 + 92 >> 2] = -1;
HEAP32[$2 + 80 >> 2] = $0;
$4 = $4 << 16 >> 16;
HEAP32[$2 + 120 >> 2] = $4;
$7 = $7 << 16 >> 16;
HEAP32[$2 + 116 >> 2] = $7;
HEAP32[$2 + 104 >> 2] = $7;
HEAP32[$2 + 100 >> 2] = $15 << 16 >> 16;
$5 = $5 << 16 >> 16;
HEAP32[$2 + 88 >> 2] = $5;
HEAP32[$2 + 84 >> 2] = $4;
HEAP32[$2 + 76 >> 2] = -1;
HEAP32[$2 + 68 >> 2] = $0;
HEAP32[$2 + 64 >> 2] = $3;
HEAP32[$2 + 72 >> 2] = $5;
DynamicArray_short_2c_20_28short_29_1___appendElementsX_28int_2c_20____29($12, 16, $2 - -64 | 0);
}
$0 = $14;
continue;
}
}
break;
}
operator_20delete_5b_5d_28void__29($8);
__stack_pointer = $2 + 128 | 0;
return $10;
}
} else {
$3 = Math_imul($0, 12);
makeOctagon_28Vector_20const__2c_20Vector__29($3 + $1 | 0, $3 + $8 | 0);
$0 = $0 + 4 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
break label$1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_5b_5d_28void__29($8);
break label$1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
}
__resumeException($2 | 0);
abort();
}
function BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = $0 + 12 | 0;
if (MannerFlags__defined_28_29_20const($3)) {
MannerFlags__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($3, $1, $2);
}
if (HEAPU8[$0 + 28 | 0]) {
label$3: {
if ($2) {
$3 = 15263;
$4 = 15157;
break label$3;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$4 = 15158;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 28 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
if (HEAPU8[$0 + 29 | 0]) {
label$6: {
if ($2) {
$3 = 15263;
$4 = 15240;
break label$6;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$4 = 15241;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 29 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
if (HEAPU8[$0 + 30 | 0]) {
label$9: {
if ($2) {
$3 = 15263;
$4 = 15142;
break label$9;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$4 = 15143;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 30 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
if (HEAPU8[$0 + 31 | 0]) {
label$12: {
if ($2) {
$3 = 15263;
$4 = 15120;
break label$12;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$4 = 15121;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, HEAPU8[$0 + 31 | 0] ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
if (HEAPU8[$0 + 32 | 0]) {
label$15: {
if ($2) {
$3 = 15263;
$2 = 15106;
break label$15;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$3 = 48340;
$2 = 15107;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $2);
$0 = HEAPU8[$0 + 32 | 0];
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $0 ? 8491 : 8921);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $3);
}
}
function setupOptions_28Getopts__29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = __stack_pointer - 496 | 0;
__stack_pointer = $1;
HEAP32[$1 + 488 >> 2] = 0;
HEAP32[$1 + 484 >> 2] = 12558;
HEAP32[$1 + 480 >> 2] = 5151;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 0, 14436, $1 + 480 | 0);
HEAP32[$1 + 468 >> 2] = 0;
HEAP32[$1 + 464 >> 2] = 4881;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 3, 1, 13629, $1 + 464 | 0);
HEAP32[$1 + 452 >> 2] = 0;
HEAP32[$1 + 448 >> 2] = 9933;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 3, 1, 14216, $1 + 448 | 0);
HEAP32[$1 + 436 >> 2] = 0;
HEAP32[$1 + 432 >> 2] = 9055;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 1, 14205, $1 + 432 | 0);
HEAP32[$1 + 420 >> 2] = 0;
HEAP32[$1 + 416 >> 2] = 1938;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 1, 14388, $1 + 416 | 0);
HEAP32[$1 + 404 >> 2] = 0;
HEAP32[$1 + 400 >> 2] = 7478;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 14084, $1 + 400 | 0);
HEAP32[$1 + 388 >> 2] = 0;
HEAP32[$1 + 384 >> 2] = 4493;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13679, $1 + 384 | 0);
HEAP32[$1 + 372 >> 2] = 0;
HEAP32[$1 + 368 >> 2] = 4501;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13316, $1 + 368 | 0);
HEAP32[$1 + 356 >> 2] = 0;
HEAP32[$1 + 352 >> 2] = 4486;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 14508, $1 + 352 | 0);
HEAP32[$1 + 340 >> 2] = 0;
HEAP32[$1 + 336 >> 2] = 4511;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 1, 12898, $1 + 336 | 0);
HEAP32[$1 + 324 >> 2] = 0;
HEAP32[$1 + 320 >> 2] = 2855;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13490, $1 + 320 | 0);
HEAP32[$1 + 312 >> 2] = 0;
HEAP32[$1 + 308 >> 2] = 12334;
HEAP32[$1 + 304 >> 2] = 5287;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 1, 13989, $1 + 304 | 0);
HEAP32[$1 + 292 >> 2] = 0;
HEAP32[$1 + 288 >> 2] = 9388;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13033, $1 + 288 | 0);
HEAP32[$1 + 276 >> 2] = 0;
HEAP32[$1 + 272 >> 2] = 2017;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13373, $1 + 272 | 0);
HEAP32[$1 + 264 >> 2] = 0;
HEAP32[$1 + 260 >> 2] = 5277;
HEAP32[$1 + 256 >> 2] = 1992;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13928, $1 + 256 | 0);
HEAP32[$1 + 244 >> 2] = 0;
HEAP32[$1 + 240 >> 2] = 6628;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 1, 14135, $1 + 240 | 0);
HEAP32[$1 + 228 >> 2] = 0;
HEAP32[$1 + 224 >> 2] = 10047;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 12951, $1 + 224 | 0);
HEAP32[$1 + 212 >> 2] = 0;
HEAP32[$1 + 208 >> 2] = 9967;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 13645, $1 + 208 | 0);
HEAP32[$1 + 196 >> 2] = 0;
HEAP32[$1 + 192 >> 2] = 6643;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 13750, $1 + 192 | 0);
HEAP32[$1 + 184 >> 2] = 0;
HEAP32[$1 + 180 >> 2] = 3647;
HEAP32[$1 + 176 >> 2] = 9222;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 13823, $1 + 176 | 0);
HEAP32[$1 + 164 >> 2] = 0;
HEAP32[$1 + 160 >> 2] = 6442;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 1, 1, 13158, $1 + 160 | 0);
HEAP32[$1 + 148 >> 2] = 0;
HEAP32[$1 + 144 >> 2] = 5249;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 14286, $1 + 144 | 0);
HEAP32[$1 + 132 >> 2] = 0;
HEAP32[$1 + 128 >> 2] = 5239;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 14232, $1 + 128 | 0);
HEAP32[$1 + 116 >> 2] = 0;
HEAP32[$1 + 112 >> 2] = 1294;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 2, 1, 13582, $1 + 112 | 0);
HEAP32[$1 + 100 >> 2] = 0;
HEAP32[$1 + 96 >> 2] = 4332;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 12871, $1 + 96 | 0);
HEAP32[$1 + 84 >> 2] = 0;
HEAP32[$1 + 80 >> 2] = 4339;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 14401, $1 + 80 | 0);
HEAP32[$1 + 68 >> 2] = 0;
HEAP32[$1 + 64 >> 2] = 2851;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 13876, $1 - -64 | 0);
HEAP32[$1 + 52 >> 2] = 0;
HEAP32[$1 + 48 >> 2] = 3934;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 13402, $1 + 48 | 0);
HEAP32[$1 + 36 >> 2] = 0;
HEAP32[$1 + 32 >> 2] = 5072;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 12991, $1 + 32 | 0);
HEAP32[$1 + 20 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 6862;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 14339, $1 + 16 | 0);
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 >> 2] = 6934;
Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, 0, 0, 13783, $1);
__stack_pointer = $1 + 496 | 0;
}
function little2_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
$4 = $2 - $1 | 0;
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$5;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 | 0];
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 7:
break label$10;
case 6:
break label$11;
case 5:
break label$12;
case 4:
break label$13;
case 10:
break label$14;
case 9:
break label$15;
case 3:
break label$16;
case 2:
break label$17;
case 0:
case 1:
case 8:
break label$9;
default:
break label$8;
}
}
return little2_scanLt($0, $1 + 2 | 0, $2, $3) | 0;
}
return little2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$2 = HEAPU8[$1 + 2 | 0];
$6 = $1 + 4 | 0;
$5 = HEAPU8[$1 + 3 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($2 | 0) == 10 ? $6 : $4;
return 7;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
}
$5 = -5;
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$4 | 0] != 93) {
break label$7;
}
$6 = $1 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 4 | 0] != 62) {
break label$7;
}
HEAP32[$3 >> 2] = $6;
return 0;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = $1 + 2 | 0;
break label$7;
}
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = $1 + 3 | 0;
break label$7;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = $1 + 4 | 0;
break label$7;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
$4 = $1 + 2 | 0;
}
while (1) {
$1 = $4;
if (($2 | 0) != ($1 | 0)) {
$4 = HEAPU8[$1 | 0];
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 4:
break label$26;
case 7:
break label$27;
case 6:
break label$28;
case 5:
break label$29;
case 0:
case 1:
case 2:
case 3:
case 8:
case 9:
case 10:
break label$4;
default:
break label$25;
}
}
if (($2 - $1 | 0) > 1) {
break label$25;
}
break label$4;
}
if (($2 - $1 | 0) <= 2) {
break label$4;
}
$4 = $1 + 3 | 0;
continue;
}
if (($2 - $1 | 0) <= 3) {
break label$4;
}
$4 = $1 + 4 | 0;
continue;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$4;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$4 | 0] != 93) {
continue;
}
$5 = $1 + 4 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$4;
}
if (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 4 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $5;
return 0;
}
$4 = $1 + 2 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$3;
}
return -1;
}
HEAP32[$3 >> 2] = $1;
}
$5 = 6;
}
return $5 | 0;
}
function big2_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
$4 = $2 - $1 | 0;
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$5;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 + 1 | 0];
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 7:
break label$10;
case 6:
break label$11;
case 5:
break label$12;
case 4:
break label$13;
case 10:
break label$14;
case 9:
break label$15;
case 3:
break label$16;
case 2:
break label$17;
case 0:
case 1:
case 8:
break label$9;
default:
break label$8;
}
}
return big2_scanLt($0, $1 + 2 | 0, $2, $3) | 0;
}
return big2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$2 = HEAPU8[$1 + 3 | 0];
$6 = $1 + 4 | 0;
$5 = HEAPU8[$1 + 2 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($2 | 0) == 10 ? $6 : $4;
return 7;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
}
$5 = -5;
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$4 | 0] | HEAPU8[$1 + 3 | 0] != 93) {
break label$7;
}
$6 = $1 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] != 62) {
break label$7;
}
HEAP32[$3 >> 2] = $6;
return 0;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = $1 + 2 | 0;
break label$7;
}
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = $1 + 3 | 0;
break label$7;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = $1 + 4 | 0;
break label$7;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
$4 = $1 + 2 | 0;
}
while (1) {
$1 = $4;
if (($2 | 0) != ($1 | 0)) {
$4 = HEAPU8[$1 + 1 | 0];
label$25: {
label$26: {
label$27: {
label$28: {
label$29: {
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 4:
break label$26;
case 7:
break label$27;
case 6:
break label$28;
case 5:
break label$29;
case 0:
case 1:
case 2:
case 3:
case 8:
case 9:
case 10:
break label$4;
default:
break label$25;
}
}
if (($2 - $1 | 0) > 1) {
break label$25;
}
break label$4;
}
if (($2 - $1 | 0) <= 2) {
break label$4;
}
$4 = $1 + 3 | 0;
continue;
}
if (($2 - $1 | 0) <= 3) {
break label$4;
}
$4 = $1 + 4 | 0;
continue;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$4;
}
if (HEAPU8[$4 | 0] | HEAPU8[$1 + 3 | 0] != 93) {
continue;
}
$5 = $1 + 4 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$4;
}
if (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $5;
return 0;
}
$4 = $1 + 2 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$3;
}
return -1;
}
HEAP32[$3 >> 2] = $1;
}
$5 = 6;
}
return $5 | 0;
}
function DirectedMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
$3 = __stack_pointer - 112 | 0;
__stack_pointer = $3;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24970, 0);
}
label$2: {
if (HEAP32[$0 + 36 >> 2] == 13) {
$4 = ElbowDisplacement__ElbowDisplacement_28_29($3 + 96 | 0);
$7 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 528 >> 2] * (HEAPU8[$1 + 13 | 0] & 64 ? Math_fround(-1) : Math_fround(1))) + HEAPF32[$0 + 532 >> 2]) * Math_fround(.5));
HEAPF32[$4 >> 2] = $7;
$8 = HEAPF32[$0 + 536 >> 2];
HEAPF32[$4 + 4 >> 2] = $8;
$1 = HEAP32[$0 + 540 >> 2];
HEAP32[$4 + 8 >> 2] = $1;
if (HEAPU8[67567]) {
HEAP32[$3 + 48 >> 2] = $1;
HEAPF64[$3 + 40 >> 3] = $8;
HEAPF64[$3 + 32 >> 3] = $7;
eprintf_28char_20const__2c_20____29(7666, $3 + 32 | 0);
$5 = HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]);
$1 = HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]);
HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$3 + 20 >> 2] = $1 ? 84 : 70;
HEAP32[$3 + 16 >> 2] = $5 ? 84 : 70;
eprintf_28char_20const__2c_20____29(30448, $3 + 16 | 0);
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = TwoHAbstractPosture__right_28bool_29($2, 1);
HEAP32[$1 + 68 >> 2] = HEAP32[$4 + 8 >> 2];
$5 = HEAP32[$4 + 4 >> 2];
$6 = HEAP32[$4 >> 2];
HEAP32[$1 + 60 >> 2] = $6;
HEAP32[$1 + 64 >> 2] = $5;
if (HEAPU8[67567]) {
eprintf_28char_20const__2c_20____29(15797, 0);
ElbowDisplacement__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15757, 0);
ElbowDisplacement__print_28_IO_FILE__29_20const(TwoHAbstractPosture__right_28bool_29($2, 1) + 60 | 0, HEAP32[16886]);
eputc_28char_29(10);
}
CalcElbowRotation_28OneHAbstractPosture_20const__2c_20OneHConcretePosture__29(TwoHAbstractPosture__right_28bool_29($2, 1), $0 + 284 | 0);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
$1 = TwoHAbstractPosture__left_28bool_29($2, 1);
HEAP32[$1 + 68 >> 2] = HEAP32[$4 + 8 >> 2];
$6 = HEAP32[$4 + 4 >> 2];
$5 = HEAP32[$4 >> 2];
HEAP32[$1 + 60 >> 2] = $5;
HEAP32[$1 + 64 >> 2] = $6;
CalcElbowRotation_28OneHAbstractPosture_20const__2c_20OneHConcretePosture__29(TwoHAbstractPosture__left_28bool_29($2, 1), $0 + 396 | 0);
break label$2;
}
label$7: {
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$7;
}
if (wasm2js_i32$0 = 0, wasm2js_i32$1 = HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]), 
wasm2js_i32$2 = HEAPU8[$1 + 13 | 0] & 64, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
break label$7;
}
$4 = $0 + 600 | 0;
$2 = Vector__Vector_28_29($3 + 96 | 0);
DirectedMovement__setAvatarDependentValues1_28OneHDirMoveSpec__2c_20Vector__2c_20AvatarTiming_20const__2c_20bool_29($0, $4, $2, HEAP32[$1 >> 2] + 232 | 0, (HEAPU8[$1 + 13 | 0] & 32) >>> 5 | 0);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($0 + 284 | 0, $2);
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
$5 = HEAPU16[$1 + 14 >> 1];
HEAP16[$3 + 62 >> 1] = $5;
HEAP16[$3 + 88 >> 1] = $5;
MirrorDirMove_28OneHDirMoveSpec_20const__2c_20OneHDirMoveSpec__2c_20Mirroring_29($4, $0 + 672 | 0, $3 + 62 | 0);
$1 = HEAPU16[$1 + 14 >> 1];
HEAP16[$3 + 60 >> 1] = $1;
HEAP16[$3 + 80 >> 1] = $1;
MirrorDirectionVec_28Mirroring_2c_20Vector__29($3 + 60 | 0, $2);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($0 + 396 | 0, $2);
break label$2;
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
$4 = $0 + 672 | 0;
$2 = Vector__Vector_28_29($3 + 96 | 0);
DirectedMovement__setAvatarDependentValues1_28OneHDirMoveSpec__2c_20Vector__2c_20AvatarTiming_20const__2c_20bool_29($0, $4, $2, HEAP32[$1 >> 2] + 232 | 0, (HEAPU8[$1 + 13 | 0] & 32) >>> 5 | 0);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($0 + 396 | 0, $2);
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
$5 = HEAPU16[$1 + 14 >> 1];
HEAP16[$3 + 58 >> 1] = $5;
HEAP16[$3 + 72 >> 1] = $5;
MirrorDirMove_28OneHDirMoveSpec_20const__2c_20OneHDirMoveSpec__2c_20Mirroring_29($4, $0 + 600 | 0, $3 + 58 | 0);
$1 = HEAPU16[$1 + 14 >> 1];
HEAP16[$3 + 56 >> 1] = $1;
HEAP16[$3 + 64 >> 1] = $1;
MirrorDirectionVec_28Mirroring_2c_20Vector__29($3 + 56 | 0, $2);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($0 + 284 | 0, $2);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (HEAPU8[67589]) {
HEAPF64[$3 >> 3] = HEAPF32[$0 + 40 >> 2];
eprintf_28char_20const__2c_20____29(30828, $3);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0 + 60 | 0, HEAP32[16886]);
}
__stack_pointer = $3 + 112 | 0;
}
function big2_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$6 = 1;
while (1) {
$7 = $1;
$8 = HEAPU8[$7 + 3 | 0];
$1 = $7 + 2 | 0;
$4 = $6;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
$10 = HEAPU8[$7 + 2 | 0];
if ($10) {
$11 = unicode_byte_type($10 << 24 >> 24, $8 << 24 >> 24);
} else {
$11 = HEAPU8[($0 + $8 | 0) + 72 | 0];
}
switch ($11 - 3 | 0) {
case 4:
break label$10;
case 3:
break label$11;
case 2:
break label$12;
case 8:
case 14:
break label$3;
case 6:
case 7:
break label$4;
case 18:
break label$5;
case 0:
break label$6;
case 10:
break label$7;
case 9:
break label$8;
case 19:
case 21:
case 26:
break label$9;
default:
continue;
}
}
if ($4) {
continue;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $1;
continue;
}
$6 = $4;
label$15: {
if ($4) {
break label$15;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
break label$15;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $1;
$6 = 1;
}
$1 = $7 + 3 | 0;
continue;
}
$6 = $4;
label$16: {
if ($4) {
break label$16;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
break label$16;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $1;
$6 = 1;
}
$1 = $7 + 4 | 0;
continue;
}
if ($4) {
continue;
}
$6 = 1;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
HEAP8[$4 + 12 | 0] = 1;
HEAP32[$4 >> 2] = $1;
continue;
}
if (($4 | 0) != 2) {
$9 = 12;
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP32[(($5 << 4) + $3 | 0) + 4 >> 2] = $7 + 4;
continue;
}
$6 = 2;
if (($9 | 0) != 12) {
continue;
}
if (($2 | 0) > ($5 | 0)) {
HEAP32[(($5 << 4) + $3 | 0) + 8 >> 2] = $1;
}
$5 = $5 + 1 | 0;
$9 = 12;
$6 = 0;
continue;
}
if (($4 | 0) != 2) {
$9 = 13;
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP32[(($5 << 4) + $3 | 0) + 4 >> 2] = $7 + 4;
continue;
}
$6 = 2;
if (($9 | 0) != 13) {
continue;
}
if (($2 | 0) > ($5 | 0)) {
HEAP32[(($5 << 4) + $3 | 0) + 8 >> 2] = $1;
}
$5 = $5 + 1 | 0;
$9 = 13;
$6 = 0;
continue;
}
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP8[(($5 << 4) + $3 | 0) + 12 | 0] = 0;
break label$2;
}
$6 = 0;
label$21: {
switch ($4 - 1 | 0) {
case 0:
continue;
case 1:
break label$21;
default:
break label$2;
}
}
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
$4 = ($5 << 4) + $3 | 0;
if (!HEAPU8[$4 + 12 | 0]) {
continue;
}
label$22: {
if (HEAP32[$4 + 4 >> 2] == ($1 | 0) | $10 | ($8 | 0) != 32) {
break label$22;
}
$8 = HEAPU8[$7 + 5 | 0];
$7 = HEAPU8[$7 + 4 | 0];
label$23: {
if (!$7) {
if (($8 | 0) == 32) {
break label$22;
}
$7 = HEAPU8[($0 + $8 | 0) + 72 | 0];
break label$23;
}
$7 = unicode_byte_type($7 << 24 >> 24, $8 << 24 >> 24);
}
if (($9 | 0) != ($7 | 0)) {
continue;
}
}
HEAP8[$4 + 12 | 0] = 0;
continue;
}
$6 = 0;
label$25: {
switch ($4 - 1 | 0) {
case 0:
continue;
case 1:
break label$25;
default:
break label$2;
}
}
$6 = 2;
if (($2 | 0) <= ($5 | 0)) {
continue;
}
HEAP8[(($5 << 4) + $3 | 0) + 12 | 0] = 0;
continue;
}
$6 = 2;
if (($4 | 0) == 2) {
continue;
}
return $5 | 0;
}
$6 = $4;
continue;
}
}
function NonmanualMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 176 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if (!$1) {
break label$2;
}
if (HEAP32[$0 + 8 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22812, $1);
HEAP32[$2 + 128 >> 2] = HEAP32[$0 + 8 >> 2];
fiprintf($1, 30758, $2 + 128 | 0);
}
if (HEAP32[$0 + 12 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22827, $1);
HEAP32[$2 + 112 >> 2] = HEAP32[$0 + 12 >> 2];
fiprintf($1, 30758, $2 + 112 | 0);
}
if (HEAPU8[$0 + 16 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 16 | 0]), HEAP32[wasm2js_i32$0 + 96 >> 2] = wasm2js_i32$1;
fiprintf($1, 31318, $2 + 96 | 0);
}
printIndent_28_IO_FILE__29($1);
$4 = HEAP32[$0 + 4 >> 2];
if ($4) {
$4 = HEAP32[$4 + 12 >> 2];
} else {
$4 = -1;
}
HEAP32[$2 + 80 >> 2] = $4;
fiprintf($1, 30745, $2 + 80 | 0);
label$8: {
$6 = HEAP32[$0 + 4 >> 2];
if (!$6) {
break label$8;
}
label$9: while (1) {
if (HEAP32[$6 + 12 >> 2] <= ($7 | 0)) {
break label$8;
}
$4 = 0;
$6 = DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($6, $7);
while (1) {
if (HEAP32[$6 + 12 >> 2] <= ($4 | 0)) {
$7 = $7 + 1 | 0;
$6 = HEAP32[$0 + 4 >> 2];
continue label$9;
}
printIndent_28_IO_FILE__29($1);
fputs($4 ? 24156 : 21798, $1);
DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($2 + 144 | 0, $6, $4);
HEAP32[19359] = 0;
invoke_vi(36, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$12: {
if (($3 | 0) == 1) {
break label$12;
}
label$13: {
label$14: {
label$15: {
label$16: {
label$17: {
$3 = HEAP32[$2 + 144 >> 2];
switch ($3 - 9 | 0) {
case 1:
break label$14;
case 0:
break label$15;
case 2:
break label$16;
default:
break label$17;
}
}
if ($3) {
break label$14;
}
HEAP32[$2 + 32 >> 2] = $7;
HEAP32[$2 + 36 >> 2] = HEAP16[$2 + 148 >> 1];
fiprintf($1, 14786, $2 + 32 | 0);
break label$13;
}
HEAP32[19359] = 0;
$3 = HEAP32[18845];
$5 = HEAP16[$2 + 148 >> 1];
$5 = invoke_iii(298, $3 | 0, $5 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$12;
}
HEAP32[$2 + 52 >> 2] = $5;
HEAP32[$2 + 48 >> 2] = $7;
fiprintf($1, 14618, $2 + 48 | 0);
break label$13;
}
HEAP32[$2 + 64 >> 2] = $7;
HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 152 >> 2];
fiprintf($1, 14597, $2 - -64 | 0);
$3 = HEAP32[$2 + 152 >> 2];
if (!$3) {
break label$13;
}
$5 = HEAP32[HEAP32[$3 >> 2] + 40 >> 2];
HEAP32[19359] = 0;
invoke_vii($5 | 0, $3 | 0, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$12;
}
fputc(10, $1);
break label$13;
}
$3 = HEAP32[HEAP32[18846] + ($3 << 2) >> 2];
label$18: {
if (!$3) {
$3 = 14713;
break label$18;
}
HEAP32[19359] = 0;
$5 = HEAP16[$2 + 148 >> 1];
$3 = invoke_iii(298, $3 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
}
HEAP32[$2 + 20 >> 2] = $3;
HEAP32[$2 + 16 >> 2] = $7;
fiprintf($1, 4316, $2 + 16 | 0);
}
if ((HEAP32[$6 + 12 >> 2] - 1 | 0) == ($4 | 0)) {
fputs(14996, $1);
}
HEAPF64[$2 >> 3] = HEAPF32[$2 + 168 >> 2];
__small_fprintf($1, 7578, $2);
fputc(10, $1);
$4 = $4 + 1 | 0;
AtomicNonmanual___AtomicNonmanual_28_29($2 + 144 | 0);
continue;
}
break;
}
break;
}
break label$1;
}
$4 = HEAP32[$0 + 20 >> 2];
printIndent_28_IO_FILE__29($1);
if ($4) {
fwrite(33141, 12, 1, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
printIndent_28_IO_FILE__29($1);
AbstractTimedMorph__printIndented_28_IO_FILE__29_20const(HEAP32[$0 + 20 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$2;
}
eprintf_28char_20const__2c_20____29(31558, 0);
}
__stack_pointer = $2 + 176 | 0;
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AtomicNonmanual___AtomicNonmanual_28_29($2 + 144 | 0);
__resumeException($1 | 0);
abort();
}
function ParMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
$7 = __stack_pointer - 320 | 0;
__stack_pointer = $7;
$11 = $0 + 60 | 0;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($11, $1);
$9 = TwoHandStuff__TwoHandStuff_28TwoHandStuff_20const__29($7 + 232 | 0, $1);
HEAP32[19359] = 0;
$10 = invoke_iii(475, $7 + 160 | 0, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($4 | 0) != 1) {
$3 = HEAP16[$0 + 540 >> 1];
$12 = ($3 | 0) > 0 ? $3 : 0;
$14 = $0 + 510 | 0;
$15 = $0 + 508 | 0;
$13 = $0 + 528 | 0;
$4 = 0;
label$3: {
label$4: {
label$5: {
label$6: {
while (1) {
if (($4 | 0) == ($12 | 0)) {
$5 = $0 + 284 | 0;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($5, $1);
$3 = 0;
label$9: {
while (1) {
if (($3 | 0) == ($12 | 0)) {
if (!HEAPU8[67585]) {
break label$9;
}
HEAP32[19359] = 0;
invoke_vii(71, 20338, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$12: {
if (($4 | 0) == 1) {
break label$12;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(483, $11 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$12;
}
HEAP32[19359] = 0;
invoke_vii(71, 20362, 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$12;
}
HEAP32[19359] = 0;
$4 = HEAP32[16886];
invoke_vii(483, $5 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
break label$9;
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$6 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($13, $3);
$8 = HEAP32[HEAP32[$6 >> 2] + 32 >> 2];
HEAP32[19359] = 0;
invoke_viii($8 | 0, $6 | 0, $1 | 0, $2 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
$3 = $3 + 1 | 0;
continue;
}
break;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
ArmHandConstellation___ArmHandConstellation_28_29($10);
TwoHandStuff___TwoHandStuff_28_29($9);
__stack_pointer = $7 + 320 | 0;
return;
}
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($13, $4);
HEAP32[19359] = 0;
$8 = invoke_iii(475, $7 + 88 | 0, $10 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
$6 = invoke_iii(484, $7 | 0, $9 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$5 = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii($5 | 0, $3 | 0, $6 | 0, $8 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$6;
}
HEAP32[19359] = 0;
invoke_vii(485, $1 | 0, $6 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$6;
}
HEAP32[19359] = 0;
invoke_vii(486, $2 | 0, $8 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$6;
}
PostureChangeFlags__mergeFlags_28PostureChangeFlags_20const__29($15, $3 + 508 | 0);
PostureChangeFlags__mergeFlags_28PostureChangeFlags_20const__29($14, $3 + 510 | 0);
TwoHandStuff___TwoHandStuff_28_29($6);
ArmHandConstellation___ArmHandConstellation_28_29($8);
$4 = $4 + 1 | 0;
continue;
}
break;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$5;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHandStuff___TwoHandStuff_28_29($6);
}
ArmHandConstellation___ArmHandConstellation_28_29($8);
break label$3;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
ArmHandConstellation___ArmHandConstellation_28_29($10);
break label$1;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
TwoHandStuff___TwoHandStuff_28_29($9);
__resumeException($3 | 0);
abort();
}
function HanimAvatar__setJointArticulations_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
while (1) {
if (($5 | 0) == 2) {
label$3: while (1) {
if (($8 | 0) != 2) {
$4 = ($8 | 0) == 1 ? Math_fround(1) : Math_fround(-1);
$2 = 0;
while (1) if (($2 | 0) == 3) {
$8 = $8 + 1 | 0;
continue label$3;
} else {
$6 = $2 << 2;
$1 = HEAP32[($6 + (HEAP32[$0 + 72 >> 2] + Math_imul($8, 60) | 0) | 0) + 52 >> 2];
HEAP32[$1 + 24 >> 2] = HEAP32[$6 + 49100 >> 2];
Joint__InitArticulation_28_29($1);
$1 = HEAP32[$1 + 36 >> 2];
label$8: {
if (!$2) {
wasm2js_i32$1 = $1, wasm2js_i32$2 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(-1), Math_fround(0), Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 56 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
wasm2js_i32$2 = $1, wasm2js_i32$1 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), $4, Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
wasm2js_i32$1 = $1, wasm2js_i32$2 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), $4, Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 60 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
$9 = HEAPF32[17095];
HEAPF32[$1 + 64 >> 2] = $9;
HEAPF32[$1 + 60 >> 2] = $9;
HEAPF32[$1 + 56 >> 2] = $9;
break label$8;
}
wasm2js_i32$2 = $1, wasm2js_i32$1 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), Math_fround(0), $4), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
}
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
__stack_pointer = $3 + 16 | 0;
return;
}
$1 = HEAP32[(HEAP32[$0 + 72 >> 2] + ($5 << 4) | 0) + 28 >> 2];
HEAP32[$1 + 24 >> 2] = 2;
Joint__InitArticulation_28_29($1);
$2 = HEAP32[$1 + 36 >> 2];
wasm2js_i32$1 = $2, wasm2js_i32$2 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(-1), Math_fround(0), Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
$1 = HEAP32[$1 + 36 >> 2];
wasm2js_i32$2 = $1, wasm2js_i32$1 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), Math_fround(1), Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 56 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
$7 = 1;
$4 = ($5 | 0) == 1 ? Math_fround(1) : Math_fround(-1);
label$10: while (1) {
if (($7 | 0) != 5) {
$1 = $7 << 2;
$10 = $1 + 60368 | 0;
$11 = $1 + 69152 | 0;
$12 = $1 + 60336 | 0;
$13 = $1 + 69088 | 0;
$14 = $1 + 69120 | 0;
$2 = 0;
while (1) if (($2 | 0) == 3) {
$7 = $7 + 1 | 0;
continue label$10;
} else {
$6 = $2 << 2;
$1 = HEAP32[($6 + ((HEAP32[$0 + 72 >> 2] + Math_imul($5, 60) | 0) + Math_imul($7, 12) | 0) | 0) + 52 >> 2];
HEAP32[$1 + 24 >> 2] = HEAP32[$6 + 49088 >> 2];
Joint__InitArticulation_28_29($1);
$1 = HEAP32[$1 + 36 >> 2];
label$15: {
if (!$2) {
wasm2js_i32$1 = $1, wasm2js_i32$2 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), Math_fround(0), $4), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
wasm2js_i32$2 = $1, wasm2js_i32$1 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(-1), Math_fround(0), Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 56 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
wasm2js_i32$1 = $1, wasm2js_i32$2 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), $4, Math_fround(0)), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 60 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
HEAPF32[$1 + 52 >> 2] = HEAPF32[$14 >> 2];
HEAPF32[$1 + 56 >> 2] = HEAPF32[$13 >> 2];
HEAPF32[$1 + 60 >> 2] = HEAPF32[$12 >> 2];
HEAPF32[$1 + 64 >> 2] = HEAPF32[$11 >> 2];
HEAPF32[$1 + 68 >> 2] = HEAPF32[$10 >> 2];
break label$15;
}
wasm2js_i32$2 = $1, wasm2js_i32$1 = Vector__Vector_28float_2c_20float_2c_20float_29($3, Math_fround(0), Math_fround(0), $4), 
wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
}
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
$5 = $5 + 1 | 0;
continue;
}
}
function FindGestureByName_28char_20const__2c_20ParserData__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = __stack_pointer - 32 | 0;
__stack_pointer = $6;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
$3 = HEAP32[$1 + 4 >> 2];
if (!$3) {
break label$2;
}
$4 = HashAny_char_20const__2c_20Gesture____lookupString_28char_20const__29_20const($3, $0);
if ($4) {
break label$2;
}
$4 = 0;
if (!HEAP32[$1 + 8 >> 2]) {
break label$2;
}
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 16 | 0);
label$3: {
label$4: {
while (1) {
$2 = HEAP32[$1 + 8 >> 2];
if (HEAP32[$2 + 12 >> 2] <= ($5 | 0)) {
break label$4;
}
$2 = DynamicArrayP_char_20const___getElement_28int_29_20const($2, $5);
HEAP32[19359] = 0;
invoke_iii(384, $3 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___length_28_29_20const($3);
label$6: {
if (($4 | 0) <= 0) {
break label$6;
}
if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, $4 - 1 | 0) | 0] == 47) {
break label$6;
}
HEAP32[19359] = 0;
invoke_iii(385, $3 | 0, 47) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
}
HEAP32[19359] = 0;
invoke_iii(386, $3 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_iii(386, $3 | 0, 6650) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
HEAP32[19359] = 0;
$7 = invoke_iii(387, $2 | 0, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[19359] = 0;
$4 = invoke_iii(388, $4 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
if ($4) {
break label$3;
}
$5 = $5 + 1 | 0;
if (($7 | 0) == 1) {
continue;
}
break;
}
$4 = 0;
$0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
HEAP32[19359] = 0;
invoke_vii(389, $7 | 0, $0 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
HEAP32[19359] = 0;
invoke_v(390);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$3;
}
}
break label$1;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
HEAP32[$6 >> 2] = $0;
invoke_vii(71, 32813, $6 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$0 = 0;
HEAP32[19359] = 0;
invoke_v(390);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
$4 = 0;
while (1) {
if (HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2] <= ($0 | 0)) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vi(340, 24156);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$9: {
if (($2 | 0) == 1) {
break label$9;
}
$2 = HEAP32[$1 + 8 >> 2];
$2 = DynamicArrayP_char_20const___getElement_28int_29_20const($2, $0);
HEAP32[19359] = 0;
invoke_vi(340, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$9;
}
HEAP32[19359] = 0;
invoke_vi(307, 10);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$9;
}
$0 = $0 + 1 | 0;
continue;
}
break;
}
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
}
__stack_pointer = $6 + 32 | 0;
return $4;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
__resumeException($1 | 0);
abort();
}
function normal_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$4 = 1;
while (1) {
$5 = $4;
$7 = $1;
$1 = $7 + 1 | 0;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
$9 = HEAPU8[$7 + 1 | 0];
switch (HEAPU8[($9 + $0 | 0) + 72 | 0] - 3 | 0) {
case 4:
break label$10;
case 3:
break label$11;
case 2:
break label$12;
case 8:
case 14:
break label$3;
case 6:
case 7:
break label$4;
case 18:
break label$5;
case 0:
break label$6;
case 10:
break label$7;
case 9:
break label$8;
case 19:
case 21:
case 26:
break label$9;
default:
continue;
}
}
$4 = $5;
label$13: {
if ($5) {
break label$13;
}
$4 = 1;
if (($2 | 0) <= ($6 | 0)) {
break label$13;
}
$5 = ($6 << 4) + $3 | 0;
HEAP8[$5 + 12 | 0] = 1;
HEAP32[$5 >> 2] = $1;
$4 = 1;
}
$1 = $7 + 2 | 0;
continue;
}
$4 = $5;
label$14: {
if ($5) {
break label$14;
}
$4 = 1;
if (($2 | 0) <= ($6 | 0)) {
break label$14;
}
$5 = ($6 << 4) + $3 | 0;
HEAP8[$5 + 12 | 0] = 1;
HEAP32[$5 >> 2] = $1;
$4 = 1;
}
$1 = $7 + 3 | 0;
continue;
}
$4 = $5;
label$15: {
if ($5) {
break label$15;
}
$4 = 1;
if (($2 | 0) <= ($6 | 0)) {
break label$15;
}
$5 = ($6 << 4) + $3 | 0;
HEAP8[$5 + 12 | 0] = 1;
HEAP32[$5 >> 2] = $1;
$4 = 1;
}
$1 = $7 + 4 | 0;
continue;
}
if ($5) {
continue;
}
$4 = 1;
if (($2 | 0) <= ($6 | 0)) {
continue;
}
$5 = ($6 << 4) + $3 | 0;
HEAP8[$5 + 12 | 0] = 1;
HEAP32[$5 >> 2] = $1;
continue;
}
if (($5 | 0) != 2) {
$8 = 12;
$4 = 2;
if (($2 | 0) <= ($6 | 0)) {
continue;
}
HEAP32[(($6 << 4) + $3 | 0) + 4 >> 2] = $7 + 2;
continue;
}
$4 = 2;
if (($8 | 0) != 12) {
continue;
}
if (($2 | 0) > ($6 | 0)) {
HEAP32[(($6 << 4) + $3 | 0) + 8 >> 2] = $1;
}
$6 = $6 + 1 | 0;
$8 = 12;
$4 = 0;
continue;
}
if (($5 | 0) != 2) {
$8 = 13;
$4 = 2;
if (($2 | 0) <= ($6 | 0)) {
continue;
}
HEAP32[(($6 << 4) + $3 | 0) + 4 >> 2] = $7 + 2;
continue;
}
$4 = 2;
if (($8 | 0) != 13) {
continue;
}
if (($2 | 0) > ($6 | 0)) {
HEAP32[(($6 << 4) + $3 | 0) + 8 >> 2] = $1;
}
$6 = $6 + 1 | 0;
$8 = 13;
$4 = 0;
continue;
}
if (($2 | 0) <= ($6 | 0)) {
continue;
}
HEAP8[(($6 << 4) + $3 | 0) + 12 | 0] = 0;
break label$2;
}
$4 = 0;
label$20: {
switch ($5 - 1 | 0) {
case 0:
continue;
case 1:
break label$20;
default:
break label$2;
}
}
$4 = 2;
if (($2 | 0) <= ($6 | 0)) {
continue;
}
$5 = ($6 << 4) + $3 | 0;
if (!HEAPU8[$5 + 12 | 0]) {
continue;
}
label$21: {
if (HEAP32[$5 + 4 >> 2] == ($1 | 0) | ($9 | 0) != 32) {
break label$21;
}
$7 = HEAPU8[$7 + 2 | 0];
if (($7 | 0) == 32) {
break label$21;
}
if (HEAPU8[($0 + $7 | 0) + 72 | 0] != ($8 | 0)) {
continue;
}
}
HEAP8[$5 + 12 | 0] = 0;
continue;
}
$4 = 0;
label$22: {
switch ($5 - 1 | 0) {
case 0:
continue;
case 1:
break label$22;
default:
break label$2;
}
}
$4 = 2;
if (($2 | 0) <= ($6 | 0)) {
continue;
}
HEAP8[(($6 << 4) + $3 | 0) + 12 | 0] = 0;
continue;
}
$4 = 2;
if (($5 | 0) == 2) {
continue;
}
return $6 | 0;
}
$4 = $5;
continue;
}
}
function SeqMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0;
$4 = __stack_pointer - 224 | 0;
__stack_pointer = $4;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24877, 0);
}
HEAP32[$0 + 40 >> 2] = 0;
$13 = $0 + 560 | 0;
$11 = $0 + 12 | 0;
$14 = $0 + 528 | 0;
$8 = $0 + 40 | 0;
$9 = TwoHAbstractPosture__TwoHAbstractPosture_28TwoHAbstractPosture_20const__29($4 + 56 | 0, $2);
$15 = HEAP16[$0 + 540 >> 1];
$12 = $0 + 60 | 0;
$10 = $12;
label$2: {
label$3: {
while (1) {
$3 = $6 << 16 >> 16;
if (($15 | 0) <= ($3 | 0)) {
if (HEAPU8[$0 + 20 | 0]) {
$3 = HEAP32[$1 >> 2];
$7 = Math_fround(HEAPF32[$3 + 268 >> 2] * HEAPF32[$3 + 232 >> 2]);
HEAPF32[$0 + 44 >> 2] = $7;
HEAPF32[$0 + 40 >> 2] = $7 + HEAPF32[$0 + 40 >> 2];
}
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 11;
HEAP32[19359] = 0;
$6 = $0 + 284 | 0;
invoke_vii(489, $6 | 0, $10 + 224 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_iii(490, $2 | 0, $9 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
if (!HEAPU8[67565]) {
break label$3;
}
$7 = HEAPF32[$0 + 40 >> 2];
$16 = HEAPF32[$0 + 52 >> 2];
HEAP32[19359] = 0;
HEAPF64[$4 + 32 >> 3] = $16;
HEAPF64[$4 + 40 >> 3] = $7;
invoke_vii(71, 29838, $4 + 32 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$3;
}
break label$2;
}
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($14, $3);
HEAP32[19359] = 0;
$5 = $10 + 224 | 0;
$10 = $3 + 60 | 0;
invoke_vii(489, $10 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
$5 = HEAP32[HEAP32[$3 >> 2] + 20 >> 2];
HEAP32[19359] = 0;
invoke_viii($5 | 0, $3 | 0, $1 | 0, $9 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
$5 = HEAP32[$0 + 24 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
$17 = HEAP32[$11 + 4 >> 2];
HEAP32[$4 >> 2] = HEAP32[$11 >> 2];
HEAP32[$4 + 4 >> 2] = $17;
$7 = durationScale_28MannerFlags_2c_20PathShape_29($4, $5);
HEAP32[19359] = 0;
invoke_vifi(491, $3 | 0, Math_fround($7), 1);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAPF32[$8 >> 2] = HEAPF32[$3 + 40 >> 2] + HEAPF32[$8 >> 2];
HEAP32[19359] = 0;
invoke_vii(492, $13 | 0, $8 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
$6 = $6 + 1 | 0;
continue;
}
break;
}
break label$2;
}
$3 = HEAP32[HEAP32[$0 >> 2] + 68 >> 2];
HEAP32[19359] = 0;
invoke_vi($3 | 0, $0 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
if (HEAPU8[67589]) {
$7 = HEAPF32[$8 >> 2];
HEAP32[19359] = 0;
HEAPF64[$4 + 16 >> 3] = $7;
invoke_vii(71, 30762, $4 + 16 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$3 = HEAP32[16886];
invoke_vii(493, $12 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
}
label$9: {
if (!HEAPU8[67570]) {
break label$9;
}
$3 = HEAP32[$0 + 8 >> 2];
HEAP32[19359] = 0;
$6 = invoke_iii(494, $6 | 0, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
if ($6) {
break label$9;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vii(71, 33409, 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$3 = HEAP32[$0 + 8 >> 2];
HEAP32[19359] = 0;
$6 = HEAP32[16886];
invoke_viii(495, $12 | 0, $6 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
}
TwoHAbstractPosture___TwoHAbstractPosture_28_29($9);
__stack_pointer = $4 + 224 | 0;
return;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHAbstractPosture___TwoHAbstractPosture_28_29($9);
__resumeException($3 | 0);
abort();
}
function SiGMLHandshape__CalcJointBendCodes_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
$1 = __stack_pointer - 112 | 0;
__stack_pointer = $1;
SiGMLHandshape__RecogniseSpecials_28_29($0);
label$1: {
label$2: {
$7 = HEAP32[$0 >> 2];
if (!$7) {
break label$2;
}
HEAP32[$1 + 96 >> 2] = 0;
HEAP32[$1 + 88 >> 2] = 0;
HEAP32[$1 + 92 >> 2] = 0;
HEAP32[$1 + 80 >> 2] = 0;
HEAP32[$1 + 84 >> 2] = 0;
$4 = HEAPU16[$0 + 52 >> 1];
if (!$4) {
$4 = HEAPU16[(Math_imul($7 << 16 >> 16, 160) + 70752 | 0) + 152 >> 1];
}
$7 = $0 + 160 | 0;
$8 = $4 << 16 >> 16;
label$4: {
label$5: {
while (1) {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
if ($2) {
if (($2 | 0) != 5) {
break label$12;
}
if (ThumbBending__defined_28_29_20const($7)) {
break label$4;
}
$2 = 3;
switch (HEAP32[$0 + 48 >> 2] - 1 | 0) {
case 0:
break label$5;
case 1:
break label$7;
default:
break label$4;
}
}
if (!ThumbBending__defined_28_29_20const($7)) {
break label$11;
}
break label$10;
}
if (FingerBending__defined_28_29_20const((($2 << 4) + $0 | 0) + 80 | 0)) {
break label$10;
}
}
$4 = $2 << 2;
if (!HEAP32[($4 + $0 | 0) + 60 >> 2]) {
break label$9;
}
}
HEAP32[($1 + 80 | 0) + ($2 << 2) >> 2] = 4;
break label$8;
}
$9 = $2 << 16 >> 16;
if (HasDigit_28short_2c_20short_29(HEAP16[$0 + 54 >> 1], $9)) {
HEAP32[($1 + 80 | 0) + $4 >> 2] = 1;
break label$8;
}
$4 = ($1 + 80 | 0) + $4 | 0;
if (HasDigit_28short_2c_20short_29($8, $9)) {
HEAP32[$4 >> 2] = 2;
break label$8;
}
HEAP32[$4 >> 2] = 3;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
$2 = 4;
}
HEAP32[$0 + 28 >> 2] = $2;
}
$4 = HEAP32[$0 + 8 >> 2];
$9 = HEAP32[$0 >> 2];
$5 = HEAP32[$0 + 24 >> 2];
$6 = HEAP32[$0 + 20 >> 2];
HEAP32[$1 + 72 >> 2] = $6;
HEAP32[$1 + 76 >> 2] = $5;
$6 = HEAP32[$0 + 16 >> 2];
$5 = HEAP32[$0 + 12 >> 2];
HEAP32[$1 + 64 >> 2] = $5;
HEAP32[$1 + 68 >> 2] = $6;
$8 = HEAP32[$0 + 60 >> 2];
HEAP32[$1 + 56 >> 2] = HEAP32[$7 + 16 >> 2];
$3 = $7;
$6 = HEAP32[$3 + 8 >> 2];
$5 = HEAP32[$3 + 12 >> 2];
HEAP32[$1 + 48 >> 2] = $6;
HEAP32[$1 + 52 >> 2] = $5;
$6 = HEAP32[$3 + 4 >> 2];
$5 = HEAP32[$3 >> 2];
HEAP32[$1 + 40 >> 2] = $5;
HEAP32[$1 + 44 >> 2] = $6;
$10 = HEAP32[$0 + 28 >> 2];
HEAP32[19359] = 0;
invoke_viiiiiiii(430, $3 | 0, $9 | 0, HEAP32[$1 + 80 >> 2], $4 | 0, $1 - -64 | 0, $8 | 0, $1 + 40 | 0, $10 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
$4 = $0 + 12 | 0;
ThumbBending___ThumbBending_28_29($1 + 40 | 0);
FingerBending___FingerBending_28_29($1 - -64 | 0);
$2 = 1;
while (1) {
if (($2 | 0) == 5) {
break label$2;
}
$7 = HEAP32[$0 + 8 >> 2];
$9 = HEAP32[$0 >> 2];
$3 = $4;
$6 = HEAP32[$3 + 8 >> 2];
$5 = HEAP32[$3 + 12 >> 2];
HEAP32[$1 + 32 >> 2] = $6;
HEAP32[$1 + 36 >> 2] = $5;
$6 = HEAP32[$3 + 4 >> 2];
$5 = HEAP32[$3 >> 2];
HEAP32[$1 + 24 >> 2] = $5;
HEAP32[$1 + 28 >> 2] = $6;
$8 = $2 << 2;
$10 = HEAP32[($8 + $0 | 0) + 60 >> 2];
$3 = ($2 << 4) + $0 | 0;
$6 = HEAP32[$3 + 88 >> 2];
$5 = HEAP32[$3 + 92 >> 2];
HEAP32[$1 + 16 >> 2] = $6;
HEAP32[$1 + 20 >> 2] = $5;
$3 = $3 + 80 | 0;
$5 = HEAP32[$3 >> 2];
$6 = HEAP32[$3 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = $5;
HEAP32[$1 + 12 >> 2] = $6;
CalcFingerBending_28FingerBending__2c_20HandshapeType_2c_20BendSource_2c_20FingerbendType_2c_20FingerBending_2c_20FingerbendType_2c_20FingerBending_2c_20CeeOpening_29($3, $9, HEAP32[($1 + 80 | 0) + $8 >> 2], $7, $1 + 24 | 0, $10, $1 + 8 | 0, HEAP32[$0 + 48 >> 2]);
$2 = $2 + 1 | 0;
FingerBending___FingerBending_28_29($1 + 8 | 0);
FingerBending___FingerBending_28_29($1 + 24 | 0);
continue;
}
}
__stack_pointer = $1 + 112 | 0;
return;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ThumbBending___ThumbBending_28_29($1 + 40 | 0);
FingerBending___FingerBending_28_29($1 - -64 | 0);
__resumeException($2 | 0);
abort();
}
function HanimAnimationRecord__ApplyPseudoMorph_28short_2c_20float_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
switch ($1 | 0) {
case 0:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68080, $2, $2, $0 + 324 | 0);
break label$1;
case 1:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68056, $2, Math_fround($2 * Math_fround(.5999999642372131)), $0 + 324 | 0);
break label$1;
case 2:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68032, $2, Math_fround($2 * Math_fround(.5999999642372131)), $0 + 324 | 0);
break label$1;
case 3:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68032, Math_fround(0), $2, $0 + 324 | 0);
break label$1;
case 4:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68068, $2, Math_fround(-$2), $0 + 324 | 0);
break label$1;
case 5:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68080, $2, $2, $0 + 308 | 0);
break label$1;
case 6:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68056, $2, Math_fround($2 * Math_fround(.5999999642372131)), $0 + 308 | 0);
break label$1;
case 7:
DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29(68032, $2, Math_fround($2 * Math_fround(.5999999642372131)), $0 + 308 | 0);
break label$1;
case 8:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68032, $2, 1), HEAP32[$0 + 120 >> 2]);
break label$1;
case 9:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68056, $2, 1), HEAP32[$0 + 120 >> 2]);
if (!HEAPU8[67557]) {
break label$1;
}
HEAPF64[$3 >> 3] = $2;
eprintf_28char_20const__2c_20____29(27477, $3);
break label$1;
case 10:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68080, $2, 1), HEAP32[$0 + 120 >> 2]);
break label$1;
case 11:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68032, $2, 1), HEAP32[$0 + 136 >> 2]);
break label$1;
case 12:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68092, $2, 1), HEAP32[$0 + 136 >> 2]);
break label$1;
case 13:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68044, $2, 1), HEAP32[$0 + 136 >> 2]);
break label$1;
case 14:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68068, $2, 1), HEAP32[$0 + 296 >> 2]);
break label$1;
case 15:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68080, $2, 1), HEAP32[$0 + 296 >> 2]);
break label$1;
case 16:
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68068, $2, 1), HEAP32[$0 + 300 >> 2]);
break label$1;
case 17:
break label$2;
default:
break label$1;
}
}
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($3 + 16 | 0, 68080, $2, 1), HEAP32[$0 + 300 >> 2]);
}
__stack_pointer = $3 + 32 | 0;
}
function SplitMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$3 = __stack_pointer - 96 | 0;
__stack_pointer = $3;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24897, 0);
TwoHConcretePosture__print_28_IO_FILE__29_20const($0 + 60 | 0, HEAP32[16886]);
}
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
$4 = HEAP32[$0 + 16 >> 2];
$8 = $4;
$7 = HEAP32[$0 + 20 >> 2];
$9 = $7;
$5 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 92 >> 2] = 0;
HEAP32[$3 + 88 >> 2] = 0;
HEAP32[$3 + 84 >> 2] = 0;
$4 = HEAP32[$0 + 528 >> 2];
if ($4) {
TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29($4 + 60 | 0, $0 + 60 | 0);
$6 = HEAP32[$0 + 528 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($6, $1, $2);
$6 = HEAP32[$0 + 528 >> 2];
UpdateMaxDuration_28BasicMovement__2c_20float__2c_20float__2c_20float__29($6, $3 + 92 | 0, $3 + 88 | 0, $3 + 84 | 0);
$4 = HEAP32[$6 + 12 >> 2];
$7 = HEAP32[$6 + 24 >> 2];
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 284 | 0, $6 + 284 | 0);
$6 = ($7 | 0) > 0 ? $7 : 0;
$5 = ($5 | 0) > ($4 | 0) ? $5 : $4;
}
$4 = HEAP32[$0 + 532 >> 2];
if ($4) {
TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29($4 + 60 | 0, $0 + 60 | 0);
$4 = HEAP32[$0 + 532 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, $1, $2);
$2 = HEAP32[$0 + 532 >> 2];
UpdateMaxDuration_28BasicMovement__2c_20float__2c_20float__2c_20float__29($2, $3 + 92 | 0, $3 + 88 | 0, $3 + 84 | 0);
$4 = HEAP32[$2 + 12 >> 2];
$7 = HEAP32[$2 + 24 >> 2];
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 396 | 0, $2 + 396 | 0);
$6 = ($6 | 0) > ($7 | 0) ? $6 : $7;
$5 = ($5 | 0) > ($4 | 0) ? $5 : $4;
}
wasm2js_i32$0 = $0, wasm2js_f32$0 = MaxDuration_28float_2c_20float_2c_20float_29(HEAPF32[$3 + 92 >> 2], HEAPF32[$3 + 88 >> 2], HEAPF32[$3 + 84 >> 2]), 
HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
$2 = HEAP32[$0 + 528 >> 2];
if ($2) {
HEAP32[$3 + 76 >> 2] = $8;
$7 = $9;
HEAP32[$3 + 80 >> 2] = $7;
HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 80 >> 2];
HEAP32[$3 + 72 >> 2] = $5;
$4 = HEAP32[$3 + 76 >> 2];
$7 = HEAP32[$3 + 72 >> 2];
HEAP32[$3 + 40 >> 2] = $7;
HEAP32[$3 + 44 >> 2] = $4;
BasicMovement__setMannerFlags_28MannerFlags_29($2, $3 + 40 | 0);
}
$2 = HEAP32[$0 + 532 >> 2];
if ($2) {
HEAP32[$3 + 60 >> 2] = $8;
$4 = $9;
HEAP32[$3 + 64 >> 2] = $4;
HEAP32[$3 + 32 >> 2] = HEAP32[$3 - -64 >> 2];
HEAP32[$3 + 56 >> 2] = $5;
$7 = HEAP32[$3 + 60 >> 2];
$4 = HEAP32[$3 + 56 >> 2];
HEAP32[$3 + 24 >> 2] = $4;
HEAP32[$3 + 28 >> 2] = $7;
BasicMovement__setMannerFlags_28MannerFlags_29($2, $3 + 24 | 0);
}
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 11;
if ($6) {
if (HEAPU8[67570]) {
LogTime_28_29();
$2 = HEAP32[$0 + 24 >> 2];
HEAP32[$3 + 20 >> 2] = HEAP32[($6 << 2) + 62560 >> 2];
HEAP32[$3 + 16 >> 2] = HEAP32[($2 << 2) + 62560 >> 2];
eprintf_28char_20const__2c_20____29(36047, $3 + 16 | 0);
}
HEAP32[$0 + 24 >> 2] = $6;
}
$5 = HEAP32[$0 + 528 >> 2];
if ($5) {
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, HEAPF32[$0 + 40 >> 2], 1);
}
$5 = HEAP32[$0 + 532 >> 2];
if ($5) {
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, HEAPF32[$0 + 40 >> 2], 1);
}
if (HEAPU8[$0 + 20 | 0]) {
$5 = HEAP32[$1 >> 2];
$10 = Math_fround(HEAPF32[$5 + 268 >> 2] * HEAPF32[$5 + 232 >> 2]);
HEAPF32[$0 + 44 >> 2] = $10;
HEAPF32[$0 + 40 >> 2] = $10 + HEAPF32[$0 + 40 >> 2];
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (HEAPU8[67589]) {
HEAPF64[$3 >> 3] = HEAPF32[$0 + 40 >> 2];
eprintf_28char_20const__2c_20____29(30785, $3);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0 + 60 | 0, HEAP32[16886]);
}
label$12: {
if (!HEAPU8[67570]) {
break label$12;
}
if (TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const($0 + 284 | 0, HEAP32[$0 + 8 >> 2])) {
break label$12;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(33280, 0);
$5 = HEAP32[$0 + 8 >> 2];
TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const($0 + 60 | 0, HEAP32[16886], $5);
}
__stack_pointer = $3 + 96 | 0;
}
function CircularMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 192 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 + 176 >> 2] = $0;
fiprintf($1, 32350, $2 + 176 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
if (HEAP32[$0 + 552 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23111, $1);
HEAP32[$2 + 160 >> 2] = HEAP32[$0 + 552 >> 2];
fiprintf($1, 30758, $2 + 160 | 0);
}
$3 = $0 + 528 | 0;
if (!Direction3__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22353, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$3 = $0 + 540 | 0;
if (!Direction3__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22336, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$3 = $0 + 556 | 0;
if (!Direction2__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21875, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$3 = $0 + 568 | 0;
if (!Direction2__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23755, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPU8[$0 + 564 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 564 | 0]), HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
fiprintf($1, 31259, $2 + 144 | 0);
}
if (HEAPU8[$0 + 565 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 565 | 0]), HEAP32[wasm2js_i32$0 + 128 >> 2] = wasm2js_i32$1;
fiprintf($1, 31234, $2 + 128 | 0);
}
if (HEAP32[$0 + 588 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22591, $1);
HEAP32[$2 + 112 >> 2] = HEAP32[$0 + 588 >> 2];
fiprintf($1, 30758, $2 + 112 | 0);
}
if (HEAP32[$0 + 592 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23024, $1);
HEAP32[$2 + 96 >> 2] = HEAP32[$0 + 592 >> 2];
fiprintf($1, 30758, $2 + 96 | 0);
}
if (HEAP32[$0 + 584 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23076, $1);
HEAP32[$2 + 80 >> 2] = HEAP32[$0 + 584 >> 2];
fiprintf($1, 30758, $2 + 80 | 0);
}
$3 = $0 + 576 | 0;
if (!Direction2__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22740, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 596 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23662, $1);
HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 596 >> 2];
fiprintf($1, 30758, $2 - -64 | 0);
}
if (HEAP32[$0 + 600 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23043, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 600 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
}
if (HEAP32[$0 + 604 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22570, $1);
HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 604 >> 2];
fiprintf($1, 30758, $2 + 32 | 0);
}
if (HEAP32[$0 + 608 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22998, $1);
HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 608 >> 2];
fiprintf($1, 30758, $2 + 16 | 0);
}
if (HEAPU16[$0 + 612 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23645, $1);
HEAP32[$2 >> 2] = HEAP16[$0 + 612 >> 1];
fiprintf($1, 30758, $2);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23928, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
TwoHCircMoveSpec__print_28_IO_FILE__29_20const($0 + 616 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 192 | 0;
}
function AvatarConstraints__initialise_28HanimAvatar__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0);
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
if (HEAPU8[67561]) {
eprintf_28char_20const__2c_20____29(32770, 0);
eprintf_28char_20const__2c_20____29(16742, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 68 | 0, HEAP32[16886], 3);
HEAPF64[$2 + 48 >> 3] = HEAPF32[$0 + 80 >> 2];
eprintf_28char_20const__2c_20____29(27565, $2 + 48 | 0);
eprintf_28char_20const__2c_20____29(16754, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 52 | 0, HEAP32[16886], 3);
HEAPF64[$2 + 32 >> 3] = HEAPF32[$0 - -64 >> 2];
eprintf_28char_20const__2c_20____29(27565, $2 + 32 | 0);
}
$9 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12342);
$6 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12349);
$3 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12372);
$7 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12362);
$10 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12355);
$4 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 11544);
$11 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12089);
$8 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 11551);
$12 = HanimAvatar__LookupSite_28char_20const__29_20const($1, 12096);
label$2: {
if ($12 ? !$9 | !$6 | (!$3 | !$7) | (!$10 | !$4 | (!$11 | !$8)) : 1) {
LogTime_28_29();
eputs_28char_20const__29(12601);
if (!$9) {
eputs_28char_20const__29(12341);
}
if (!$6) {
eputs_28char_20const__29(12348);
}
if (!$3) {
eputs_28char_20const__29(12371);
}
if (!$7) {
eputs_28char_20const__29(12361);
}
if (!$10) {
eputs_28char_20const__29(12354);
}
if (!$4) {
eputs_28char_20const__29(11543);
}
if (!$11) {
eputs_28char_20const__29(12088);
}
if (!$8) {
eputs_28char_20const__29(11550);
}
if (!$12) {
eputs_28char_20const__29(12095);
}
eputs_28char_20const__29(34045);
break label$2;
}
$3 = XMLCell__element_28char_20const__29(HEAP32[17100], 3181);
if ($3) {
$5 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($3, 5656, Math_fround(0));
} else {
$5 = Math_fround(0);
}
HEAP32[$2 + 60 >> 2] = 0;
$13 = $0 + 68 | 0;
$3 = HEAP32[HEAP32[$1 + 72 >> 2] + 40 >> 2] + 68 | 0;
Vector__coneAxis_28float__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($13, $2 + 60 | 0, $3, Site__getGlobalPosition_28_29($9), Site__getGlobalPosition_28_29($6), Site__getGlobalPosition_28_29($7));
$14 = asin_28float_29(Math_fround(Math_fround(Vector__distance_28Vector_20const__29_20const(Site__getGlobalPosition_28_29($4), Site__getGlobalPosition_28_29($11)) * Math_fround(.5)) / Vector__distance_28Vector_20const__29_20const(Site__getGlobalPosition_28_29($4), $3)));
HEAPF32[$0 + 80 >> 2] = Math_fround($14 * $5) + HEAPF32[$2 + 60 >> 2];
$4 = $0 + 52 | 0;
$1 = HEAP32[HEAP32[$1 + 72 >> 2] + 24 >> 2] + 68 | 0;
Vector__coneAxis_28float__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($4, $2 + 60 | 0, $1, Site__getGlobalPosition_28_29($10), Site__getGlobalPosition_28_29($7), Site__getGlobalPosition_28_29($6));
$15 = asin_28float_29(Math_fround(Math_fround(Vector__distance_28Vector_20const__29_20const(Site__getGlobalPosition_28_29($8), Site__getGlobalPosition_28_29($12)) * Math_fround(.5)) / Vector__distance_28Vector_20const__29_20const(Site__getGlobalPosition_28_29($8), $1)));
HEAPF32[$0 - -64 >> 2] = Math_fround($15 * $5) + HEAPF32[$2 + 60 >> 2];
if (!HEAPU8[67561]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(32727, 0);
eprintf_28char_20const__2c_20____29(16742, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($13, HEAP32[16886], 3);
$5 = HEAPF32[$0 + 80 >> 2];
HEAPF64[$2 + 24 >> 3] = $14;
HEAPF64[$2 + 16 >> 3] = $5;
eprintf_28char_20const__2c_20____29(27538, $2 + 16 | 0);
eprintf_28char_20const__2c_20____29(16754, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
$5 = HEAPF32[$0 + 64 >> 2];
HEAPF64[$2 + 8 >> 3] = $15;
HEAPF64[$2 >> 3] = $5;
eprintf_28char_20const__2c_20____29(27538, $2);
}
__stack_pointer = $2 - -64 | 0;
}
function try_realloc_chunk($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$6 = HEAP32[$0 + 4 >> 2];
$2 = $6 & -8;
label$1: {
if (!($6 & 3)) {
if ($1 >>> 0 < 256) {
return 0;
}
if ($1 + 4 >>> 0 <= $2 >>> 0) {
$3 = $0;
if ($2 - $1 >>> 0 <= HEAP32[19355] << 1 >>> 0) {
break label$1;
}
}
return 0;
}
$5 = $0 + $2 | 0;
label$5: {
if ($1 >>> 0 <= $2 >>> 0) {
$2 = $2 - $1 | 0;
if ($2 >>> 0 < 16) {
break label$5;
}
HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
$1 = $0 + $1 | 0;
HEAP32[$1 + 4 >> 2] = $2 | 3;
HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
dispose_chunk($1, $2);
break label$5;
}
if (HEAP32[19241] == ($5 | 0)) {
$2 = HEAP32[19238] + $2 | 0;
if ($2 >>> 0 <= $1 >>> 0) {
break label$1;
}
HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
$6 = $0 + $1 | 0;
$1 = $2 - $1 | 0;
HEAP32[$6 + 4 >> 2] = $1 | 1;
HEAP32[19238] = $1;
HEAP32[19241] = $6;
break label$5;
}
if (HEAP32[19240] == ($5 | 0)) {
$2 = HEAP32[19237] + $2 | 0;
if ($2 >>> 0 < $1 >>> 0) {
break label$1;
}
$3 = $2 - $1 | 0;
label$9: {
if ($3 >>> 0 >= 16) {
HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
$1 = $0 + $1 | 0;
HEAP32[$1 + 4 >> 2] = $3 | 1;
$2 = $0 + $2 | 0;
HEAP32[$2 >> 2] = $3;
HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
break label$9;
}
HEAP32[$0 + 4 >> 2] = $6 & 1 | $2 | 2;
$1 = $0 + $2 | 0;
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
$3 = 0;
$1 = 0;
}
HEAP32[19240] = $1;
HEAP32[19237] = $3;
break label$5;
}
$4 = HEAP32[$5 + 4 >> 2];
if ($4 & 2) {
break label$1;
}
$7 = ($4 & -8) + $2 | 0;
if ($7 >>> 0 < $1 >>> 0) {
break label$1;
}
$10 = $7 - $1 | 0;
label$11: {
if ($4 >>> 0 <= 255) {
$2 = HEAP32[$5 + 8 >> 2];
$8 = $4 >>> 3 | 0;
$4 = ($8 << 3) + 76980 | 0;
$3 = HEAP32[$5 + 12 >> 2];
if (($3 | 0) == ($2 | 0)) {
wasm2js_i32$0 = 76940, wasm2js_i32$1 = HEAP32[19235] & __wasm_rotl_i32(-2, $8), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$11;
}
HEAP32[$2 + 12 >> 2] = $3;
HEAP32[$3 + 8 >> 2] = $2;
break label$11;
}
$9 = HEAP32[$5 + 24 >> 2];
$4 = HEAP32[$5 + 12 >> 2];
label$14: {
if (($5 | 0) != ($4 | 0)) {
$2 = HEAP32[$5 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
HEAP32[$4 + 8 >> 2] = $2;
break label$14;
}
label$16: {
$2 = $5 + 20 | 0;
$3 = HEAP32[$2 >> 2];
if ($3) {
break label$16;
}
$2 = $5 + 16 | 0;
$3 = HEAP32[$2 >> 2];
if ($3) {
break label$16;
}
$4 = 0;
break label$14;
}
while (1) {
$8 = $2;
$4 = $3;
$2 = $4 + 20 | 0;
$3 = HEAP32[$2 >> 2];
if ($3) {
continue;
}
$2 = $4 + 16 | 0;
$3 = HEAP32[$4 + 16 >> 2];
if ($3) {
continue;
}
break;
}
HEAP32[$8 >> 2] = 0;
}
if (!$9) {
break label$11;
}
$3 = HEAP32[$5 + 28 >> 2];
$2 = ($3 << 2) + 77244 | 0;
label$18: {
if (HEAP32[$2 >> 2] == ($5 | 0)) {
HEAP32[$2 >> 2] = $4;
if ($4) {
break label$18;
}
wasm2js_i32$0 = 76944, wasm2js_i32$1 = HEAP32[19236] & __wasm_rotl_i32(-2, $3), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$11;
}
HEAP32[(HEAP32[$9 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $9 >> 2] = $4;
if (!$4) {
break label$11;
}
}
HEAP32[$4 + 24 >> 2] = $9;
$2 = HEAP32[$5 + 16 >> 2];
if ($2) {
HEAP32[$4 + 16 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $4;
}
$2 = HEAP32[$5 + 20 >> 2];
if (!$2) {
break label$11;
}
HEAP32[$4 + 20 >> 2] = $2;
HEAP32[$2 + 24 >> 2] = $4;
}
if ($10 >>> 0 <= 15) {
HEAP32[$0 + 4 >> 2] = $6 & 1 | $7 | 2;
$1 = $0 + $7 | 0;
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
break label$5;
}
HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
$1 = $0 + $1 | 0;
HEAP32[$1 + 4 >> 2] = $10 | 3;
$2 = $0 + $7 | 0;
HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
dispose_chunk($1, $10);
}
$3 = $0;
}
return $3;
}
function OneArmAnimator__OneArmAnimator_28OneHConcretePosture__2c_20HanimAvatar_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = 0;
$2 = HEAPU8[$1 | 0];
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP8[$0 + 8 | 0] = $2;
$8 = VectorController2__VectorController2_28_29($0 + 36 | 0);
HEAP32[19359] = 0;
$9 = invoke_ii(61, $0 + 184 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$10 = invoke_ii(62, $0 + 224 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$11 = invoke_ii(63, $0 + 868 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$5: {
if (($4 | 0) != 1) {
HEAP32[$0 + 976 >> 2] = 0;
$4 = $0 + 3556 | 0;
$7 = $0 + 980 | 0;
$2 = $7;
label$7: {
label$8: {
while (1) {
HEAP32[19359] = 0;
$6 = invoke_ii(62, $2 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$8;
}
$2 = $6 + 644 | 0;
if (($4 | 0) != ($2 | 0)) {
continue;
}
break;
}
$3 = (HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + (HEAPU8[$0 + 8 | 0] << 4) | 0) + 20 | 0;
$2 = 0;
label$10: {
label$11: {
label$12: {
while (1) {
if (($2 | 0) == 4) {
HEAP32[19359] = 0;
$5 = invoke_ii(64, 108) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[19359] = 0;
$6 = invoke_ii(63, $5 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$12;
}
HEAP32[$0 + 220 >> 2] = $6;
HEAP32[19359] = 0;
invoke_vii(65, $0 | 0, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$10;
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$11;
}
$6 = $2 << 2;
$5 = HEAP32[$3 + $6 >> 2];
HEAP32[19359] = 0;
$12 = invoke_ii(66, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[($0 + $6 | 0) + 16 >> 2] = $12;
$2 = $2 + 1 | 0;
continue;
}
break;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$11;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
}
while (1) {
$4 = QuaternionController___QuaternionController_28_29($4 - 644 | 0);
if (($7 | 0) != ($4 | 0)) {
continue;
}
break;
}
break label$7;
}
return $0 | 0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
if (($2 | 0) == ($7 | 0)) {
break label$7;
}
while (1) {
$2 = QuaternionController___QuaternionController_28_29($2 - 644 | 0);
if (($7 | 0) != ($2 | 0)) {
continue;
}
break;
}
}
SHMScalarController___SHMScalarController_28_29($11);
break label$5;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
QuaternionController___QuaternionController_28_29($10);
break label$3;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
ControlledByScalar_Vector____ControlledByScalar_28_29($9);
break label$1;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
VectorController2___VectorController2_28_29($8);
__resumeException($3 | 0);
abort();
}
function FourBar_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_2c_20float_2c_20Vector__2c_20Vector__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
var $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0);
$16 = __stack_pointer - 144 | 0;
__stack_pointer = $16;
eprintf_28char_20const__2c_20____29(20244, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 6);
eprintf_28char_20const__2c_20____29(20238, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 6);
eprintf_28char_20const__2c_20____29(20187, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 6);
eprintf_28char_20const__2c_20____29(20181, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 6);
HEAPF64[$16 - -64 >> 3] = $7;
HEAPF64[$16 + 56 >> 3] = $6;
HEAPF64[$16 + 48 >> 3] = $5;
eprintf_28char_20const__2c_20____29(47474, $16 + 48 | 0);
$19 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($16 + 128 | 0, 68044, $5, 1);
$20 = Vector__Vector_28float_2c_20float_2c_20float_29($16 + 112 | 0, $6, Math_fround(0), $7);
TransformOneLeg_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Quaternion_20const__2c_20Vector_20const__2c_20Vector__2c_20Quaternion__2c_20Quaternion__29($0, $2, $4, $19, $20, $8, $10, $12);
TransformOneLeg_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Quaternion_20const__2c_20Vector_20const__2c_20Vector__2c_20Quaternion__2c_20Quaternion__29($1, $3, $4, $19, $20, $9, $11, $13);
$5 = Vector__distance_28Vector_20const__29_20const($3, $2);
$6 = Math_fround(Vector__distance_28Vector_20const__29_20const($9, $8) - $5);
HEAPF32[$15 >> 2] = $6;
$7 = HEAPF32[$3 + 4 >> 2];
$17 = HEAPF32[$9 + 4 >> 2];
$18 = HEAPF32[$2 + 4 >> 2];
$21 = HEAPF32[$8 + 4 >> 2];
HEAPF64[$16 + 40 >> 3] = $5;
$18 = Math_fround($21 - $18);
$7 = Math_fround($17 - $7);
$17 = Math_fround($18 - $7);
HEAPF64[$16 + 32 >> 3] = $17;
HEAPF64[$16 + 16 >> 3] = $6;
$5 = atan2f($17, $5);
HEAPF64[$16 + 24 >> 3] = $5;
HEAPF64[$16 + 8 >> 3] = $7;
HEAPF64[$16 >> 3] = $18;
eprintf_28char_20const__2c_20____29(47506, $16);
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($14, 68056, $5, 1);
Quaternion__setPreCompose_28Quaternion_20const__29($14, $19);
eprintf_28char_20const__2c_20____29(15584, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($14, HEAP32[16886], 6);
eputc_28char_29(10);
Quaternion__setPreInvCompose_28Quaternion_20const__29($12, $14);
eprintf_28char_20const__2c_20____29(15614, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($12, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15647, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($10, HEAP32[16886], 6);
eputc_28char_29(10);
Quaternion__setCompose_28Quaternion_20const__29($13, $14);
eprintf_28char_20const__2c_20____29(15595, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($13, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15632, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($11, HEAP32[16886], 6);
eputc_28char_29(10);
$14 = Vector__Vector_28_29($16 + 96 | 0);
Vector__setFrom_28Vector_20const__29($14, $2);
Quaternion__invRotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($10, $0, $14);
eprintf_28char_20const__2c_20____29(17592, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17580, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($8, HEAP32[16886], 6);
eputc_28char_29(10);
$14 = Vector__Vector_28_29($16 + 80 | 0);
Vector__setFrom_28Vector_20const__29($14, $3);
Quaternion__invRotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($11, $1, $14);
eprintf_28char_20const__2c_20____29(17565, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($14, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17552, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($9, HEAP32[16886], 6);
eputc_28char_29(10);
__stack_pointer = $16 + 144 | 0;
}
function handle_nonmanualconfig_28Gesture__2c_20XMLCell__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 96 | 0;
__stack_pointer = $3;
$2 = checkComponentType_28XMLCell__2c_20int_2c_20SiGML_Element_29($1, 0, 9);
label$1: {
if (!$2) {
break label$1;
}
$4 = XMLCell__attrib_string_28char_20const__29($2, 2111);
if (!$4) {
$2 = HEAP32[$2 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$3 + 8 >> 2] = 2111;
HEAP32[$3 + 4 >> 2] = $1;
HEAP32[$3 >> 2] = $2;
eprintf_28char_20const__2c_20____29(40767, $3);
break label$1;
}
if (strcmp($4, 1761)) {
$2 = HEAP32[$2 >> 2];
$0 = HEAP32[$1 >> 2];
HEAP32[$3 - -64 >> 2] = $4;
HEAP32[$3 + 60 >> 2] = 1761;
HEAP32[$3 + 56 >> 2] = $0;
HEAP32[$3 + 52 >> 2] = $2;
HEAP32[$3 + 48 >> 2] = 2111;
eprintf_28char_20const__2c_20____29(46251, $3 + 48 | 0);
break label$1;
}
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$1 + 8 >> 2], 1);
if (!$1) {
eprintf_28char_20const__2c_20____29(45406, 0);
break label$1;
}
label$5: {
label$6: {
label$7: {
$2 = HEAP32[$1 >> 2];
$2 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18782], $2);
if (($2 | 0) != 18) {
if (($2 | 0) != 23) {
$4 = HEAP32[$1 >> 2];
$0 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 23);
$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], 18);
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], $2), 
HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
HEAP32[$3 + 28 >> 2] = $1;
HEAP32[$3 + 24 >> 2] = $0;
HEAP32[$3 + 20 >> 2] = $4;
HEAP32[$3 + 16 >> 2] = 2;
eprintf_28char_20const__2c_20____29(45234, $3 + 16 | 0);
break label$1;
}
$2 = ElbowDisplacement__ElbowDisplacement_28_29($3 + 80 | 0);
if (!GetDirMotionPositionSpecifier_28XMLCell__2c_20bool_2c_20ElbowDisplacement__29($1, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0, $2)) {
break label$1;
}
$1 = HEAPU8[$0 + 13 | 0];
if ($1 & 1) {
$4 = HEAP32[$2 + 4 >> 2];
$5 = HEAP32[$2 >> 2];
$6 = $5;
$1 = HEAP32[$0 + 20 >> 2];
$5 = $1;
HEAP32[$1 + 60 >> 2] = $6;
HEAP32[$1 + 64 >> 2] = $4;
$1 = $2 + 8 | 0;
HEAP32[$5 + 68 >> 2] = HEAP32[$1 >> 2];
$5 = HEAP32[$2 + 4 >> 2];
$4 = HEAP32[$2 >> 2];
$1 = $4;
$4 = HEAP32[$0 + 24 >> 2];
HEAP32[$4 + 60 >> 2] = $1;
HEAP32[$4 + 64 >> 2] = $5;
HEAP32[$4 + 68 >> 2] = HEAP32[$2 + 8 >> 2];
break label$6;
}
if (!($1 & 2)) {
break label$7;
}
$4 = HEAP32[$2 + 4 >> 2];
$5 = HEAP32[$2 >> 2];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[$1 + 60 >> 2] = $5;
HEAP32[$1 + 64 >> 2] = $4;
HEAP32[$1 + 68 >> 2] = HEAP32[$2 + 8 >> 2];
break label$6;
}
$2 = checkComponentType_28XMLCell__2c_20int_2c_20SiGML_Element_29($1, 0, 23);
$1 = checkComponentType_28XMLCell__2c_20int_2c_20SiGML_Element_29($1, 1, 23);
if (!$2 | !$1) {
break label$1;
}
GetDirMotionPositionSpecifier_28XMLCell__2c_20bool_2c_20ElbowDisplacement__29($2, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0, HEAP32[$0 + 20 >> 2] + 60 | 0);
GetDirMotionPositionSpecifier_28XMLCell__2c_20bool_2c_20ElbowDisplacement__29($1, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0, HEAP32[$0 + 24 >> 2] + 60 | 0);
if (HEAPU8[67567]) {
break label$5;
}
break label$1;
}
$5 = HEAP32[$2 + 4 >> 2];
$4 = HEAP32[$2 >> 2];
$1 = HEAP32[$0 + 20 >> 2];
HEAP32[$1 + 60 >> 2] = $4;
HEAP32[$1 + 64 >> 2] = $5;
HEAP32[$1 + 68 >> 2] = HEAP32[$2 + 8 >> 2];
}
if (!HEAPU8[67567]) {
break label$1;
}
}
eputs_28char_20const__29(18171);
ElbowDisplacement__print_28_IO_FILE__29_20const(HEAP32[$0 + 20 >> 2] + 60 | 0, HEAP32[16886]);
eputs_28char_20const__29(48530);
eputs_28char_20const__29(18159);
ElbowDisplacement__print_28_IO_FILE__29_20const(HEAP32[$0 + 24 >> 2] + 60 | 0, HEAP32[16886]);
eputs_28char_20const__29(48530);
}
__stack_pointer = $3 + 96 | 0;
}
function HanimAnimationRecord__startAnimation_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
$2 = operator_20new_28unsigned_20long_29(7352);
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
$4 = HEAP32[17612];
$4 = invoke_iiii(134, $2 | 0, $4 | 0, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
label$2: {
HEAP32[$0 + 100 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = Joint__NewJointRotation_28_29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] >> 2]), 
HEAP32[wasm2js_i32$0 + 304 >> 2] = wasm2js_i32$1;
$7 = $0 + 120 | 0;
label$3: while (1) {
label$4: {
if (($5 | 0) == 2) {
$4 = $0 + 324 | 0;
$3 = HEAP16[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 264 >> 1];
$1 = 0;
break label$4;
}
if (HEAPU8[$0 + 80 | 0]) {
$1 = $5 << 2;
$2 = $1 + $0 | 0;
wasm2js_i32$0 = $2, wasm2js_i32$1 = GetNewJointRotation_28Joint__29(HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + $1 | 0) + 228 >> 2]), 
HEAP32[wasm2js_i32$0 + 288 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $2, wasm2js_i32$1 = GetNewJointRotation_28Joint__29(HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + $1 | 0) + 212 >> 2]), 
HEAP32[wasm2js_i32$0 + 272 >> 2] = wasm2js_i32$1;
}
$1 = $5 << 2;
wasm2js_i32$0 = $1 + $0 | 0, wasm2js_i32$1 = GetNewJointRotation_28Joint__29(HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + $1 | 0) + 12 >> 2]), 
HEAP32[wasm2js_i32$0 + 296 >> 2] = wasm2js_i32$1;
$1 = TwoArmAnimator__selectRightLeft_28SideIndex_29(HEAP32[$0 + 100 >> 2], $5);
$3 = $1 + 16 | 0;
$8 = HEAP32[$1 + 12 >> 2];
$4 = 0;
$1 = 0;
while (1) {
if (($1 | 0) != 4) {
$2 = $1 << 2;
HEAP32[$2 + (($5 << 4) + $7 | 0) >> 2] = HEAP32[$2 + $3 >> 2];
$1 = $1 + 1 | 0;
continue;
}
break;
}
while (1) {
$1 = 0;
if (($4 | 0) == 5) {
$5 = $5 + 1 | 0;
continue label$3;
} else {
while (1) {
if (($1 | 0) != 3) {
$3 = $1 << 2;
$2 = Math_imul($4, 12);
HEAP32[($3 + ($2 + (Math_imul($5, 60) + $0 | 0) | 0) | 0) + 152 >> 2] = HEAP32[($2 + $8 | 0) + $3 >> 2];
$1 = $1 + 1 | 0;
continue;
}
break;
}
$4 = $4 + 1 | 0;
continue;
}
}
}
break;
}
while (1) {
$2 = $1 << 16 >> 16;
if (($2 | 0) < ($3 | 0)) {
wasm2js_i32$0 = $6, wasm2js_i32$1 = GetNewJointRotation_28Joint__29(HEAP32[DynamicArrayP_Joint___operator_5b_5d_28int_29_20const(HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 252 | 0, $2) >> 2]), 
HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
DynamicArray1_JointRotation____setElement_28int_2c_20JointRotation__20const__29($4, $2, $6 + 12 | 0);
$1 = $1 + 1 | 0;
continue;
}
break;
}
$4 = $0 + 308 | 0;
$3 = HEAP16[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 248 >> 1];
$1 = 0;
while (1) {
$2 = $1 << 16 >> 16;
if (($3 | 0) <= ($2 | 0)) {
label$18: {
$2 = operator_20new_28unsigned_20long_29(48);
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
$4 = invoke_iii(135, $2 | 0, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$18;
}
break label$2;
}
} else {
wasm2js_i32$0 = $6, wasm2js_i32$1 = GetNewJointRotation_28Joint__29(HEAP32[DynamicArrayP_Joint___operator_5b_5d_28int_29_20const(HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 236 | 0, $2) >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
DynamicArray1_JointRotation____setElement_28int_2c_20JointRotation__20const__29($4, $2, $6 + 8 | 0);
$1 = $1 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 + 104 >> 2] = $4;
HanimAnimationRecord__calcHipMovement_28float_2c_20float_2c_20float_29($0, Math_fround(.10000000149011612), Math_fround(0), Math_fround(0));
__stack_pointer = $6 + 16 | 0;
return;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($1 | 0);
abort();
}
function ArmHandConstellation__SetDefaultHandsite_28bool_2c_20bool_2c_20Handshape_20const__2c_20HanimAvatar_20const__29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = __stack_pointer - 144 | 0;
__stack_pointer = $5;
$6 = $1 ? $0 + 36 | 0 : $0 + 40 | 0;
label$1: {
if (SiteID__defined_28_29_20const($6)) {
break label$1;
}
$7 = $1 ? 36 : 40;
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(42719, 0);
}
HEAP8[($1 ? 63 : 64) + $0 | 0] = 1;
$7 = $0 + $7 | 0;
HEAP16[$7 >> 1] = HEAPU16[$7 >> 1] & 61695 | ($1 ^ $2 ? 512 : 256);
label$3: {
switch (HEAP32[$0 + 44 >> 2]) {
case 1:
Handshape__DefaultHandSite_28_29_20const($5 + 136 | 0, $3);
$0 = HEAP32[$5 + 136 >> 2];
HEAP32[$5 + 128 >> 2] = $0;
HEAP32[$5 + 28 >> 2] = $0;
SiteID__mergeSiteID_28SiteID_29($6, $5 + 28 | 0);
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18510, 0);
SiteID__print_28_IO_FILE__29_20const($6, HEAP32[16886]);
$6 = HEAP32[$3 >> 2];
wasm2js_i32$0 = $5, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18776], $6), 
HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
HEAP32[$5 + 16 >> 2] = $1 ? 6595 : 6581;
eprintf_28char_20const__2c_20____29(42691, $5 + 16 | 0);
break label$1;
default:
MakeSiteID_28Location_29($5 + 136 | 0, 1);
$0 = HEAP32[$5 + 136 >> 2];
HEAP32[$5 + 120 >> 2] = $0;
HEAP32[$5 + 12 >> 2] = $0;
SiteID__mergeSiteID_28SiteID_29($6, $5 + 12 | 0);
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18600, 0);
SiteID__print_28_IO_FILE__29_20const($6, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(42711, 0);
break label$1;
case 0:
break label$3;
}
}
$7 = $1 ? $0 + 12 | 0 : $0 + 24 | 0;
HanimAvatar__locateSiteID_28bool_2c_20SiteIDPair_20const__2c_20Vector__2c_20Joint___2c_20Site___29_20const($4, 0, $7, 0, $5 + 116 | 0, $5 + 136 | 0);
$2 = HEAP32[$5 + 136 >> 2];
if (!(!$2 | !HEAP32[$2 + 24 >> 2])) {
Handshape__DefaultHandSite_28_29_20const($5 + 112 | 0, $3);
$0 = HEAP32[$5 + 112 >> 2];
HEAP32[$5 + 104 >> 2] = $0;
HEAP32[$5 + 84 >> 2] = $0;
SiteID__mergeSiteID_28SiteID_29($6, $5 + 84 | 0);
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18544, 0);
SiteID__print_28_IO_FILE__29_20const($5 + 112 | 0, HEAP32[16886]);
$6 = HEAP32[$3 >> 2];
wasm2js_i32$0 = $5, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18776], $6), 
HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
HEAP32[$5 + 64 >> 2] = $1 ? 6595 : 6581;
eprintf_28char_20const__2c_20____29(42691, $5 - -64 | 0);
break label$1;
}
$0 = ($1 ? 12 : 24) + $0 | 0;
if (!(!isSigningSpaceLocation_28Location_29(HEAPU8[$0 | 0]) | (HEAPU8[$0 + 2 | 0] << 16 & 7340032) == 1048576)) {
MakeSiteID_28Location_29($5 + 96 | 0, 1);
HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 96 >> 2];
SiteID__mergeSiteID_28SiteID_29($6, $5 + 60 | 0);
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18740, 0);
SiteIDPair__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
HEAP32[$5 + 48 >> 2] = $1 ? 6595 : 6581;
eprintf_28char_20const__2c_20____29(40323, $5 + 48 | 0);
eprintf_28char_20const__2c_20____29(17058, 0);
SiteID__print_28_IO_FILE__29_20const($6, HEAP32[16886]);
eputc_28char_29(10);
break label$1;
}
$0 = HEAP32[$3 >> 2];
$0 = HEAP32[HEAP32[18210] + ($0 << 2) >> 2];
HEAP32[$5 + 88 >> 2] = $0;
HEAP32[$5 + 44 >> 2] = $0;
SiteID__mergeSiteID_28SiteID_29($6, $5 + 44 | 0);
if (!HEAPU8[67569]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18718, 0);
SiteIDPair__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
HEAP32[$5 + 32 >> 2] = $1 ? 6595 : 6581;
eprintf_28char_20const__2c_20____29(48427, $5 + 32 | 0);
SiteID__print_28_IO_FILE__29_20const($6, HEAP32[16886]);
eputs_28char_20const__29(46824);
}
__stack_pointer = $5 + 144 | 0;
}
function getContext($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
label$1: {
label$2: {
label$3: {
$8 = HEAP32[$0 + 340 >> 2];
if (!HEAP32[$8 + 136 >> 2]) {
break label$3;
}
$4 = $0 + 400 | 0;
$1 = HEAP32[$0 + 412 >> 2];
if (($1 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($4)) {
break label$2;
}
$1 = HEAP32[$0 + 412 >> 2];
}
$9 = 1;
HEAP32[$0 + 412 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 61;
$1 = 0;
$2 = HEAP32[HEAP32[$8 + 136 >> 2] + 20 >> 2] - (HEAPU8[$0 + 456 | 0] != 0) | 0;
$5 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($1 | 0) == ($5 | 0)) {
break label$3;
}
$2 = HEAP32[$0 + 412 >> 2];
if (($2 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($4)) {
break label$2;
}
$2 = HEAP32[$0 + 412 >> 2];
}
$3 = HEAPU8[HEAP32[HEAP32[$8 + 136 >> 2] + 16 >> 2] + $1 | 0];
HEAP32[$0 + 412 >> 2] = $2 + 1;
HEAP8[$2 | 0] = $3;
$1 = $1 + 1 | 0;
continue;
}
}
hashTableIterInit($7 + 8 | 0, $8 + 60 | 0);
$6 = $0 + 400 | 0;
label$8: while (1) {
$2 = hashTableIterNext($7 + 8 | 0);
if ($2) {
if (!HEAP32[$2 + 4 >> 2]) {
continue;
}
if ($9) {
$1 = HEAP32[$0 + 412 >> 2];
if (($1 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$2;
}
$1 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 12;
}
$3 = HEAP32[$2 >> 2];
while (1) {
label$13: {
$4 = HEAP32[$0 + 408 >> 2];
$1 = HEAP32[$0 + 412 >> 2];
$5 = HEAPU8[$3 | 0];
if (!$5) {
break label$13;
}
if (($1 | 0) == ($4 | 0)) {
if (!poolGrow($6)) {
break label$2;
}
$5 = HEAPU8[$3 | 0];
$1 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $1 + 1;
HEAP8[$1 | 0] = $5;
$3 = $3 + 1 | 0;
continue;
}
break;
}
if (($1 | 0) == ($4 | 0)) {
if (!poolGrow($6)) {
break label$2;
}
$1 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 61;
$1 = 0;
$3 = HEAP32[HEAP32[$2 + 4 >> 2] + 20 >> 2] - (HEAPU8[$0 + 456 | 0] != 0) | 0;
$4 = ($3 | 0) > 0 ? $3 : 0;
while (1) {
if (($1 | 0) == ($4 | 0)) {
$9 = 1;
continue label$8;
}
$3 = HEAP32[$0 + 412 >> 2];
if (($3 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$2;
}
$3 = HEAP32[$0 + 412 >> 2];
}
$5 = HEAPU8[HEAP32[HEAP32[$2 + 4 >> 2] + 16 >> 2] + $1 | 0];
HEAP32[$0 + 412 >> 2] = $3 + 1;
HEAP8[$3 | 0] = $5;
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
hashTableIterInit($7 + 8 | 0, $8);
label$19: while (1) {
$1 = hashTableIterNext($7 + 8 | 0);
if ($1) {
if (!HEAPU8[$1 + 32 | 0]) {
continue;
}
if ($9) {
$2 = HEAP32[$0 + 412 >> 2];
if (($2 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$2;
}
$2 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $2 + 1;
HEAP8[$2 | 0] = 12;
}
$1 = HEAP32[$1 >> 2];
while (1) {
$3 = HEAPU8[$1 | 0];
if (!$3) {
$9 = 1;
continue label$19;
}
$2 = HEAP32[$0 + 412 >> 2];
if (($2 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$2;
}
$3 = HEAPU8[$1 | 0];
$2 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $2 + 1;
HEAP8[$2 | 0] = $3;
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
$1 = HEAP32[$0 + 412 >> 2];
if (($1 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$2;
}
$1 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 0;
$0 = HEAP32[$0 + 416 >> 2];
break label$1;
}
$0 = 0;
}
__stack_pointer = $7 + 16 | 0;
return $0;
}
function little2_scanEndTag($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
$7 = HEAPU8[$1 + 1 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 0:
break label$3;
case 1:
break label$4;
case 2:
break label$5;
default:
break label$6;
}
}
label$9: {
switch ($4 - 22 | 0) {
default:
if (($4 | 0) != 29) {
break label$2;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$2;
}
break;
case 1:
break label$2;
case 0:
case 2:
break label$9;
}
}
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 2 | 0];
label$18: {
label$19: {
$8 = HEAPU8[$4 + 3 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 6:
break label$13;
case 4:
case 5:
case 16:
break label$14;
case 2:
break label$15;
case 1:
break label$16;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$18;
case 24:
break label$19;
default:
break label$2;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$2;
}
break;
}
$6 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$1 = $4 + 4 | 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
label$23: {
label$24: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 9 | 0) {
case 2:
break label$12;
case 0:
case 1:
break label$23;
default:
break label$24;
}
}
if (($4 | 0) != 21) {
break label$2;
}
}
$1 = $1 + 2 | 0;
continue;
}
}
$1 = $4 + 4 | 0;
break label$11;
}
$1 = $1 + 2 | 0;
}
$9 = 5;
break label$2;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$6 = $9;
}
return $6;
}
function big2_scanEndTag($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$5 = HEAPU8[$1 + 1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
$7 = HEAPU8[$1 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 0:
break label$3;
case 1:
break label$4;
case 2:
break label$5;
default:
break label$6;
}
}
label$9: {
switch ($4 - 22 | 0) {
default:
if (($4 | 0) != 29) {
break label$2;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$2;
}
break;
case 1:
break label$2;
case 0:
case 2:
break label$9;
}
}
label$11: {
label$12: {
label$13: {
label$14: {
label$15: {
label$16: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 3 | 0];
label$18: {
label$19: {
$8 = HEAPU8[$4 + 2 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 6:
break label$13;
case 4:
case 5:
case 16:
break label$14;
case 2:
break label$15;
case 1:
break label$16;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$18;
case 24:
break label$19;
default:
break label$2;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break label$2;
}
break;
}
$6 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$1 = $4 + 4 | 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
label$23: {
label$24: {
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 9 | 0) {
case 2:
break label$12;
case 0:
case 1:
break label$23;
default:
break label$24;
}
}
if (($4 | 0) != 21) {
break label$2;
}
}
$1 = $1 + 2 | 0;
continue;
}
}
$1 = $4 + 4 | 0;
break label$11;
}
$1 = $1 + 2 | 0;
}
$9 = 5;
break label$2;
}
$6 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$6 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$6 = $9;
}
return $6;
}
function OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
$3 = __stack_pointer - 160 | 0;
__stack_pointer = $3;
$5 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 4568);
label$1: {
if (!$5) {
break label$1;
}
$6 = Mirroring__Mirroring_28short_2c_20short_2c_20short_2c_20short_29($3 + 152 | 0, 0, HEAPU8[$2 | 0] << 30 >> 31, 0, 0);
$4 = HEAPU16[$6 >> 1];
HEAP16[$3 + 22 >> 1] = $4;
HEAP16[$3 + 128 >> 1] = $4;
$5 = Direction3__Direction3_28char_20const__2c_20Mirroring_29($3 + 136 | 0, $5, $3 + 22 | 0);
$4 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 4561);
label$2: {
if (!$4) {
Direction3__operator__28Direction3_20const__29($0 + 20 | 0, $5);
break label$2;
}
$6 = HEAPU16[$6 >> 1];
HEAP16[$3 + 20 >> 1] = $6;
HEAP16[$3 + 104 >> 1] = $6;
$4 = Direction3__Direction3_28char_20const__2c_20Mirroring_29($3 + 112 | 0, $4, $3 + 20 | 0);
$7 = HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float_29($1, 5408, Math_fround(.5));
Direction3__Between_28Direction3_2c_20Direction3_2c_20float_29($3 + 88 | 0, Direction3__Direction3_28Direction3_20const__29($3 + 72 | 0, $5), Direction3__Direction3_28Direction3_20const__29($3 + 56 | 0, $4), $7);
Direction3__operator__28Direction3_20const__29($0 + 20 | 0, $3 + 88 | 0);
}
if (HEAPU8[HEAP32[$0 + 72 >> 2] + 13 | 0] & 64) {
break label$1;
}
Direction3__set_leftHandedVector_28_29($0 + 20 | 0);
}
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($1, 4519, $0 + 40 | 0, 0);
$5 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 4479);
label$4: {
if (!$5) {
break label$4;
}
$4 = Mirroring__Mirroring_28short_2c_20short_2c_20short_2c_20short_29($3 + 152 | 0, 0, (HEAPU8[$2 | 0] & 3) != 0, 0, 0);
$2 = HEAPU16[$4 >> 1];
HEAP16[$3 + 18 >> 1] = $2;
HEAP16[$3 + 48 >> 1] = $2;
$5 = Direction2__Direction2_28char_20const__2c_20Mirroring_29($3 + 136 | 0, $5, $3 + 18 | 0);
$2 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 4472);
label$5: {
if (!$2) {
Direction2__operator__28Direction2_20const__29($0 + 32 | 0, $5);
break label$5;
}
$4 = HEAPU16[$4 >> 1];
HEAP16[$3 + 16 >> 1] = $4;
HEAP16[$3 + 40 >> 1] = $4;
$2 = Direction2__Direction2_28char_20const__2c_20Mirroring_29($3 + 112 | 0, $2, $3 + 16 | 0);
$7 = HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float_29($1, 5395, Math_fround(.5));
Direction2__Between_28Direction2_2c_20Direction2_2c_20float_29($3 + 88 | 0, Direction2__Direction2_28Direction2_20const__29($3 + 32 | 0, $5), Direction2__Direction2_28Direction2_20const__29($3 + 24 | 0, $2), $7);
Direction2__operator__28Direction2_20const__29($0 + 32 | 0, $3 + 88 | 0);
}
if (HEAPU8[HEAP32[$0 + 72 >> 2] + 13 | 0] & 64) {
break label$4;
}
Direction2__set_leftHandedVector_28_29($0 + 32 | 0);
}
boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__29($1, 4436, $0 + 41 | 0);
$5 = $0 + 44 | 0;
realAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float__29($1, 10581, $5);
realAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float__29($1, 10564, $0 + 48 | 0);
if (HEAPU8[67558]) {
$4 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 10581);
$7 = HEAPF32[$0 + 44 >> 2];
HEAP32[$3 >> 2] = $4;
HEAPF64[$3 + 8 >> 3] = $7;
eprintf_28char_20const__2c_20____29(29467, $3);
}
Handshape__NewHandshapeFromHandConfig_28bool_2c_20Handshape__2c_20HashAny_char_20const__2c_20char_20const___20const__29(OneHGesture__isRightHand_28_29_20const($0), HEAP32[$0 + 56 >> 2], $1);
if (HEAP32[$0 + 56 >> 2]) {
HEAP8[$0 + 52 | 0] = 1;
}
__stack_pointer = $3 + 160 | 0;
}
function CalcStartEndRepDisp_28Vector__2c_20Vector__2c_20int_2c_20bool_2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0);
$11 = __stack_pointer - 96 | 0;
__stack_pointer = $11;
label$1: {
label$2: {
if ($2) {
$12 = ($2 | 0) > 0 ? $2 : 0;
$14 = Math_fround(1);
$15 = Math_fround(1);
break label$2;
}
if ($0) {
Vector__setZero_28_29($0);
}
if (!$1) {
break label$1;
}
if ($3) {
Vector__setZero_28_29($1);
break label$1;
}
Vector__setFrom_28Vector_20const__29($1, $7);
break label$1;
}
while (1) {
if (($10 | 0) != ($12 | 0)) {
$10 = $10 + 1 | 0;
$16 = Math_fround($16 + $15);
$17 = Math_fround($14 + $17);
$14 = Math_fround($14 * $8);
$15 = Math_fround($15 * $9);
continue;
}
break;
}
$12 = Vector__Vector_28Vector_20const__29($11 + 80 | 0, $7);
Vector__setScale_28float_29($12, $17);
$10 = Vector__Vector_28Vector_20const__29($11 - -64 | 0, $5);
Vector__setAdd_28Vector_20const__29($10, $12);
$13 = Vector__Vector_28Vector_20const__29($11 + 48 | 0, $6);
Vector__setScale_28float_29($13, Math_fround($16 + Math_fround(-1)));
Vector__setAdd_28Vector_20const__29($10, $13);
$13 = Vector__Vector_28Vector_20const__29($11 + 32 | 0, $4);
Vector__setScale_28float_29($13, $15);
Vector__setAdd_28Vector_20const__29($10, $13);
if ($3) {
$13 = Vector__Vector_28Vector_20const__29($11 + 48 | 0, $6);
Vector__setScale_28float_29($13, $16);
if ($0) {
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($0, $13, $12);
}
if (!$1) {
break label$1;
}
Vector__setFrom_28Vector_20const__29($1, $10);
break label$1;
}
if ($0) {
Vector__setFrom_28Vector_20const__29($0, $10);
}
$10 = Vector__Vector_28Vector_20const__29($11 + 48 | 0, $6);
Vector__setScale_28float_29($10, Math_fround($16 * $9));
$12 = Vector__Vector_28Vector_20const__29($11 + 32 | 0, $7);
Vector__setScale_28float_29($12, Math_fround($14 + $17));
if (!$1) {
break label$1;
}
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($1, $10, $12);
}
$10 = HEAPU8[67556];
label$11: {
if (!HEAP32[16886] | !$10) {
break label$11;
}
$10 = boolchar_28bool_29($3);
HEAPF64[$11 + 16 >> 3] = $9;
HEAPF64[$11 + 8 >> 3] = $8;
HEAP32[$11 + 4 >> 2] = $10;
HEAP32[$11 >> 2] = $2;
eprintf_28char_20const__2c_20____29(47169, $11);
$10 = HEAP32[16886];
$3 = HEAP16[33801];
printIndent_28_IO_FILE__2c_20int_29($10, $3);
fputs(23376, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($4, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
printIndent_28_IO_FILE__2c_20int_29($10, HEAP16[33801]);
fputs(23229, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($5, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
printIndent_28_IO_FILE__2c_20int_29($10, HEAP16[33801]);
fputs(23298, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($6, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
printIndent_28_IO_FILE__2c_20int_29($10, HEAP16[33801]);
fputs(22087, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($7, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
if ($0) {
printIndent_28_IO_FILE__2c_20int_29($10, HEAP16[33801]);
fputs(22605, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
}
if (!$1) {
break label$11;
}
printIndent_28_IO_FILE__2c_20int_29($10, HEAP16[33801]);
fputs(22620, $10);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($1, $10, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $10);
}
__stack_pointer = $11 + 96 | 0;
}
function RepeatMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0;
$4 = __stack_pointer - 112 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
if (!($2 <= Math_fround(0))) {
$5 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if (!($5 <= $2)) {
break label$2;
}
}
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
break label$1;
}
$15 = HEAPF32[$0 + 576 >> 2];
$5 = $3 ? $2 : Math_fround($5 - $2);
$2 = HEAPF32[HEAP32[$0 + 696 >> 2] + 40 >> 2];
$6 = $0 + 584 | 0;
$8 = remfloat_28float_2c_20float_29($5, Math_fround($2 * HEAPF32[$6 >> 2]));
$9 = $2 >= $8;
$5 = Math_fround($5 / Math_fround($2 * HEAPF32[$0 + 584 >> 2]));
label$4: {
if (Math_fround(Math_abs($5)) < Math_fround(2147483648)) {
$10 = ~~$5;
break label$4;
}
$10 = -2147483648;
}
$7 = HEAPU8[$0 + 571 | 0];
$6 = HEAP32[($9 ? 696 : $7 ? 700 : 696) + $0 >> 2];
$2 = $9 ? Math_fround($8 / $2) : Math_fround(Math_fround($8 - $2) / Math_fround($2 * $15));
$2 = Math_fround($2 * HEAPF32[$6 + 40 >> 2]);
$7 = (($9 ? 1 : $7) | 0) == ($3 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $1, $2, $7);
$5 = BasicMovement__GetTrajectoryFraction_28float_2c_20bool_29($6, $2, $7);
$5 = $7 ? $5 : Math_fround(Math_fround(1) - $5);
label$8: {
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$8;
}
$11 = Vector__Vector_28_29($4 + 96 | 0);
$12 = Vector__Vector_28_29($4 + 80 | 0);
CalcStartEndRepDisp_28Vector__2c_20Vector__2c_20int_2c_20bool_2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_29($11, $12, $10, $9, $0 + 592 | 0, $0 + 604 | 0, $0 + 616 | 0, $0 + 628 | 0, HEAPF32[$0 + 692 >> 2], HEAPF32[$0 + 688 >> 2]);
$13 = Vector__Vector_28_29($4 - -64 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($13, $11, $12, $5);
Vector__setAdd_28Vector_20const__29($1 + 4 | 0, $13);
$14 = HEAPU8[67556];
if (!HEAP32[16886] | !$14) {
break label$8;
}
$14 = HEAP32[$0 + 696 >> 2];
$7 = boolchar_28bool_29($7);
$16 = boolchar_28bool_29($9);
$17 = boolchar_28bool_29(HEAPU8[$0 + 571 | 0]);
$3 = boolchar_28bool_29($3);
$8 = HEAPF32[$6 + 40 >> 2];
HEAPF64[$4 + 40 >> 3] = $2;
HEAPF64[$4 + 32 >> 3] = $5;
HEAP32[$4 + 16 >> 2] = $3;
HEAPF64[$4 + 24 >> 3] = $8;
HEAPF64[$4 + 48 >> 3] = Math_fround($2 / $8);
HEAP32[$4 + 12 >> 2] = $17;
HEAP32[$4 + 8 >> 2] = $16;
HEAP32[$4 + 4 >> 2] = $7;
HEAP32[$4 >> 2] = ($6 | 0) == ($14 | 0) ? 5230 : 5605;
eprintf_28char_20const__2c_20____29(26950, $4);
eprintf_28char_20const__2c_20____29(17484, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($11, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17506, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($13, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17502, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($12, HEAP32[16886], 3);
eputc_28char_29(10);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
$3 = Vector__Vector_28_29($4 + 96 | 0);
$6 = Vector__Vector_28_29($4 + 80 | 0);
CalcStartEndRepDisp_28Vector__2c_20Vector__2c_20int_2c_20bool_2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_29($3, $6, $10, $9, $0 + 640 | 0, $0 + 652 | 0, $0 + 664 | 0, $0 + 676 | 0, HEAPF32[$0 + 692 >> 2], HEAPF32[$0 + 688 >> 2]);
$0 = Vector__Vector_28_29($4 - -64 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $3, $6, $5);
Vector__setAdd_28Vector_20const__29($1 + 116 | 0, $0);
}
__stack_pointer = $4 + 112 | 0;
}
function CircularMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24988, 0);
}
HEAP32[$0 + 40 >> 2] = 0;
label$2: {
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
eprintf_28char_20const__2c_20____29(30318, 0);
$5 = $0 + 284 | 0;
$6 = $0 + 616 | 0;
$2 = 70296;
if (HEAP32[$0 + 8 >> 2] == 5) {
$2 = HEAPU8[$1 + 13 | 0];
$2 = $2 & 64 ? 70296 : $1 + 14 | 0;
}
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 46 >> 1] = $2;
HEAP16[$3 + 56 >> 1] = $2;
CircularMovement__setAvatarDependentValues1_28OneHCircMoveSpec__2c_20OneHConcretePosture_20const__2c_20Mirroring_29($0, $6, $0, $3 + 46 | 0);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($5, $0 + 664 | 0);
$4 = HEAPF32[$0 + 680 >> 2];
$2 = HEAP32[$1 >> 2];
$7 = HEAPF32[$2 + 236 >> 2];
$5 = HEAP32[$0 + 24 >> 2];
$6 = HEAP32[$0 + 552 >> 2];
$8 = HEAPF32[$2 + 232 >> 2];
HEAP32[$3 + 40 >> 2] = HEAP32[$0 + 20 >> 2];
$9 = HEAP32[$0 + 16 >> 2];
$2 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 36 >> 2] = $9;
$10 = HEAPF32[$0 + 40 >> 2];
$4 = Math_fround(Math_fround(Math_fround($4 * Math_fround(HEAPF32[(($6 << 2) + 68592 | 0) + 140 >> 2] * Math_fround($8 * $7))) / HEAPF32[17667]) * durationScale_28MannerFlags_2c_20PathShape_29($3 + 32 | 0, $5));
if (!($10 < $4)) {
break label$2;
}
HEAPF32[$0 + 40 >> 2] = $4;
}
label$4: {
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$4;
}
eprintf_28char_20const__2c_20____29(30341, 0);
$5 = $0 + 396 | 0;
$6 = $0 + 684 | 0;
$2 = 70296;
if (HEAP32[$0 + 8 >> 2] == 5) {
$2 = HEAPU8[$1 + 13 | 0];
$2 = $2 & 64 ? $1 + 14 | 0 : 70296;
}
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 30 >> 1] = $2;
HEAP16[$3 + 48 >> 1] = $2;
CircularMovement__setAvatarDependentValues1_28OneHCircMoveSpec__2c_20OneHConcretePosture_20const__2c_20Mirroring_29($0, $6, $0, $3 + 30 | 0);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($5, $0 + 732 | 0);
$4 = HEAPF32[$0 + 748 >> 2];
$2 = HEAP32[$1 >> 2];
$7 = HEAPF32[$2 + 236 >> 2];
$5 = HEAP32[$0 + 24 >> 2];
$6 = HEAP32[$0 + 552 >> 2];
$8 = HEAPF32[$2 + 232 >> 2];
HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
$2 = HEAP32[$0 + 16 >> 2];
$9 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = $9;
HEAP32[$3 + 20 >> 2] = $2;
$10 = HEAPF32[$0 + 40 >> 2];
$4 = Math_fround(Math_fround(Math_fround($4 * Math_fround(HEAPF32[(($6 << 2) + 68592 | 0) + 140 >> 2] * Math_fround($8 * $7))) / HEAPF32[17667]) * durationScale_28MannerFlags_2c_20PathShape_29($3 + 16 | 0, $5));
if (!($10 < $4)) {
break label$4;
}
HEAPF32[$0 + 40 >> 2] = $4;
}
if (HEAPU8[$0 + 20 | 0]) {
$1 = HEAP32[$1 >> 2];
$4 = Math_fround(HEAPF32[$1 + 268 >> 2] * HEAPF32[$1 + 232 >> 2]);
HEAPF32[$0 + 44 >> 2] = $4;
HEAPF32[$0 + 40 >> 2] = $4 + HEAPF32[$0 + 40 >> 2];
}
if (HEAPU8[67589]) {
HEAPF64[$3 >> 3] = HEAPF32[$0 + 40 >> 2];
eprintf_28char_20const__2c_20____29(30849, $3);
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0 + 60 | 0, HEAP32[16886]);
}
label$8: {
if (!HEAPU8[67570]) {
break label$8;
}
if (TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const($0 + 284 | 0, HEAP32[$0 + 8 >> 2])) {
break label$8;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(33343, 0);
$1 = HEAP32[$0 + 8 >> 2];
TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const($0 + 60 | 0, HEAP32[16886], $1);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
__stack_pointer = $3 - -64 | 0;
}
function little2_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$4 = $2 - $1 | 0;
label$12: {
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$12;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 | 0];
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$5 = 0;
label$16: {
switch ($4 | 0) {
case 4:
$5 = -1;
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$4 | 0] != 93) {
break label$6;
}
$6 = $1 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 4 | 0] != 62) {
break label$6;
}
$1 = $1 + 6 | 0;
$5 = 40;
break label$3;
case 5:
break label$10;
case 9:
break label$16;
case 0:
case 1:
case 8:
break label$3;
case 10:
break label$5;
case 7:
break label$8;
case 6:
break label$9;
default:
break label$7;
}
}
$4 = $1 + 2 | 0;
if (($4 | 0) != ($2 | 0)) {
break label$11;
}
}
return -1;
}
$2 = HEAPU8[$1 + 2 | 0];
$6 = $1 + 4 | 0;
$5 = HEAPU8[$1 + 3 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
$1 = ($2 | 0) == 10 ? $6 : $4;
break label$4;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = $1 + 2 | 0;
break label$6;
}
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = $1 + 3 | 0;
break label$6;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = $1 + 4 | 0;
break label$6;
}
$4 = $1 + 2 | 0;
}
$1 = $4;
while (1) {
$5 = 6;
if (($1 | 0) == ($2 | 0)) {
$1 = $2;
break label$3;
}
$4 = HEAPU8[$1 | 0];
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = 2;
label$24: {
label$25: {
switch ($6 | 0) {
case 5:
if (($2 - $1 | 0) >= 2) {
break label$24;
}
break label$3;
case 6:
$4 = 3;
if (($2 - $1 | 0) >= 3) {
break label$24;
}
break label$3;
case 7:
break label$25;
case 0:
case 1:
case 4:
case 8:
case 9:
case 10:
break label$3;
default:
break label$24;
}
}
$4 = 4;
if (($2 - $1 | 0) < 4) {
break label$3;
}
}
$1 = $1 + $4 | 0;
continue;
}
}
$1 = $1 + 2 | 0;
}
$5 = 7;
}
HEAP32[$3 >> 2] = $1;
}
return $5 | 0;
}
function big2_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$4 = $2 - $1 | 0;
label$12: {
if ($4 & 1) {
$2 = $4 & -2;
if (!$2) {
break label$12;
}
$2 = $1 + $2 | 0;
}
$4 = HEAPU8[$1 + 1 | 0];
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$5 = 0;
label$16: {
switch ($4 | 0) {
case 4:
$5 = -1;
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$4 | 0] | HEAPU8[$1 + 3 | 0] != 93) {
break label$6;
}
$6 = $1 + 4 | 0;
if (($6 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] != 62) {
break label$6;
}
$1 = $1 + 6 | 0;
$5 = 40;
break label$3;
case 5:
break label$10;
case 9:
break label$16;
case 0:
case 1:
case 8:
break label$3;
case 10:
break label$5;
case 7:
break label$8;
case 6:
break label$9;
default:
break label$7;
}
}
$4 = $1 + 2 | 0;
if (($4 | 0) != ($2 | 0)) {
break label$11;
}
}
return -1;
}
$2 = HEAPU8[$1 + 3 | 0];
$6 = $1 + 4 | 0;
$5 = HEAPU8[$1 + 2 | 0];
if ($5) {
$2 = unicode_byte_type($5 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
$1 = ($2 | 0) == 10 ? $6 : $4;
break label$4;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = $1 + 2 | 0;
break label$6;
}
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = $1 + 3 | 0;
break label$6;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = $1 + 4 | 0;
break label$6;
}
$4 = $1 + 2 | 0;
}
$1 = $4;
while (1) {
$5 = 6;
if (($1 | 0) == ($2 | 0)) {
$1 = $2;
break label$3;
}
$4 = HEAPU8[$1 + 1 | 0];
$6 = HEAPU8[$1 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = 2;
label$24: {
label$25: {
switch ($6 | 0) {
case 5:
if (($2 - $1 | 0) >= 2) {
break label$24;
}
break label$3;
case 6:
$4 = 3;
if (($2 - $1 | 0) >= 3) {
break label$24;
}
break label$3;
case 7:
break label$25;
case 0:
case 1:
case 4:
case 8:
case 9:
case 10:
break label$3;
default:
break label$24;
}
}
$4 = 4;
if (($2 - $1 | 0) < 4) {
break label$3;
}
}
$1 = $1 + $4 | 0;
continue;
}
}
$1 = $1 + 2 | 0;
}
$5 = 7;
}
HEAP32[$3 >> 2] = $1;
}
return $5 | 0;
}
function Gesture__printSplitOrientation_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_2c_20bool_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0;
$6 = $2 | $3;
if ($5 ? 1 : $6 | $4) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7468), 32284);
$7 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $7;
label$2: {
if ($6) {
OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const(HEAP32[$0 + 20 >> 2], $1, $2, $3);
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $7 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
label$4: {
if ($5 ? 1 : $4) {
OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const(HEAP32[$0 + 24 >> 2], $1, $4, $5);
break label$4;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
$4 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $4;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $4 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 7468), 32284);
}
}
function ParMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
$5 = __stack_pointer - 288 | 0;
__stack_pointer = $5;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
label$1: {
label$2: {
if ($2 <= Math_fround(0)) {
break label$2;
}
$14 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if ($14 <= $2) {
break label$2;
}
$8 = $0 + 176 | 0;
$16 = $1 + 112 | 0;
$9 = $0 - -64 | 0;
$17 = $0 + 528 | 0;
$18 = HEAP32[$0 + 540 >> 2];
$10 = Vector__Vector_28_29($5 + 272 | 0);
$11 = Vector__Vector_28_29($5 + 256 | 0);
$12 = Vector__Vector_28_29($5 + 240 | 0);
$19 = $5 + 112 | 0;
$13 = Vector__Vector_28_29($5 + 224 | 0);
label$3: {
label$4: {
while (1) {
label$6: {
$4 = $15 << 16 >> 16;
if (($18 | 0) <= ($4 | 0)) {
$4 = HEAP32[$0 + 12 >> 2];
$2 = Trajectory__lookupByFraction_28float_29_20const(HEAP32[($4 << 2) + 70368 >> 2], Math_fround($2 / $14));
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$3;
}
if (!Vector__isZero_28_29_20const($10)) {
break label$4;
}
$4 = $1 + 4 | 0;
if (!Vector__isZero_28_29_20const($11)) {
break label$6;
}
Vector__setFrom_28Vector_20const__29($4, $9);
break label$3;
}
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($17, $4);
$7 = TwoHConcretePosture__TwoHConcretePosture_28_29($5);
$6 = HEAP32[HEAP32[$4 >> 2] + 60 >> 2];
HEAP32[19359] = 0;
invoke_viifi($6 | 0, $4 | 0, $7 | 0, Math_fround($2), $3 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$1;
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
HEAP32[19359] = 0;
invoke_viiiiii(487, $10 | 0, $11 | 0, $1 | 0, $4 + 508 | 0, $7 | 0, $9 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$1;
}
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
HEAP32[19359] = 0;
invoke_viiiiii(487, $12 | 0, $13 | 0, $16 | 0, $4 + 510 | 0, $19 | 0, $8 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
}
TwoHConcretePosture___TwoHConcretePosture_28_29($7);
$15 = $15 + 1 | 0;
continue;
}
break;
}
Vector__setFrom_28Vector_20const__29($4, $11);
break label$3;
}
$4 = $1 + 4 | 0;
Vector__setFrom_28Vector_20const__29($4, $9);
Vector__setAdd_28Vector_20const__29($4, $10);
}
label$10: {
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$10;
}
if (Vector__isZero_28_29_20const($12)) {
$4 = $1 + 116 | 0;
if (Vector__isZero_28_29_20const($13)) {
Vector__setFrom_28Vector_20const__29($4, $8);
break label$10;
}
Vector__setFrom_28Vector_20const__29($4, $13);
break label$10;
}
$4 = $1 + 116 | 0;
Vector__setFrom_28Vector_20const__29($4, $8);
Vector__setAdd_28Vector_20const__29($4, $12);
}
$4 = Vector__Vector_28Vector_20const__29($5, $0 + 544 | 0);
Vector__setScale_28float_29($4, $2);
Vector__setAdd_28Vector_20const__29($1 + 4 | 0, $4);
Vector__setAdd_28Vector_20const__29($1 + 116 | 0, $4);
}
__stack_pointer = $5 + 288 | 0;
return;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHConcretePosture___TwoHConcretePosture_28_29($7);
__resumeException($4 | 0);
abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP32[19359] = 0;
invoke_iii(25, $3 + 24 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
if (($2 | 0) != 1) {
label$5: {
if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3 + 24 | 0)) {
break label$5;
}
$4 = std____2__ios_base__flags_28_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
std____2__ios_base__getloc_28_29_20const($3 + 16 | 0, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$6: {
label$7: {
label$8: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
$7 = invoke_ii(904, $3 + 16 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
std____2__locale___locale_28_29($3 + 16 | 0);
$5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 8 | 0, $0);
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$6 = $0 + $2 | 0;
$8 = invoke_ii(26, $6 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
$2 = HEAP32[$5 >> 2];
HEAP32[19359] = 0;
$5 = $1 & 65535;
$4 = $4 & 74;
$1 = invoke_iiiiii(905, $7 | 0, $2 | 0, $6 | 0, $8 | 0, (($4 | 0) == 64 ? $5 : ($4 | 0) == 8 ? $5 : $1) | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
HEAP32[$3 + 16 >> 2] = $1;
if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($3 + 16 | 0)) {
break label$5;
}
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $0 + $2 | 0, 5);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$5;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std____2__locale___locale_28_29($3 + 16 | 0);
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$3;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$2;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
__cxa_begin_catch($2 | 0) | 0;
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vi(29, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
__cxa_end_catch();
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__resumeException($3 | 0);
abort();
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
__cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
return;
}
label$2: {
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
if (($3 | 0) != 1) {
break label$2;
}
HEAP32[$1 + 32 >> 2] = 1;
return;
}
HEAP32[$1 + 32 >> 2] = $3;
if (HEAP32[$1 + 44 >> 2] != 4) {
$5 = $0 + 16 | 0;
$3 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
label$7: {
label$8: {
while (1) {
label$10: {
if ($3 >>> 0 <= $5 >>> 0) {
break label$10;
}
HEAP16[$1 + 52 >> 1] = 0;
__cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
if (HEAPU8[$1 + 54 | 0]) {
break label$10;
}
label$11: {
if (!HEAPU8[$1 + 53 | 0]) {
break label$11;
}
if (HEAPU8[$1 + 52 | 0]) {
$6 = 1;
if (HEAP32[$1 + 24 >> 2] == 1) {
break label$8;
}
$7 = 1;
$8 = 1;
if (HEAPU8[$0 + 8 | 0] & 2) {
break label$11;
}
break label$8;
}
$7 = 1;
$6 = $8;
if (!(HEAP8[$0 + 8 | 0] & 1)) {
break label$8;
}
}
$5 = $5 + 8 | 0;
continue;
}
break;
}
$6 = $8;
$5 = 4;
if (!($7 & 1)) {
break label$7;
}
}
$5 = 3;
}
HEAP32[$1 + 44 >> 2] = $5;
if ($6 & 1) {
break label$2;
}
}
HEAP32[$1 + 20 >> 2] = $2;
HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
break label$2;
}
HEAP8[$1 + 54 | 0] = 1;
return;
}
$6 = HEAP32[$0 + 12 >> 2];
$7 = $0 + 16 | 0;
__cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($7, $1, $2, $3, $4);
$5 = $0 + 24 | 0;
$6 = ($6 << 3) + $7 | 0;
if ($5 >>> 0 >= $6 >>> 0) {
break label$2;
}
$0 = HEAP32[$0 + 8 >> 2];
if (!(!($0 & 2) & HEAP32[$1 + 36 >> 2] != 1)) {
while (1) {
if (HEAPU8[$1 + 54 | 0]) {
break label$2;
}
__cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
$5 = $5 + 8 | 0;
if ($6 >>> 0 > $5 >>> 0) {
continue;
}
break;
}
break label$2;
}
if (!($0 & 1)) {
while (1) {
if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
break label$2;
}
__cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
$5 = $5 + 8 | 0;
if ($6 >>> 0 > $5 >>> 0) {
continue;
}
break label$2;
}
}
while (1) {
if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1 & HEAP32[$1 + 24 >> 2] == 1) {
break label$2;
}
__cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
$5 = $5 + 8 | 0;
if ($6 >>> 0 > $5 >>> 0) {
continue;
}
break;
}
}
}
function Gesture__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
HEAP32[$3 + 52 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$3 + 48 >> 2] = $0;
fiprintf($1, 32874, $3 + 48 | 0);
printIndent_28_IO_FILE__29($1);
wasm2js_i32$0 = $3, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 12 | 0]), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
fiprintf($1, 31082, $3 + 32 | 0);
fputs(24232, $1);
GestureFlags__print_28_IO_FILE__29_20const($0 + 13 | 0, $1);
fputc(10, $1);
$4 = $0 + 14 | 0;
if (!Mirroring__isUndef_28_29_20const($4)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22843, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Mirroring__print_28_IO_FILE__29_20const($4, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
$2 = 0;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$5 = HEAPF32[$0 + 16 >> 2];
HEAP32[$3 + 16 >> 2] = 3;
HEAPF64[$3 + 24 >> 3] = $5;
__small_fprintf($1, 29319, $3 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
label$3: {
if (HEAP32[$0 + 36 >> 2]) {
fputs(21846, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiGMLConstellation__print_28_IO_FILE__29_20const(HEAP32[$0 + 36 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$3;
}
fputs(31705, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
label$5: {
if (HEAP32[$0 + 40 >> 2]) {
fputs(21862, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
ArmHandConstellation__print_28_IO_FILE__29_20const(HEAP32[$0 + 40 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$5;
}
fputs(31726, $1);
}
$2 = HEAP32[$0 + 20 >> 2];
printIndent_28_IO_FILE__29($1);
label$7: {
if ($2) {
fputs(33267, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = HEAP32[$0 + 20 >> 2];
label$9: {
if (!$2) {
fputs(14681, $1);
break label$9;
}
OneHGesture__print_28_IO_FILE__29_20const($2, $1);
}
HEAP16[33801] = HEAPU16[33801] - 1;
break label$7;
}
fputs(31687, $1);
}
$2 = HEAP32[$0 + 24 >> 2];
printIndent_28_IO_FILE__29($1);
label$11: {
if ($2) {
fputs(33251, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = HEAP32[$0 + 24 >> 2];
label$13: {
if (!$2) {
fputs(14681, $1);
break label$13;
}
OneHGesture__print_28_IO_FILE__29_20const($2, $1);
}
$2 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $2;
break label$11;
}
fputs(31666, $1);
$2 = HEAPU16[33801];
}
printIndent_28_IO_FILE__2c_20int_29($1, $2 << 16 >> 16);
label$15: {
if (HEAP32[$0 + 44 >> 2]) {
fputs(21932, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$4 = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 72 >> 2]]($4, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$15;
}
fputs(31744, $1);
}
if (!HEAP32[$0 + 48 >> 2]) {
break label$1;
}
$2 = 0;
while (1) {
if (($2 | 0) == 8) {
break label$1;
}
$4 = $2 << 2;
label$18: {
if (!HEAP32[$4 + HEAP32[$0 + 48 >> 2] >> 2]) {
break label$18;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18849], $2), 
HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
HEAP32[$3 >> 2] = $2;
fiprintf($1, 17195, $3);
$4 = HEAP32[HEAP32[$0 + 48 >> 2] + $4 >> 2];
if (!$4) {
fputs(14681, $1);
break label$18;
}
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $1);
}
$2 = $2 + 1 | 0;
continue;
}
}
__stack_pointer = $3 - -64 | 0;
}
function Gesture__printSplitAbsTarget_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, $2, $3) {
var $4 = 0;
if ($3 ? 1 : $2) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7468), 32284);
$4 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $4;
label$2: {
if ($2) {
OneHAbstractPosture__printLocationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $4 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
label$4: {
if ($3) {
OneHAbstractPosture__printLocationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2], $1);
break label$4;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
$2 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $2;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $2 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 7468), 32284);
}
}
function Gesture__printSplitHandshape_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, $2, $3) {
var $4 = 0;
if ($3 ? 1 : $2) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7468), 32284);
$4 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $4;
label$2: {
if ($2) {
OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 20 >> 2], $1);
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $4 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
label$4: {
if ($3) {
OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 24 >> 2], $1);
break label$4;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 7474), 32226);
}
$2 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $2;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $2 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 7468), 32284);
}
}
function QuaternionController__QuaternionController_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = GeneralController_Quaternion_2c_20Quaternion___GeneralController_28_29($0);
HEAP32[$2 >> 2] = 59372;
$3 = $2 + 448 | 0;
$4 = $2 + 16 | 0;
$0 = $4;
label$1: {
label$2: {
label$3: {
while (1) {
HEAP32[19359] = 0;
invoke_ii(63, $0 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
$0 = $0 + 108 | 0;
if (($3 | 0) != ($0 | 0)) {
continue;
}
break;
}
HEAP32[$2 + 448 >> 2] = 3;
ControllerParams__ControllerParams_28float_2c_20float_2c_20float_2c_20float_29($2 + 452 | 0, Math_fround(15), Math_fround(.05000000074505806), Math_fround(5), Math_fround(0));
HEAP32[$2 + 476 >> 2] = 1065353216;
HEAP32[$2 + 480 >> 2] = 0;
HEAP32[$2 + 468 >> 2] = 1082130432;
HEAP32[$2 + 472 >> 2] = 1097859072;
HEAP32[19359] = 0;
$5 = invoke_ii(86, $2 + 484 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$0 = invoke_ii(86, $2 + 500 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$6 = invoke_ii(86, $2 + 516 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_ii(86, $2 + 532 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_ii(86, $2 + 548 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$7 = invoke_ii(86, $2 + 564 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_ii(86, $2 + 580 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_ii(86, $2 + 596 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[$2 + 620 >> 2] = 1017370378;
HEAP32[$2 + 612 >> 2] = 1184645120;
HEAP32[$2 + 616 >> 2] = 1181376512;
HEAP32[19359] = 0;
invoke_ii(86, $2 + 628 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(90, $7 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(90, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(90, $5 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(90, $6 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
return $2 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
if (($0 | 0) == ($4 | 0)) {
break label$1;
}
while (1) {
$0 = $0 - 108 | 0;
SHMScalarController___SHMScalarController_28_29($0);
if (($0 | 0) != ($4 | 0)) {
continue;
}
break;
}
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
while (1) {
$3 = $3 - 108 | 0;
SHMScalarController___SHMScalarController_28_29($3);
if (($3 | 0) != ($4 | 0)) {
continue;
}
break;
}
}
GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29($2);
__resumeException($1 | 0);
abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP32[19359] = 0;
invoke_iii(25, $3 + 24 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
if (($2 | 0) != 1) {
label$5: {
if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3 + 24 | 0)) {
break label$5;
}
std____2__ios_base__flags_28_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
std____2__ios_base__getloc_28_29_20const($3 + 16 | 0, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$6: {
label$7: {
label$8: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
$5 = invoke_ii(904, $3 + 16 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
std____2__locale___locale_28_29($3 + 16 | 0);
$6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 8 | 0, $0);
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$4 = $0 + $2 | 0;
$7 = invoke_ii(26, $4 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
$2 = HEAP32[$6 >> 2];
HEAP32[19359] = 0;
$1 = invoke_iiiiii(905, $5 | 0, $2 | 0, $4 | 0, $7 | 0, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
HEAP32[$3 + 16 >> 2] = $1;
if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($3 + 16 | 0)) {
break label$5;
}
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $0 + $2 | 0, 5);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$5;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std____2__locale___locale_28_29($3 + 16 | 0);
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$3;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$2;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
__cxa_begin_catch($2 | 0) | 0;
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vi(29, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
__cxa_end_catch();
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__resumeException($3 | 0);
abort();
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function doCdataSection($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
$6 = HEAP32[$2 >> 2];
HEAP32[$7 + 12 >> 2] = $6;
label$1: {
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
HEAP32[$0 + 272 >> 2] = $6;
$8 = $0 + 272 | 0;
$10 = $0 + 276 | 0;
break label$1;
}
$8 = HEAP32[$0 + 284 >> 2];
$10 = $8 + 4 | 0;
}
HEAP32[$8 >> 2] = $6;
HEAP32[$2 >> 2] = 0;
label$3: {
label$4: {
while (1) {
$9 = FUNCTION_TABLE[HEAP32[$1 + 8 >> 2]]($1, HEAP32[$7 + 12 >> 2], $3, $7 + 8 | 0) | 0;
$6 = HEAP32[$7 + 8 >> 2];
HEAP32[$10 >> 2] = $6;
label$6: {
label$7: {
label$8: {
label$9: {
switch ($9 + 4 | 0) {
default:
if (($9 | 0) != 40) {
break label$8;
}
$8 = HEAP32[$0 + 76 >> 2];
label$14: {
if ($8) {
FUNCTION_TABLE[$8 | 0](HEAP32[$0 + 4 >> 2]);
break label$14;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$14;
}
reportDefault($0, $1, HEAP32[$7 + 12 >> 2], $6);
}
$1 = HEAP32[$7 + 8 >> 2];
HEAP32[$2 >> 2] = $1;
HEAP32[$4 >> 2] = $1;
$6 = HEAP32[$0 + 464 >> 2] == 2 ? 35 : 0;
break label$3;
case 11:
$9 = HEAP32[$0 + 60 >> 2];
if ($9) {
HEAP8[$7 + 7 | 0] = 10;
FUNCTION_TABLE[$9 | 0](HEAP32[$0 + 4 >> 2], $7 + 7 | 0, 1);
break label$6;
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$6;
}
reportDefault($0, $1, HEAP32[$7 + 12 >> 2], $6);
break label$6;
case 10:
$9 = HEAP32[$0 + 60 >> 2];
if ($9) {
if (HEAPU8[$1 + 68 | 0]) {
break label$7;
}
while (1) {
HEAP32[$7 >> 2] = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$1 + 56 >> 2]]($1, $7 + 12 | 0, $6, $7, HEAP32[$0 + 48 >> 2]);
HEAP32[$10 >> 2] = HEAP32[$7 + 8 >> 2];
$6 = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[$9 | 0](HEAP32[$0 + 4 >> 2], $6, HEAP32[$7 >> 2] - $6 | 0);
$6 = HEAP32[$7 + 12 >> 2];
if (($6 | 0) == HEAP32[$7 + 8 >> 2]) {
break label$6;
}
HEAP32[$8 >> 2] = $6;
$6 = HEAP32[$7 + 8 >> 2];
continue;
}
}
if (!HEAP32[$0 + 80 >> 2]) {
break label$6;
}
reportDefault($0, $1, HEAP32[$7 + 12 >> 2], $6);
break label$6;
case 2:
if (!$5) {
$6 = 6;
break label$3;
}
HEAP32[$4 >> 2] = HEAP32[$7 + 12 >> 2];
$6 = 0;
break label$3;
case 4:
break label$4;
case 1:
case 5:
case 6:
case 7:
case 8:
case 9:
break label$8;
case 0:
case 3:
break label$9;
}
}
if (!$5) {
$6 = 20;
break label$3;
}
HEAP32[$4 >> 2] = HEAP32[$7 + 12 >> 2];
$6 = 0;
break label$3;
}
HEAP32[$8 >> 2] = $6;
$6 = 23;
break label$3;
}
$11 = HEAP32[$7 + 12 >> 2];
FUNCTION_TABLE[$9 | 0](HEAP32[$0 + 4 >> 2], $11, $6 - $11 | 0);
}
$6 = HEAP32[$7 + 8 >> 2];
HEAP32[$7 + 12 >> 2] = $6;
HEAP32[$8 >> 2] = $6;
$6 = 35;
label$21: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 1:
break label$21;
case 0:
break label$3;
default:
continue;
}
}
break;
}
HEAP32[$4 >> 2] = HEAP32[$7 + 8 >> 2];
$6 = 0;
break label$3;
}
HEAP32[$8 >> 2] = $6;
$6 = 4;
}
__stack_pointer = $7 + 16 | 0;
return $6;
}
function AtomicNonmanual__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = HEAP32[$0 >> 2];
$3 = DynamicArrayP_char___getElement_28int_29_20const(HEAP32[18848], $3);
$3 = $3 ? $3 : 12232;
$2 = HEAP32[$0 >> 2];
$2 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18851], $2);
$5 = $2 ? $2 : 12232;
$2 = HEAP32[$0 >> 2];
$2 = HEAP32[HEAP32[18846] + ($2 << 2) >> 2];
if ($2) {
$4 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const($2, HEAP16[$0 + 4 >> 1]);
} else {
$4 = 14713;
}
$0 = 67602;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), $3), 32284);
$2 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $2;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $2 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), $5);
if ($4) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15018);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15263);
$0 = 0;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
$4 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $4;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $4 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), $3), 32284);
}
function TokenStream__nextToken_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
$1 = HEAP32[$0 + 20 >> 2];
if (!(!$1 | HEAP32[$1 + 12 >> 2] <= 0)) {
$3 = DynamicArrayP_char___popElement_28_29($1);
break label$1;
}
$3 = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$3 + 12 >> 2];
$2 = HEAP32[$0 + 24 >> 2];
if (!(!HEAP32[$0 + 4 >> 2] | ($1 | 0) > ($2 | 0))) {
DynamicArray_char_2c_20_28char_290___useSubset_28int_2c_20int_29($3, $2, $1);
TokenStream__fillBuffer_28_29($0);
HEAP32[$0 + 24 >> 2] = 0;
$1 = HEAP32[HEAP32[$0 + 16 >> 2] + 12 >> 2];
}
$3 = 0;
if (!(HEAPU8[$0 + 38 | 0] ? HEAPU8[$0 + 37 | 0] : 1) | ($1 | 0) <= 0) {
break label$1;
}
while (1) {
TokenStream__requireChar_28_29($0);
$1 = HEAP32[$0 + 24 >> 2];
$2 = HEAP32[$0 + 16 >> 2];
if (($1 | 0) >= HEAP32[$2 + 12 >> 2]) {
break label$1;
}
$1 = DynamicArray_char_2c_20_28char_290___getElement_28int_29_20const($2, $1);
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
if (!((($1 | 0) != 92 | $5) & 1)) {
$5 = 1;
HEAP8[$0 + 37 | 0] = 1;
continue;
}
$2 = isNewline_28char_29($1);
label$7: {
if ($2) {
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
if (!HEAPU8[$0 + 35 | 0]) {
break label$7;
}
HEAP8[$0 + 35 | 0] = 0;
continue;
}
if (HEAPU8[$0 + 35 | 0]) {
continue;
}
}
if (!(($2 ^ -1 | HEAPU8[$0 + 37 | 0] != 0 | $5) & 1)) {
HEAP8[$0 + 38 | 0] = 1;
break label$1;
}
if (!(!HEAPU8[$0 + 32 | 0] | ($1 | 0) != 35)) {
HEAP8[$0 + 35 | 0] = 1;
continue;
}
if ($2) {
continue;
}
if (isHorizontalWhiteSpace_28char_29($1)) {
continue;
}
break;
}
HEAP8[$0 + 38 | 0] = 0;
HEAP8[$0 + 37 | 0] = HEAPU8[$0 + 36 | 0] ^ 1;
$1 = ($1 | 0) == 34 & HEAPU8[$0 + 33 | 0] != 0;
HEAP8[$0 + 34 | 0] = $1;
HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2] - ($1 ^ 1);
while (1) {
TokenStream__requireChar_28_29($0);
label$12: {
$2 = HEAP32[$0 + 24 >> 2];
$1 = HEAP32[$0 + 16 >> 2];
label$13: {
if (($2 | 0) >= HEAP32[$1 + 12 >> 2]) {
HEAP8[$4 + 15 | 0] = 0;
DynamicArray_char_2c_20_28char_290___appendElement_28char_20const__29($1, $4 + 15 | 0);
break label$13;
}
$1 = DynamicArray_char_2c_20_28char_290___getElement_28int_29_20const($1, $2);
$2 = isNewline_28char_29($1);
if ($2) {
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
}
if (!(!HEAPU8[$0 + 32 | 0] | ($1 | 0) != 35)) {
$1 = HEAP32[$0 + 24 >> 2];
$2 = HEAP32[$0 + 16 >> 2];
HEAP8[$4 + 14 | 0] = 0;
DynamicArray_char_2c_20_28char_290___setElement_28int_2c_20char_20const__29($2, $1, $4 + 14 | 0);
HEAP8[$0 + 35 | 0] = 1;
break label$13;
}
label$17: {
if ($2) {
break label$17;
}
$5 = isHorizontalWhiteSpace_28char_29($1);
$3 = HEAPU8[$0 + 34 | 0];
if ($3 ? 0 : $5) {
break label$17;
}
if (!($3 & 255) | ($1 | 0) != 34) {
break label$12;
}
}
$1 = HEAP32[$0 + 24 >> 2];
$3 = HEAP32[$0 + 16 >> 2];
HEAP8[$4 + 13 | 0] = 0;
DynamicArray_char_2c_20_28char_290___setElement_28int_2c_20char_20const__29($3, $1, $4 + 13 | 0);
if (!HEAPU8[$0 + 36 | 0] | $2 ^ 1) {
break label$13;
}
HEAP8[$0 + 38 | 0] = 1;
}
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
$3 = DynamicArray_char_2c_20_28char_290___getAddress_28int_29_20const(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 28 >> 2]);
HEAP32[$0 + 28 >> 2] = -1;
break label$1;
}
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
continue;
}
}
__stack_pointer = $4 + 16 | 0;
return $3 | 0;
}
function normal_scanEndTag($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 2:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$9;
}
}
label$10: {
switch ($4 - 22 | 0) {
case 0:
case 2:
break label$10;
default:
break label$4;
}
}
$1 = $1 + 1 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 2 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 3 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 4 | 0;
}
label$11: {
label$12: {
label$13: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = 1;
label$15: {
label$16: {
label$17: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$16;
}
break label$4;
case 1:
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = 3;
if (FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0) {
break label$16;
}
break label$4;
case 6:
break label$13;
case 4:
case 5:
case 16:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$16;
case 2:
break label$17;
default:
break label$4;
}
}
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
while (1) {
$5 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
label$21: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 9 | 0) {
case 2:
break label$12;
case 0:
case 1:
continue;
default:
break label$21;
}
}
if (($4 | 0) == 21) {
continue;
}
break;
}
break label$4;
}
$1 = $1 + 1 | 0;
break label$11;
}
$1 = $5 + 2 | 0;
}
$6 = 5;
}
HEAP32[$3 >> 2] = $1;
$4 = $6;
}
return $4;
}
return -2;
}
return -1;
}
function XML_Parse($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
label$1: {
label$2: {
label$3: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 1:
HEAP32[$0 + 268 >> 2] = 33;
break label$2;
case 0:
HEAP32[$0 + 268 >> 2] = 36;
break label$2;
default:
break label$3;
}
}
$4 = 1;
HEAP32[$0 + 464 >> 2] = 1;
if (!$2) {
HEAP8[$0 + 468 | 0] = $3;
if (!$3) {
break label$1;
}
$2 = HEAP32[$0 + 24 >> 2];
HEAP32[$0 + 280 >> 2] = $2;
$3 = HEAP32[$0 + 28 >> 2];
HEAP32[$0 + 40 >> 2] = $3;
$2 = FUNCTION_TABLE[HEAP32[$0 + 264 >> 2]]($0, $2, $3, $0 + 24 | 0) | 0;
HEAP32[$0 + 268 >> 2] = $2;
if (!$2) {
label$8: {
switch (HEAP32[$0 + 464 >> 2]) {
case 3:
$4 = HEAP32[$0 + 144 >> 2];
FUNCTION_TABLE[HEAP32[$4 + 48 >> 2]]($4, HEAP32[$0 + 280 >> 2], HEAP32[$0 + 24 >> 2], $0 + 392 | 0);
HEAP32[$0 + 280 >> 2] = HEAP32[$0 + 24 >> 2];
$4 = 2;
break label$1;
case 0:
case 1:
break label$8;
default:
break label$1;
}
}
HEAP32[$0 + 464 >> 2] = 2;
break label$1;
}
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$0 + 264 >> 2] = 772;
break label$2;
}
label$10: {
label$11: {
label$12: {
label$13: {
if (HEAP32[$0 + 24 >> 2] == HEAP32[$0 + 28 >> 2]) {
HEAP32[$0 + 280 >> 2] = $1;
HEAP8[$0 + 468 | 0] = $3;
$6 = $1 + $2 | 0;
HEAP32[$0 + 40 >> 2] = $6;
HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + $2;
$4 = FUNCTION_TABLE[HEAP32[$0 + 264 >> 2]]($0, $1, $6, $5 + 12 | 0) | 0;
HEAP32[$0 + 268 >> 2] = $4;
if ($4) {
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$0 + 264 >> 2] = 772;
break label$2;
}
$4 = 1;
$1 = -1;
label$16: {
label$17: {
switch (HEAP32[$0 + 464 >> 2]) {
case 0:
case 1:
if (!$3) {
$1 = 1;
break label$16;
}
HEAP32[$0 + 464 >> 2] = 2;
break label$1;
case 2:
break label$1;
case 3:
break label$17;
default:
break label$16;
}
}
$1 = 2;
}
$4 = HEAP32[$0 + 144 >> 2];
FUNCTION_TABLE[HEAP32[$4 + 48 >> 2]]($4, HEAP32[$0 + 280 >> 2], HEAP32[$5 + 12 >> 2], $0 + 392 | 0);
$3 = HEAP32[$5 + 12 >> 2];
$7 = $6 - $3 | 0;
if (($3 | 0) == ($6 | 0)) {
break label$10;
}
$4 = HEAP32[$0 + 8 >> 2];
if (!$4) {
break label$13;
}
if ((HEAP32[$0 + 32 >> 2] - $4 | 0) >= ($7 | 0)) {
break label$11;
}
$4 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]]($4, $2 << 1) | 0;
break label$12;
}
$4 = XML_GetBuffer($0, $2);
if (!$4) {
break label$2;
}
__memcpy($4, $1, $2);
$4 = XML_ParseBuffer($0, $2, $3);
break label$1;
}
$4 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($2 << 1) | 0;
}
if (!$4) {
HEAP32[$0 + 268 >> 2] = 1;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $4;
HEAP32[$0 + 32 >> 2] = ($2 << 1) + $4;
$3 = HEAP32[$5 + 12 >> 2];
}
__memcpy($4, $3, $7);
}
$4 = HEAP32[$0 + 8 >> 2];
HEAP32[$0 + 280 >> 2] = $4;
HEAP32[$0 + 24 >> 2] = $4;
HEAP32[$0 + 276 >> 2] = $4;
HEAP32[$0 + 272 >> 2] = $4;
$4 = $4 + $7 | 0;
HEAP32[$0 + 28 >> 2] = $4;
HEAP32[$0 + 40 >> 2] = $4;
$4 = $1;
break label$1;
}
$4 = 0;
}
__stack_pointer = $5 + 16 | 0;
return $4;
}
function storeEntityValue($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
$5 = HEAP32[$0 + 340 >> 2];
$7 = $5 + 104 | 0;
label$1: {
label$2: {
if (!HEAP32[$5 + 104 >> 2]) {
if (!poolGrow($7)) {
break label$2;
}
}
while (1) {
$4 = 0;
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
$8 = FUNCTION_TABLE[HEAP32[$1 + 16 >> 2]]($1, $2, $3, $6 + 12 | 0) | 0;
switch ($8 + 4 | 0) {
case 0:
break label$1;
case 14:
break label$10;
case 11:
break label$11;
case 1:
break label$12;
case 10:
case 13:
break label$13;
case 2:
case 5:
case 6:
case 7:
case 8:
case 9:
case 12:
break label$7;
case 4:
break label$8;
case 3:
break label$9;
default:
break label$14;
}
}
if (($8 | 0) != 28) {
break label$7;
}
HEAP32[$0 + 272 >> 2] = $2;
$4 = 10;
break label$1;
}
if (!poolAppend($7, $1, $2, HEAP32[$6 + 12 >> 2])) {
break label$2;
}
break label$5;
}
HEAP32[$6 + 12 >> 2] = HEAP32[$1 + 64 >> 2] + $2;
}
$2 = HEAP32[$5 + 116 >> 2];
if (($2 | 0) == HEAP32[$5 + 112 >> 2]) {
if (!poolGrow($7)) {
break label$2;
}
$2 = HEAP32[$5 + 116 >> 2];
}
HEAP32[$5 + 116 >> 2] = $2 + 1;
HEAP8[$2 | 0] = 10;
break label$5;
}
$4 = FUNCTION_TABLE[HEAP32[$1 + 40 >> 2]]($1, $2) | 0;
label$16: {
if (($4 | 0) < 0) {
$4 = 14;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$16;
}
break label$1;
}
$4 = XmlUtf8Encode($4, $6 + 8 | 0);
if ($4) {
$2 = 0;
$9 = ($4 | 0) > 0 ? $4 : 0;
while (1) {
if (($2 | 0) == ($9 | 0)) {
break label$5;
}
$4 = HEAP32[$5 + 116 >> 2];
if (($4 | 0) == HEAP32[$5 + 112 >> 2]) {
if (!poolGrow($7)) {
break label$2;
}
$4 = HEAP32[$5 + 116 >> 2];
}
$8 = HEAPU8[($6 + 8 | 0) + $2 | 0];
HEAP32[$5 + 116 >> 2] = $4 + 1;
HEAP8[$4 | 0] = $8;
$2 = $2 + 1 | 0;
continue;
}
}
$4 = 14;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
}
HEAP32[$0 + 272 >> 2] = $2;
break label$1;
}
$4 = 4;
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
break label$6;
}
break label$1;
}
$4 = 4;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
HEAP32[$0 + 272 >> 2] = HEAP32[$6 + 12 >> 2];
break label$1;
}
$4 = 23;
if (HEAP32[$0 + 144 >> 2] != ($1 | 0)) {
break label$1;
}
}
HEAP32[$0 + 272 >> 2] = $2;
break label$1;
}
$2 = HEAP32[$6 + 12 >> 2];
continue;
}
}
$4 = 1;
}
__stack_pointer = $6 + 16 | 0;
return $4;
}
function BasicMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0), $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 208 | 0;
__stack_pointer = $2;
if ($1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
HEAP32[$2 + 192 >> 2] = HEAP32[(HEAP32[$0 + 8 >> 2] << 2) + 61728 >> 2];
fiprintf($1, 25700, $2 + 192 | 0);
label$2: {
if (!HEAP32[16886]) {
break label$2;
}
$4 = $0 + 12 | 0;
if (!MannerFlags__defined_28_29_20const($4)) {
break label$2;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
eputs_28char_20const__29(20765);
MannerFlags__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
}
if (HEAP32[$0 + 24 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23630, $1);
HEAP32[$2 + 176 >> 2] = HEAP32[$0 + 24 >> 2];
fiprintf($1, 30758, $2 + 176 | 0);
}
if (HEAPU8[$0 + 28 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 28 | 0]), HEAP32[wasm2js_i32$0 + 160 >> 2] = wasm2js_i32$1;
fiprintf($1, 31392, $2 + 160 | 0);
}
if (HEAPU8[$0 + 29 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 29 | 0]), HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
fiprintf($1, 31447, $2 + 144 | 0);
}
if (HEAPU8[$0 + 30 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 30 | 0]), HEAP32[wasm2js_i32$0 + 128 >> 2] = wasm2js_i32$1;
fiprintf($1, 31372, $2 + 128 | 0);
}
if (HEAPU8[$0 + 31 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 31 | 0]), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
fiprintf($1, 31345, $2 + 112 | 0);
}
if (HEAPU8[$0 + 33 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 33 | 0]), HEAP32[wasm2js_i32$0 + 96 >> 2] = wasm2js_i32$1;
fiprintf($1, 31409, $2 + 96 | 0);
}
if (HEAPU8[$0 + 32 | 0]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 32 | 0]), HEAP32[wasm2js_i32$0 + 80 >> 2] = wasm2js_i32$1;
fiprintf($1, 31299, $2 + 80 | 0);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 48 >> 2];
HEAP32[$2 + 64 >> 2] = 3;
HEAPF64[$2 + 72 >> 3] = $3;
__small_fprintf($1, 29234, $2 - -64 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 40 >> 2];
HEAP32[$2 + 48 >> 2] = 3;
HEAPF64[$2 + 56 >> 3] = $3;
__small_fprintf($1, 28980, $2 + 48 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 44 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 28901, $2 + 32 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 52 >> 2];
HEAP32[$2 + 16 >> 2] = 3;
HEAPF64[$2 + 24 >> 3] = $3;
__small_fprintf($1, 28999, $2 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 56 >> 2];
HEAP32[$2 >> 2] = 3;
HEAPF64[$2 + 8 >> 3] = $3;
__small_fprintf($1, 29250, $2);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23700, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0 + 60 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 208 | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP32[19359] = 0;
invoke_iii(25, $3 + 24 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
if (($2 | 0) != 1) {
label$5: {
if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($3 + 24 | 0)) {
break label$5;
}
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
std____2__ios_base__getloc_28_29_20const($3 + 16 | 0, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$6: {
label$7: {
label$8: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
$4 = invoke_ii(904, $3 + 16 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$8;
}
std____2__locale___locale_28_29($3 + 16 | 0);
$6 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3 + 8 | 0, $0);
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$5 = $0 + $2 | 0;
$7 = invoke_ii(26, $5 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
$2 = HEAP32[$6 >> 2];
HEAP32[19359] = 0;
$4 = invoke_iiiiid(906, $4 | 0, $2 | 0, $5 | 0, $7 | 0, +$1) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$7;
}
HEAP32[$3 + 16 >> 2] = $4;
if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($3 + 16 | 0)) {
break label$5;
}
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $0 + $2 | 0, 5);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$5;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std____2__locale___locale_28_29($3 + 16 | 0);
break label$6;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$3;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3 + 24 | 0);
break label$2;
}
$2 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
__cxa_begin_catch($2 | 0) | 0;
$2 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vi(29, $0 + $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
__cxa_end_catch();
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__resumeException($3 | 0);
abort();
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function PNMtoATM_28DynamicArray1_AtomicNonmanual___29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$1 = __stack_pointer - 96 | 0;
__stack_pointer = $1;
label$1: {
label$2: {
label$3: {
label$4: {
if (!$0) {
break label$4;
}
label$5: {
switch (HEAP32[$0 + 12 >> 2]) {
case 1:
DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($1 - -64 | 0, $0, 0);
HEAP32[19359] = 0;
$5 = invoke_ii(459, $1 - -64 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
AtomicNonmanual___AtomicNonmanual_28_29($1 - -64 | 0);
break label$4;
case 0:
break label$4;
default:
break label$5;
}
}
$3 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$5 = invoke_ii(381, $3 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
label$7: {
label$8: {
label$9: {
while (1) {
$2 = $4 << 16 >> 16;
if (($2 | 0) >= HEAP32[$0 + 12 >> 2]) {
$4 = HEAP32[$5 + 24 >> 2];
switch (HEAP32[$4 + 12 >> 2]) {
case 1:
break label$7;
case 0:
break label$8;
default:
break label$4;
}
}
DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($1 + 32 | 0, $0, $2);
HEAP32[19359] = 0;
HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
$3 = HEAP32[$1 + 52 >> 2];
$2 = HEAP32[$1 + 48 >> 2];
HEAP32[$1 + 16 >> 2] = $2;
HEAP32[$1 + 20 >> 2] = $3;
$2 = HEAP32[$1 + 44 >> 2];
$3 = HEAP32[$1 + 40 >> 2];
HEAP32[$1 + 8 >> 2] = $3;
HEAP32[$1 + 12 >> 2] = $2;
$3 = HEAP32[$1 + 36 >> 2];
$2 = HEAP32[$1 + 32 >> 2];
HEAP32[$1 >> 2] = $2;
HEAP32[$1 + 4 >> 2] = $3;
$3 = invoke_ii(459, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
AtomicNonmanual___AtomicNonmanual_28_29($1);
label$13: {
if (!$3) {
break label$13;
}
HEAP32[19359] = 0;
invoke_vii(460, $5 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$13;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$9;
}
$4 = $4 + 1 | 0;
AtomicNonmanual___AtomicNonmanual_28_29($1 + 32 | 0);
continue;
}
break;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AtomicNonmanual___AtomicNonmanual_28_29($1);
}
AtomicNonmanual___AtomicNonmanual_28_29($1 + 32 | 0);
break label$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 4 >> 2]]($5);
$5 = 0;
break label$4;
}
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($4, 0);
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29(HEAP32[$5 + 24 >> 2], 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 4 >> 2]]($5);
$5 = $4;
}
__stack_pointer = $1 + 96 | 0;
return $5;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AtomicNonmanual___AtomicNonmanual_28_29($1 - -64 | 0);
break label$1;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
}
__resumeException($4 | 0);
abort();
}
function DirectedMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, $2, 6054, Direction3__Direction3_28Direction3_20const__29($3 + 32 | 0, $0 + 528 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8422, HEAP32[$0 + 540 >> 2], HEAP32[18787]);
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, $2, 6047, Direction3__Direction3_28Direction3_20const__29($3 + 16 | 0, $0 + 544 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8315, HEAP32[$0 + 556 >> 2], HEAP32[18787]);
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, $2, 8485, Direction2__Direction2_28Direction2_20const__29($3 + 8 | 0, $0 + 560 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8291, HEAP32[$0 + 568 >> 2], HEAP32[18787]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 9347, HEAP32[$0 + 572 >> 2], HEAP32[18785]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8279, HEAP32[$0 + 576 >> 2], HEAP32[18787]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 4864, HEAP32[$0 + 580 >> 2], HEAP32[18784]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8258, HEAP32[$0 + 584 >> 2], HEAP32[18787]);
printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($1, $2, 6029, Direction2__Direction2_28Direction2_20const__29($3, $0 + 588 | 0));
if (HEAPU16[$0 + 596 >> 1]) {
label$2: {
if ($2) {
$4 = 15263;
$2 = 15184;
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
$4 = 48340;
$2 = 15185;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $2);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29($1, HEAP16[$0 + 596 >> 1]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, $4);
}
__stack_pointer = $3 + 48 | 0;
}
function NonmanualMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
$2 = HEAP32[$0 + 4 >> 2];
if (!$2) {
break label$1;
}
$2 = HEAP32[$2 + 12 >> 2];
if (!$2) {
break label$1;
}
$7 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($6 | 0) == ($7 | 0)) {
break label$1;
}
label$3: {
$5 = DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const(HEAP32[$0 + 4 >> 2], $6);
if (!$5) {
break label$3;
}
label$4: {
label$5: {
label$6: {
$4 = HEAP32[$5 + 12 >> 2];
switch ($4 | 0) {
case 0:
break label$3;
case 1:
break label$6;
default:
break label$5;
}
}
DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($3, $5, 0);
HEAP32[19359] = 0;
invoke_vii(461, $3 | 0, $1 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$4;
}
AtomicNonmanual___AtomicNonmanual_28_29($3);
break label$3;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 4926), 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = 0;
$8 = ($4 | 0) > 0 ? $4 : 0;
while (1) {
if (($2 | 0) == ($8 | 0)) {
$2 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $2;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $2 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 4926), 32284);
break label$3;
}
DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($3, $5, $2);
HEAP32[19359] = 0;
invoke_vii(461, $3 | 0, $1 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
$2 = $2 + 1 | 0;
AtomicNonmanual___AtomicNonmanual_28_29($3);
continue;
}
break;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AtomicNonmanual___AtomicNonmanual_28_29($3);
__resumeException($2 | 0);
abort();
}
$6 = $6 + 1 | 0;
continue;
}
}
__stack_pointer = $3 + 32 | 0;
}
function normal_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0]) {
case 2:
return normal_scanLt($0, $1 + 1 | 0, $2, $3) | 0;
case 3:
return normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
case 9:
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
HEAP32[$3 >> 2] = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0] == 10 ? $1 + 2 | 0 : $4;
return 7;
case 10:
HEAP32[$3 >> 2] = $1 + 1;
return 7;
case 4:
$5 = -5;
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$3;
}
if (HEAPU8[$4 | 0] != 93) {
break label$4;
}
$6 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$3;
}
if (HEAPU8[$6 + 2 | 0] != 62) {
break label$4;
}
HEAP32[$3 >> 2] = $1;
return 0;
case 5:
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$3;
}
if (FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0) {
break label$2;
}
$4 = $1 + 2 | 0;
break label$4;
case 6:
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$3;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0) {
break label$2;
}
$4 = $1 + 3 | 0;
break label$4;
case 7:
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$3;
}
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0) {
break label$2;
}
$4 = $1 + 4 | 0;
break label$4;
case 0:
case 1:
case 8:
break label$2;
default:
break label$5;
}
}
$4 = $1 + 1 | 0;
}
label$15: {
label$16: {
while (1) {
$1 = $4;
if (($2 | 0) != ($1 | 0)) {
label$19: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0]) {
case 5:
if (($2 - $1 | 0) < 2) {
break label$16;
}
if (FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0) {
break label$16;
}
$4 = $1 + 2 | 0;
continue;
case 6:
if (($2 - $1 | 0) < 3) {
break label$16;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0) {
break label$16;
}
$4 = $1 + 3 | 0;
continue;
case 7:
if (($2 - $1 | 0) < 4) {
break label$16;
}
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0) {
break label$16;
}
$4 = $1 + 4 | 0;
continue;
case 4:
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$16;
}
if (HEAPU8[$4 | 0] != 93) {
continue;
}
$5 = $1 + 2 | 0;
if (($5 | 0) == ($2 | 0)) {
break label$16;
}
if (HEAPU8[$1 + 2 | 0] != 62) {
continue;
}
HEAP32[$3 >> 2] = $5;
return 0;
case 0:
case 1:
case 2:
case 3:
case 8:
case 9:
case 10:
break label$16;
default:
break label$19;
}
}
$4 = $1 + 1 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$15;
}
HEAP32[$3 >> 2] = $1;
}
$5 = 6;
}
return $5 | 0;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
function handle_nonmanual_item_28AtomicNonmanual__2c_20NonmanualItems_2c_20XMLCell__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 128 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
switch ($1 - 9 | 0) {
case 2:
if (!HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$2 + 4 >> 2], 9332)) {
if (!HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$2 + 4 >> 2], 2361)) {
HEAP32[$3 + 80 >> 2] = HEAP32[$2 >> 2];
eprintf_28char_20const__2c_20____29(44943, $3 + 80 | 0);
break label$1;
}
LogTime_28_29();
HEAP32[$3 + 96 >> 2] = HEAP32[$2 >> 2];
eprintf_28char_20const__2c_20____29(43969, $3 + 96 | 0);
}
$2 = ProcessAtomicXMLMorph_28XMLCell__2c_20bool_29($2, 1);
AtomicNonmanual__setFrom_28NonmanualItems_2c_20short_2c_20AbstractTimedMorph__29($0, 11, HEAP16[$2 + 24 >> 1], $2);
break label$1;
case 0:
$1 = SAMPAToMorphing_28XMLCell__29($2);
if (!$1) {
AtomicNonmanual__clear_28_29($0);
LogTime_28_29();
HEAP32[$3 + 112 >> 2] = HEAP32[$2 >> 2];
eprintf_28char_20const__2c_20____29(34858, $3 + 112 | 0);
break label$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($1, $2);
AtomicNonmanual__setFrom_28NonmanualItems_2c_20short_2c_20AbstractTimedMorph__29($0, 9, -1, $1);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($2, $0 + 24 | 0, 2184);
break label$1;
default:
break label$2;
}
}
$4 = HEAP32[HEAP32[18846] + ($1 << 2) >> 2];
if (!$4) {
AtomicNonmanual__clear_28_29($0);
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
eprintf_28char_20const__2c_20____29(44904, $3);
break label$1;
}
label$9: {
$5 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$2 + 4 >> 2], 2361);
if ($5) {
break label$9;
}
$5 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$2 + 4 >> 2], 6054);
if ($5) {
break label$9;
}
LogTime_28_29();
HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
eprintf_28char_20const__2c_20____29(40248, $3 + 16 | 0);
AtomicNonmanual__clear_28_29($0);
break label$1;
}
$6 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const($4, $5);
label$10: {
if (!HEAPU8[67583]) {
$4 = $6 << 16;
$7 = $4 >> 16;
break label$10;
}
LogTime_28_29();
HEAP32[$3 + 76 >> 2] = $5;
HEAP32[$3 + 68 >> 2] = $1;
HEAP32[$3 + 64 >> 2] = $4;
$4 = $6 << 16;
$7 = $4 >> 16;
HEAP32[$3 + 72 >> 2] = $7;
eprintf_28char_20const__2c_20____29(47039, $3 - -64 | 0);
}
if (($4 | 0) == -65536) {
LogTime_28_29();
HEAP32[$3 + 48 >> 2] = $5;
eprintf_28char_20const__2c_20____29(43402, $3 + 48 | 0);
$1 = 0;
}
if (HEAPU8[67583]) {
LogTime_28_29();
$4 = HEAP32[$2 >> 2];
HEAP32[$3 + 44 >> 2] = $7;
HEAP32[$3 + 40 >> 2] = $1;
HEAP32[$3 + 36 >> 2] = $5;
HEAP32[$3 + 32 >> 2] = $4;
eprintf_28char_20const__2c_20____29(46847, $3 + 32 | 0);
}
AtomicNonmanual__setFrom_28NonmanualItems_2c_20short_29($0, $1, $6 << 16 >> 16);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($2, $0 + 12 | 0, 6151);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($2, $0 + 16 | 0, 10481);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($2, $0 + 20 | 0, 9533);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($2, $0 + 24 | 0, 2184);
}
__stack_pointer = $3 + 128 | 0;
}
function __trunctfdf2($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$12 = __stack_pointer - 32 | 0;
__stack_pointer = $12;
$4 = $3;
$9 = $4 & 2147483647;
$8 = $9;
$6 = $2;
$2 = $6;
$4 = $6;
$5 = $4;
$7 = 1006698496;
$7 = $9 - $7 | 0;
$4 = $7;
$7 = $9;
$6 = $5;
$5 = 1140785152;
$5 = $7 - $5 | 0;
$9 = $5;
$5 = $4;
$7 = $6;
label$1: {
if (($9 | 0) == ($5 | 0) & $6 >>> 0 > $6 >>> 0 | $5 >>> 0 < $9 >>> 0) {
$8 = $2;
$2 = $8 << 4;
$7 = $3;
$5 = $7 << 4 | $8 >>> 28;
$4 = $5;
$8 = 0;
$7 = $8;
$5 = $1;
$9 = $5 >>> 28 | 0;
$5 = $2;
$2 = $9 | $5;
$8 = $4;
$7 = $8 | $7;
$8 = $7;
$7 = $1;
$5 = $7 & 268435455;
$1 = $5;
$7 = $0;
if (($5 | 0) == 134217728 & ($7 | 0) != 0 | $5 >>> 0 > 134217728) {
$7 = $8;
$6 = $7 + 1073741824 | 0;
$9 = $2;
$4 = $9 + 1 | 0;
$6 = $4 ? $6 : $6 + 1 | 0;
$11 = $4;
$10 = $6;
break label$1;
}
$7 = $2;
$5 = $7;
$11 = $5;
$6 = $8;
$4 = -1073741824;
$4 = $6 - $4 | 0;
$10 = $4;
$6 = $0;
$4 = $1;
if ($6 | ($4 | 0) != 134217728) {
break label$1;
}
$4 = 0;
$0 = $4;
$6 = $11;
$8 = $2;
$7 = $8 & 1;
$9 = $6 + $7 | 0;
$4 = $10;
$8 = $0;
$5 = $4 + $8 | 0;
$11 = $9;
$5 = $7 >>> 0 > $9 >>> 0 ? $5 + 1 | 0 : $5;
$10 = $5;
break label$1;
}
$5 = $1;
$10 = !($5 | $0);
$5 = $8;
$6 = $5 >>> 0 < 2147418112;
$4 = $5;
if (!(!$7 & ($4 | 0) == 2147418112 ? $10 : $6)) {
$6 = $2;
$2 = $6 << 4;
$7 = $3;
$4 = $7 << 4 | $6 >>> 28;
$0 = $4;
$4 = $1;
$5 = $4 >>> 28 | 0;
$6 = 0;
$7 = $6;
$6 = $0;
$7 = $6 | $7;
$4 = $2;
$6 = $4 | $5;
$4 = $7 & 524287;
$11 = $6;
$6 = $4 | 2146959360;
$10 = $6;
break label$1;
}
$10 = 2146435072;
$6 = $8;
if ($6 >>> 0 > 1140785151) {
break label$1;
}
$10 = 0;
$4 = $8;
$7 = $4 >>> 16 | 0;
if ($7 >>> 0 < 15249) {
break label$1;
}
$6 = $3;
$5 = $6 & 65535;
$4 = $2;
$2 = $4;
$4 = $5 | 65536;
$8 = $4;
$4 = $1;
$6 = $8;
__ashlti3($12 + 16 | 0, $0, $4, $2, $6, $7 - 15233 | 0);
$6 = $4;
$4 = $8;
__lshrti3($12, $0, $6, $2, $4, 15361 - $7 | 0);
$5 = $12;
$4 = HEAP32[$5 + 8 >> 2];
$6 = HEAP32[$5 + 12 >> 2];
$1 = $4 << 4;
$4 = $6 << 4 | $4 >>> 28;
$0 = $4;
$6 = $12;
$4 = HEAP32[$6 >> 2];
$2 = $4;
$5 = HEAP32[$6 + 4 >> 2];
$8 = $5;
$7 = $5 >>> 28 | 0;
$4 = 0;
$6 = $4;
$5 = $1;
$11 = $5 | $7;
$4 = $0;
$6 = $4 | $6;
$10 = $6;
$4 = $12;
$6 = HEAP32[$4 + 16 >> 2];
$1 = $6;
$5 = HEAP32[$4 + 20 >> 2];
$0 = $5;
$5 = HEAP32[$4 + 24 >> 2];
$7 = $5;
$6 = HEAP32[$4 + 28 >> 2];
$5 = $6;
$6 = $0;
$5 = $6 | $5;
$4 = $1;
$6 = $4 | $7;
$0 = ($5 | $6) != 0;
$6 = $8;
$5 = $6 & 268435455;
$7 = $2;
$4 = $7;
$6 = $0;
$2 = $4 | $6;
$7 = $5;
$8 = $5;
$5 = $2;
if (($7 | 0) == 134217728 & ($5 | 0) != 0 | $7 >>> 0 > 134217728) {
$5 = $10;
$4 = $11;
$8 = $4 + 1 | 0;
$9 = $8 ? $5 : $5 + 1 | 0;
$11 = $8;
$10 = $9;
break label$1;
}
$9 = $8;
if ($2 | ($9 | 0) != 134217728) {
break label$1;
}
$4 = $11;
$5 = $4 & 1;
$7 = $4 + $5 | 0;
$9 = 0;
$6 = $10;
$8 = $9 + $6 | 0;
$11 = $7;
$8 = $4 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
$10 = $8;
}
__stack_pointer = $12 + 32 | 0;
$8 = $3;
$5 = $8 & -2147483648;
$4 = 0;
$8 = $11;
wasm2js_scratch_store_i32(0, $4 | $8);
$9 = $5;
$5 = $10;
$9 = $9 | $5;
wasm2js_scratch_store_i32(1, $9 | 0);
return +wasm2js_scratch_load_f64();
}
function CircularMovement__setAvatarDependentValues1_28OneHCircMoveSpec__2c_20OneHConcretePosture_20const__2c_20Mirroring_29($0, $1, $2, $3) {
var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$2 = __stack_pointer - 176 | 0;
__stack_pointer = $2;
$6 = $0 + 528 | 0;
$5 = Direction3__Direction3_28Direction3_20const__29($2 + 160 | 0, $6);
$9 = $0 + 540 | 0;
$10 = Direction3__Direction3_28Direction3_20const__29($2 + 144 | 0, $9);
$7 = HEAPU16[$3 >> 1];
HEAP16[$2 + 14 >> 1] = $7;
HEAP16[$2 + 136 >> 1] = $7;
ConvertAxisPair_28Vector__2c_20Direction3_2c_20Direction3_2c_20Mirroring_29($1, $5, $10, $2 + 14 | 0);
Vector__setUnit_28_29($1);
$3 = HEAP32[$0 + 552 >> 2];
$4 = HEAPF32[(($3 << 2) + 68592 | 0) + 120 >> 2];
$8 = HEAPF32[$0 + 48 >> 2];
$5 = Vector__Vector_28_29($2 + 120 | 0);
$6 = Direction3__Direction3_28Direction3_20const__29($2 + 104 | 0, $6);
$9 = Direction3__Direction3_28Direction3_20const__29($2 + 88 | 0, $9);
$3 = HEAPU16[35148];
HEAP16[$2 + 80 >> 1] = $3;
HEAP16[$2 + 12 >> 1] = $3;
ConvertAxisPair_28Vector__2c_20Direction3_2c_20Direction3_2c_20Mirroring_29($5, $6, $9, $2 + 12 | 0);
$3 = $1 + 24 | 0;
$6 = $0 + 576 | 0;
SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($3, $5, Direction2__Direction2_28Direction2_20const__29($2 + 72 | 0, $6));
HEAP16[$2 + 10 >> 1] = $7;
HEAP16[$2 + 64 >> 1] = $7;
MirrorDirectionVec_28Mirroring_2c_20Vector__29($2 + 10 | 0, $3);
$7 = $1 + 12 | 0;
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($7, $1, $3);
$4 = Math_fround($8 * $4);
Vector__setScale_28float_29($7, $4);
if (Direction2__defined_28_29_20const($6)) {
$5 = HEAP32[$0 + 584 >> 2];
$4 = Math_fround($4 * HEAPF32[(($5 << 2) + 68592 | 0) + 200 >> 2]);
}
Vector__setScale_28float_29($3, $4);
$5 = Vector__Vector_28_29($2 + 48 | 0);
$6 = $0 + 556 | 0;
SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($5, $1, Direction2__Direction2_28Direction2_20const__29($2 + 40 | 0, $6));
if (HEAPU8[$0 + 33 | 0]) {
Vector__setScale_28float_29($5, Math_fround(-1));
}
wasm2js_i32$0 = $1, wasm2js_f32$0 = Vector__findRot_28Vector_20const__2c_20Vector_20const__29($5, $7, $3), 
HEAPF32[wasm2js_i32$0 + 60 >> 2] = wasm2js_f32$0;
$5 = $0 + 568 | 0;
if (!Direction2__defined_28_29_20const($5)) {
Direction2__operator__28Direction2_20const__29($5, $6);
}
label$4: {
if (Direction2__defined_28_29_20const($5)) {
$6 = Vector__Vector_28_29($2 + 24 | 0);
SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($6, $1, Direction2__Direction2_28Direction2_20const__29($2 + 16 | 0, $5));
$4 = Vector__findRot_28Vector_20const__2c_20Vector_20const__29($6, $7, $3);
$8 = HEAPF32[$1 + 60 >> 2];
break label$4;
}
$8 = HEAPF32[$1 + 60 >> 2];
$4 = Math_fround($8 + HEAPF32[17667]);
}
HEAPF32[$1 + 64 >> 2] = $4 - $8;
$3 = $1 + 36 | 0;
GetCircularOffset_28Vector__2c_20OneHCircMoveSpec_20const__2c_20float_29($3, $1, $8);
$7 = $1 + 48 | 0;
GetCircularOffset_28Vector__2c_20OneHCircMoveSpec_20const__2c_20float_29($7, $1, $4);
Vector__setSubtract_28Vector_20const__29($7, $3);
$4 = HEAPF32[$1 + 64 >> 2];
if ($4 <= Math_fround(0)) {
$4 = Math_fround($4 + HEAPF32[17667]);
HEAPF32[$1 + 64 >> 2] = $4;
}
if (HEAPU8[$0 + 564 | 0]) {
$4 = Math_fround(HEAPF32[17667] + $4);
HEAPF32[$1 + 64 >> 2] = $4;
}
if (HEAPU8[$0 + 565 | 0]) {
HEAPF32[$1 + 64 >> 2] = HEAPF32[17667] + $4;
}
__stack_pointer = $2 + 176 | 0;
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$11: {
$5 = $1;
if ($5) {
$7 = $2;
if (!$7) {
break label$11;
}
$4 = $3;
if (!$4) {
break label$9;
}
$5 = Math_clz32($4) - Math_clz32($5) | 0;
if ($5 >>> 0 <= 31) {
break label$8;
}
break label$2;
}
$4 = $3;
if (($4 | 0) == 1 | $4 >>> 0 > 1) {
break label$2;
}
$5 = $0;
$7 = $2;
$5 = ($5 >>> 0) / ($7 >>> 0) | 0;
i64toi32_i32$HIGH_BITS = 0;
return $5;
}
$7 = $3;
if (!$0) {
break label$7;
}
if (!$7) {
break label$6;
}
$4 = $7 - 1 | 0;
if ($4 & $7) {
break label$6;
}
$1 = $5 >>> __wasm_ctz_i32($7) | 0;
i64toi32_i32$HIGH_BITS = 0;
return $1;
}
if (!($7 - 1 & $7)) {
break label$5;
}
$5 = (Math_clz32($7) + 33 | 0) - Math_clz32($5) | 0;
$7 = 0 - $5 | 0;
break label$3;
}
$7 = 63 - $5 | 0;
$5 = $5 + 1 | 0;
break label$3;
}
$4 = ($5 >>> 0) / ($7 >>> 0) | 0;
i64toi32_i32$HIGH_BITS = 0;
return $4;
}
$5 = Math_clz32($7) - Math_clz32($5) | 0;
if ($5 >>> 0 < 31) {
break label$4;
}
break label$2;
}
if (($7 | 0) == 1) {
break label$1;
}
$4 = $1;
$1 = $0;
$9 = 0;
$8 = __wasm_ctz_i32($7);
$6 = $8 & 31;
if (($8 & 63) >>> 0 >= 32) {
$1 = $4 >>> $6 | 0;
} else {
$9 = $4 >>> $6 | 0;
$1 = ((1 << $6) - 1 & $4) << 32 - $6 | $1 >>> $6;
}
i64toi32_i32$HIGH_BITS = $9;
return $1;
}
$7 = 63 - $5 | 0;
$5 = $5 + 1 | 0;
}
$4 = $0;
$9 = 0;
$8 = $5 & 63;
$6 = $8 & 31;
if (($8 & 63) >>> 0 >= 32) {
$10 = $1 >>> $6 | 0;
} else {
$9 = $1 >>> $6 | 0;
$10 = ((1 << $6) - 1 & $1) << 32 - $6 | $4 >>> $6;
}
$12 = $9;
$9 = $1;
$1 = $0;
$8 = $7 & 63;
$6 = $8 & 31;
if (($8 & 63) >>> 0 >= 32) {
$4 = $1 << $6;
$0 = 0;
} else {
$4 = (1 << $6) - 1 & $1 >>> 32 - $6 | $9 << $6;
$0 = $1 << $6;
}
$1 = $4;
if ($5) {
$4 = $3 - 1 | 0;
$6 = $2 - 1 | 0;
$4 = ($6 | 0) != -1 ? $4 + 1 | 0 : $4;
$13 = $6;
$7 = $4;
while (1) {
$4 = $10;
$8 = $4 << 1;
$4 = $12 << 1 | $4 >>> 31;
$10 = $8 | $1 >>> 31;
$9 = $4;
$4 = $13;
$8 = $10;
$6 = $7 - (($4 >>> 0 < $8 >>> 0) + $9 | 0) | 0;
$12 = $3 & $6 >> 31;
$4 = $8;
$11 = $6 >> 31;
$8 = $11 & $2;
$10 = $4 - $8 | 0;
$12 = $9 - (($4 >>> 0 < $8 >>> 0) + $12 | 0) | 0;
$4 = $1 << 1 | $0 >>> 31;
$0 = $0 << 1 | $14;
$1 = $4 | $16;
$15 = 0;
$11 = $11 & 1;
$14 = $11;
$5 = $5 - 1 | 0;
if ($5) {
continue;
}
break;
}
}
i64toi32_i32$HIGH_BITS = $15 | ($1 << 1 | $0 >>> 31);
return $0 << 1 | $11;
}
$0 = 0;
$1 = 0;
}
i64toi32_i32$HIGH_BITS = $1;
return $0;
}
function OneArmAnimator__computeJointRotations_28OneHConcretePosture_20const__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$3 = __stack_pointer - 224 | 0;
__stack_pointer = $3;
if (HEAP32[$0 + 32 >> 2] != HEAP32[$1 + 56 >> 2]) {
HandJointRotations__setFrom_28HandJointRotations_20const__29(HEAP32[$0 + 976 >> 2], HEAP32[$0 + 12 >> 2]);
HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 56 >> 2];
}
$4 = Vector__Vector_28_29($3 + 208 | 0);
OneHConcretePosture__computeWristLoc_28HanimAvatar_20const__2c_20Vector__29_20const($1, HEAP32[$0 + 4 >> 2], $4);
$5 = Quaternion__Quaternion_28_29($3 + 192 | 0);
Quaternion__setFrom_28Quaternion_20const__29($5, $1 + 40 | 0);
if (HEAPU8[67561]) {
eprintf_28char_20const__2c_20____29(25522, 0);
}
HanimAvatar__computeArmRotations_28JointRotation___2c_20bool_2c_20Vector_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_2c_20float_29_20const(HEAP32[$0 + 4 >> 2], $0 + 16 | 0, HEAPU8[$0 + 8 | 0], $4, $5, $1 + 76 | 0, HEAPF32[$1 + 64 >> 2], HEAPF32[$1 + 68 >> 2]);
if (HEAPU8[67561]) {
eprintf_28char_20const__2c_20____29(17412, 0);
$4 = HEAP32[$0 + 20 >> 2];
$5 = HEAP32[HEAP32[$4 >> 2] + 64 >> 2];
FUNCTION_TABLE[$5 | 0]($4, HEAP32[16886], 3);
eputc_28char_29(10);
}
$6 = HEAPF32[$1 + 72 >> 2];
$4 = 1;
while (1) {
if (($4 | 0) == 6) {
if (HEAPU8[67593]) {
$2 = HEAPF32[$1 + 60 >> 2];
HEAPF64[$3 + 80 >> 3] = HEAPF32[$3 + 160 >> 2];
HEAPF64[$3 + 88 >> 3] = HEAPF32[$3 + 164 >> 2];
HEAPF64[$3 + 96 >> 3] = HEAPF32[$3 + 168 >> 2];
HEAPF64[$3 + 104 >> 3] = HEAPF32[$3 + 172 >> 2];
HEAPF64[$3 + 112 >> 3] = HEAPF32[$3 + 176 >> 2];
$8 = +$6;
HEAPF64[$3 + 64 >> 3] = $8;
HEAPF64[$3 + 72 >> 3] = $2;
eprintf_28char_20const__2c_20____29(29622, $3 - -64 | 0);
$2 = HEAPF32[$1 + 60 >> 2];
HEAPF64[$3 + 16 >> 3] = HEAPF32[$3 + 128 >> 2];
HEAPF64[$3 + 24 >> 3] = HEAPF32[$3 + 132 >> 2];
HEAPF64[$3 + 32 >> 3] = HEAPF32[$3 + 136 >> 2];
HEAPF64[$3 + 40 >> 3] = HEAPF32[$3 + 140 >> 2];
HEAPF64[$3 + 48 >> 3] = HEAPF32[$3 + 144 >> 2];
HEAPF64[$3 >> 3] = $8;
HEAPF64[$3 + 8 >> 3] = $2;
eprintf_28char_20const__2c_20____29(29662, $3);
}
$4 = HEAP32[$1 + 56 >> 2];
if ($4) {
HandJointRotations__interpolateHandrots_28HandJointRotations_20const__2c_20HandJointRotations_20const__2c_20float_20const__29(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 976 >> 2], $4, $3 + 160 | 0);
}
DoFingerplay_28HandJointRotations__2c_20FingerplayType_2c_20float_2c_20float_2c_20float_2c_20short_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 92 >> 2], HEAPF32[$1 + 96 >> 2], HEAPF32[$1 + 100 >> 2], HEAPF32[$1 + 104 >> 2], HEAP16[((HEAPU8[$0 + 8 | 0] ? 34 : 32) + $1 | 0) + 76 >> 1]);
__stack_pointer = $3 + 224 | 0;
} else {
$5 = ($4 << 2) - 4 | 0;
$9 = $4 << 16 >> 16;
$2 = Math_fround(Math_fround($6 * Math_fround(Math_fround(Math_fround($9 | 0) / Math_fround(6)) + Math_fround(-.5))) + Math_fround(.5));
$7 = HEAPF32[$1 + 60 >> 2];
HEAPF32[$5 + ($3 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround(1) - $2) * $7) / Math_fround(Math_fround($7 * Math_fround(Math_fround(1) - Math_fround($2 + $2))) + $2);
wasm2js_i32$0 = ($3 + 160 | 0) + $5 | 0, wasm2js_f32$0 = rescaleSpace_28float_2c_20float_29($7, Math_fround($6 * Math_fround((($9 | 0) / -3 << 16) + 65536 >> 16))), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
function TorsoDecollider__ForceOutside_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$6 = Math_fround(Math_fround(Vector__y_28_29_20const(TorsoCurve__centre_28_29(HEAP32[HEAP32[$0 + 8 >> 2] >> 2])) - Vector__y_28_29_20const(TorsoCurve__centre_28_29(HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]))) / Math_fround(3));
label$1: {
label$2: {
while (1) {
if (HEAP16[$0 + 4 >> 1] > ($3 | 0)) {
$5 = Vector__y_28_29_20const(TorsoCurve__centre_28_29(HEAP32[HEAP32[$0 + 8 >> 2] + ($3 << 2) >> 2]));
if ($5 == Vector__y_28_29_20const($1)) {
$3 = TorsoCurve__ForceOutside_28Vector_20const__2c_20Vector__29_20const(HEAP32[HEAP32[$0 + 8 >> 2] + ($3 << 2) >> 2], $1, $2);
break label$2;
}
if (Vector__y_28_29_20const($1) > Math_fround($6 + $5)) {
if (!($3 & 65535)) {
$0 = HEAP32[$1 + 4 >> 2];
$3 = HEAP32[$1 >> 2];
HEAP32[$2 >> 2] = $3;
HEAP32[$2 + 4 >> 2] = $0;
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$3 = 0;
if (!HEAPU8[67572]) {
break label$2;
}
$6 = Vector__y_28_29_20const($1);
HEAPF64[$4 + 8 >> 3] = $5;
HEAPF64[$4 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26157, $4);
break label$2;
}
$7 = operator_20new_28unsigned_20long_29(136);
$3 = HEAP32[$0 + 8 >> 2] + ($3 << 2) | 0;
$0 = HEAP32[$3 >> 2];
$3 = HEAP32[$3 - 4 >> 2];
$5 = Vector__y_28_29_20const($1);
HEAP32[19359] = 0;
invoke_iiiif(56, $7 | 0, $3 | 0, $0 | 0, Math_fround($5)) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
$3 = TorsoCurve__ForceOutside_28Vector_20const__2c_20Vector__29_20const($7, $1, $2);
if (!(!$3 | !HEAPU8[67572])) {
eprintf_28char_20const__2c_20____29(19672, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(17739);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eputc_28char_29(10);
TorsoCurve__print_28_IO_FILE__2c_20short_29_20const($7, HEAP32[16886], 3);
}
operator_20delete_28void__29($7);
break label$2;
} else {
$3 = $3 + 1 | 0;
continue;
}
}
break;
}
if (Vector__y_28_29_20const($1) > Math_fround(Vector__y_28_29_20const(TorsoCurve__centre_28_29(HEAP32[(HEAP32[$0 + 8 >> 2] + (HEAP16[$0 + 4 >> 1] << 2) | 0) - 4 >> 2])) - $6)) {
$3 = TorsoCurve__ForceOutside_28Vector_20const__2c_20Vector__29_20const(HEAP32[(HEAP32[$0 + 8 >> 2] + (HEAP16[$0 + 4 >> 1] << 2) | 0) - 4 >> 2], $1, $2);
break label$2;
}
if (HEAPU8[67572]) {
$5 = Vector__y_28_29_20const($1);
$6 = Vector__y_28_29_20const(TorsoCurve__centre_28_29(HEAP32[(HEAP32[$0 + 8 >> 2] + (HEAP16[$0 + 4 >> 1] << 2) | 0) - 4 >> 2]));
HEAPF64[$4 + 16 >> 3] = $5;
HEAPF64[$4 + 24 >> 3] = $6;
eprintf_28char_20const__2c_20____29(26103, $4 + 16 | 0);
}
$3 = HEAP32[$1 + 4 >> 2];
$0 = HEAP32[$1 >> 2];
HEAP32[$2 >> 2] = $0;
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$3 = 0;
}
__stack_pointer = $4 + 32 | 0;
return $3 | 0;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($7);
__resumeException($3 | 0);
abort();
}
function normal_scanRef($0, $1, $2, $3) {
var $4 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 1:
break label$10;
case 0:
break label$11;
case 2:
break label$9;
default:
break label$12;
}
}
label$13: {
switch ($4 - 19 | 0) {
case 1:
case 2:
case 4:
break label$2;
case 0:
break label$6;
case 3:
case 5:
break label$8;
default:
break label$13;
}
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 2 | 0;
break label$7;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 3 | 0;
break label$7;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$5;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$2;
}
$1 = $1 + 4 | 0;
break label$7;
}
$1 = $1 + 1 | 0;
}
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = 1;
label$15: {
label$16: {
label$17: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$3;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$16;
}
break label$4;
case 1:
if (($2 - $1 | 0) < 3) {
break label$3;
}
$4 = 3;
if (!(FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0)) {
break label$4;
}
break label$16;
case 13:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$16;
case 2:
break label$17;
default:
break label$4;
}
}
if (($2 - $1 | 0) < 4) {
break label$3;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $1 + 1;
return 9;
}
$4 = normal_scanCharRef($0, $1 + 1 | 0, $2, $3);
}
return $4;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
return -2;
}
HEAP32[$3 >> 2] = $1;
return 0;
}
return -1;
}
function HanimAvatar___HanimAvatar_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$3 = $0 + 56 | 0;
$1 = HEAP32[$0 + 56 >> 2];
if ($1) {
dlfree($1);
HEAP32[$3 >> 2] = 0;
}
$1 = HEAP32[$0 + 60 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 60 >> 2] = 0;
}
$1 = HEAP32[$0 + 228 >> 2];
if ($1) {
operator_20delete_28void__29(AvatarConstraints___AvatarConstraints_28_29($1));
HEAP32[$0 + 228 >> 2] = 0;
}
$1 = HEAP32[$0 + 80 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 80 >> 2] = 0;
}
$1 = HEAP32[$0 + 72 >> 2];
label$5: {
label$6: {
if (!$1) {
break label$6;
}
$1 = HEAP32[$1 + 8 >> 2];
if (!$1) {
break label$6;
}
$1 = HEAP32[$1 + 20 >> 2];
if (!$1) {
break label$6;
}
if (HEAP32[$1 + 16 >> 2]) {
break label$5;
}
}
$1 = HEAP32[$0 + 488 >> 2];
if (!$1) {
break label$5;
}
operator_20delete_28void__29(DynamicArray1_Vector____DynamicArray1_28_29($1));
HEAP32[$0 + 488 >> 2] = 0;
}
$1 = HEAP32[$0 + 76 >> 2];
if ($1) {
AvatarJointNumIndex___AvatarJointNumIndex_28_29($1);
operator_20delete_28void__29($1);
HEAP32[$0 + 76 >> 2] = 0;
}
$1 = HEAP32[$0 + 72 >> 2];
if ($1) {
AvatarJointIndex___AvatarJointIndex_28_29($1);
operator_20delete_28void__29($1);
HEAP32[$0 + 72 >> 2] = 0;
}
label$9: {
$1 = HEAP32[$0 + 104 >> 2];
if (!$1) {
break label$9;
}
$1 = HEAP32[$1 + 12 >> 2];
while (1) {
$2 = HEAP32[$0 + 104 >> 2];
if (($1 | 0) < 0) {
if (!$2) {
break label$9;
}
operator_20delete_28void__29(DynamicArrayP_Joint____DynamicArrayP_28_29($2));
HEAP32[$0 + 104 >> 2] = 0;
break label$9;
}
$2 = DynamicArrayP_Joint___getElement_28int_29_20const($2, $1);
if ($2) {
operator_20delete_28void__29(Joint___Joint_28_29($2));
}
$1 = $1 - 1 | 0;
continue;
}
}
label$13: {
$1 = HEAP32[$0 + 108 >> 2];
if (!$1) {
break label$13;
}
$1 = HEAP32[$1 + 12 >> 2];
while (1) {
$2 = HEAP32[$0 + 108 >> 2];
if (($1 | 0) <= 0) {
if (!$2) {
break label$13;
}
operator_20delete_28void__29(DynamicArrayP_Site____DynamicArrayP_28_29($2));
HEAP32[$0 + 108 >> 2] = 0;
break label$13;
}
$1 = $1 - 1 | 0;
$2 = DynamicArrayP_Site___getElement_28int_29_20const($2, $1);
if (!$2) {
continue;
}
operator_20delete_28void__29(Site___Site_28_29($2));
continue;
}
}
label$16: {
$1 = HEAP32[$0 + 112 >> 2];
if (!$1) {
break label$16;
}
$1 = HEAP32[$1 + 12 >> 2];
while (1) {
$2 = HEAP32[$0 + 112 >> 2];
if (($1 | 0) <= 0) {
if (!$2) {
break label$16;
}
operator_20delete_28void__29(DynamicArrayP_Segment____DynamicArrayP_28_29($2));
HEAP32[$0 + 112 >> 2] = 0;
break label$16;
}
$1 = $1 - 1 | 0;
$2 = DynamicArrayP_Segment___getElement_28int_29_20const($2, $1);
if (!$2) {
continue;
}
operator_20delete_28void__29(Segment___Segment_28_29($2));
continue;
}
}
HEAP32[$0 + 84 >> 2] = 0;
HEAP32[$0 + 88 >> 2] = 0;
HEAP32[$0 + 92 >> 2] = 0;
HEAP32[$0 + 96 >> 2] = 0;
HashAny_char_20const__2c_20int____HashAny_28_29($0 + 200 | 0);
HashAny_SiteID_20const_2c_20Site_____HashAny_28_29($0 + 172 | 0);
HashAny_char_20const__2c_20int____HashAny_28_29($0 + 144 | 0);
HashAny_char_20const__2c_20int____HashAny_28_29($0 + 116 | 0);
while (1) {
$3 = StaticArmData___StaticArmData_28_29($3 - 28 | 0);
if (($3 | 0) != ($0 | 0)) {
continue;
}
break;
}
return $0;
}
function normal_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0]) {
case 4:
$5 = -1;
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$4 | 0] != 93) {
break label$6;
}
if (($1 + 2 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 2 | 0] != 62) {
break label$6;
}
$1 = $1 + 3 | 0;
$5 = 40;
break label$3;
case 9:
$5 = $1 + 1 | 0;
if (($5 | 0) != ($2 | 0)) {
break label$5;
}
return -1;
case 10:
$1 = $1 + 1 | 0;
break label$4;
case 5:
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0) {
break label$9;
}
$4 = $1 + 2 | 0;
break label$6;
case 6:
$5 = -2;
if (($2 - $1 | 0) < 3) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0) {
break label$9;
}
$4 = $1 + 3 | 0;
break label$6;
case 7:
break label$10;
case 0:
case 1:
case 8:
break label$3;
default:
break label$7;
}
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$2;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0)) {
break label$8;
}
}
$5 = 0;
break label$3;
}
$4 = $1 + 4 | 0;
break label$6;
}
$4 = $1 + 1 | 0;
}
$1 = $4;
while (1) {
$5 = 6;
if (($1 | 0) == ($2 | 0)) {
$1 = $2;
break label$3;
}
$4 = 1;
label$18: {
label$19: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0]) {
case 5:
if (($2 - $1 | 0) < 2) {
break label$3;
}
$4 = 2;
if (!(FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0)) {
break label$18;
}
break label$3;
case 6:
if (($2 - $1 | 0) < 3) {
break label$3;
}
$4 = 3;
if (!(FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0)) {
break label$18;
}
break label$3;
case 7:
break label$19;
case 0:
case 1:
case 4:
case 8:
case 9:
case 10:
break label$3;
default:
break label$18;
}
}
if (($2 - $1 | 0) < 4) {
break label$3;
}
$4 = 4;
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0) {
break label$3;
}
}
$1 = $1 + $4 | 0;
continue;
}
}
$1 = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0] == 10 ? $1 + 2 | 0 : $5;
}
$5 = 7;
}
HEAP32[$3 >> 2] = $1;
}
return $5 | 0;
}
function HanimAvatar__createArmSegment_28char_20const__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 208 | 0;
__stack_pointer = $2;
while (1) {
Vector__Vector_28_29(($2 - -64 | 0) + Math_imul($3, 12) | 0);
$3 = $3 + 1 | 0;
if (($3 | 0) != 12) {
continue;
}
break;
}
HEAP8[$2 + 60 | 0] = HEAPU8[$1 | 0];
HEAP8[$2 + 58 | 0] = 65;
HEAP8[$2 + 59 | 0] = 45;
$4 = HEAPU8[$1 + 1 | 0];
$3 = 0;
HEAP8[$2 + 62 | 0] = 0;
HEAP8[$2 + 63 | 0] = 0;
HEAP8[$2 + 61 | 0] = $4;
$6 = $1 + 4 | 0;
label$2: {
label$3: {
while (1) {
if (($3 | 0) == 4) {
break label$3;
}
HEAP8[$2 + 62 | 0] = HEAPU8[$3 + $6 | 0];
$4 = Math_imul($3, 12);
$3 = $3 + 1 | 0;
if (HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $2 + 58 | 0, ($2 - -64 | 0) + $4 | 0)) {
continue;
}
break;
}
LogTime_28_29();
HEAP32[$2 + 48 >> 2] = $2 + 58;
eprintf_28char_20const__2c_20____29(25710, $2 + 48 | 0);
break label$2;
}
$3 = 0;
$4 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $2 + 58 | 0);
if ($4) {
$7 = HEAP32[$4 + 16 >> 2];
}
$8 = HEAP32[$7 + 20 >> 2];
HEAP8[$2 + 61 | 0] = HEAPU8[$1 + 2 | 0];
$5 = ($7 | 0) != 0 & ($8 | 0) != 0;
$4 = 4;
while (1) {
if (($3 | 0) != 4) {
HEAP8[$2 + 62 | 0] = HEAPU8[$3 + $6 | 0];
label$8: {
if ($5) {
if (HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $2 + 58 | 0, ($2 - -64 | 0) + Math_imul($4, 12) | 0)) {
break label$8;
}
}
LogTime_28_29();
HEAP32[$2 + 32 >> 2] = $2 + 58;
eprintf_28char_20const__2c_20____29(25710, $2 + 32 | 0);
break label$2;
}
$5 = 1;
$3 = $3 + 1 | 0;
$4 = $4 + 1 | 0;
continue;
}
break;
}
HEAP8[$2 + 61 | 0] = HEAPU8[$1 + 3 | 0];
$3 = 0;
$4 = 8;
while (1) {
if (($3 | 0) != 4) {
HEAP8[$2 + 62 | 0] = HEAPU8[$3 + $6 | 0];
label$12: {
if ($5) {
if (HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $2 + 58 | 0, ($2 - -64 | 0) + Math_imul($4, 12) | 0)) {
break label$12;
}
}
LogTime_28_29();
HEAP32[$2 + 16 >> 2] = $2 + 58;
eprintf_28char_20const__2c_20____29(25710, $2 + 16 | 0);
break label$2;
}
$5 = 1;
$3 = $3 + 1 | 0;
$4 = $4 + 1 | 0;
continue;
}
break;
}
label$14: {
$3 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $2 + 58 | 0);
if (!$3) {
break label$14;
}
$3 = HEAP32[$3 + 16 >> 2];
if (!(($3 | 0) != 0 & $5)) {
break label$14;
}
$4 = $3 + 40 | 0;
$3 = 8;
while (1) if (($3 | 0) == 12) {
$4 = $7 + 68 | 0;
$3 = 0;
while (1) if (($3 | 0) == 12) {
wasm2js_i32$0 = $8, wasm2js_i32$1 = IFS_spec__OctagonalCylinder_28short_2c_20Vector_20const__29(3, $2 - -64 | 0), 
HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
break label$2;
} else {
Transform__transformVector_28Vector__29_20const($4, ($2 - -64 | 0) + Math_imul($3, 12) | 0);
$3 = $3 + 1 | 0;
continue;
}
} else {
Transform__transformVector_28Vector__29_20const($4, ($2 - -64 | 0) + Math_imul($3, 12) | 0);
$3 = $3 + 1 | 0;
continue;
}
}
LogTime_28_29();
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(43737, $2);
}
__stack_pointer = $2 + 208 | 0;
}
function convertGlossToID_28HashAny_char_20const__2c_20char_20const____29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$6 = __stack_pointer - 32 | 0;
__stack_pointer = $6;
$2 = copyString_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, 3314));
$3 = copyString_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, 9556));
$4 = copyString_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, 9571));
stringToLower_28char__29($2);
stringToLower_28char__29($3);
stringToLower_28char__29($4);
$0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 16 | 0);
label$1: {
label$2: {
label$3: {
if (!$2) {
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, 11078) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$1 = invoke_iii(713, $6 | 0, $0 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$5 = HEAP32[18866];
invoke_vii(714, $1 | 0, $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
break label$3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
break label$1;
}
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, $2 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
}
if ($3) {
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, 11082) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
}
if ($4) {
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, 11082) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_iii(386, $0 | 0, $4 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
}
dlfree($2);
dlfree($3);
dlfree($4);
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0);
HEAP32[19359] = 0;
$4 = invoke_ii(290, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
__stack_pointer = $6 + 32 | 0;
return $4;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
__resumeException($2 | 0);
abort();
}
function OneHCircMoveSpec__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
label$2: {
label$3: {
if (Vector__x_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Vector__y_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Vector__z_28_29_20const($0) == Math_fround(0)) {
break label$2;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22393, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 12 | 0;
label$4: {
label$5: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$4;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22378, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 24 | 0;
label$6: {
label$7: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$6;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22363, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPF32[$0 + 60 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 60 >> 2];
HEAP32[$3 + 16 >> 2] = 3;
HEAPF64[$3 + 24 >> 3] = $4;
__small_fprintf($1, 29168, $3 + 16 | 0);
}
if (HEAPF32[$0 + 64 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 64 >> 2];
HEAP32[$3 >> 2] = 3;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 29189, $3);
}
$2 = $0 + 36 | 0;
label$10: {
label$11: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$11;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$11;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$10;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22320, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$0 = $0 + 48 | 0;
label$12: {
if (Vector__x_28_29_20const($0) != Math_fround(0)) {
break label$12;
}
if (Vector__y_28_29_20const($0) != Math_fround(0)) {
break label$12;
}
if (Vector__z_28_29_20const($0) == Math_fround(0)) {
break label$1;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23215, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $3 + 32 | 0;
}
function DirectedMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 144 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 + 128 >> 2] = $0;
fiprintf($1, 32422, $2 + 128 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
$3 = $0 + 528 | 0;
if (!Direction3__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22785, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 540 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23111, $1);
HEAP32[$2 + 112 >> 2] = HEAP32[$0 + 540 >> 2];
fiprintf($1, 30758, $2 + 112 | 0);
}
$3 = $0 + 544 | 0;
if (!Direction3__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22763, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 556 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23094, $1);
HEAP32[$2 + 96 >> 2] = HEAP32[$0 + 556 >> 2];
fiprintf($1, 30758, $2 + 96 | 0);
}
$3 = $0 + 560 | 0;
if (!Direction2__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23121, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 568 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23060, $1);
HEAP32[$2 + 80 >> 2] = HEAP32[$0 + 568 >> 2];
fiprintf($1, 30758, $2 + 80 | 0);
}
if (HEAP32[$0 + 572 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23662, $1);
HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 572 >> 2];
fiprintf($1, 30758, $2 - -64 | 0);
}
if (HEAP32[$0 + 576 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23043, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 576 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
}
if (HEAP32[$0 + 580 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22570, $1);
HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 580 >> 2];
fiprintf($1, 30758, $2 + 32 | 0);
}
if (HEAP32[$0 + 584 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22998, $1);
HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 584 >> 2];
fiprintf($1, 30758, $2 + 16 | 0);
}
$3 = $0 + 588 | 0;
if (!Direction2__isUndef_28_29_20const($3)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22740, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($3, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPU16[$0 + 596 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23645, $1);
HEAP32[$2 >> 2] = HEAP16[$0 + 596 >> 1];
fiprintf($1, 30758, $2);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23911, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
TwoHDirMoveSpec__print_28_IO_FILE__29_20const($0 + 600 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 144 | 0;
}
function Handshape__SiteToHullVector_28Site__2c_20Vector_20const__2c_20Vector__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
$5 = __stack_pointer - 96 | 0;
__stack_pointer = $5;
Vector__setFrom_28Vector_20const__29($3, $2);
Vector__setUnit_28_29($3);
$4 = Vector__Vector_28_29($5 + 80 | 0);
HandJointRotations__transferSiteToWrist_28Vector__2c_20Site__29(HEAP32[$0 + 236 >> 2], $4, $1);
$11 = Vector__dotProduct_28Vector_20const__29_20const($4, $3);
$4 = HEAPU8[$0 + 232 | 0];
$9 = HEAP32[($4 << 2) + 75456 >> 2];
$6 = Math_fround(-1e5);
$4 = 0;
$8 = 65535;
while (1) {
if (HEAP32[$9 + 12 >> 2] <= ($4 | 0)) {
$4 = 70304;
if (($8 & 65535) != 65535) {
$4 = DynamicArrayP_Site___getElement_28int_29_20const($9, $8 << 16 >> 16) + 12 | 0;
}
$4 = HEAP32[$4 >> 2];
HEAP32[$5 + 56 >> 2] = $4;
HEAP32[$5 + 64 >> 2] = $4;
$7 = HEAP32[$1 + 12 >> 2];
HEAP32[$5 + 48 >> 2] = $7;
HEAP32[$5 + 28 >> 2] = $4;
HEAP32[$5 + 24 >> 2] = $7;
$7 = $1 + 12 | 0;
label$4: {
if (operator___28SiteID_2c_20SiteID_29_1($5 + 28 | 0, $5 + 24 | 0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(17363, 0);
SiteID__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(17774, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(32715, 0);
Site__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
}
Vector__setZero_28_29($3);
$6 = Math_fround(0);
break label$4;
}
HEAP32[$5 + 40 >> 2] = $4;
HEAP32[$5 + 20 >> 2] = $4;
$4 = HEAP32[17576];
HEAP32[$5 + 32 >> 2] = $4;
HEAP32[$5 + 16 >> 2] = $4;
if (operator___28SiteID_2c_20SiteID_29_1($5 + 20 | 0, $5 + 16 | 0)) {
$6 = Math_fround(0);
if (!HEAPU8[67570]) {
break label$4;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(17339, 0);
SiteID__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(17774, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eputc_28char_29(10);
break label$4;
}
$6 = Math_fround($6 - $11);
$6 = $6 < Math_fround(0) ? Math_fround(-$6) : $6;
Vector__setLength_28float_29($3, $6);
if (!HEAPU8[67570]) {
break label$4;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(17636, 0);
SiteID__print_28_IO_FILE__29_20const($7, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(17774, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(17071, 0);
SiteID__print_28_IO_FILE__29_20const($5 - -64 | 0, HEAP32[16886]);
HEAPF64[$5 >> 3] = $6;
eprintf_28char_20const__2c_20____29(40127, $5);
}
__stack_pointer = $5 + 96 | 0;
} else {
$7 = Vector__Vector_28_29($5 - -64 | 0);
$12 = DynamicArrayP_Site___getElement_28int_29_20const($9, $4);
HandJointRotations__transferSiteToWrist_28Vector__2c_20Site__29(HEAP32[$0 + 236 >> 2], $7, $12);
$10 = Vector__dotProduct_28Vector_20const__29_20const($7, $3);
$7 = $10 > $6;
$6 = $7 ? $10 : $6;
$8 = $7 ? $4 : $8;
$4 = $4 + 1 | 0;
continue;
}
break;
}
return $6;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
$9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
if ($9 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
$10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
label$2: {
if (($9 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
HEAP32[$8 + 8 >> 2] = $1 << 1;
HEAP32[$8 + 12 >> 2] = $1 + $2;
$2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0, $8 + 8 | 0) >> 2]);
break label$2;
}
$2 = $9 - 1 | 0;
}
$11 = $2 + 1 | 0;
$2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $11);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
if ($4) {
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($10), $4);
}
if ($6) {
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2) + $4 | 0, $7, $6);
}
$7 = $4 + $5 | 0;
$9 = $3 - $7 | 0;
if (($3 | 0) != ($7 | 0)) {
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($10) + $4 | 0) + $5 | 0, $9);
}
$1 = $1 + 1 | 0;
if (($1 | 0) != 11) {
std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $10, $1);
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $11);
$4 = ($4 + $6 | 0) + $9 | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
HEAP8[$8 + 7 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0, $8 + 7 | 0);
__stack_pointer = $8 + 16 | 0;
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0);
abort();
}
function normal_scanPercent($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -22;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 4:
case 5:
case 16:
break label$10;
case 3:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 18:
break label$4;
case 17:
case 19:
break label$6;
case 2:
break label$7;
case 1:
break label$8;
case 0:
break label$9;
default:
break label$11;
}
}
if (($4 | 0) != 30) {
break label$4;
}
}
$5 = 22;
break label$4;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 2 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 3 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 4 | 0;
break label$5;
}
$1 = $1 + 1 | 0;
}
while (1) {
if (($1 | 0) == ($2 | 0)) {
return -1;
}
$4 = 1;
label$14: {
label$15: {
label$16: {
$6 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($6 - 18 | 0) {
case 0:
break label$14;
case 4:
case 6:
case 7:
case 8:
case 9:
break label$15;
case 1:
case 2:
case 3:
case 5:
break label$4;
default:
break label$16;
}
}
label$17: {
switch ($6 - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$15;
}
break label$4;
case 1:
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = 3;
if (FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0) {
break label$15;
}
break label$4;
case 2:
break label$17;
default:
break label$4;
}
}
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
$1 = $1 + 1 | 0;
$5 = 28;
}
HEAP32[$3 >> 2] = $1;
$4 = $5;
}
return $4;
}
return -2;
}
function doParseXmlDecl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
var $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$10 = __stack_pointer - 16 | 0;
__stack_pointer = $10;
HEAP32[$10 + 8 >> 2] = 0;
HEAP32[$10 + 4 >> 2] = 0;
HEAP32[$10 >> 2] = 0;
$11 = HEAP32[$1 + 64 >> 2];
$2 = Math_imul($11, 5) + $2 | 0;
HEAP32[$10 + 12 >> 2] = $2;
label$1: {
label$2: {
label$3: {
$11 = $3 - ($11 << 1) | 0;
if (!parsePseudoAttribute($1, $2, $11, $10 + 4 | 0, $10, $10 + 8 | 0, $10 + 12 | 0)) {
break label$3;
}
$2 = HEAP32[$10 + 4 >> 2];
if (!$2) {
break label$3;
}
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$3 = HEAP32[$10 >> 2];
label$9: {
if (!(FUNCTION_TABLE[HEAP32[$1 + 24 >> 2]]($1, $2, $3, 51817) | 0)) {
if ($0) {
break label$9;
}
break label$2;
}
if ($5) {
HEAP32[$5 >> 2] = HEAP32[$10 + 8 >> 2];
}
$3 = HEAP32[$10 + 12 >> 2];
if ($6) {
HEAP32[$6 >> 2] = $3;
}
if (!parsePseudoAttribute($1, $3, $11, $10 + 4 | 0, $10, $10 + 8 | 0, $10 + 12 | 0)) {
break label$3;
}
$2 = HEAP32[$10 + 4 >> 2];
if (!$2) {
break label$8;
}
$3 = HEAP32[$10 >> 2];
}
if (FUNCTION_TABLE[HEAP32[$1 + 24 >> 2]]($1, $2, $3, 51825) | 0) {
$2 = HEAP32[$10 + 8 >> 2];
if ((toAscii($1, $2, $11) & -33) - 65 >>> 0 > 25) {
break label$2;
}
if ($7) {
HEAP32[$7 >> 2] = $2;
}
$3 = HEAP32[$10 + 12 >> 2];
if ($8) {
wasm2js_i32$0 = $8, wasm2js_i32$1 = findEncoding($1, $2, $3 - HEAP32[$1 + 64 >> 2] | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
if (!parsePseudoAttribute($1, $3, $11, $10 + 4 | 0, $10, $10 + 8 | 0, $10 + 12 | 0)) {
break label$3;
}
$2 = HEAP32[$10 + 4 >> 2];
if (!$2) {
break label$4;
}
$3 = HEAP32[$10 >> 2];
}
$3 = FUNCTION_TABLE[HEAP32[$1 + 24 >> 2]]($1, $2, $3, 51834) | 0;
if (!$3 | $0) {
break label$2;
}
$2 = HEAP32[$10 + 8 >> 2];
$3 = HEAP32[$10 + 12 >> 2];
if (!(FUNCTION_TABLE[HEAP32[$1 + 24 >> 2]]($1, $2, $3 - HEAP32[$1 + 64 >> 2] | 0, 51845) | 0)) {
break label$7;
}
$2 = 1;
if ($9) {
break label$6;
}
break label$5;
}
if ($0) {
break label$3;
}
break label$4;
}
if (!(FUNCTION_TABLE[HEAP32[$1 + 24 >> 2]]($1, $2, $3 - HEAP32[$1 + 64 >> 2] | 0, 51849) | 0)) {
break label$2;
}
$2 = 0;
if (!$9) {
break label$5;
}
}
HEAP32[$9 >> 2] = $2;
}
while (1) {
if (isSpace(toAscii($1, $3, $11))) {
$3 = HEAP32[$1 + 64 >> 2] + $3 | 0;
continue;
}
break;
}
HEAP32[$10 + 12 >> 2] = $3;
$2 = $3;
if (($11 | 0) != ($2 | 0)) {
break label$2;
}
}
$1 = 1;
break label$1;
}
$2 = HEAP32[$10 + 12 >> 2];
}
HEAP32[$4 >> 2] = $2;
$1 = 0;
}
__stack_pointer = $10 + 16 | 0;
return $1;
}
function SiGMLConstellation__AnalyseHandConstellation_28XMLCell__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$4 = HEAP32[$1 + 8 >> 2];
switch (HEAP32[$4 + 12 >> 2]) {
case 2:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$5;
}
}
if (!HEAPU8[67553]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(35205, 0);
break label$1;
}
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 0);
if (!HEAPU8[67553]) {
$5 = 0;
break label$3;
}
$5 = 0;
$7 = 33780;
break label$4;
}
$6 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 1);
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 0);
if (!HEAPU8[67553]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(33814, 0);
break label$2;
}
$6 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 1);
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 0);
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, 2);
if (!HEAPU8[67553]) {
break label$3;
}
$7 = 35231;
}
eprintf_28char_20const__2c_20____29($7, 0);
}
if (!$4) {
break label$2;
}
$4 = HEAP32[$4 + 4 >> 2];
$7 = HEAPU16[35148];
HEAP16[$3 + 40 >> 1] = $7;
HEAP16[$3 + 14 >> 1] = $7;
MakeSiteIDPair_28SiteIDPair__2c_20HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_29($0 + 72 | 0, $4, $3 + 14 | 0, 1, $2);
}
if ($6) {
$4 = HEAP32[$6 + 4 >> 2];
$6 = HEAPU16[35148];
HEAP16[$3 + 24 >> 1] = $6;
HEAP16[$3 + 12 >> 1] = $6;
SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($3 + 32 | 0, $4, $3 + 12 | 0, 0, 1, $2);
HEAP8[$0 + 66 | 0] = HEAPU8[$3 + 34 | 0];
HEAP16[$0 + 64 >> 1] = HEAPU16[$3 + 32 >> 1];
ForceHandTouchProximity_28SiteID__29($0 - -64 | 0);
}
if (!$5) {
break label$1;
}
$4 = HEAP32[$5 + 4 >> 2];
$5 = HEAPU16[35148];
HEAP16[$3 + 16 >> 1] = $5;
HEAP16[$3 + 10 >> 1] = $5;
SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($3 + 32 | 0, $4, $3 + 10 | 0, 0, 0, $2);
HEAP8[$0 + 70 | 0] = HEAPU8[$3 + 34 | 0];
HEAP16[$0 + 68 >> 1] = HEAPU16[$3 + 32 >> 1];
ForceHandTouchProximity_28SiteID__29($0 + 68 | 0);
}
$1 = SiGML__convertProximity_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$1 + 4 >> 2], 2955));
HEAP32[$0 + 48 >> 2] = $1 ? $1 : 3;
if (HEAPU8[67553]) {
eprintf_28char_20const__2c_20____29(32478, 0);
eputs_28char_20const__29(19645);
SiteID__print_28_IO_FILE__29_20const($0 - -64 | 0, HEAP32[16886]);
eputc_28char_29(10);
eputs_28char_20const__29(19631);
SiteID__print_28_IO_FILE__29_20const($0 + 68 | 0, HEAP32[16886]);
eputc_28char_29(10);
}
__stack_pointer = $3 + 48 | 0;
}
function HanimAvatar__createQuincunxCentreSite_28SiteID_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 160 | 0;
__stack_pointer = $2;
$7 = Vector__Vector_28_29($2 + 144 | 0);
while (1) {
Vector__Vector_28_29(($2 + 80 | 0) + Math_imul($3, 12) | 0);
$3 = $3 + 1 | 0;
if (($3 | 0) != 5) {
continue;
}
break;
}
$8 = $0 + 172 | 0;
$3 = 1;
label$2: {
while (1) {
if (($3 | 0) == 5) {
if (!$9) {
LogTime_28_29();
eputs_28char_20const__29(21144);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eputs_28char_20const__29(35278);
break label$2;
}
} else {
$4 = HEAPU8[$1 + 2 | 0];
$5 = HEAPU16[$1 >> 1];
HEAP8[$2 + 67 | 0] = HEAPU8[$1 + 3 | 0];
$4 = ($4 << 16 | $5) & 16748543 | $3 << 12;
HEAP16[$2 + 64 >> 1] = $4;
HEAP8[$2 + 66 | 0] = $4 >>> 16;
HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 64 >> 2];
$5 = ($2 + 75 | 0) + $3 | 0;
$4 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($8, $2 + 20 | 0);
if ($4) {
Site__getLocalPosition_28Vector__29($4, ($2 + 80 | 0) + Math_imul($3, 12) | 0);
$6 = Math_fround($6 + HEAPF32[$4 + 20 >> 2]);
$9 = HEAP32[$4 + 16 >> 2];
$4 = 1;
} else {
$4 = 0;
}
HEAP8[$5 | 0] = $4;
$3 = $3 + 1 | 0;
continue;
}
break;
}
$5 = HEAPU8[$2 + 78 | 0];
$8 = HEAPU8[$2 + 79 | 0];
$4 = !$5 | !$8;
label$9: {
label$10: {
$10 = HEAPU8[$2 + 76 | 0];
$3 = HEAPU8[$2 + 77 | 0];
if (!(!$10 | !$3)) {
if ($4) {
break label$10;
}
$3 = Vector__Vector_28_29($2 + 48 | 0);
$4 = Vector__Vector_28_29($2 + 32 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($3, $2 + 80 | 12, $2 + 104 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($4, $2 + 116 | 0, $2 + 128 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($7, $3, $4);
$6 = Math_fround($6 * Math_fround(.25));
break label$9;
}
if (!$4) {
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($7, $2 + 116 | 0, $2 + 128 | 0);
$6 = Math_fround($6 * Math_fround(.5));
break label$9;
}
LogTime_28_29();
eputs_28char_20const__29(21144);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
$1 = boolchar_28bool_29(($10 | 0) != 0);
$3 = boolchar_28bool_29(($3 & 255) != 0);
$5 = boolchar_28bool_29(($5 | 0) != 0);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(($8 | 0) != 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
HEAP32[$2 + 8 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(45593, $2);
break label$2;
}
$3 = $2 + 104 | 0;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($7, $3, $3);
$6 = Math_fround($6 * Math_fround(.5));
}
HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
$3 = Vector__Vector_28_29($2 + 48 | 0);
HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
Site__setLocalPosition_28Vector_20const__29(HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $2 + 16 | 0, $9, $3, $6), $7);
}
__stack_pointer = $2 + 160 | 0;
}
function XMLCell__mergeXMLCell_28XMLCell_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
if (strcmp(HEAP32[$0 >> 2], HEAP32[$1 >> 2])) {
break label$1;
}
if (HEAP32[$1 + 12 >> 2]) {
UNIMPLEMENTED_28char_20const__29(2268);
}
$4 = HEAP32[$1 + 4 >> 2];
HashAny_char_20const__2c_20char_20const____startIteration_28_29_20const($3 + 8 | 0, $4);
HEAP32[$3 + 4 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
label$3: {
label$4: {
while (1) {
if (!HashAny_char_20const__2c_20char_20const____nextIteration_28char_20const___2c_20char_20const___2c_20HashAny_char_20const__2c_20char_20const____Iterator__29_20const($4, $3 + 4 | 0, $3, $3 + 8 | 0)) {
break label$4;
}
$5 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
$2 = HEAP32[$3 + 4 >> 2];
$2 = invoke_iii(729, $5 | 0, $2 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
label$6: {
if (($5 | 0) == 1) {
break label$6;
}
$6 = HEAP32[$0 + 4 >> 2];
if (HEAP32[$6 + 20 >> 2] != ($2 | 0)) {
continue;
}
HEAP32[19359] = 0;
$2 = HEAP32[$3 + 4 >> 2];
$5 = invoke_ii(290, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
HEAP32[19359] = 0;
$2 = HEAP32[$3 >> 2];
$7 = invoke_ii(290, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
HEAP32[19359] = 0;
invoke_viii(730, $6 | 0, $5 | 0, $7 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
continue;
}
}
break;
}
break label$3;
}
$5 = HEAP32[$1 + 8 >> 2];
$6 = 0;
while (1) {
$2 = $6 << 16 >> 16;
if (($2 | 0) >= HEAP32[$5 + 12 >> 2]) {
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($3 + 8 | 0);
break label$1;
}
label$9: {
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($5, $2);
label$10: {
if (!$4) {
break label$10;
}
$7 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
$7 = invoke_iii(264, $0 | 0, $7 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$9;
}
if (!$7) {
$7 = HEAP32[$0 + 8 >> 2];
HEAP32[19359] = 0;
invoke_vii(731, $7 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$9;
}
HEAP32[19359] = 0;
invoke_viii(732, $5 | 0, $2 | 0, 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$10;
}
break label$9;
}
HEAP32[19359] = 0;
invoke_vii(733, $7 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$9;
}
}
$6 = $6 + 1 | 0;
continue;
}
break;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($3 + 8 | 0);
__resumeException($0 | 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function AtomicTimedMorph__getMorphAmount_28float_29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
$2 = __stack_pointer - 192 | 0;
__stack_pointer = $2;
$3 = HEAPF32[$0 + 4 >> 2];
label$1: {
if ($3 >= $1) {
$3 = Math_fround(0);
if (!HEAPU8[67582]) {
break label$1;
}
$0 = HEAP32[$0 + 24 >> 2];
$0 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $0);
HEAP32[$2 + 176 >> 2] = 0;
HEAP32[$2 + 180 >> 2] = 0;
HEAP32[$2 + 168 >> 2] = $0;
HEAPF64[$2 + 160 >> 3] = $1;
eprintf_28char_20const__2c_20____29(30050, $2 + 160 | 0);
break label$1;
}
$5 = HEAPF32[$0 + 8 >> 2];
if ($5 >= $1) {
$6 = HEAPF32[$0 + 32 >> 2];
$3 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2] - $6) * Trajectory__lookupByFraction_28float_29_20const(HEAP32[17595], Math_fround(Math_fround($1 - $3) / Math_fround($5 - $3)))));
if (!HEAPU8[67582]) {
break label$1;
}
$0 = HEAP32[$0 + 24 >> 2];
$0 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $0);
HEAPF64[$2 + 144 >> 3] = $3;
HEAP32[$2 + 136 >> 2] = $0;
HEAPF64[$2 + 128 >> 3] = $1;
eprintf_28char_20const__2c_20____29(25125, $2 + 128 | 0);
break label$1;
}
label$4: {
$3 = HEAPF32[$0 + 12 >> 2];
if ($3 < Math_fround(0)) {
if (!HEAPU8[67582]) {
break label$4;
}
$4 = HEAP32[$0 + 24 >> 2];
$4 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $4);
HEAPF64[$2 + 16 >> 3] = HEAPF32[$0 + 28 >> 2];
HEAP32[$2 + 8 >> 2] = $4;
HEAPF64[$2 >> 3] = $1;
eprintf_28char_20const__2c_20____29(30239, $2);
break label$4;
}
if ($1 <= $3) {
if (!HEAPU8[67582]) {
break label$4;
}
$4 = HEAP32[$0 + 24 >> 2];
$4 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $4);
HEAPF64[$2 + 112 >> 3] = HEAPF32[$0 + 28 >> 2];
HEAP32[$2 + 104 >> 2] = $4;
HEAPF64[$2 + 96 >> 3] = $1;
eprintf_28char_20const__2c_20____29(26060, $2 + 96 | 0);
break label$4;
}
$5 = HEAPF32[$0 + 16 >> 2];
if ($5 >= $1) {
$6 = HEAPF32[$0 + 36 >> 2];
$3 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2] - $6) * Math_fround(Math_fround(1) - Trajectory__lookupByFraction_28float_29_20const(HEAP32[17595], Math_fround(Math_fround($1 - $3) / Math_fround($5 - $3))))));
if (!HEAPU8[67582]) {
break label$1;
}
$4 = HEAP32[$0 + 24 >> 2];
$4 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $4);
$5 = HEAPF32[$0 + 36 >> 2];
HEAPF64[$2 + 80 >> 3] = $3;
HEAPF64[$2 + 88 >> 3] = $5;
HEAP32[$2 + 72 >> 2] = $4;
HEAPF64[$2 + 64 >> 3] = $1;
eprintf_28char_20const__2c_20____29(28179, $2 - -64 | 0);
break label$1;
}
$3 = Math_fround(0);
if (!HEAPU8[67582]) {
break label$1;
}
$0 = HEAP32[$0 + 24 >> 2];
$0 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $0);
HEAP32[$2 + 48 >> 2] = 0;
HEAP32[$2 + 52 >> 2] = 0;
HEAP32[$2 + 40 >> 2] = $0;
HEAPF64[$2 + 32 >> 3] = $1;
eprintf_28char_20const__2c_20____29(25915, $2 + 32 | 0);
break label$1;
}
$3 = HEAPF32[$0 + 28 >> 2];
}
__stack_pointer = $2 + 192 | 0;
return $3;
}
function HanimAnimationRecord__calcHipMovement_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$4 = __stack_pointer - 224 | 0;
__stack_pointer = $4;
label$1: {
if (!HEAPU8[$0 + 80 | 0]) {
break label$1;
}
$5 = HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2];
if (!HEAP32[$5 + 228 >> 2] | !HEAP32[$5 + 232 >> 2] | (!HEAP32[$5 + 212 >> 2] | !HEAP32[$5 + 216 >> 2])) {
break label$1;
}
$5 = Vector__Vector_28_29($4 + 208 | 0);
$11 = Vector__Vector_28_29($4 + 192 | 0);
$6 = Quaternion__Quaternion_28_29($4 + 176 | 0);
$7 = Quaternion__Quaternion_28_29($4 + 160 | 0);
$8 = Quaternion__Quaternion_28_29($4 + 144 | 0);
$9 = Quaternion__Quaternion_28_29($4 + 128 | 0);
$10 = Quaternion__Quaternion_28_29($4 + 112 | 0);
HEAP32[$4 + 108 >> 2] = 0;
FourBar_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20float_2c_20float_2c_20Vector__2c_20Vector__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20Quaternion__2c_20float__29(Vector__Vector_28Vector_20const__29($4 + 96 | 0, HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2] + 68 | 0), Vector__Vector_28Vector_20const__29($4 + 80 | 0, HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 232 >> 2] + 68 | 0), Vector__Vector_28Vector_20const__29($4 - -64 | 0, HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 212 >> 2] + 68 | 0), Vector__Vector_28Vector_20const__29($4 + 48 | 0, HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 216 >> 2] + 68 | 0), Vector__Vector_28Vector_20const__29($4 + 32 | 0, HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] >> 2] + 68 | 0), $1, $2, $3, $5, $11, $6, $7, $8, $9, $10, $4 + 108 | 0);
HEAPF64[$4 + 16 >> 3] = $3;
HEAPF64[$4 + 8 >> 3] = $2;
HEAPF64[$4 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47251, $4);
eprintf_28char_20const__2c_20____29(18408, 0);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2] + 68 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(18279, 0);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2] + 40 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
Joint__rotateJointGlobal_28Quaternion_20const__29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2], $6);
eprintf_28char_20const__2c_20____29(18408, 0);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2] + 68 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(18279, 0);
Transform__print_28_IO_FILE__2c_20int_29_20const(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 228 >> 2] + 40 | 0, HEAP32[16886], 3);
eputc_28char_29(10);
Joint__rotateJointGlobal_28Quaternion_20const__29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 232 >> 2], $7);
Joint__rotateJointGlobal_28Quaternion_20const__29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 212 >> 2], $8);
Joint__rotateJointGlobal_28Quaternion_20const__29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] + 216 >> 2], $9);
Joint__rotateJointGlobal_28Quaternion_20const__29(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 72 >> 2] >> 2], $10);
}
__stack_pointer = $4 + 224 | 0;
}
function std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $1, $2) {
var $3 = 0;
std____2____libcpp_mutex_lock_28pthread_mutex_t__29(77468);
while (1) {
if (HEAP32[$0 >> 2] == 1) {
std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29(77492, 77468);
continue;
}
break;
}
label$3: {
label$4: {
label$5: {
if (!HEAP32[$0 >> 2]) {
void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0, 1);
HEAP32[19359] = 0;
std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(77468);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$7: {
if (($3 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
invoke_vi($2 | 0, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
std____2____libcpp_mutex_lock_28pthread_mutex_t__29(77468);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0);
HEAP32[19359] = 0;
std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(77468);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
std____2____libcpp_condvar_broadcast_28pthread_cond_t__29(77492);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$5;
}
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
__cxa_begin_catch($1 | 0) | 0;
HEAP32[19359] = 0;
std____2____libcpp_mutex_lock_28pthread_mutex_t__29(77468);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$8: {
if (($1 | 0) == 1) {
break label$8;
}
void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0, 0);
HEAP32[19359] = 0;
std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(77468);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
std____2____libcpp_condvar_broadcast_28pthread_cond_t__29(77492);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$8;
}
HEAP32[19359] = 0;
invoke_v(925);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$3;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$4;
}
__resumeException($1 | 0);
abort();
}
std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(77468);
}
return;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
}
abort();
}
function scanexp($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
$2 = HEAP32[$0 + 4 >> 2];
label$6: {
if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $2 + 1;
$3 = HEAPU8[$2 | 0];
break label$6;
}
$3 = __shgetc($0);
}
switch ($3 - 43 | 0) {
case 0:
case 2:
break label$5;
default:
break label$4;
}
}
$7 = ($3 | 0) == 45;
$1 = !$1;
$2 = HEAP32[$0 + 4 >> 2];
label$8: {
if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$8;
}
$2 = __shgetc($0);
}
$4 = $2 - 58 | 0;
if ($1 | $4 >>> 0 > 4294967285) {
break label$3;
}
if (HEAP32[$0 + 116 >> 2] < 0) {
break label$2;
}
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
break label$2;
}
$4 = $3 - 58 | 0;
$2 = $3;
$7 = 0;
}
if ($4 >>> 0 < 4294967286) {
break label$2;
}
$4 = $2 - 48 | 0;
if ($4 >>> 0 < 10) {
$3 = 0;
while (1) {
$3 = Math_imul($3, 10) + $2 | 0;
$3 = $3 - 48 | 0;
$1 = ($3 | 0) < 214748364;
$2 = HEAP32[$0 + 4 >> 2];
label$12: {
if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$12;
}
$2 = __shgetc($0);
}
$4 = $2 - 48 | 0;
if ($1 & $4 >>> 0 <= 9) {
continue;
}
break;
}
$5 = $3 >> 31;
$6 = $3;
}
label$14: {
if ($4 >>> 0 >= 10) {
break label$14;
}
while (1) {
$6 = __wasm_i64_mul($6, $5, 10, 0);
$5 = i64toi32_i32$HIGH_BITS;
$3 = $5;
$1 = $2 + $6 | 0;
$3 = $1 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
$6 = $1 - 48 | 0;
$1 = $1 >>> 0 < 48;
$1 = $3 - $1 | 0;
$5 = $1;
$2 = HEAP32[$0 + 4 >> 2];
label$16: {
if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$16;
}
$2 = __shgetc($0);
}
$4 = $2 - 48 | 0;
if ($4 >>> 0 > 9) {
break label$14;
}
$3 = $6;
$1 = $5;
if ($3 >>> 0 < 2061584302 & ($1 | 0) <= 21474836 | ($1 | 0) < 21474836) {
continue;
}
break;
}
}
if ($4 >>> 0 < 10) {
while (1) {
$2 = HEAP32[$0 + 4 >> 2];
label$20: {
if (($2 | 0) != HEAP32[$0 + 104 >> 2]) {
HEAP32[$0 + 4 >> 2] = $2 + 1;
$2 = HEAPU8[$2 | 0];
break label$20;
}
$2 = __shgetc($0);
}
if ($2 - 48 >>> 0 < 10) {
continue;
}
break;
}
}
$1 = HEAP32[$0 + 116 >> 2];
if (($1 | 0) > 0 | ($1 | 0) >= 0) {
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
}
$1 = $5;
$0 = 0 - ($1 + (($6 | 0) != 0) | 0) | 0;
$3 = $6;
$1 = $7;
$3 = $1 ? 0 - $3 | 0 : $3;
$6 = $3;
$5 = $1 ? $0 : $5;
break label$1;
}
$5 = -2147483648;
$3 = HEAP32[$0 + 116 >> 2];
if (($3 | 0) < 0) {
break label$1;
}
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
i64toi32_i32$HIGH_BITS = -2147483648;
return 0;
}
$3 = $5;
i64toi32_i32$HIGH_BITS = $3;
$1 = $6;
return $1;
}
function Gesture__MakeArmHandConstellation_28ArmHandConstellation_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 112 | 0;
__stack_pointer = $5;
$2 = HEAP32[$0 + 40 >> 2];
if ($2) {
operator_20delete_28void__29(ArmHandConstellation___ArmHandConstellation_28_29($2));
HEAP32[$0 + 40 >> 2] = 0;
}
$3 = operator_20new_28unsigned_20long_29(68);
$4 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$4 = invoke_iii(364, $5 + 24 | 0, $4 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$2: {
label$3: {
if (($2 | 0) != 1) {
$2 = HEAPU8[$0 + 13 | 0];
$2 = makeHands_28bool_2c_20bool_29(($2 & 4) >>> 2 | 0, ($2 & 8) >>> 3 | 0);
$6 = HEAPU16[$0 + 14 >> 1];
HEAP16[$5 + 16 >> 1] = $6;
$7 = HEAPU8[$0 + 13 | 0];
HEAP32[19359] = 0;
HEAP16[$5 + 14 >> 1] = $6;
invoke_iiiiiii(365, $3 | 0, $4 | 0, $1 | 0, $2 | 0, $5 + 14 | 0, ($7 & 64) >>> 6 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
HEAP32[$0 + 40 >> 2] = $3;
SiGMLConstellation___SiGMLConstellation_28_29($4);
$2 = HEAP32[$0 + 20 >> 2];
label$5: {
if (!$2 | !(HEAPU8[$0 + 13 | 0] & 4) | HEAP32[HEAP32[$2 + 56 >> 2] >> 2] != 1) {
break label$5;
}
$2 = HEAP32[$0 + 40 >> 2];
$4 = $2 + 38 | 0;
$3 = HEAPU16[$2 + 36 >> 1] | HEAPU8[$4 | 0] << 16;
if (($3 & 255) != 1) {
break label$5;
}
HEAP8[$2 + 38 | 0] = $3 >>> 16;
HEAP16[$2 + 36 >> 1] = $3 & 65280 | 9;
$2 = HEAP32[$0 + 40 >> 2];
HEAP16[$2 + 36 >> 1] = HEAPU16[$2 + 36 >> 1] & 36863 | 8192;
$3 = MakeDigit_28DigitIndex_29(2);
$2 = HEAP32[$0 + 40 >> 2];
$4 = HEAPU16[$2 + 36 >> 1];
$1 = $2;
$2 = $2 + 38 | 0;
$3 = (HEAPU8[$2 | 0] << 16 | $4) & 15761407 | ($3 & 31) << 15;
HEAP16[$1 + 36 >> 1] = $3;
HEAP8[$1 + 38 | 0] = $3 >>> 16;
if (!HEAPU8[67570]) {
break label$5;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37450, 0);
}
$2 = HEAP32[$0 + 24 >> 2];
label$6: {
if (!$2 | !(HEAPU8[$0 + 13 | 0] & 8) | HEAP32[HEAP32[$2 + 56 >> 2] >> 2] != 1) {
break label$6;
}
$2 = HEAP32[$0 + 40 >> 2];
$4 = $2 + 42 | 0;
$3 = HEAPU16[$2 + 40 >> 1] | HEAPU8[$4 | 0] << 16;
if (($3 & 255) != 1) {
break label$6;
}
HEAP8[$2 + 42 | 0] = $3 >>> 16;
HEAP16[$2 + 40 >> 1] = $3 & 65280 | 9;
$2 = HEAP32[$0 + 40 >> 2];
HEAP16[$2 + 40 >> 1] = HEAPU16[$2 + 40 >> 1] & 36863 | 8192;
$2 = MakeDigit_28DigitIndex_29(2);
$0 = HEAP32[$0 + 40 >> 2];
$3 = HEAPU16[$0 + 40 >> 1];
$1 = $0;
$0 = $0 + 42 | 0;
$2 = (HEAPU8[$0 | 0] << 16 | $3) & 15761407 | ($2 & 31) << 15;
HEAP16[$1 + 40 >> 1] = $2;
HEAP8[$1 + 42 | 0] = $2 >>> 16;
if (!HEAPU8[67570]) {
break label$6;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37372, 0);
}
__stack_pointer = $5 + 112 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiGMLConstellation___SiGMLConstellation_28_29($4);
}
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function ASDdata__readJoint_28XMLCell__2c_20short_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 112 | 0;
__stack_pointer = $4;
HEAP16[$4 + 110 >> 1] = $2;
label$1: {
if (!$1) {
break label$1;
}
$6 = XMLCell__attrib_string_28char_20const__29($1, 10767);
if (!$6) {
$6 = XMLCell__attrib_string_28char_20const__29($1, 9332);
}
$7 = XMLCell__attrib_string_28char_20const__29($1, 5978);
$5 = XMLCell__attrib_string_28char_20const__29($1, 6108);
if (!$6) {
LogTime_28_29();
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(44305, $4);
break label$1;
}
if (!$7) {
LogTime_28_29();
HEAP32[$4 + 16 >> 2] = $6;
eprintf_28char_20const__2c_20____29(36911, $4 + 16 | 0);
break label$1;
}
if (!$5) {
LogTime_28_29();
HEAP32[$4 + 32 >> 2] = $6;
eprintf_28char_20const__2c_20____29(36878, $4 + 32 | 0);
break label$1;
}
$2 = Vector__Vector_28_29($4 + 96 | 0);
parseVector_28Vector__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($2, $7, $6);
Vector__setScale_28float_29($2, $3);
$7 = Quaternion__Quaternion_28_29($4 + 80 | 0);
parseQuaternion_28Quaternion__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($7, $5, $6);
$9 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[$0 + 12 >> 2], $6);
$5 = HEAP32[$0 + 12 >> 2];
if (($9 | 0) == HEAP32[$5 + 12 >> 2]) {
InvertibleDynamicStringArray__addElement_28char_20const__29($5, $6);
$5 = InvertibleDynamicStringArray__length_28_29_20const(HEAP32[$0 + 12 >> 2]);
$8 = $5 - 1 | 0;
DynamicArray_short_2c_20_28short_29_1___setElement_28int_2c_20short_20const__29(HEAP32[$0 + 16 >> 2], $8, $4 + 110 | 0);
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 20 >> 2], $8, $2);
DynamicArray1_Quaternion___setElement_28int_2c_20Quaternion_20const__29(HEAP32[$0 + 24 >> 2], $8, $7);
$2 = 0;
$10 = HEAP32[$1 + 8 >> 2];
$1 = HEAP32[$10 + 12 >> 2];
$9 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($2 | 0) == ($9 | 0)) {
break label$1;
}
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const($10, $2);
$7 = HEAP32[$5 >> 2];
label$8: {
if (!strcmp($7, 2262)) {
ASDdata__readJoint_28XMLCell__2c_20short_2c_20float_29($0, $5, $8 << 16 >> 16, $3);
break label$8;
}
if (!strcmp($7, 9035)) {
ASDdata__readFeature_28XMLCell__2c_20short_2c_20float_29($0, $5, $8 << 16 >> 16, $3);
break label$8;
}
LogTime_28_29();
$1 = HEAP32[$5 >> 2];
HEAP32[$4 + 52 >> 2] = $6;
HEAP32[$4 + 48 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36944, $4 + 48 | 0);
}
$2 = $2 + 1 | 0;
continue;
}
}
LogTime_28_29();
wasm2js_i32$0 = $4, wasm2js_i32$1 = InvertibleDynamicStringArray__length_28_29_20const(HEAP32[$0 + 12 >> 2]), 
HEAP32[wasm2js_i32$0 + 72 >> 2] = wasm2js_i32$1;
HEAP32[$4 + 68 >> 2] = $9;
HEAP32[$4 + 64 >> 2] = $6;
eprintf_28char_20const__2c_20____29(38121, $4 - -64 | 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 15) | 0, 60484, 0);
abort();
}
__stack_pointer = $4 + 112 | 0;
}
function little2_scanPercent($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
if (($1 | 0) == ($2 | 0)) {
return -22;
}
$5 = HEAPU8[$1 | 0];
$6 = 22;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$7 = HEAPU8[$1 + 1 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 4:
case 5:
case 16:
break label$3;
case 17:
case 19:
break label$4;
case 2:
break label$5;
case 1:
break label$6;
case 0:
break label$7;
case 3:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 18:
break label$8;
default:
break label$9;
}
}
label$12: {
switch ($4 - 29 | 0) {
case 0:
break label$12;
case 1:
break label$3;
default:
break label$8;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
break label$4;
}
}
$6 = 0;
break label$3;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
label$13: {
label$14: {
label$15: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
return -1;
}
$5 = HEAPU8[$4 + 2 | 0];
$6 = 0;
label$18: {
label$19: {
$8 = HEAPU8[$4 + 3 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 13:
break label$13;
case 2:
break label$14;
case 1:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$18;
case 24:
break label$19;
default:
break label$3;
}
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
continue;
}
break;
}
$4 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
$1 = $4 + 4 | 0;
$6 = 28;
}
HEAP32[$3 >> 2] = $1;
$4 = $6;
}
return $4;
}
function big2_scanPercent($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
if (($1 | 0) == ($2 | 0)) {
return -22;
}
$5 = HEAPU8[$1 + 1 | 0];
$6 = 22;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$7 = HEAPU8[$1 | 0];
if ($7) {
$4 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 4:
case 5:
case 16:
break label$3;
case 17:
case 19:
break label$4;
case 2:
break label$5;
case 1:
break label$6;
case 0:
break label$7;
case 3:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 18:
break label$8;
default:
break label$9;
}
}
label$12: {
switch ($4 - 29 | 0) {
case 0:
break label$12;
case 1:
break label$3;
default:
break label$8;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
break label$4;
}
}
$6 = 0;
break label$3;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$6 = 0;
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
label$13: {
label$14: {
label$15: {
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
return -1;
}
$5 = HEAPU8[$4 + 3 | 0];
$6 = 0;
label$18: {
label$19: {
$8 = HEAPU8[$4 + 2 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $5 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 13:
break label$13;
case 2:
break label$14;
case 1:
break label$15;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$18;
case 24:
break label$19;
default:
break label$3;
}
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$3;
}
continue;
}
break;
}
$4 = -2;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
$1 = $4 + 4 | 0;
$6 = 28;
}
HEAP32[$3 >> 2] = $1;
$4 = $6;
}
return $4;
}
function CannedHandshape__CannedHandshape_28FingerBending_2c_20FingerBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20short_2c_20HandshapeClass_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
$8 = $8 | 0;
$9 = $9 | 0;
$10 = $10 | 0;
$11 = $11 | 0;
$12 = $12 | 0;
$13 = $13 | 0;
$14 = $14 | 0;
var $15 = 0, $16 = 0, $17 = 0;
$17 = $1;
$16 = HEAP32[$17 >> 2];
$15 = HEAP32[$17 + 4 >> 2];
$1 = $16;
$16 = $0;
HEAP32[$16 >> 2] = $1;
HEAP32[$16 + 4 >> 2] = $15;
$16 = HEAP32[$17 + 12 >> 2];
$15 = HEAP32[$17 + 8 >> 2];
$1 = $15;
$15 = $0;
HEAP32[$15 + 8 >> 2] = $1;
HEAP32[$15 + 12 >> 2] = $16;
$17 = $2;
$16 = HEAP32[$17 >> 2];
$15 = HEAP32[$17 + 4 >> 2];
$1 = $16;
$16 = $0;
HEAP32[$16 + 16 >> 2] = $1;
HEAP32[$16 + 20 >> 2] = $15;
$16 = HEAP32[$17 + 12 >> 2];
$15 = HEAP32[$17 + 8 >> 2];
$1 = $15;
$15 = $0;
HEAP32[$15 + 24 >> 2] = $1;
HEAP32[$15 + 28 >> 2] = $16;
$1 = $15 + 152 | 0;
$2 = $15 + 32 | 0;
while (1) {
$2 = ThumbBending__ThumbBending_28_29($2) + 20 | 0;
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
HEAP32[$0 + 156 >> 2] = $14;
HEAP16[$0 + 152 >> 1] = $13;
$17 = $4;
$16 = HEAP32[$17 >> 2];
$15 = HEAP32[$17 + 4 >> 2];
$4 = $16;
$2 = $0 + 32 | 0;
$1 = $2 + Math_imul($3, 20) | 0;
$16 = $1;
HEAP32[$16 >> 2] = $4;
HEAP32[$16 + 4 >> 2] = $15;
HEAP32[$16 + 16 >> 2] = HEAP32[$17 + 16 >> 2];
$16 = HEAP32[$17 + 12 >> 2];
$15 = HEAP32[$17 + 8 >> 2];
$3 = $15;
$15 = $1;
HEAP32[$15 + 8 >> 2] = $3;
HEAP32[$15 + 12 >> 2] = $16;
$1 = Math_imul($5, 20) + $2 | 0;
HEAP32[$1 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
$17 = $6;
$16 = HEAP32[$17 + 8 >> 2];
$15 = HEAP32[$17 + 12 >> 2];
$3 = $16;
$16 = $1;
HEAP32[$16 + 8 >> 2] = $3;
HEAP32[$16 + 12 >> 2] = $15;
$16 = HEAP32[$17 + 4 >> 2];
$15 = HEAP32[$17 >> 2];
$3 = $15;
$15 = $1;
HEAP32[$15 >> 2] = $3;
HEAP32[$15 + 4 >> 2] = $16;
$1 = Math_imul($7, 20) + $2 | 0;
HEAP32[$1 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
$17 = $8;
$16 = HEAP32[$17 + 8 >> 2];
$15 = HEAP32[$17 + 12 >> 2];
$3 = $16;
$16 = $1;
HEAP32[$16 + 8 >> 2] = $3;
HEAP32[$16 + 12 >> 2] = $15;
$16 = HEAP32[$17 + 4 >> 2];
$15 = HEAP32[$17 >> 2];
$3 = $15;
$15 = $1;
HEAP32[$15 >> 2] = $3;
HEAP32[$15 + 4 >> 2] = $16;
$1 = Math_imul($9, 20) + $2 | 0;
HEAP32[$1 + 16 >> 2] = HEAP32[$10 + 16 >> 2];
$17 = $10;
$16 = HEAP32[$17 + 8 >> 2];
$15 = HEAP32[$17 + 12 >> 2];
$3 = $16;
$16 = $1;
HEAP32[$16 + 8 >> 2] = $3;
HEAP32[$16 + 12 >> 2] = $15;
$16 = HEAP32[$17 + 4 >> 2];
$15 = HEAP32[$17 >> 2];
$3 = $15;
$15 = $1;
HEAP32[$15 >> 2] = $3;
HEAP32[$15 + 4 >> 2] = $16;
$2 = Math_imul($11, 20) + $2 | 0;
HEAP32[$2 + 16 >> 2] = HEAP32[$12 + 16 >> 2];
$17 = $12;
$16 = HEAP32[$17 + 8 >> 2];
$15 = HEAP32[$17 + 12 >> 2];
$1 = $16;
$16 = $2;
HEAP32[$16 + 8 >> 2] = $1;
HEAP32[$16 + 12 >> 2] = $15;
$16 = HEAP32[$17 + 4 >> 2];
$15 = HEAP32[$17 >> 2];
$1 = $15;
$15 = $2;
HEAP32[$15 >> 2] = $1;
HEAP32[$15 + 4 >> 2] = $16;
return $0 | 0;
}
function setContext($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$8 = $0 + 356 | 0;
$6 = $0 + 400 | 0;
$7 = HEAP32[$0 + 340 >> 2];
$9 = $7 + 132 | 0;
$10 = $7 + 80 | 0;
$11 = $7 + 60 | 0;
label$1: {
label$2: while (1) {
$4 = $1;
while (1) {
if (!HEAPU8[$1 | 0]) {
$2 = 1;
break label$1;
}
label$5: {
label$6: {
label$7: {
$2 = HEAPU8[$4 | 0];
if ($2) {
if (($2 | 0) == 61) {
break label$7;
}
if (($2 | 0) != 12) {
break label$6;
}
}
$2 = HEAP32[$0 + 412 >> 2];
if (($2 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$5;
}
$2 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $2 + 1;
HEAP8[$2 | 0] = 0;
$2 = lookup($7, HEAP32[$0 + 416 >> 2], 0);
if ($2) {
HEAP8[$2 + 32 | 0] = 1;
}
$2 = HEAPU8[$4 | 0];
HEAP32[$0 + 412 >> 2] = HEAP32[$0 + 416 >> 2];
$1 = (($2 | 0) != 0) + $4 | 0;
continue label$2;
}
$1 = $9;
$3 = HEAP32[$0 + 412 >> 2];
if (($3 | 0) != HEAP32[$0 + 416 >> 2]) {
if (HEAP32[$0 + 408 >> 2] == ($3 | 0)) {
if (!poolGrow($6)) {
break label$5;
}
$3 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $3 + 1;
$2 = 0;
HEAP8[$3 | 0] = 0;
$1 = lookup($11, HEAP32[$0 + 416 >> 2], 8);
if (!$1) {
break label$1;
}
$3 = HEAP32[$0 + 416 >> 2];
$5 = HEAP32[$1 >> 2];
if (($3 | 0) == ($5 | 0)) {
$3 = poolCopyString($10, $5);
HEAP32[$1 >> 2] = $3;
if (!$3) {
break label$1;
}
$3 = HEAP32[$0 + 416 >> 2];
}
HEAP32[$0 + 412 >> 2] = $3;
}
while (1) {
label$15: {
$3 = $4 + 1 | 0;
$2 = HEAPU8[$4 + 1 | 0];
if (!$2 | ($2 | 0) == 12) {
break label$15;
}
$4 = HEAP32[$0 + 412 >> 2];
if (($4 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$5;
}
$4 = HEAP32[$0 + 412 >> 2];
$2 = HEAPU8[$3 | 0];
}
HEAP32[$0 + 412 >> 2] = $4 + 1;
HEAP8[$4 | 0] = $2;
$4 = $3;
continue;
}
break;
}
$5 = HEAP32[$0 + 412 >> 2];
if (($5 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$5;
}
$5 = HEAP32[$0 + 412 >> 2];
}
HEAP32[$0 + 412 >> 2] = $5 + 1;
$2 = 0;
HEAP8[$5 | 0] = 0;
if (addBinding($0, $1, 0, HEAP32[$0 + 416 >> 2], $8)) {
break label$1;
}
HEAP32[$0 + 412 >> 2] = HEAP32[$0 + 416 >> 2];
$1 = HEAPU8[$4 + 1 | 0] ? $4 + 2 | 0 : $3;
continue label$2;
}
$3 = HEAP32[$0 + 412 >> 2];
if (($3 | 0) == HEAP32[$0 + 408 >> 2]) {
if (!poolGrow($6)) {
break label$5;
}
$3 = HEAP32[$0 + 412 >> 2];
$2 = HEAPU8[$4 | 0];
}
HEAP32[$0 + 412 >> 2] = $3 + 1;
HEAP8[$3 | 0] = $2;
$4 = $4 + 1 | 0;
continue;
}
break;
}
break;
}
return 0;
}
return $2;
}
function XmlInitUnknownEncoding($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
while (1) if (($4 | 0) == 364) {
while (1) {
label$4: {
label$5: {
if (($5 | 0) == 128) {
$4 = 0;
while (1) {
if (($4 | 0) != 256) {
$6 = $4 << 2;
$5 = HEAP32[$6 + $1 >> 2];
label$9: {
if (($5 | 0) == -1) {
HEAP8[($0 + $4 | 0) + 72 | 0] = 1;
HEAP16[(($4 << 1) + $0 | 0) + 372 >> 1] = 65535;
HEAP16[($0 + $6 | 0) + 884 >> 1] = 1;
break label$9;
}
if (($5 | 0) < 0) {
if ($5 >>> 0 < 4294967292) {
break label$5;
}
HEAP8[($0 + $4 | 0) + 72 | 0] = 3 - $5;
HEAP8[($0 + $6 | 0) + 884 | 0] = 0;
HEAP16[(($4 << 1) + $0 | 0) + 372 >> 1] = 0;
break label$9;
}
if ($5 >>> 0 <= 127) {
$7 = HEAPU8[$5 + 63592 | 0];
if (!(!$7 | ($7 | 0) == 28) & ($4 | 0) != ($5 | 0)) {
break label$5;
}
HEAP8[($0 + $4 | 0) + 72 | 0] = $7;
$6 = $0 + $6 | 0;
HEAP8[$6 + 885 | 0] = $5;
HEAP8[$6 + 884 | 0] = 1;
HEAP16[(($4 << 1) + $0 | 0) + 372 >> 1] = $5 ? $5 : -1;
break label$9;
}
if ((checkCharRefNumber($5) | 0) < 0) {
HEAP8[($0 + $4 | 0) + 72 | 0] = 0;
HEAP16[(($4 << 1) + $0 | 0) + 372 >> 1] = 65535;
HEAP16[($0 + $6 | 0) + 884 >> 1] = 1;
break label$9;
}
if ($5 >>> 0 > 65535) {
break label$5;
}
$8 = 1 << $5;
$9 = ($5 >>> 5 & 7) << 2;
$7 = $5 >>> 8 | 0;
label$14: {
if ($8 & HEAP32[($9 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2]) {
HEAP8[($0 + $4 | 0) + 72 | 0] = 22;
break label$14;
}
$10 = $0 + $4 | 0;
if (HEAP32[(HEAPU8[$7 + 51504 | 0] << 5 | $9) + 49968 >> 2] & $8) {
HEAP8[$10 + 72 | 0] = 26;
break label$14;
}
HEAP8[$10 + 72 | 0] = 28;
}
$6 = $0 + $6 | 0;
wasm2js_i32$0 = $6, wasm2js_i32$1 = XmlUtf8Encode($5, $6 + 885 | 0), HEAP8[wasm2js_i32$0 + 884 | 0] = wasm2js_i32$1;
HEAP16[(($4 << 1) + $0 | 0) + 372 >> 1] = $5;
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 + 364 >> 2] = $2;
HEAP32[$0 + 368 >> 2] = $3;
if ($2) {
HEAP32[$0 + 360 >> 2] = 824;
HEAP32[$0 + 356 >> 2] = 824;
HEAP32[$0 + 352 >> 2] = 824;
HEAP32[$0 + 348 >> 2] = 825;
HEAP32[$0 + 344 >> 2] = 825;
HEAP32[$0 + 340 >> 2] = 825;
HEAP32[$0 + 336 >> 2] = 826;
HEAP32[$0 + 332 >> 2] = 826;
HEAP32[$0 + 328 >> 2] = 826;
$4 = 0;
}
HEAP32[$0 + 60 >> 2] = 827;
HEAP32[$0 + 56 >> 2] = 828;
return $0;
}
$4 = HEAPU8[$5 + 63592 | 0];
if (!$4 | ($4 | 0) == 28 | HEAP32[($5 << 2) + $1 >> 2] == ($5 | 0)) {
break label$4;
}
}
return 0;
}
$5 = $5 + 1 | 0;
continue;
}
} else {
HEAP8[$0 + $4 | 0] = HEAPU8[$4 + 63520 | 0];
$4 = $4 + 1 | 0;
continue;
}
}
function TorsoCurve__initialise_28_29($0) {
var $1 = Math_fround(0), $2 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__x_28_29_20const(TorsoCurve__centre_28_29($0)), 
HEAPF32[wasm2js_i32$0 + 124 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__z_28_29_20const(TorsoCurve__farleft_28_29($0)), 
HEAPF32[wasm2js_i32$0 + 128 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__z_28_29_20const(TorsoCurve__farright_28_29($0)), 
HEAPF32[wasm2js_i32$0 + 132 >> 2] = wasm2js_f32$0;
Vector__set_x_28float_29($0, maxREAL_28float_2c_20float_29(Vector__x_28_29_20const($0), Math_fround(Vector__x_28_29_20const($0 + 12 | 0) + Math_fround(.019999999552965164))));
$2 = $0 + 48 | 0;
Vector__set_x_28float_29($2, minREAL_28float_2c_20float_29(Vector__x_28_29_20const($2), Math_fround(Vector__x_28_29_20const($0 + 36 | 0) + Math_fround(-.019999999552965164))));
$2 = $0 + 72 | 0;
MakeCircle_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__2c_20float__29(Vector__x_28_29_20const(TorsoCurve__farleft_28_29($0)), Vector__x_28_29_20const(TorsoCurve__left_28_29($0)), Math_fround(Vector__z_28_29_20const(TorsoCurve__left_28_29($0)) - HEAPF32[$0 + 128 >> 2]), $0 + 60 | 0, $0 - -64 | 0, $0 + 68 | 0, $2);
$1 = Math_fround(Vector__z_28_29_20const(TorsoCurve__centre_28_29($0)) - HEAPF32[$0 + 128 >> 2]);
$2 = $0 + 92 | 0;
label$1: {
if (MakeEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29($1, Math_fround(Vector__x_28_29_20const(TorsoCurve__left_28_29($0)) - HEAPF32[$0 + 124 >> 2]), Math_fround(Vector__z_28_29_20const(TorsoCurve__left_28_29($0)) - HEAPF32[$0 + 128 >> 2]), HEAPF32[$0 + 72 >> 2], $0 + 104 | 0, $2)) {
$1 = Math_fround($1 - HEAPF32[$0 + 104 >> 2]);
break label$1;
}
$1 = HEAPF32[$0 + 92 >> 2];
HEAP32[$0 + 92 >> 2] = 0;
}
HEAPF32[$0 + 96 >> 2] = $1;
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__x_28_29_20const(TorsoCurve__left_28_29($0)), 
HEAPF32[wasm2js_i32$0 + 100 >> 2] = wasm2js_f32$0;
$2 = $0 + 88 | 0;
MakeCircle_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__2c_20float__29(Vector__x_28_29_20const(TorsoCurve__farright_28_29($0)), Vector__x_28_29_20const(TorsoCurve__right_28_29($0)), Math_fround(Vector__z_28_29_20const(TorsoCurve__right_28_29($0)) - HEAPF32[$0 + 132 >> 2]), $0 + 76 | 0, $0 + 80 | 0, $0 + 84 | 0, $2);
$1 = Math_fround(Vector__z_28_29_20const(TorsoCurve__centre_28_29($0)) - HEAPF32[$0 + 132 >> 2]);
$2 = $0 + 108 | 0;
label$3: {
if (MakeEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29($1, Math_fround(Vector__x_28_29_20const(TorsoCurve__right_28_29($0)) - HEAPF32[$0 + 124 >> 2]), Math_fround(Vector__z_28_29_20const(TorsoCurve__right_28_29($0)) - HEAPF32[$0 + 132 >> 2]), HEAPF32[$0 + 88 >> 2], $0 + 120 | 0, $2)) {
$1 = Math_fround($1 - HEAPF32[$0 + 120 >> 2]);
break label$3;
}
$1 = HEAPF32[$0 + 108 >> 2];
HEAP32[$0 + 108 >> 2] = 0;
}
HEAPF32[$0 + 112 >> 2] = $1;
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__x_28_29_20const(TorsoCurve__right_28_29($0)), 
HEAPF32[wasm2js_i32$0 + 116 >> 2] = wasm2js_f32$0;
TorsoCurve__checkValidTorsoCurve_28_29_20const($0);
}
function AvatarJointNumIndex__AvatarJointNumIndex_28AvatarJointIndex_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$7 = DynamicArray_int_2c_20_1___DynamicArray_28_29($0 + 100 | 0);
HEAP32[19359] = 0;
$8 = invoke_ii(273, $0 + 116 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($3 | 0) != 1) {
HEAP16[$0 >> 1] = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
HEAP16[$0 + 2 >> 1] = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
HEAP16[$0 + 4 >> 1] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
label$3: while (1) {
if (($4 | 0) == 2) {
$5 = $1 + 252 | 0;
$2 = 0;
label$5: {
while (1) {
label$7: {
if (HEAP32[$1 + 264 >> 2] <= ($2 | 0)) {
$5 = $1 + 236 | 0;
$2 = 0;
while (1) {
if (HEAP32[$1 + 248 >> 2] <= ($2 | 0)) {
break label$5;
}
$4 = DynamicArrayP_Joint___getElement_28int_29_20const($5, $2);
HEAP32[19359] = 0;
invoke_vii(274, $7 | 0, $4 + 4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$7;
}
$2 = $2 + 1 | 0;
continue;
}
}
$4 = DynamicArrayP_Joint___getElement_28int_29_20const($5, $2);
HEAP32[19359] = 0;
invoke_vii(274, $8 | 0, $4 + 4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArray_int_2c_20_1____DynamicArray_28_29($8);
break label$1;
}
return $0 | 0;
}
$2 = ($4 << 1) + $0 | 0;
$3 = ($4 << 2) + $1 | 0;
HEAP16[$2 + 6 >> 1] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
$5 = -1;
$6 = -1;
$9 = HEAP32[$3 + 212 >> 2];
if ($9) {
$6 = HEAP32[$9 + 4 >> 2];
}
HEAP16[$2 + 86 >> 1] = $6;
$6 = HEAP32[$3 + 220 >> 2];
if ($6) {
$5 = HEAP32[$6 + 4 >> 2];
}
HEAP16[$2 + 90 >> 1] = $5;
$3 = HEAP32[$3 + 228 >> 2];
if ($3) {
$3 = HEAP32[$3 + 4 >> 2];
} else {
$3 = -1;
}
HEAP16[$2 + 94 >> 1] = $3;
$3 = 0;
$2 = 0;
while (1) {
if (($2 | 0) != 4) {
HEAP16[((($4 << 3) + $0 | 0) + ($2 << 1) | 0) + 10 >> 1] = HEAP32[HEAP32[((($4 << 4) + $1 | 0) + ($2 << 2) | 0) + 20 >> 2] + 4 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
while (1) {
$2 = 0;
if (($3 | 0) == 5) {
$4 = $4 + 1 | 0;
continue label$3;
} else {
while (1) {
if (($2 | 0) != 3) {
HEAP16[(((Math_imul($4, 30) + $0 | 0) + Math_imul($3, 6) | 0) + ($2 << 1) | 0) + 26 >> 1] = HEAP32[HEAP32[(((Math_imul($4, 60) + $1 | 0) + Math_imul($3, 12) | 0) + ($2 << 2) | 0) + 52 >> 2] + 4 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
$3 = $3 + 1 | 0;
continue;
}
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
DynamicArray_int_2c_20_1____DynamicArray_28_29($7);
__resumeException($2 | 0);
abort();
}
function SiGMLConstellation__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if ($1) {
if (!SiteIDPair__isUndef_28_29_20const($0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23896, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 12 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23842, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 16 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22286, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 28 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22248, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 40 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23821, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 44 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23797, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 - -64 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23782, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 68 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23764, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 72 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22306, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$0 = HEAP32[$0 + 48 >> 2];
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18218], $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
fiprintf($1, 25848, $3);
}
__stack_pointer = $3 + 16 | 0;
}
function Gesture__PostProcess_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = __stack_pointer - 352 | 0;
__stack_pointer = $2;
if (HEAPU8[67586]) {
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24373, $2);
}
$3 = $0 + 44 | 0;
SimplifyMovement_28BasicMovement___29($3);
$5 = ArmHandConstellation__ArmHandConstellation_28_29($2 + 280 | 0);
HEAP32[19359] = 0;
$6 = invoke_ii(361, $2 + 192 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
if (($1 | 0) != 1) {
$1 = HEAP32[$0 + 44 >> 2];
$4 = HEAP32[HEAP32[$1 >> 2] + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $1 | 0, $6 | 0, $5 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
$3 = HEAP32[$0 + 44 >> 2];
$1 = PostureChangeFlags__PostureChangeFlags_28_29($2 + 184 | 0);
$4 = PostureChangeFlags__PostureChangeFlags_28_29($2 + 176 | 0);
$7 = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($7 | 0, $3 | 0, $1 | 0, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$6;
}
PostureChangeFlags___PostureChangeFlags_28_29($4);
PostureChangeFlags___PostureChangeFlags_28_29($1);
$3 = HEAP32[$0 + 44 >> 2];
$1 = HEAP32[HEAP32[$3 >> 2] + 36 >> 2];
HEAP32[19359] = 0;
invoke_vi($1 | 0, $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$3 = invoke_iii(362, $2 + 8 | 0, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$5;
}
$1 = HEAP32[$0 + 44 >> 2];
$4 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $1 | 0, $0 | 0, $3 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$4;
}
TwoHAbstractPosture___TwoHAbstractPosture_28_29($3);
TwoHandStuff___TwoHandStuff_28_29($6);
ArmHandConstellation___ArmHandConstellation_28_29($5);
__stack_pointer = $2 + 352 | 0;
return;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($4);
PostureChangeFlags___PostureChangeFlags_28_29($1);
break label$3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHAbstractPosture___TwoHAbstractPosture_28_29($3);
}
TwoHandStuff___TwoHandStuff_28_29($6);
}
ArmHandConstellation___ArmHandConstellation_28_29($5);
__resumeException($2 | 0);
abort();
}
function little2_scanRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$5 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
$7 = HEAPU8[$1 + 1 | 0];
if ($7) {
$6 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 0:
break label$3;
case 1:
break label$4;
case 2:
break label$5;
default:
break label$6;
}
}
label$9: {
switch ($6 - 19 | 0) {
default:
if (($6 | 0) != 29) {
break label$2;
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$2;
}
case 3:
case 5:
label$12: {
label$13: {
label$14: {
while (1) {
$6 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$4 = HEAPU8[$6 + 2 | 0];
label$16: {
label$17: {
$8 = HEAPU8[$6 + 3 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $4 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 13:
break label$12;
case 2:
break label$13;
case 1:
break label$14;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$16;
case 24:
break label$17;
default:
break label$2;
}
}
if (HEAP32[($4 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $4 & 1) {
continue;
}
break label$2;
}
break;
}
$5 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$1;
}
break label$2;
}
HEAP32[$3 >> 2] = $6 + 4;
return 9;
case 1:
case 2:
case 4:
break label$2;
case 0:
break label$9;
}
}
return little2_scanCharRef($0, $1 + 2 | 0, $2, $3);
}
$5 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$5 = 0;
}
return $5;
}
function big2_scanRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$5 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
$7 = HEAPU8[$1 | 0];
if ($7) {
$6 = unicode_byte_type($7 << 24 >> 24, $4 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($6 - 5 | 0) {
case 0:
break label$3;
case 1:
break label$4;
case 2:
break label$5;
default:
break label$6;
}
}
label$9: {
switch ($6 - 19 | 0) {
default:
if (($6 | 0) != 29) {
break label$2;
}
if (!(HEAP32[($4 >>> 3 & 28 | HEAPU8[$7 + 51248 | 0] << 5) + 49968 >> 2] >>> $4 & 1)) {
break label$2;
}
case 3:
case 5:
label$12: {
label$13: {
label$14: {
while (1) {
$6 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$4 = HEAPU8[$6 + 3 | 0];
label$16: {
label$17: {
$8 = HEAPU8[$6 + 2 | 0];
if ($8) {
$7 = unicode_byte_type($8 << 24 >> 24, $4 << 24 >> 24);
} else {
$7 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($7 - 5 | 0) {
case 13:
break label$12;
case 2:
break label$13;
case 1:
break label$14;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 0:
break label$16;
case 24:
break label$17;
default:
break label$2;
}
}
if (HEAP32[($4 >>> 3 & 28 | HEAPU8[$8 + 51504 | 0] << 5) + 49968 >> 2] >>> $4 & 1) {
continue;
}
break label$2;
}
break;
}
$5 = -2;
if (($2 - $1 | 0) >= 2) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) < 4) {
break label$1;
}
break label$2;
}
HEAP32[$3 >> 2] = $6 + 4;
return 9;
case 1:
case 2:
case 4:
break label$2;
case 0:
break label$9;
}
}
return big2_scanCharRef($0, $1 + 2 | 0, $2, $3);
}
$5 = -2;
if (($2 - $1 | 0) >= 4) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) >= 3) {
break label$2;
}
break label$1;
}
$5 = -2;
if (($2 - $1 | 0) < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$5 = 0;
}
return $5;
}
function SeqMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
HEAP16[$3 + 56 >> 1] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8;
$1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
HEAP32[19359] = 0;
HEAP16[$3 + 48 >> 1] = $1;
invoke_viii(416, $0 | 0, $3 + 56 | 0, $3 + 48 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($1 | 0) != 1) {
PostureChangeFlags___PostureChangeFlags_28_29($3 + 48 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 56 | 0);
$2 = HEAP32[$0 + 540 >> 2] << 16;
if (!$2) {
break label$1;
}
$7 = $0 + 528 | 0;
$4 = ($2 >> 16) - 1 | 0;
$8 = ($4 | 0) > 0 ? $4 : 0;
$5 = PostureChangeFlags__PostureChangeFlags_28_29($3 + 40 | 0);
$6 = PostureChangeFlags__PostureChangeFlags_28_29($3 + 32 | 0);
$2 = 0;
label$4: {
label$5: {
while (1) {
if (($2 | 0) == ($8 | 0)) {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, $4);
HEAP16[$3 + 8 >> 1] = HEAPU16[$0 + 508 >> 1];
HEAP16[$3 >> 1] = HEAPU16[$0 + 510 >> 1];
$0 = HEAP32[HEAP32[$2 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($0 | 0, $2 | 0, $3 + 8 | 0, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$5;
}
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 8 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($6);
PostureChangeFlags___PostureChangeFlags_28_29($5);
break label$1;
}
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, $2);
HEAP16[$3 + 24 >> 1] = HEAPU16[$5 >> 1];
HEAP16[$3 + 16 >> 1] = HEAPU16[$6 >> 1];
$9 = HEAP32[HEAP32[$1 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($9 | 0, $1 | 0, $3 + 24 | 0, $3 + 16 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
$2 = $2 + 1 | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3 + 16 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 24 | 0);
continue;
}
break;
}
$1 = $3 + 24 | 0;
$3 = $3 + 16 | 0;
$2 = __cxa_find_matching_catch_2() | 0;
break label$4;
}
$1 = $3 + 8 | 0;
$2 = __cxa_find_matching_catch_2() | 0;
}
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($1);
PostureChangeFlags___PostureChangeFlags_28_29($6);
PostureChangeFlags___PostureChangeFlags_28_29($5);
break label$2;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3 + 48 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 56 | 0);
}
__resumeException($2 | 0);
abort();
}
__stack_pointer = $3 - -64 | 0;
}
function lookup($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
$6 = HEAP32[$0 + 8 >> 2];
if (!$6) {
if (!$2) {
break label$1;
}
HEAP32[$0 + 8 >> 2] = 64;
HEAP8[$0 + 4 | 0] = 6;
$3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] >> 2]](256) | 0;
HEAP32[$0 >> 2] = $3;
if ($3) {
break label$4;
}
HEAP32[$0 + 8 >> 2] = 0;
return 0;
}
$3 = $6 - 1 | 0;
$9 = $3 >>> 2 | 0;
$10 = hash($1);
$8 = $10 & 0 - $6;
$3 = $3 & $10;
$7 = HEAP32[$0 >> 2];
while (1) {
$5 = HEAP32[($3 << 2) + $7 >> 2];
if ($5) {
if (keyeq($1, HEAP32[$5 >> 2])) {
break label$2;
}
$4 = $4 & 255 ? $4 : $8 >>> HEAPU8[$0 + 4 | 0] - 1 & $9 | 1;
$5 = $4 & 255;
$3 = ($3 - $5 | 0) + ($3 >>> 0 < $5 >>> 0 ? $6 : 0) | 0;
continue;
}
break;
}
$5 = 0;
if (!$2) {
break label$2;
}
$4 = HEAPU8[$0 + 4 | 0];
if (!(HEAP32[$0 + 12 >> 2] >>> $4 - 1 | 0)) {
break label$3;
}
$13 = $4 + 1 | 0;
$3 = $13 & 255;
$7 = 1 << $3;
$4 = $7 << 2;
$6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] >> 2]]($4) | 0;
if (!$6) {
break label$2;
}
$6 = memset($6, 0, $4);
$11 = $7 - 1 | 0;
$14 = $11 >>> 2 | 0;
$15 = $3 - 1 | 0;
$16 = 0 - $7 | 0;
$8 = 0;
while (1) {
if (HEAPU32[$0 + 8 >> 2] > $8 >>> 0) {
$12 = HEAP32[HEAP32[$0 >> 2] + ($8 << 2) >> 2];
if ($12) {
$4 = hash(HEAP32[$12 >> 2]);
$3 = $11 & $4;
$9 = ($4 & $16) >>> $15 & $14 | 1;
$4 = 0;
while (1) {
$5 = ($3 << 2) + $6 | 0;
if (HEAP32[$5 >> 2]) {
$4 = $4 & 255 ? $4 : $9;
$5 = $4 & 255;
$3 = ($3 - $5 | 0) + ($3 >>> 0 < $5 >>> 0 ? $7 : 0) | 0;
continue;
}
break;
}
HEAP32[$5 >> 2] = $12;
}
$8 = $8 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2]](HEAP32[$0 >> 2]);
HEAP32[$0 + 8 >> 2] = $7;
HEAP8[$0 + 4 | 0] = $13;
HEAP32[$0 >> 2] = $6;
$3 = $10 & $11;
$9 = ($10 & $16) >>> $15 & $14 | 1;
$4 = 0;
while (1) {
if (!HEAP32[($3 << 2) + $6 >> 2]) {
break label$3;
}
$4 = $4 & 255 ? $4 : $9;
$5 = $4 & 255;
$3 = ($3 - $5 | 0) + ($3 >>> 0 < $5 >>> 0 ? $7 : 0) | 0;
continue;
}
}
memset($3, 0, 256);
$3 = HEAP32[$0 + 8 >> 2] - 1 & hash($1);
}
$4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] >> 2]]($2) | 0;
$3 = $3 << 2;
HEAP32[$3 + HEAP32[$0 >> 2] >> 2] = $4;
$4 = HEAP32[HEAP32[$0 >> 2] + $3 >> 2];
if (!$4) {
break label$1;
}
memset($4, 0, $2);
HEAP32[HEAP32[HEAP32[$0 >> 2] + $3 >> 2] >> 2] = $1;
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
$5 = HEAP32[HEAP32[$0 >> 2] + $3 >> 2];
}
return $5;
}
return 0;
}
function little2_scanPoundName($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
if (($1 | 0) == ($2 | 0)) {
return -1;
}
$5 = HEAPU8[$1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 0:
break label$4;
case 1:
break label$5;
case 2:
break label$6;
default:
break label$7;
}
}
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
switch ($4 - 22 | 0) {
default:
if (($4 | 0) != 29) {
break label$13;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$13;
}
break;
case 0:
case 2:
break label$14;
case 1:
break label$3;
}
}
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
return -20;
}
$5 = HEAPU8[$4 + 2 | 0];
$7 = 20;
label$18: {
$6 = HEAPU8[$4 + 3 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 2:
break label$10;
case 1:
break label$11;
case 0:
break label$12;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 24:
break label$18;
case 4:
case 5:
case 6:
case 16:
case 25:
case 27:
case 31:
break label$3;
default:
break label$13;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break;
}
}
$7 = 0;
break label$3;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) < 4) {
break label$2;
}
break label$3;
}
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
}
HEAP32[$3 >> 2] = $1;
$4 = $7;
}
return $4;
}
function handle_sign_nonmanual_28Gesture__2c_20XMLCell__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0;
$3 = __stack_pointer - 96 | 0;
__stack_pointer = $3;
$7 = HEAP32[$1 + 8 >> 2];
$9 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2184, Math_fround(1));
MakeNonmanualSlots_28Gesture__29($0);
$8 = HEAP32[$0 + 48 >> 2];
if (HEAPU8[67583]) {
HEAP32[$3 + 80 >> 2] = HEAP32[$7 + 12 >> 2];
eprintf_28char_20const__2c_20____29(25364, $3 + 80 | 0);
}
while (1) {
label$3: {
if (HEAP32[$7 + 12 >> 2] <= ($4 | 0)) {
if ($9 == Math_fround(1)) {
break label$3;
}
$4 = 0;
while (1) {
if (($4 | 0) == 8) {
break label$3;
}
$2 = HEAP32[($4 << 2) + $8 >> 2];
if ($2) {
ScaleSeqNonManual_28DynamicArray1_DynamicArray1_AtomicNonmanual_____2c_20float_29(HEAP32[$2 + 4 >> 2], $9);
}
$4 = $4 + 1 | 0;
continue;
}
}
$10 = DynamicArrayP_XMLCell___getElement_28int_29_20const($7, $4);
$2 = HEAP32[$10 >> 2];
$6 = SiGML__convertElement_28char_20const__29($2);
$5 = HEAP32[18847];
$5 = HashAny_int_2c_20int___lookupString_28int_29_20const($5, $6);
if (HEAPU8[67583]) {
HEAP32[$3 + 56 >> 2] = $2;
HEAP32[$3 + 52 >> 2] = $5;
HEAP32[$3 + 48 >> 2] = $4;
eprintf_28char_20const__2c_20____29(46983, $3 + 48 | 0);
}
label$8: {
if (!$5) {
LogTime_28_29();
$5 = HEAP32[$0 + 8 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = $5;
eprintf_28char_20const__2c_20____29(44979, $3);
UnimplSiGML_28_29();
break label$8;
}
$6 = ($5 << 2) + $8 | 0;
if (HEAP32[$6 >> 2]) {
LogTime_28_29();
$5 = HEAP32[$0 + 8 >> 2];
HEAP32[$3 + 40 >> 2] = HEAP32[$1 >> 2];
HEAP32[$3 + 36 >> 2] = $2;
HEAP32[$3 + 32 >> 2] = $5;
eprintf_28char_20const__2c_20____29(45059, $3 + 32 | 0);
BadSiGML_28_29();
break label$8;
}
$2 = handle_nonmanual_tier_28XMLCell__29($10);
HEAP32[$6 >> 2] = $2;
if (!$2 | !HEAPU8[67583]) {
break label$8;
}
HEAP32[$3 + 20 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $5;
eprintf_28char_20const__2c_20____29(24491, $3 + 16 | 0);
$2 = HEAP32[$6 >> 2];
if (!$2) {
eputs_28char_20const__29(14681);
break label$8;
}
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, HEAP32[16886]);
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
label$12: {
if (!HEAPU8[67583]) {
break label$12;
}
$4 = 0;
eprintf_28char_20const__2c_20____29(32605, 0);
while (1) {
if (($4 | 0) == 8) {
break label$12;
}
$2 = ($4 << 2) + $8 | 0;
label$14: {
if (!HEAP32[$2 >> 2]) {
break label$14;
}
HEAP32[$3 + 64 >> 2] = $4;
eprintf_28char_20const__2c_20____29(19739, $3 - -64 | 0);
$2 = HEAP32[$2 >> 2];
if (!$2) {
eputs_28char_20const__29(14681);
break label$14;
}
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, HEAP32[16886]);
}
$4 = $4 + 1 | 0;
continue;
}
}
__stack_pointer = $3 + 96 | 0;
}
function CalcFingerBending_28FingerBending__2c_20HandshapeType_2c_20BendSource_2c_20FingerbendType_2c_20FingerBending_2c_20FingerbendType_2c_20FingerBending_2c_20CeeOpening_29($0, $1, $2, $3, $4, $5, $6, $7) {
label$1: {
label$2: {
if (FingerBending__defined_28_29_20const($0)) {
break label$2;
}
label$3: {
switch ($2 - 1 | 0) {
case 3:
if (FingerBending__defined_28_29_20const($6)) {
$4 = $6;
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
return;
}
$2 = HEAP32[(Math_imul($1, 160) + 70752 | 0) + 156 >> 2];
$2 = (($2 << 7) + 72896 | 0) + ($5 << 4) | 0;
$4 = $2;
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
return;
case 0:
$2 = Math_imul($1 << 16 >> 16, 160) + 70752 | 0;
$4 = $2;
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
if (!$7) {
break label$2;
}
break label$1;
case 1:
if (FingerBending__defined_28_29_20const($4)) {
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
return;
}
if (!$3) {
$2 = Math_imul($1 << 16 >> 16, 160) + 70752 | 0;
$4 = $2;
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
if (!$7) {
break label$2;
}
break label$1;
}
$2 = HEAP32[(Math_imul($1, 160) + 70752 | 0) + 156 >> 2];
$2 = (($2 << 7) + 72896 | 0) + ($3 << 4) | 0;
$4 = $2;
$1 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
if (!$7) {
break label$2;
}
break label$1;
case 2:
break label$3;
default:
break label$2;
}
}
$2 = Math_imul($1 << 16 >> 16, 160) + 70752 | 0;
$4 = $2;
$1 = HEAP32[$4 + 16 >> 2];
$2 = HEAP32[$4 + 20 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$1 = HEAP32[$4 + 28 >> 2];
$2 = HEAP32[$4 + 24 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
}
return;
}
HEAPF32[$0 >> 2] = HEAPF32[($7 << 2) + 63144 >> 2] + HEAPF32[$0 >> 2];
}
function big2_scanPoundName($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
if (($1 | 0) == ($2 | 0)) {
return -1;
}
$5 = HEAPU8[$1 + 1 | 0];
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
$6 = HEAPU8[$1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 0:
break label$4;
case 1:
break label$5;
case 2:
break label$6;
default:
break label$7;
}
}
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
switch ($4 - 22 | 0) {
default:
if (($4 | 0) != 29) {
break label$13;
}
if (!(HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51248 | 0] << 5) + 49968 >> 2] >>> $5 & 1)) {
break label$13;
}
break;
case 0:
case 2:
break label$14;
case 1:
break label$3;
}
}
while (1) {
$4 = $1;
$1 = $1 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
return -20;
}
$5 = HEAPU8[$4 + 3 | 0];
$7 = 20;
label$18: {
$6 = HEAPU8[$4 + 2 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($4 - 5 | 0) {
case 2:
break label$10;
case 1:
break label$11;
case 0:
break label$12;
case 17:
case 19:
case 20:
case 21:
case 22:
continue;
case 24:
break label$18;
case 4:
case 5:
case 6:
case 16:
case 25:
case 27:
case 31:
break label$3;
default:
break label$13;
}
}
if (HEAP32[($5 >>> 3 & 28 | HEAPU8[$6 + 51504 | 0] << 5) + 49968 >> 2] >>> $5 & 1) {
continue;
}
break;
}
}
$7 = 0;
break label$3;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) >= 2) {
break label$3;
}
break label$2;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
$7 = 0;
if (($2 - $1 | 0) < 4) {
break label$2;
}
break label$3;
}
$4 = -2;
if (($2 - $1 | 0) >= 4) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) >= 3) {
break label$3;
}
break label$2;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$2;
}
}
HEAP32[$3 >> 2] = $1;
$4 = $7;
}
return $4;
}
function SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
$7 = __stack_pointer + -64 | 0;
__stack_pointer = $7;
$8 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 6271 : 6318);
$11 = MakeDigits_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 3235 : 3242));
label$1: {
if (!($8 | $11)) {
HEAP32[$0 >> 2] = HEAP32[17576];
break label$1;
}
$12 = SiGML__convertLocation_28char_20const__29($8);
$8 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 9642 : 9649);
$10 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 9611 : 9618);
$9 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 9715 : 9722);
label$3: {
if (!$9) {
break label$3;
}
$6 = HEAPU8[67600];
if (!(!$8 | !$6)) {
LogTime_28_29();
HEAP32[$7 + 36 >> 2] = $8;
HEAP32[$7 + 32 >> 2] = $9;
eprintf_28char_20const__2c_20____29(46649, $7 + 32 | 0);
$6 = HEAPU8[67600];
}
if (!$10 | !($6 & 255)) {
break label$3;
}
LogTime_28_29();
HEAP32[$7 + 20 >> 2] = $10;
HEAP32[$7 + 16 >> 2] = $9;
eprintf_28char_20const__2c_20____29(46579, $7 + 16 | 0);
}
$6 = 0;
if ($8) {
$6 = HEAPU16[$2 >> 1];
HEAP16[$7 + 14 >> 1] = $6;
HEAP16[$7 + 56 >> 1] = $6;
$6 = SiGML__convertBodySide_28char_20const__2c_20Mirroring_2c_20bool_29($8, $7 + 14 | 0, $5);
}
if ($10) {
$13 = SiGML__convertExtremitySide_28char_20const__2c_20bool_29($10, $4);
}
$8 = isArmHandLocation_28Location_29($12);
label$7: {
if ($8 ? 1 : $11) {
if ($9) {
$13 = SiGML__convertExtremitySide_28char_20const__2c_20bool_29($9, $4);
}
if ($6) {
break label$7;
}
$6 = AbsoluteSide_28RelativeBodySide_2c_20bool_29($4 ? 1 : 2, $5);
break label$7;
}
if ($9) {
$6 = HEAPU16[$2 >> 1];
HEAP16[$7 + 12 >> 1] = $6;
HEAP16[$7 + 48 >> 1] = $6;
$6 = SiGML__convertBodySide_28char_20const__2c_20Mirroring_2c_20bool_29($9, $7 + 12 | 0, $5);
}
if ($6) {
break label$7;
}
isSigningSpaceLocation_28Location_29($12);
$6 = 0;
}
$8 = SiGML__convertboolfalse_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, $3 ? 6208 : 6215));
label$11: {
if ($3) {
$3 = SiGML__convertContact_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 2948));
if ($3) {
break label$11;
}
}
$3 = SiGML__convertContact_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 2955));
}
SiteID__SiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, $12, $6, $13, $11, $3, $8);
}
__stack_pointer = $7 - -64 | 0;
}
function TargettedMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$1 = __stack_pointer - 96 | 0;
__stack_pointer = $1;
$3 = HEAP32[HEAP32[$0 + 528 >> 2] + 36 >> 2];
$5 = HEAP32[$3 + 48 >> 2];
HEAP32[$1 + 88 >> 2] = HEAP32[$3 + 8 >> 2];
$4 = HEAP32[$3 + 4 >> 2];
$2 = HEAP32[$3 >> 2];
HEAP32[$1 + 80 >> 2] = $2;
HEAP32[$1 + 84 >> 2] = $4;
$2 = HEAP32[$3 + 12 >> 2];
HEAP32[19359] = 0;
HEAP32[$1 + 72 >> 2] = $2;
HEAP32[$1 + 20 >> 2] = $2;
$6 = invoke_iii(479, $1 + 80 | 0, $1 + 20 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) != 1) {
SiteIDPair___SiteIDPair_28_29($1 + 80 | 0);
HEAP32[$1 - -64 >> 2] = HEAP32[$3 + 24 >> 2];
$2 = HEAP32[$3 + 20 >> 2];
$4 = HEAP32[$3 + 16 >> 2];
HEAP32[$1 + 56 >> 2] = $4;
HEAP32[$1 + 60 >> 2] = $2;
$2 = HEAP32[$3 + 40 >> 2];
HEAP32[19359] = 0;
HEAP32[$1 + 48 >> 2] = $2;
HEAP32[$1 + 16 >> 2] = $2;
$7 = invoke_iii(479, $1 + 56 | 0, $1 + 16 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
label$4: {
label$5: {
label$6: {
if (($2 | 0) != 1) {
SiteIDPair___SiteIDPair_28_29($1 + 56 | 0);
HEAP32[$1 + 40 >> 2] = HEAP32[$3 + 36 >> 2];
$4 = HEAP32[$3 + 32 >> 2];
$2 = HEAP32[$3 + 28 >> 2];
HEAP32[$1 + 32 >> 2] = $2;
HEAP32[$1 + 36 >> 2] = $4;
$2 = HEAP32[$3 + 44 >> 2];
HEAP32[19359] = 0;
HEAP32[$1 + 24 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $2;
$4 = invoke_iii(479, $1 + 32 | 0, $1 + 12 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
SiteIDPair___SiteIDPair_28_29($1 + 32 | 0);
$2 = short_20maxScalar_short__28short_2c_20short_29(($5 | 0) == 1 ? 9 : 0, short_20maxScalar_short__28short_2c_20short_29($6 << 16 >> 16, short_20maxScalar_short__28short_2c_20short_29($7 << 16 >> 16, $4 << 16 >> 16)));
if (!$2) {
break label$5;
}
HEAP32[$0 + 12 >> 2] = $2;
if (!HEAPU8[67570]) {
break label$3;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(17658, 0);
MannerFlags__print_28_IO_FILE__29_20const($0 + 12 | 0, HEAP32[16886]);
eputs_28char_20const__29(46824);
break label$4;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
$1 = $1 + 56 | 0;
break label$1;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
$1 = $1 + 32 | 0;
break label$1;
}
if (!HEAPU8[67570]) {
break label$3;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(20615, 0);
}
SiGMLConstellation__print_28_IO_FILE__29_20const($3, HEAP32[16886]);
}
__stack_pointer = $1 + 96 | 0;
return;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
$1 = $1 + 80 | 0;
}
SiteIDPair___SiteIDPair_28_29($1);
__resumeException($3 | 0);
abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
HEAP32[19359] = 0;
$5 = invoke_iii(25, $4 + 24 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
if (($3 | 0) != 1) {
label$5: {
label$6: {
if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($5)) {
break label$6;
}
$7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($4 + 8 | 0, $0);
$8 = std____2__ios_base__flags_28_29_20const(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0);
$3 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$6 = $0 + $3 | 0;
$9 = invoke_ii(26, $6 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$5;
}
$3 = HEAP32[$7 >> 2];
HEAP32[19359] = 0;
$2 = $1 + $2 | 0;
$1 = invoke_iiiiiii(27, $3 | 0, $1 | 0, (($8 & 176) == 32 ? $2 : $1) | 0, $2 | 0, $6 | 0, $9 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$5;
}
HEAP32[$4 + 16 >> 2] = $1;
if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($4 + 16 | 0)) {
break label$6;
}
$3 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $0 + $3 | 0, 5);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$6;
}
break label$5;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
break label$2;
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($5);
break label$3;
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
__cxa_begin_catch($1 | 0) | 0;
$5 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vi(29, $0 + $5 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
__cxa_end_catch();
}
__stack_pointer = $4 + 32 | 0;
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
__resumeException($1 | 0);
abort();
}
function BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
if (!$2) {
if (!HEAPU8[67600]) {
break label$2;
}
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$0 + 4 >> 2];
eprintf_28char_20const__2c_20____29(14456, $3);
break label$2;
}
$5 = HEAP32[$0 + 8 >> 2];
if (!(TwoHAbstractPosture__isTotallyDefined_28SET_OF_HANDS_29_20const($2, $5) | !HEAPU8[67600])) {
LogTime_28_29();
HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 4 >> 2];
eprintf_28char_20const__2c_20____29(21079, $3 + 32 | 0);
TwoHAbstractPosture__reportUndefined_28_IO_FILE__29($2, HEAP32[16886]);
}
$5 = HEAP32[$1 >> 2];
$9 = HEAP32[$0 + 24 >> 2];
$4 = $0 + 20 | 0;
HEAP32[$3 + 24 >> 2] = HEAP32[$4 >> 2];
$6 = HEAP32[$0 + 16 >> 2];
$4 = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 20 >> 2] = $6;
$7 = Math_fround(durationScale_28MannerFlags_2c_20PathShape_29($3 + 16 | 0, $9) * HEAPF32[$5 + 232 >> 2]);
HEAPF32[$0 + 40 >> 2] = $7;
if (HEAPU8[$0 + 20 | 0]) {
$8 = Math_fround(HEAPF32[$5 + 268 >> 2] * HEAPF32[$5 + 232 >> 2]);
HEAPF32[$0 + 44 >> 2] = $8;
HEAPF32[$0 + 40 >> 2] = $7 + $8;
}
HEAP32[$3 + 56 >> 2] = HEAP32[$2 + 12 >> 2];
$4 = HEAP32[$2 + 8 >> 2];
$6 = HEAP32[$2 + 4 >> 2];
HEAP32[19359] = 0;
HEAP32[$3 + 48 >> 2] = $6;
HEAP32[$3 + 52 >> 2] = $4;
$6 = invoke_ii(449, $3 + 48 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
label$6: {
if (!$6) {
HEAP32[19359] = 0;
$4 = HEAPU8[$3 + 48 | 0];
$6 = invoke_ii(450, $4 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
if (!$6) {
break label$6;
}
}
HEAP32[$3 + 56 >> 2] = HEAP32[$2 + 84 >> 2];
$6 = HEAP32[$2 + 80 >> 2];
$4 = HEAP32[$2 + 76 >> 2];
HEAP32[$3 + 48 >> 2] = $4;
HEAP32[$3 + 52 >> 2] = $6;
}
HEAP32[19359] = 0;
$7 = Math_fround(invoke_fii(451, $5 | 0, $3 + 48 | 0));
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
HEAPF32[$0 + 48 >> 2] = $7;
HEAP8[$0 + 33 | 0] = HEAPU8[$1 + 13 | 0] >>> 4 & 1;
HEAP32[19359] = 0;
invoke_vii(452, $0 + 284 | 0, $0 + 60 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vii(452, $0 + 396 | 0, $0 + 172 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
SiteIDPair___SiteIDPair_28_29($3 + 48 | 0);
}
__stack_pointer = $3 - -64 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($3 + 48 | 0);
__resumeException($0 | 0);
abort();
}
function ArmHandConstellation__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$4 = HEAPU8[$0 + 60 | 0];
$2 = HEAPU8[$0 + 61 | 0];
HEAP32[$3 + 40 >> 2] = HEAPU8[$0 + 62 | 0] ? 84 : 70;
HEAP32[$3 + 36 >> 2] = $2 ? 84 : 70;
HEAP32[$3 + 32 >> 2] = $4 ? 84 : 70;
fiprintf($1, 31004, $3 + 32 | 0);
printIndent_28_IO_FILE__29($1);
$2 = HEAPU8[$0 + 63 | 0];
HEAP32[$3 + 20 >> 2] = HEAPU8[$0 + 64 | 0] ? 84 : 70;
HEAP32[$3 + 16 >> 2] = $2 ? 84 : 70;
fiprintf($1, 31091, $3 + 16 | 0);
if (!SiteIDPair__isUndef_28_29_20const($0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22212, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 12 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22271, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 36 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23198, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 24 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22230, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 40 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23178, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAP32[$0 + 44 >> 2];
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18218], $4), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
fiprintf($1, 25848, $3);
$4 = $0 + 48 | 0;
label$7: {
if (Vector__x_28_29_20const($4) != Math_fround(0)) {
break label$7;
}
if (Vector__y_28_29_20const($4) != Math_fround(0)) {
break label$7;
}
if (Vector__z_28_29_20const($4) == Math_fround(0)) {
break label$1;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22499, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($4, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $3 + 48 | 0;
}
function TransformOneLeg_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Quaternion_20const__2c_20Vector_20const__2c_20Vector__2c_20Quaternion__2c_20Quaternion__29($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
$9 = __stack_pointer - 80 | 0;
__stack_pointer = $9;
Quaternion__rotateVectorAboutCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector__29_20const($3, $2, $1, $5);
Vector__setAdd_28Vector_20const__29($5, $4);
$2 = Vector__Vector_28Vector_20const__29($9 - -64 | 0, $0);
Vector__setAdd_28Vector_20const__29($2, $5);
Vector__setSubtract_28Vector_20const__29($2, $1);
eprintf_28char_20const__2c_20____29(17544, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19322, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 6);
eputc_28char_29(10);
$8 = sq_28float_29(Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$0 >> 2]));
$11 = sq_28float_29(Math_fround(HEAPF32[$1 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]));
$10 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]);
$8 = Math_fround(Math_fround($10 * $10) + Math_fround($8 + $11));
$11 = sqrt_28float_29($8);
$8 = sqrt_28float_29(Math_fround($8 - Math_fround(sq_28float_29(Math_fround(HEAPF32[$5 >> 2] - HEAPF32[$0 >> 2])) + sq_28float_29(Math_fround(HEAPF32[$5 + 8 >> 2] - HEAPF32[$0 + 8 >> 2])))));
$10 = HEAPF32[$5 + 4 >> 2];
HEAPF32[$5 + 4 >> 2] = $8;
$8 = Math_fround($8 - $10);
HEAPF32[$2 + 4 >> 2] = $8 + HEAPF32[$2 + 4 >> 2];
HEAPF64[$9 + 16 >> 3] = $8;
eprintf_28char_20const__2c_20____29(17531, $9 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 6);
eputc_28char_29(10);
$5 = Vector__Vector_28Vector_20const__29($9 + 48 | 0, $0);
Vector__setSubtract_28Vector_20const__29($5, $2);
$8 = Vector__length_28_29_20const($5);
$0 = Vector__Vector_28float_2c_20float_2c_20float_29($9 + 32 | 0, Math_fround(-HEAPF32[$5 + 8 >> 2]), Math_fround(0), HEAPF32[$5 >> 2]);
$8 = asin_28float_29(Math_fround($8 / $11));
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($7, $0, $8, 0);
eprintf_28char_20const__2c_20____29(18495, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 6);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(16864, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 6);
eputc_28char_29(10);
HEAPF64[$9 >> 3] = $8;
eprintf_28char_20const__2c_20____29(29708, $9);
eprintf_28char_20const__2c_20____29(15568, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($7, HEAP32[16886], 6);
eputc_28char_29(10);
Quaternion__setInverse_28Quaternion_20const__29($6, $7);
Quaternion__setComposeInv_28Quaternion_20const__29($7, $3);
eprintf_28char_20const__2c_20____29(15620, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($7, HEAP32[16886], 6);
eputc_28char_29(10);
__stack_pointer = $9 + 80 | 0;
}
function ConcatGestures_28char_20const__2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
$5 = 1;
if (HEAP32[$2 + 12 >> 2]) {
$5 = (HEAPU8[DynamicArrayP_Gesture___getElement_28int_29_20const($2, 0) + 13 | 0] & 64) >>> 6 | 0;
}
$3 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
$1 = invoke_iiiii(360, $3 | 0, $0 | 0, $1 | 0, $5 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
label$3: {
$3 = operator_20new_28unsigned_20long_29(580);
HEAP32[19359] = 0;
$0 = invoke_iii(378, $3 | 0, 5) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$3;
}
HEAP32[$1 + 44 >> 2] = $0;
$7 = $0 + 528 | 0;
$3 = 0;
$5 = 0;
while (1) {
label$5: {
if (HEAP32[$2 + 12 >> 2] <= ($3 | 0)) {
if (HEAP32[$0 + 540 >> 2] > 0) {
__memcpy($0 + 60 | 0, DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, 0) + 60 | 0, 224);
__memcpy($0 + 284 | 0, DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, HEAP32[$2 + 12 >> 2] - 1 | 0) + 284 | 0, 224);
}
$0 = 0;
break label$5;
}
$4 = HEAP32[DynamicArrayP_Gesture___getElement_28int_29_20const($2, $3) + 44 >> 2];
DynamicArrayP_BasicMovement___appendElement_28BasicMovement__29($7, $4);
HEAPF32[$0 + 40 >> 2] = HEAPF32[$4 + 40 >> 2] + HEAPF32[$0 + 40 >> 2];
if ($5) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 40 >> 2]]($4, $5 + 284 | 0);
}
$3 = $3 + 1 | 0;
$5 = $4;
continue;
}
break;
}
while (1) {
label$10: {
if (HEAP32[$2 + 12 >> 2] > ($0 | 0)) {
$5 = DynamicArrayP_Gesture___getElement_28int_29_20const($2, $0);
$3 = HEAP32[$5 + 44 >> 2];
while (1) {
$4 = $3;
if (!$4) {
break label$10;
}
label$13: {
switch (HEAP32[$4 + 4 >> 2] - 5 | 0) {
case 0:
case 1:
$3 = 0;
if (HEAP32[$4 + 540 >> 2] <= 0) {
continue;
}
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($4 + 528 | 0, 0);
continue;
case 2:
$3 = HEAP32[$4 + 528 >> 2];
continue;
case 4:
HEAP8[$4 + 532 | 0] = 1;
$3 = 0;
HEAP32[$5 + 44 >> 2] = 0;
continue;
default:
break label$13;
}
}
LogTime_28_29();
$3 = HEAP32[$1 + 8 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
HEAP32[$6 >> 2] = $3;
eprintf_28char_20const__2c_20____29(30527, $6);
$3 = 0;
continue;
}
}
__stack_pointer = $6 + 16 | 0;
return $1;
}
$0 = $0 + 1 | 0;
continue;
}
}
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($4 | 0);
abort();
}
function CompleteHandsite_28SiteID__2c_20SiGMLHandshape_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
label$1: {
if (!SiteID__isHandSite_28_29_20const($0)) {
break label$1;
}
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
$4 = $2 & 28672;
$5 = $2 & 255;
$7 = $2 & 1015808;
if (!($4 ? !$5 | !$7 : 1)) {
break label$1;
}
$4 = ($4 | 0) != 0;
if (!($4 ? 1 : $2 & 1016063)) {
break label$1;
}
label$2: {
label$3: {
if (($5 | 0) != 10) {
break label$3;
}
label$4: {
switch (($2 >>> 12 & 7) - 3 | 0) {
case 0:
$2 = (MakeDigit_28DigitIndex_29(1) & 31) << 15 | (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) & -1015809;
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
$2 = (MakeDigit_28DigitIndex_29(4) & 31) << 15 | (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) & -1015809;
break label$2;
}
$3 = isFingerLocation_28short_29($2 & 255);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
$6 = $2 & 1015808;
if ($3) {
if (!$6) {
$2 = (SiGMLHandshape__DefaultDigits_28_29_20const($1) & 31) << 15;
$1 = $0 + 2 | 0;
$2 = $2 | (HEAPU16[$0 >> 1] | HEAPU8[$1 | 0] << 16) & -1015809;
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if (($2 & 255) == 7 | $4) {
break label$1;
}
$2 = $2 & -28673 | 8192;
break label$2;
}
$5 = ($5 | 0) != 0;
label$8: {
if (!$6) {
$3 = $2 >>> 15 | 0;
break label$8;
}
$6 = $0;
label$10: {
label$11: {
switch (($2 & 255) - 1 | 0) {
case 3:
$3 = $2 >>> 15 | 0;
$2 = $2 & 16748288 | 12297;
break label$10;
case 4:
$3 = $2 >>> 15 | 0;
$2 = $2 & 16748288 | 16393;
break label$10;
case 0:
$3 = $2 >>> 15 | 0;
$2 = $2 & 16748288 | 4105;
break label$10;
case 2:
$3 = $2 >>> 15 | 0;
$2 = $2 & 16748288 | 8201;
break label$10;
default:
break label$11;
}
}
if (!HEAPU8[67600]) {
$3 = $2 >>> 15 | 0;
break label$8;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(23997, 0);
SiteID__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
$3 = $2 >>> 15 | 0;
$2 = $2 & 16776960 | 9;
}
HEAP16[$6 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if (!$7 | $5) {
break label$1;
}
$2 = SiGMLHandshape__DefaultDigitLocation_28short_29_20const($1, $3 & 31);
$1 = HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8;
HEAP8[$0 + 2 | 0] = $1 >>> 8;
$2 = $2 & 255;
$1 = $2 | $1 << 8;
HEAP16[$0 >> 1] = $1;
if (($2 | 0) == 7 | $4) {
break label$1;
}
$2 = $1 & 16748543 | 8192;
}
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
}
function SAMPAToMorphing_28XMLCell__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
$1 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const(HEAP32[$0 + 4 >> 2], 9027);
label$3: {
if (!$1) {
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(34896, $3);
break label$3;
}
$4 = TokeniseSAMPA_28char_20const__29($1);
if ($4) {
label$6: {
label$7: {
switch (HEAP32[$4 + 12 >> 2]) {
case 0:
LogTime_28_29();
HEAP32[$3 + 36 >> 2] = HEAP32[$0 >> 2];
HEAP32[$3 + 32 >> 2] = $1;
eprintf_28char_20const__2c_20____29(34937, $3 + 32 | 0);
DynamicArrayP_char___freeAll_28_29($4);
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($4));
break label$3;
case 1:
$0 = LookupSAMPAPhoneme_28char_20const__29(DynamicArrayP_char___getElement_28int_29_20const($4, 0));
if (!$0) {
break label$6;
}
$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0) | 0;
break label$6;
default:
break label$7;
}
}
$0 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = invoke_ii(436, $1 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
label$10: {
while (1) {
label$12: {
if (HEAP32[$4 + 12 >> 2] <= ($0 | 0)) {
$0 = HEAP32[$2 + 24 >> 2];
switch (HEAP32[$0 + 12 >> 2]) {
case 1:
break label$10;
case 0:
break label$12;
default:
break label$6;
}
}
$1 = LookupSAMPAPhoneme_28char_20const__29(DynamicArrayP_char___getElement_28int_29_20const($4, $0));
if ($1) {
SeqTimedMorph__appendElement_28AbstractTimedMorph__29($2, FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0);
}
$0 = $0 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
$2 = 0;
break label$6;
}
$0 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($0, 0);
HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2] = 0;
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
$2 = $0;
}
DynamicArrayP_char___freeAll_28_29($4);
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($4));
break label$3;
}
LogTime_28_29();
HEAP32[$3 + 20 >> 2] = HEAP32[$0 >> 2];
HEAP32[$3 + 16 >> 2] = $1;
eprintf_28char_20const__2c_20____29(34937, $3 + 16 | 0);
}
__stack_pointer = $3 + 48 | 0;
return $2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function fillARPFrame_28SSFrame__2c_20int_2c_20float_2c_20float_2c_20AvatarJointRotationIndex__2c_20float__2c_20float__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$10 = __stack_pointer - 16 | 0;
__stack_pointer = $10;
label$1: {
if (!$0) {
break label$1;
}
SSFrame__SetTimestamp_28float_29($0, $1);
SSFrame__SetDuration_28float_29($0, $2);
if (HEAPU8[75533] | HEAPU8[75532]) {
break label$1;
}
HEAP16[$10 + 14 >> 1] = 0;
label$2: while (1) {
label$3: {
if (($8 | 0) == 2) {
$11 = $3 + 188 | 0;
$8 = HEAP16[$3 + 200 >> 1];
break label$3;
}
while (1) {
$9 = 0;
if (($7 | 0) != 4) {
addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, HEAP32[(($8 << 4) + $3 | 0) + ($7 << 2) >> 2], $6, $10 + 14 | 0);
$7 = $7 + 1 | 0;
continue;
}
break;
}
while (1) {
$7 = 0;
if (($9 | 0) == 5) {
addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, HEAP32[(($8 << 2) + $3 | 0) + 176 >> 2], $6, $10 + 14 | 0);
$8 = $8 + 1 | 0;
continue label$2;
} else {
while (1) {
if (($7 | 0) != 3) {
addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, HEAP32[(((Math_imul($8, 60) + $3 | 0) + Math_imul($9, 12) | 0) + ($7 << 2) | 0) + 32 >> 2], $6, $10 + 14 | 0);
$7 = $7 + 1 | 0;
continue;
}
break;
}
$9 = $9 + 1 | 0;
continue;
}
}
}
break;
}
while (1) {
$9 = $7 << 16 >> 16;
if (($8 | 0) > ($9 | 0)) {
addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, DynamicArray1_JointRotation____getElement_28int_29_20const($11, $9), $6, $10 + 14 | 0);
$7 = $7 + 1 | 0;
continue;
}
break;
}
$11 = $3 + 204 | 0;
$8 = HEAP16[$3 + 216 >> 1];
$7 = 0;
while (1) {
$9 = $7 << 16 >> 16;
if (($9 | 0) >= ($8 | 0)) {
if (!$5) {
break label$1;
}
$7 = 18;
$8 = 0;
while (1) {
$9 = $7 << 16 >> 16;
if ((InvertibleDynamicStringArray__length_28_29_20const(HEAP32[18845]) | 0) <= ($9 | 0)) {
SSFrame__TrimMorphs_28unsigned_20int_29($0, $8 << 16 >> 16);
} else {
$6 = $9 << 2;
$1 = HEAPF32[$6 + $5 >> 2];
if (!($1 == Math_fround(0) & HEAPF32[$4 + $6 >> 2] == Math_fround(0))) {
SSFrame__SetMorph_28unsigned_20int_2c_20char__2c_20float_29($0, $8 << 16 >> 16, InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $9), $1);
$8 = $8 + 1 | 0;
}
$7 = $7 + 1 | 0;
continue;
}
break;
}
} else {
addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, DynamicArray1_JointRotation____getElement_28int_29_20const($11, $9), $6, $10 + 14 | 0);
$7 = $7 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $10 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
$8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
if ($8 - $1 >>> 0 >= $2 >>> 0) {
$9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
label$2: {
if (($8 >>> 1 | 0) - 16 >>> 0 > $1 >>> 0) {
HEAP32[$7 + 8 >> 2] = $1 << 1;
HEAP32[$7 + 12 >> 2] = $1 + $2;
$2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0) >> 2]);
break label$2;
}
$2 = $8 - 1 | 0;
}
$8 = $2 + 1 | 0;
$2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $8);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
if ($4) {
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($9), $4);
}
$10 = $4 + $5 | 0;
if (($10 | 0) != ($3 | 0)) {
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($9) + $4 | 0) + $5 | 0, $3 - $10 | 0);
}
$1 = $1 + 1 | 0;
if (($1 | 0) != 11) {
std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $9, $1);
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $8);
__stack_pointer = $7 + 16 | 0;
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0);
abort();
}
function GetConfigInfo_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = __stack_pointer + -64 | 0;
__stack_pointer = $1;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$0 = invoke_iii(41, $3 | 0, 2) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
if (($2 | 0) != 1) {
DynamicArrayP_char_20const___appendElement_28char_20const__29($0, HEAP32[HEAP32[18904] >> 2]);
DynamicArrayP_char_20const___appendElement_28char_20const__29($0, HEAP32[HEAP32[18904] + 4 >> 2]);
wasm2js_i32$0 = 68400, wasm2js_i32$1 = ReadXMLStrings_28DynamicArrayP_char_20const__20const__29($0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
DynamicArrayP_char_20const___popElement_28_29($0);
DynamicArrayP_char_20const___popElement_28_29($0);
DynamicArrayP_char_20const___freeAll_28_29($0);
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($0));
$0 = HEAP32[17100];
if (!$0) {
break label$4;
}
$3 = XMLCell__element_28char_20const__29($0, 6327);
$0 = XMLCell__attrib_string_28char_20const__29($3, 10137);
if (!$0) {
break label$3;
}
$2 = HEAP32[15822];
if (strcmp($2, $0)) {
break label$2;
}
$0 = XMLCell__attrib_string_28char_20const__29($3, 10129);
label$6: {
if (!$0) {
LogTime_28_29();
HEAP32[$1 + 16 >> 2] = HEAP32[15823];
eprintf_28char_20const__2c_20____29(46317, $1 + 16 | 0);
break label$6;
}
$2 = HEAP32[15823];
if (!strcmp($2, $0)) {
break label$6;
}
LogTime_28_29();
HEAP32[$1 + 36 >> 2] = $2;
HEAP32[$1 + 32 >> 2] = $0;
eprintf_28char_20const__2c_20____29(46385, $1 + 32 | 0);
}
GetDefaultAvatarInfo_28XMLCell__29(HEAP32[17100]);
GetTrajectoryInfo_28XMLCell__29(HEAP32[17100]);
GetArmControllerInfo_28XMLCell__29(HEAP32[17100]);
__stack_pointer = $1 - -64 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(39609, 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 10) | 0, 60484, 0);
abort();
}
LogTime_28_29();
HEAP32[$1 >> 2] = HEAP32[15822];
eprintf_28char_20const__2c_20____29(42376, $1);
break label$1;
}
LogTime_28_29();
HEAP32[$1 + 52 >> 2] = $2;
HEAP32[$1 + 48 >> 2] = $0;
eprintf_28char_20const__2c_20____29(42449, $1 + 48 | 0);
}
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 11) | 0, 60484, 0);
abort();
}
function CollectTrailingMorphs_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
label$1: {
$0 = HEAP32[17655];
if (!$0) {
if (!HEAPU8[67595]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(44864, 0);
return 0;
}
$0 = HEAP32[$0 + 12 >> 2] << 16;
if ($0) {
$5 = $0 >> 16;
$0 = 0;
label$4: {
label$5: {
label$6: {
label$7: {
while (1) {
label$9: {
$3 = $0 << 16 >> 16;
if (($5 | 0) <= ($3 | 0)) {
DeleteTrailingMorphs_28_29();
if (!$1) {
break label$1;
}
$0 = HEAP32[$1 + 24 >> 2];
if (HEAP32[$0 + 12 >> 2] != 1) {
break label$6;
}
$0 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($0, 0);
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29(HEAP32[$1 + 24 >> 2], 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
if (!HEAPU8[67595]) {
break label$5;
}
eprintf_28char_20const__2c_20____29(32674, 0);
if ($0) {
break label$9;
}
eputs_28char_20const__29(14681);
break label$7;
}
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[17655], $3);
if ($2) {
if (!$1) {
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$1 = invoke_ii(381, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$4;
}
}
ParTimedMorph__appendElement_28AbstractTimedMorph__29($1, $2);
if (HEAPU8[67595]) {
eprintf_28char_20const__2c_20____29(33095, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, HEAP32[16886]);
eputc_28char_29(10);
}
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29(HEAP32[17655], $3, 0);
}
$0 = $0 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[16886]);
}
eputc_28char_29(10);
return $0;
}
if (HEAPU8[67595]) {
eprintf_28char_20const__2c_20____29(32639, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, HEAP32[16886]);
eputc_28char_29(10);
}
$0 = $1;
}
return $0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($0 | 0);
abort();
}
DeleteTrailingMorphs_28_29();
if (!HEAPU8[67595]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(44864, 0);
return 0;
}
return 0;
}
function Getopts__processArgs_28char_20const___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = __stack_pointer - 96 | 0;
__stack_pointer = $2;
while (1) {
label$2: {
$3 = HEAP32[$1 >> 2];
if ($3) {
if (HEAPU8[$3 | 0] == 45) {
break label$2;
}
$6 = $1;
}
__stack_pointer = $2 + 96 | 0;
return $6 | 0;
}
label$4: {
$4 = $3 + 1 | 0;
$3 = Getopts__OptionInfo_28char_20const__29($0, $4);
label$5: {
label$6: {
if ($3) {
if (HEAPU8[67575]) {
HEAP32[$2 + 80 >> 2] = $4;
eprintf_28char_20const__2c_20____29(36204, $2 + 80 | 0);
}
HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
if (HEAPU8[$3 + 4 | 0]) {
$5 = $1 + 4 | 0;
$1 = HEAP32[$1 + 4 >> 2];
if ($1) {
if (HEAPU8[67575]) {
HEAP32[$2 + 64 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36343, $2 - -64 | 0);
$1 = HEAP32[$5 >> 2];
}
Getopts__argsFromFile_28char_20const__2c_20DynamicArrayP_char___29($0, $1, HEAP32[16937]);
break label$5;
}
LogTime_28_29();
HEAP32[$2 + 48 >> 2] = $4;
eprintf_28char_20const__2c_20____29(38306, $2 + 48 | 0);
break label$5;
}
if (!HEAPU8[$3 + 1 | 0]) {
break label$6;
}
$5 = $1 + 4 | 0;
$1 = HEAP32[$1 + 4 >> 2];
if ($1) {
if (HEAPU8[67575]) {
HEAP32[$2 + 36 >> 2] = $4;
HEAP32[$2 + 32 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36163, $2 + 32 | 0);
}
$1 = HEAP32[$3 + 12 >> 2];
if (!$1) {
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$1 = invoke_ii(54, $4 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$4;
}
HEAP32[$3 + 12 >> 2] = $1;
}
if (HEAPU8[$3 + 3 | 0]) {
dlfree(DynamicArrayP_char_20const___getElement_28int_29_20const($1, 0));
DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29(HEAP32[$3 + 12 >> 2], 0, copyString_28char_20const__29(HEAP32[$5 >> 2]));
break label$5;
}
DynamicArrayP_char_20const___appendElement_28char_20const__29($1, copyString_28char_20const__29(HEAP32[$5 >> 2]));
break label$5;
}
LogTime_28_29();
HEAP32[$2 + 16 >> 2] = $4;
eprintf_28char_20const__2c_20____29(40852, $2 + 16 | 0);
break label$5;
}
LogTime_28_29();
HEAP32[$2 >> 2] = $4;
eprintf_28char_20const__2c_20____29(39657, $2);
}
$5 = $1;
}
$1 = $5 + 4 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($1 | 0);
abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$1 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0 + $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
if (($1 | 0) != 1) {
if (!$3) {
break label$2;
}
HEAP32[19359] = 0;
invoke_iii(25, $2 + 8 | 0, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($2 + 8 | 0)) {
break label$5;
}
$1 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0 + $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$7: {
if (($1 | 0) == 1) {
break label$7;
}
HEAP32[19359] = 0;
$3 = invoke_ii(901, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$7;
}
if (($3 | 0) != -1) {
break label$5;
}
$1 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $0 + $1 | 0, 1);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$5;
}
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2 + 8 | 0);
break label$3;
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
break label$3;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2 + 8 | 0);
break label$2;
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
}
__cxa_begin_catch($1 | 0) | 0;
$1 = HEAP32[HEAP32[$0 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vi(29, $0 + $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
__cxa_end_catch();
}
__stack_pointer = $2 + 16 | 0;
return $0;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HEAP32[19359] = 0;
invoke_v(30);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__resumeException($2 | 0);
abort();
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function normal_scanPoundName($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
if (($1 | 0) == ($2 | 0)) {
return -1;
}
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 - 5 | 0) {
case 2:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$9;
}
}
label$10: {
switch ($4 - 22 | 0) {
case 0:
case 2:
break label$10;
default:
break label$4;
}
}
$1 = $1 + 1 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 2) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 340 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 2 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 3) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 344 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 3 | 0;
break label$5;
}
$4 = -2;
if (($2 - $1 | 0) < 4) {
break label$3;
}
if (!(FUNCTION_TABLE[HEAP32[$0 + 348 >> 2]]($0, $1) | 0)) {
break label$4;
}
$1 = $1 + 4 | 0;
}
while (1) {
if (($1 | 0) == ($2 | 0)) {
return -20;
}
$4 = 1;
label$13: {
label$14: {
label$15: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
if (($2 - $1 | 0) < 2) {
break label$2;
}
$4 = 2;
if (FUNCTION_TABLE[HEAP32[$0 + 328 >> 2]]($0, $1) | 0) {
break label$14;
}
break label$4;
case 1:
if (($2 - $1 | 0) < 3) {
break label$2;
}
$4 = 3;
if (FUNCTION_TABLE[HEAP32[$0 + 332 >> 2]]($0, $1) | 0) {
break label$14;
}
break label$4;
case 4:
case 5:
case 6:
case 16:
case 25:
case 27:
case 31:
break label$13;
case 17:
case 19:
case 20:
case 21:
case 22:
break label$14;
case 2:
break label$15;
default:
break label$4;
}
}
if (($2 - $1 | 0) < 4) {
break label$2;
}
$4 = 4;
if (!(FUNCTION_TABLE[HEAP32[$0 + 336 >> 2]]($0, $1) | 0)) {
break label$4;
}
}
$1 = $1 + $4 | 0;
continue;
}
break;
}
$5 = 20;
}
HEAP32[$3 >> 2] = $1;
$4 = $5;
}
return $4;
}
return -2;
}
function initScan($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
if (($2 | 0) == ($3 | 0)) {
return -4;
}
$6 = HEAP32[$0 + 72 >> 2];
label$2: {
label$3: {
label$4: {
if (($2 + 1 | 0) == ($3 | 0)) {
$5 = -1;
if (($1 | 0) != 1) {
break label$2;
}
$8 = HEAP8[$0 + 69 | 0];
if ($8 - 3 >>> 0 < 3) {
break label$2;
}
$7 = HEAPU8[$2 | 0];
$9 = $7 - 239 | 0;
if ($9 >>> 0 > 16 | !(1 << $9 & 98305)) {
break label$4;
}
if (!$8) {
break label$3;
}
break label$2;
}
label$6: {
label$7: {
label$8: {
$7 = HEAPU8[$2 + 1 | 0];
$8 = HEAPU8[$2 | 0];
$5 = $7 | $8 << 8;
if (($5 | 0) != 15360) {
if (($5 | 0) == 61371) {
break label$7;
}
if (($5 | 0) == 65534) {
break label$8;
}
if (($5 | 0) != 65279) {
break label$6;
}
if (HEAPU8[$0 + 69 | 0] ? 0 : ($1 | 0) == 1) {
break label$3;
}
HEAP32[$4 >> 2] = $2 + 2;
HEAP32[$6 >> 2] = 64680;
return 14;
}
$5 = HEAPU8[$0 + 69 | 0];
label$11: {
if (($5 | 0) != 4) {
if (($1 | 0) != 1 | ($5 | 0) != 3) {
break label$11;
}
break label$3;
}
if (($1 | 0) == 1) {
break label$3;
}
}
HEAP32[$6 >> 2] = 65044;
return FUNCTION_TABLE[HEAP32[($1 << 2) + 65044 >> 2]](65044, $2, $3, $4) | 0;
}
if (HEAPU8[$0 + 69 | 0] ? 0 : ($1 | 0) == 1) {
break label$3;
}
HEAP32[$4 >> 2] = $2 + 2;
HEAP32[$6 >> 2] = 65044;
return 14;
}
label$14: {
if (($1 | 0) != 1) {
break label$14;
}
$5 = HEAPU8[$0 + 69 | 0];
if ($5 >>> 0 > 5) {
break label$14;
}
if (1 << $5 & 57) {
break label$3;
}
}
$5 = $2 + 2 | 0;
if (($5 | 0) == ($3 | 0)) {
return -1;
}
if (HEAPU8[$2 + 2 | 0] != 191) {
break label$3;
}
HEAP32[$4 >> 2] = $2 + 3;
HEAP32[$6 >> 2] = 64316;
return 14;
}
if (!($8 & 255)) {
if (($1 | 0) == 1 & HEAPU8[$0 + 69 | 0] == 5) {
break label$3;
}
HEAP32[$6 >> 2] = 64680;
return FUNCTION_TABLE[HEAP32[($1 << 2) + 64680 >> 2]](64680, $2, $3, $4) | 0;
}
if (($1 | 0) == 1 | $7) {
break label$3;
}
HEAP32[$6 >> 2] = 65044;
$5 = little2_prologTok(65044, $2, $3, $4);
break label$2;
}
if (!$7 | ($7 | 0) == 60) {
break label$2;
}
}
$0 = HEAP32[(HEAP8[$0 + 69 | 0] << 2) + 64288 >> 2];
HEAP32[$6 >> 2] = $0;
return FUNCTION_TABLE[HEAP32[($1 << 2) + $0 >> 2]]($0, $2, $3, $4) | 0;
}
return $5;
}
function RepeatMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
HEAP16[$3 + 56 >> 1] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8;
$1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
HEAP32[19359] = 0;
HEAP16[$3 + 48 >> 1] = $1;
invoke_viii(416, $0 | 0, $3 + 56 | 0, $3 + 48 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($1 | 0) != 1) {
PostureChangeFlags___PostureChangeFlags_28_29($3 + 48 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 56 | 0);
$2 = PostureChangeFlags__PostureChangeFlags_28_29($3 + 40 | 0);
$1 = PostureChangeFlags__PostureChangeFlags_28_29($3 + 32 | 0);
label$4: {
label$5: {
$4 = HEAP32[$0 + 696 >> 2];
if ($4) {
HEAP16[$3 + 24 >> 1] = HEAPU16[$2 >> 1];
HEAP16[$3 + 16 >> 1] = HEAPU16[$1 >> 1];
$5 = HEAP32[HEAP32[$4 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($5 | 0, $4 | 0, $3 + 24 | 0, $3 + 16 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$5;
}
PostureChangeFlags___PostureChangeFlags_28_29($3 + 16 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 24 | 0);
}
$0 = HEAP32[$0 + 700 >> 2];
if ($0) {
HEAP16[$3 + 8 >> 1] = HEAPU16[$2 >> 1];
HEAP16[$3 >> 1] = HEAPU16[$1 >> 1];
$4 = HEAP32[HEAP32[$0 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $0 | 0, $3 + 8 | 0, $3 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$4;
}
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 8 | 0);
}
PostureChangeFlags___PostureChangeFlags_28_29($1);
PostureChangeFlags___PostureChangeFlags_28_29($2);
__stack_pointer = $3 - -64 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
$4 = $3 + 24 | 0;
$3 = $3 + 16 | 0;
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
$4 = $3 + 8 | 0;
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3 + 48 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 56 | 0);
break label$1;
}
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($4);
PostureChangeFlags___PostureChangeFlags_28_29($1);
PostureChangeFlags___PostureChangeFlags_28_29($2);
}
__resumeException($0 | 0);
abort();
}
function epilogProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
HEAP32[$0 + 272 >> 2] = $1;
HEAP32[$0 + 264 >> 2] = 775;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
while (1) {
label$7: {
HEAP32[$6 + 12 >> 2] = 0;
$4 = HEAP32[$0 + 144 >> 2];
$7 = FUNCTION_TABLE[HEAP32[$4 >> 2]]($4, $1, $2, $6 + 12 | 0) | 0;
$5 = HEAP32[$6 + 12 >> 2];
HEAP32[$0 + 276 >> 2] = $5;
$4 = 9;
label$8: {
label$9: {
switch ($7 - 11 | 0) {
default:
label$13: {
switch ($7 + 4 | 0) {
case 1:
break label$1;
case 4:
break label$3;
case 0:
break label$4;
case 2:
break label$5;
case 3:
break label$7;
default:
break label$13;
}
}
if (($7 | 0) != -15) {
break label$1;
}
if (HEAP32[$0 + 80 >> 2]) {
reportDefault($0, HEAP32[$0 + 144 >> 2], $1, $5);
$4 = 35;
if (HEAP32[$0 + 464 >> 2] == 2) {
break label$1;
}
$5 = HEAP32[$6 + 12 >> 2];
}
HEAP32[$3 >> 2] = $5;
$4 = 0;
break label$1;
case 4:
if (!HEAP32[$0 + 80 >> 2]) {
break label$8;
}
reportDefault($0, HEAP32[$0 + 144 >> 2], $1, $5);
break label$8;
case 0:
if (reportProcessingInstruction($0, HEAP32[$0 + 144 >> 2], $1, $5)) {
break label$8;
}
break label$2;
case 1:
case 3:
break label$1;
case 2:
break label$9;
}
}
if (!reportComment($0, HEAP32[$0 + 144 >> 2], $1, $5)) {
break label$2;
}
}
$1 = HEAP32[$6 + 12 >> 2];
HEAP32[$0 + 272 >> 2] = $1;
$4 = 35;
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 0:
break label$1;
case 1:
break label$4;
default:
continue;
}
}
break;
}
$4 = 5;
if (!HEAPU8[$0 + 468 | 0]) {
break label$4;
}
break label$1;
}
$4 = 6;
if (HEAPU8[$0 + 468 | 0]) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$4 = 0;
break label$1;
}
HEAP32[$0 + 272 >> 2] = $5;
$4 = 4;
break label$1;
}
$4 = 1;
}
__stack_pointer = $6 + 16 | 0;
return $4 | 0;
}
function __trunctfsf2($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
$12 = __stack_pointer - 32 | 0;
__stack_pointer = $12;
$4 = $3 & 2147483647;
$9 = $4;
$8 = $2;
$5 = $8;
$7 = 1065418752;
$7 = $4 - $7 | 0;
$6 = $7;
$7 = $4;
$5 = 1082064896;
$5 = $7 - $5 | 0;
$4 = $5;
$5 = $6;
$6 = $8;
label$1: {
if (($4 | 0) == ($5 | 0) & $6 >>> 0 > $6 >>> 0 | $4 >>> 0 > $5 >>> 0) {
$7 = $3;
$6 = $2;
$11 = ($7 & 33554431) << 7 | $6 >>> 25;
$6 = 0;
$9 = $6;
$5 = $1;
$13 = !($5 | $0);
$7 = $2;
$8 = $7 & 33554431;
$5 = $8;
$5 = !$6 & $5 >>> 0 < 16777216;
$4 = $8;
if (!(!$6 & ($4 | 0) == 16777216 ? $13 : $5)) {
$10 = $11 + 1073741825 | 0;
break label$1;
}
$10 = $11 + 1073741824 | 0;
$7 = $8;
$6 = $7 ^ 16777216;
$5 = $1;
$4 = $9;
$7 = $5 | $4;
$4 = $0;
$5 = $6 | $4;
if ($5 | $7) {
break label$1;
}
$10 = ($11 & 1) + $10 | 0;
break label$1;
}
$5 = $1;
$7 = !($5 | $0);
$5 = $9;
$5 = $5 >>> 0 < 2147418112;
$4 = $8;
$6 = $9;
if (!(!$4 & ($6 | 0) == 2147418112 ? $7 : $5)) {
$4 = $3;
$7 = $2;
$10 = (($4 & 33554431) << 7 | $7 >>> 25) & 4194303 | 2143289344;
break label$1;
}
$10 = 2139095040;
if ($9 >>> 0 > 1082064895) {
break label$1;
}
$10 = 0;
$4 = $9;
$11 = $4 >>> 16 | 0;
if ($11 >>> 0 < 16145) {
break label$1;
}
$6 = $3;
$5 = $6 & 65535;
$4 = $2;
$8 = $4;
$4 = $5 | 65536;
$9 = $4;
$4 = $1;
$6 = $9;
__ashlti3($12 + 16 | 0, $0, $4, $8, $6, $11 - 16129 | 0);
$6 = $4;
$4 = $9;
__lshrti3($12, $0, $6, $8, $4, 16257 - $11 | 0);
$5 = $12;
$4 = HEAP32[$5 + 8 >> 2];
$8 = $4;
$6 = HEAP32[$5 + 12 >> 2];
$9 = $6;
$5 = $8;
$10 = ($6 & 33554431) << 7 | $5 >>> 25;
$6 = $12;
$4 = HEAP32[$6 >> 2];
$11 = $4;
$5 = HEAP32[$6 + 4 >> 2];
$13 = $5;
$5 = HEAP32[$6 + 16 >> 2];
$1 = $5;
$4 = HEAP32[$6 + 20 >> 2];
$0 = $4;
$4 = HEAP32[$6 + 24 >> 2];
$7 = $4;
$5 = HEAP32[$6 + 28 >> 2];
$4 = $5;
$5 = $0;
$4 = $4 | $5;
$6 = $1;
$5 = $6 | $7;
$6 = ($4 | $5) != 0;
$5 = $13;
$4 = $5;
$1 = $4;
$7 = $11;
$0 = $6 | $7;
$13 = !($4 | $0);
$5 = $8;
$8 = $5 & 33554431;
$7 = 0;
$9 = $7;
$4 = $8;
$5 = !$7 & $4 >>> 0 < 16777216;
$4 = $7;
$6 = $8;
if (!(!$4 & ($6 | 0) == 16777216 ? $13 : $5)) {
$10 = $10 + 1 | 0;
break label$1;
}
$5 = $8;
$7 = $5 ^ 16777216;
$4 = $1;
$6 = $9;
$5 = $4 | $6;
$6 = $0;
$4 = $7 | $6;
if ($4 | $5) {
break label$1;
}
$10 = ($10 & 1) + $10 | 0;
}
__stack_pointer = $12 + 32 | 0;
$4 = $3;
return wasm2js_scratch_store_i32(2, $4 & -2147483648 | $10), wasm2js_scratch_load_f32();
}
function CompoundMovement__DeNest_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$1 = HEAP32[$0 + 540 >> 2];
$8 = ($1 | 0) > 0 ? $1 : 0;
$6 = $0 + 528 | 0;
$5 = DynamicArrayP_BasicMovement___DynamicArrayP_28int_29($4 + 16 | 0, $1);
$1 = 0;
while (1) {
label$2: {
if (($1 | 0) == ($8 | 0)) {
HEAP32[$0 + 540 >> 2] = 0;
$1 = 0;
label$4: {
while (1) {
if (($1 | 0) != ($8 | 0)) {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($5, $1);
label$7: {
if (!(HEAP32[$2 + 4 >> 2] != HEAP32[$0 + 4 >> 2] | HEAPF32[$2 + 52 >> 2] != Math_fround(0))) {
HEAP32[19359] = 0;
invoke_vii(501, $6 | 0, $2 + 528 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
label$9: {
if (!HEAPU8[67590]) {
break label$9;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
$7 = HEAP32[17651];
$7 = invoke_iii(356, $7 | 0, $3 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$3 = HEAP32[$2 + 540 >> 2];
HEAP32[19359] = 0;
HEAP32[$4 >> 2] = $7;
HEAP32[$4 + 4 >> 2] = $3;
HEAP32[$4 + 8 >> 2] = $1;
invoke_vii(71, 44412, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$9;
}
break label$2;
}
HEAP32[$2 + 540 >> 2] = 0;
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
break label$7;
}
HEAP32[19359] = 0;
invoke_vii(502, $6 | 0, $2 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$4;
}
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($5);
__stack_pointer = $4 + 32 | 0;
return;
}
break label$2;
}
HEAP32[19359] = 0;
invoke_vii(501, $5 | 0, $6 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($5);
__resumeException($1 | 0);
abort();
}
function Trajectory__PrecomputeTrajectories_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = operator_20new_28unsigned_20long_29(32);
HEAP32[19359] = 0;
invoke_ii(342, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
label$2: {
HEAP32[17581] = $0;
SetLinearTrajectory_28Trajectory__29($0);
$0 = operator_20new_28unsigned_20long_29(32);
HEAP32[19359] = 0;
invoke_ii(342, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[17580] = $0;
$0 = 0;
label$3: {
while (1) {
if (HEAP32[15355] <= ($0 | 0)) {
if (HEAPU8[70316]) {
$0 = HEAP32[17581];
HEAP32[17582] = $0;
HEAP32[17583] = $0;
HEAP32[17584] = $0;
HEAP32[17585] = $0;
HEAP32[17586] = $0;
HEAP32[17587] = $0;
HEAP32[17588] = $0;
$3 = $0;
$4 = $0;
$5 = $0;
$2 = $0;
$1 = $0;
$6 = $0;
break label$3;
}
} else {
HEAP32[HEAP32[HEAP32[17580] + 28 >> 2] + ($0 << 2) >> 2] = 1065353216;
$0 = $0 + 1 | 0;
continue;
}
break;
}
wasm2js_i32$0 = 70328, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70332, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70336, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70340, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(7), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70344, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70348, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70352, wasm2js_i32$1 = PrecomputeTrajectory_28short_29(6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = PrecomputeTrajectory_28short_29(8);
$0 = HEAP32[17581];
$3 = HEAP32[17587];
$4 = HEAP32[17586];
$5 = HEAP32[17585];
$1 = HEAP32[17582];
$6 = HEAP32[17588];
}
HEAP32[17592] = $1;
HEAP32[17589] = $2;
HEAP32[17602] = $6;
HEAP32[17601] = $3;
HEAP32[17600] = $4;
HEAP32[17599] = $1;
HEAP32[17598] = $5;
HEAP32[17595] = $1;
HEAP32[17603] = $0;
HEAP32[17593] = $2;
HEAP32[17594] = HEAP32[17580];
return;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
__resumeException($1 | 0);
abort();
}
function MakeSLJointDictionary_28_29() {
var $0 = 0, $1 = 0, $2 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$0 = invoke_iiii(280, $1 | 0, 0, 30) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[17508] = $0;
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29($0, 11178, 5226);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12779, 6469);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12720, 2011);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12848, 6889);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12336, 10619);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 11265, 5060);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12553, 4818);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12543, 6572);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12119, 10119);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 11260, 5052);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12548, 4811);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12538, 6563);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12114, 10113);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12162, 7203);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12219, 6360);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 11188, 2155);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12157, 7196);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 12214, 6354);
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[17508], 11183, 2149);
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function TargettedMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5845);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$3 = HEAPU16[$0 + 508 >> 1];
$4 = HEAPU16[$0 + 510 >> 1];
$5 = HEAP32[$0 + 528 >> 2];
$0 = HEAPU8[$5 + 13 | 0];
HEAP32[19359] = 0;
$0 = $0 & 64;
HEAP16[$2 >> 1] = $0 ? $4 : $3;
HEAP16[$2 + 8 >> 1] = $0 ? $3 : $4;
invoke_viiii(480, $5 | 0, $1 | 0, $2 + 8 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
PostureChangeFlags___PostureChangeFlags_28_29($2);
PostureChangeFlags___PostureChangeFlags_28_29($2 + 8 | 0);
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5845), 32284);
__stack_pointer = $2 + 16 | 0;
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($2);
PostureChangeFlags___PostureChangeFlags_28_29($2 + 8 | 0);
__resumeException($1 | 0);
abort();
}
function TokeniseSAMPA_28char_20const__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_ii(48, $3 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$2 = $0;
$1 = $2;
while (1) {
$3 = HEAP8[$1 | 0];
if ($3) {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
switch ($3 - 34 | 0) {
case 1:
case 2:
break label$10;
case 0:
case 3:
break label$8;
default:
break label$11;
}
}
label$12: {
switch ($3 - 58 | 0) {
case 1:
case 2:
break label$10;
case 0:
break label$6;
case 3:
break label$7;
default:
break label$12;
}
}
if (($3 | 0) == 95) {
break label$9;
}
if (($3 | 0) == 126) {
break label$6;
}
}
appendToken_28DynamicArrayP_char___2c_20char_20const__2c_20char_20const__29($4, $2, $1);
$2 = $1;
break label$6;
}
$1 = $1 + 1 | 0;
break label$6;
}
appendToken_28DynamicArrayP_char___2c_20char_20const__2c_20char_20const__29($4, $2, $1);
$2 = $1 + 1 | 0;
$1 = $2;
break label$6;
}
appendToken_28DynamicArrayP_char___2c_20char_20const__2c_20char_20const__29($4, $2, $1);
$2 = $1;
$1 = $1 + 1 | 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
appendToken_28DynamicArrayP_char___2c_20char_20const__2c_20char_20const__29($4, $2, $1);
if (!HEAPU8[67588]) {
break label$2;
}
HEAP32[$5 + 16 >> 2] = $0;
eprintf_28char_20const__2c_20____29(12577, $5 + 16 | 0);
$1 = 0;
while (1) {
if (($1 | 0) < HEAP32[$4 + 12 >> 2]) {
wasm2js_i32$0 = $5, wasm2js_i32$1 = DynamicArrayP_char___getElement_28int_29_20const($4, $1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(11084, $5);
$1 = $1 + 1 | 0;
continue;
}
break;
}
eputc_28char_29(10);
}
__stack_pointer = $5 + 32 | 0;
return $4;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($1 | 0);
abort();
}
function HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
$7 = HEAP32[$1 >> 2];
HEAP32[$6 + 28 >> 2] = $7;
HEAP32[$6 + 40 >> 2] = $7;
$8 = $0 + 172 | 0;
$5 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($8, $6 + 28 | 0);
if (!(!HEAPU8[67591] | ($7 & 255) != 44)) {
HEAP32[$6 + 16 >> 2] = $5;
eprintf_28char_20const__2c_20____29(24398, $6 + 16 | 0);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eputc_28char_29(10);
}
label$2: {
label$3: {
if (!$5) {
$7 = operator_20new_28unsigned_20long_29(56);
HEAP32[19359] = 0;
$5 = invoke_iii(328, $7 | 0, 0) | 0;
$9 = HEAP32[19359];
HEAP32[19359] = 0;
if (($9 | 0) != 1) {
HEAP32[$5 + 8 >> 2] = 2;
HEAP16[$5 + 12 >> 1] = HEAPU16[$1 >> 1];
HEAP8[$5 + 14 | 0] = HEAPU8[$1 + 2 | 0];
HEAP32[$5 + 16 >> 2] = $2;
Joint__addSite_28Site__29($2, $5);
DynamicArrayP_Site___appendElement_28Site__29(HEAP32[$0 + 108 >> 2], $5);
HEAP32[$5 + 4 >> 2] = HEAP32[HEAP32[$0 + 108 >> 2] + 12 >> 2];
Site__setGlobalPosition_28Vector_20const__29($5, $3);
$7 = HEAP32[$1 >> 2];
HEAP32[$6 + 12 >> 2] = $7;
HEAP32[$6 + 32 >> 2] = $7;
HashAny_SiteID_20const_2c_20Site____addItem_28SiteID_2c_20Site__29($8, $6 + 12 | 0, $5);
if (!HEAPU8[67563]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(18793, 0);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
break label$3;
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($7);
__resumeException($5 | 0);
abort();
}
if (Vector__isZero_28_29_20const(Site__getGlobalPosition_28_29($5))) {
Site__setGlobalPosition_28Vector_20const__29($5, $3);
if (!HEAPU8[67563]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(18753, 0);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(17606, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
break label$3;
}
if (!HEAPU8[67563]) {
break label$2;
}
eprintf_28char_20const__2c_20____29(18753, 0);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eputs_28char_20const__29(17744);
Vector__print_28_IO_FILE__2c_20int_29_20const(Site__getGlobalPosition_28_29($5), HEAP32[16886], 3);
}
eputc_28char_29(10);
}
if ($4 != Math_fround(0)) {
HEAPF32[$5 + 20 >> 2] = $4;
}
__stack_pointer = $6 + 48 | 0;
return $5;
}
function OneHDirMoveSpec__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
label$2: {
label$3: {
if (Vector__x_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Vector__y_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Vector__z_28_29_20const($0) == Math_fround(0)) {
break label$2;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22353, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPF32[$0 + 12 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = 3;
HEAPF64[$3 + 24 >> 3] = $4;
__small_fprintf($1, 29128, $3 + 16 | 0);
}
$2 = $0 + 16 | 0;
label$5: {
label$6: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$6;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$6;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$5;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22320, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 28 | 0;
label$7: {
label$8: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$8;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$8;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$7;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22484, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPF32[$0 + 40 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 40 >> 2];
HEAP32[$3 >> 2] = 3;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 28879, $3);
}
$0 = $0 + 44 | 0;
if (ZigzagInfo__isUndef_28_29_20const($0)) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22633, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
ZigzagInfo__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $3 + 32 | 0;
}
function animgen_acceptSiGML_28char__2c_20bool_20_28__29_28void__2c_20AnimgenStatus_2c_20int_29_2c_20void__2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
$7 = __stack_pointer - 32 | 0;
__stack_pointer = $7;
label$1: {
if (!animgen_preFlightCheck_28char__2c_20bool_20_28__29_28void__2c_20AnimgenStatus_2c_20int_29_2c_20void__29($0, $1, $2)) {
eprintf_28char_20const__2c_20____29(30417, 0);
break label$1;
}
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_ii(397, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
label$4: {
label$5: {
label$6: {
if (($6 | 0) != 1) {
$4 = HEAP32[18905];
$6 = HEAP32[18906];
$4 = ParserData__ParserData_28HashAny_char_20const__2c_20Gesture____2c_20DynamicArrayP_char_20const___2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___29($7 + 8 | 0, $4, 0, $6, $5);
HEAP32[19359] = 0;
$6 = invoke_iii(765, $0 | 0, $4 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
if (!(HEAP32[$5 + 12 >> 2] ? $6 : 1)) {
break label$6;
}
HEAP32[18884] = 5;
$5 = 0;
if (!$1) {
break label$5;
}
HEAP32[19359] = 0;
invoke_iiii($1 | 0, $2 | 0, 5, 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$5;
}
}
break label$4;
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$3;
}
HEAP32[18884] = 0;
if (!$1) {
break label$5;
}
HEAP32[19359] = 0;
$8 = Math_fround(invoke_fi(766, $5 | 0));
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$4;
}
HEAP32[19359] = 0;
$3 = Math_fround(Math_fround($8 - $3) / HEAPF32[15824]);
label$10: {
if (Math_fround(Math_abs($3)) < Math_fround(2147483648)) {
$0 = ~~$3;
break label$10;
}
$0 = -2147483648;
}
$2 = invoke_iiii($1 | 0, $2 | 0, 0, $0 + 1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
if ($2) {
break label$5;
}
HEAP32[18884] = 2;
}
ParserData___ParserData_28_29($4);
break label$1;
}
$5 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ParserData___ParserData_28_29($4);
}
__resumeException($5 | 0);
abort();
}
__stack_pointer = $7 + 32 | 0;
return $5;
}
function SplitMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 176 | 0;
__stack_pointer = $5;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 60 | 0, $1);
$6 = TwoHandStuff__TwoHandStuff_28TwoHandStuff_20const__29($5 + 88 | 0, $1);
HEAP32[19359] = 0;
$7 = invoke_iii(484, $5 | 0, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($3 | 0) != 1) {
$3 = HEAP32[$0 + 528 >> 2];
if ($3) {
$4 = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $3 | 0, $6 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP16[$0 + 508 >> 1] = HEAPU16[HEAP32[$0 + 528 >> 2] + 508 >> 1];
}
$3 = HEAP32[$0 + 532 >> 2];
if ($3) {
$4 = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $3 | 0, $7 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP16[$0 + 510 >> 1] = HEAPU16[HEAP32[$0 + 532 >> 2] + 510 >> 1];
}
HEAP32[19359] = 0;
invoke_vii(499, $1 | 0, $6 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vii(499, $1 + 44 | 0, $7 + 44 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
$3 = HEAP32[$0 + 528 >> 2];
if ($3) {
$4 = HEAP32[HEAP32[$3 >> 2] + 32 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $3 | 0, $1 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
}
$3 = HEAP32[$0 + 532 >> 2];
if ($3) {
$4 = HEAP32[HEAP32[$3 >> 2] + 32 >> 2];
HEAP32[19359] = 0;
invoke_viii($4 | 0, $3 | 0, $1 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
TwoHandStuff___TwoHandStuff_28_29($7);
TwoHandStuff___TwoHandStuff_28_29($6);
__stack_pointer = $5 + 176 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHandStuff___TwoHandStuff_28_29($7);
}
TwoHandStuff___TwoHandStuff_28_29($6);
__resumeException($0 | 0);
abort();
}
function OneHConcretePosture__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$2 = $0 + 4 | 0;
label$2: {
label$3: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$3;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$3;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$2;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23864, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 16 | 0;
label$4: {
label$5: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$4;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23879, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 40 | 0;
label$6: {
label$7: {
if (Quaternion__x_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Quaternion__y_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Quaternion__z_28_29_20const($2) == Math_fround(0)) {
break label$6;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21900, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Quaternion__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 56 >> 2];
fiprintf($1, 24261, $3 + 48 | 0);
OneHConcretePostureModifier__print_28_IO_FILE__29_20const($0 + 76 | 0, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 64 >> 2];
HEAP32[$3 + 32 >> 2] = 3;
HEAPF64[$3 + 40 >> 3] = $4;
__small_fprintf($1, 29144, $3 + 32 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 68 >> 2];
HEAP32[$3 + 16 >> 2] = 3;
HEAPF64[$3 + 24 >> 3] = $4;
__small_fprintf($1, 29210, $3 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$4 = HEAPF32[$0 + 72 >> 2];
HEAP32[$3 >> 2] = 3;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 29026, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function whichHands_28XMLCell__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 80 | 0;
__stack_pointer = $2;
$3 = HEAP32[$0 + 8 >> 2];
label$1: {
if (!$3) {
$0 = 0;
break label$1;
}
$0 = 0;
$1 = HEAP32[$3 + 12 >> 2];
if (!$1) {
break label$1;
}
while (1) {
if (($0 | 0) >= ($1 | 0)) {
$4 = 0;
while (1) {
if (($1 | 0) <= ($5 | 0)) {
$0 = 1;
break label$1;
}
$0 = 5;
$4 = mergeHands_28SET_OF_HANDS_2c_20SET_OF_HANDS_29($4, whichHands_28XMLCell__29(DynamicArrayP_XMLCell___getElement_28int_29_20const($3, $5)));
if (($4 | 0) == 5) {
break label$1;
}
$5 = $5 + 1 | 0;
$1 = HEAP32[$3 + 12 >> 2];
continue;
}
}
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($3, $0);
$1 = HEAP32[$4 >> 2];
if (!strncmp($1, 11071, 6)) {
$0 = 5;
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
eprintf_28char_20const__2c_20____29(43839, $2);
break label$1;
}
if (!strcmp($1, 6160)) {
$0 = 5;
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
eprintf_28char_20const__2c_20____29(43839, $2 + 16 | 0);
break label$1;
}
if (!strcmp($1, 10070)) {
$0 = 5;
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
HEAP32[$2 + 32 >> 2] = HEAP32[$4 >> 2];
eprintf_28char_20const__2c_20____29(43839, $2 + 32 | 0);
break label$1;
}
label$10: {
if (!strcmp($1, 6528)) {
break label$10;
}
if (!strcmp($1, 6318)) {
break label$10;
}
$0 = $0 + 1 | 0;
$1 = HEAP32[$3 + 12 >> 2];
continue;
}
break;
}
$0 = 1;
$1 = HEAP32[$4 + 4 >> 2];
if (!$1) {
break label$1;
}
$3 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 6318);
if (isArmLocation_28Location_29(SiGML__convertLocation_28char_20const__29($3))) {
$0 = 5;
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
HEAP32[$2 + 48 >> 2] = $3;
eprintf_28char_20const__2c_20____29(43903, $2 + 48 | 0);
break label$1;
}
if (!isArmLocation_28Location_29(SiGML__convertLocation_28char_20const__29(HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($1, 6271)))) {
break label$1;
}
$0 = 5;
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
HEAP32[$2 + 64 >> 2] = $3;
eprintf_28char_20const__2c_20____29(43903, $2 - -64 | 0);
}
__stack_pointer = $2 + 80 | 0;
return $0;
}
function OneHGesture__InitConcretePosture1_28OneHConcretePosture__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = __stack_pointer - 96 | 0;
__stack_pointer = $2;
$6 = HEAPU8[$0 | 0];
$3 = HEAP32[$0 + 72 >> 2];
$4 = HEAP32[$3 >> 2];
$7 = HEAP32[$3 + 8 >> 2];
label$1: {
$3 = $0 + 20 | 0;
label$2: {
if (!Direction3__defined_28_29_20const($3)) {
break label$2;
}
$5 = $0 + 32 | 0;
if (!Direction2__defined_28_29_20const($5)) {
break label$2;
}
if (!SiGML__handOrientation_28Quaternion__2c_20bool_2c_20Direction3_2c_20Direction2_29($1 + 40 | 0, OneHGesture__isRightHand_28_29_20const($0), Direction3__Direction3_28Direction3_20const__29($2 + 80 | 0, $3), Direction2__Direction2_28Direction2_20const__29($2 + 72 | 0, $5))) {
break label$2;
}
$5 = HEAP32[(HEAP32[$4 + 72 >> 2] + (OneHGesture__isRightHand_28_29_20const($0) << 4) | 0) + 32 >> 2];
if (!$5) {
OneHGesture__beginError_28_29_20const($0);
HEAP32[$2 + 4 >> 2] = $6 ? 6595 : 6581;
HEAP32[$2 >> 2] = $7;
eprintf_28char_20const__2c_20____29(34078, $2);
OneHGesture__invalidate_28_29($0);
break label$2;
}
$3 = Vector__Vector_28_29($2 + 56 | 0);
HEAP32[$2 + 52 >> 2] = 0;
HEAP32[$2 + 48 >> 2] = 0;
$6 = HEAP32[$0 + 16 >> 2];
HEAP32[$2 + 20 >> 2] = $6;
HEAP32[$2 + 40 >> 2] = $6;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($4, 0, $2 + 20 | 0, $3, $2 + 52 | 0, $2 + 48 | 0);
$4 = HEAP32[$2 + 52 >> 2];
label$4: {
if ($4) {
Gesture__transferLocation_28Vector__2c_20Joint__2c_20Joint__2c_20Vector_20const__29(HEAP32[$0 + 72 >> 2], $1 + 16 | 0, $5, $4, $3);
break label$4;
}
OneHGesture__beginError_28_29_20const($0);
eprintf_28char_20const__2c_20____29(17960, 0);
SiteID__print_28_IO_FILE__29_20const($0 + 16 | 0, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(42301, 0);
OneHGesture__invalidate_28_29($0);
}
HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 12 >> 2];
$3 = HEAP32[$0 + 8 >> 2];
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAP32[$2 + 24 >> 2] = $4;
HEAP32[$2 + 28 >> 2] = $3;
invoke_viii(700, $0 | 0, $1 + 4 | 0, $2 + 24 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
SiteIDPair___SiteIDPair_28_29($2 + 24 | 0);
HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] + 236 >> 2];
}
__stack_pointer = $2 + 96 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($2 + 24 | 0);
__resumeException($0 | 0);
abort();
}
function printDirection2SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction2_29($0, $1, $2, $3) {
if (Direction2__defined_28_29_20const($3)) {
label$2: {
if ($1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 15262);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 + 4 >> 2], 117, 100);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 >> 2], 108, 114);
$3 = 34;
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 15262);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 + 4 >> 2], 117, 100);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 >> 2], 108, 114);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
$3 = 10;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $3);
}
}
function Quaternion__setPreCompose_28Quaternion_20const__29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0);
$2 = Quaternion__y_28_29_20const($1);
$3 = Quaternion__z_28_29_20const($0);
$4 = Quaternion__z_28_29_20const($1);
$5 = Quaternion__y_28_29_20const($0);
$6 = Quaternion__x_28_29_20const($1);
$7 = Quaternion__w_28_29_20const($0);
$8 = Quaternion__w_28_29_20const($1);
$9 = Quaternion__x_28_29_20const($0);
$10 = Quaternion__z_28_29_20const($1);
$11 = Quaternion__x_28_29_20const($0);
$12 = Quaternion__x_28_29_20const($1);
$13 = Quaternion__z_28_29_20const($0);
$14 = Quaternion__y_28_29_20const($1);
$15 = Quaternion__w_28_29_20const($0);
$16 = Quaternion__w_28_29_20const($1);
$17 = Quaternion__y_28_29_20const($0);
$18 = Quaternion__x_28_29_20const($1);
$19 = Quaternion__y_28_29_20const($0);
$20 = Quaternion__y_28_29_20const($1);
$21 = Quaternion__x_28_29_20const($0);
$22 = Quaternion__z_28_29_20const($1);
$23 = Quaternion__w_28_29_20const($0);
$24 = Quaternion__w_28_29_20const($1);
$25 = Quaternion__z_28_29_20const($0);
$26 = Quaternion__x_28_29_20const($1);
$27 = Quaternion__x_28_29_20const($0);
$28 = Quaternion__y_28_29_20const($1);
$29 = Quaternion__y_28_29_20const($0);
$30 = Quaternion__z_28_29_20const($1);
$31 = Quaternion__z_28_29_20const($0);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround($8 * $9) + Math_fround(Math_fround($6 * $7) + Math_fround(Math_fround($2 * $3) - Math_fround($5 * $4)))), Math_fround(Math_fround($16 * $17) + Math_fround(Math_fround($14 * $15) + Math_fround(Math_fround($10 * $11) - Math_fround($13 * $12)))), Math_fround(Math_fround($24 * $25) + Math_fround(Math_fround($22 * $23) + Math_fround(Math_fround($18 * $19) - Math_fround($21 * $20)))), Math_fround(Math_fround(Quaternion__w_28_29_20const($1) * Quaternion__w_28_29_20const($0)) + Math_fround(Math_fround(Math_fround($27 * Math_fround(-$26)) - Math_fround($29 * $28)) - Math_fround($30 * $31))));
}
function addBinding($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$5 = HEAP32[$1 >> 2];
$7 = HEAPU8[$3 | 0];
label$1: {
label$2: {
if (!$7) {
$9 = 28;
if ($5) {
break label$1;
}
$10 = 1;
$9 = 40;
break label$2;
}
$10 = 1;
$9 = 40;
if (!$5 | HEAPU8[$5 | 0] != 120 | (HEAPU8[$5 + 1 | 0] != 109 | HEAPU8[$5 + 2 | 0] != 108)) {
break label$2;
}
$6 = HEAPU8[$5 + 3 | 0];
if ($6) {
if (HEAPU8[$5 + 5 | 0] | (($6 | 0) != 110 | HEAPU8[$5 + 4 | 0] != 115)) {
break label$2;
}
return 39;
}
$11 = 1;
$10 = 0;
$9 = 38;
}
$6 = 1;
$8 = 1;
$5 = 0;
while (1) {
$7 = $7 & 255;
if ($7) {
$6 = !(!($6 & 255) | $5 >>> 0 > 36) & HEAPU8[$5 + 49728 | 0] == ($7 | 0) ? $6 : 0;
$8 = !(($8 & 255) != 0 & $10) | HEAPU8[$5 + 49776 | 0] == ($7 | 0) & $5 >>> 0 <= 29 ? $8 : 0;
$5 = $5 + 1 | 0;
$7 = HEAPU8[$5 + $3 | 0];
continue;
}
break;
}
if ((($5 | 0) == 36 & ($6 & 255) != 0) != ($11 | 0)) {
break label$1;
}
if ($8 & 255) {
$9 = 40;
if (($5 | 0) == 29) {
break label$1;
}
}
$7 = (HEAPU8[$0 + 456 | 0] != 0) + $5 | 0;
$5 = HEAP32[$0 + 360 >> 2];
label$12: {
if ($5) {
if (HEAP32[$5 + 24 >> 2] < ($7 | 0)) {
$6 = $7 + 24 | 0;
$8 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]](HEAP32[$5 + 16 >> 2], $6) | 0;
if (!$8) {
return 1;
}
HEAP32[$5 + 24 >> 2] = $6;
HEAP32[$5 + 16 >> 2] = $8;
}
HEAP32[$0 + 360 >> 2] = HEAP32[$5 + 4 >> 2];
$6 = HEAP32[$5 + 16 >> 2];
break label$12;
}
$9 = 1;
$5 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](28) | 0;
if (!$5) {
break label$1;
}
$8 = $7 + 24 | 0;
$6 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($8) | 0;
HEAP32[$5 + 16 >> 2] = $6;
if (!$6) {
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]]($5);
return 1;
}
HEAP32[$5 + 24 >> 2] = $8;
}
HEAP32[$5 + 20 >> 2] = $7;
__memcpy($6, $3, $7);
$6 = HEAPU8[$0 + 456 | 0];
if ($6) {
HEAP8[(HEAP32[$5 + 16 >> 2] + $7 | 0) - 1 | 0] = $6;
}
HEAP32[$5 + 12 >> 2] = $2;
HEAP32[$5 >> 2] = $1;
HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
if (HEAPU8[$3 | 0] | (HEAP32[$0 + 340 >> 2] + 132 | 0) != ($1 | 0)) {
$7 = $5;
} else {
$7 = 0;
}
HEAP32[$1 + 4 >> 2] = $7;
HEAP32[$5 + 4 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = $5;
$9 = 0;
if (!$2) {
break label$1;
}
$5 = HEAP32[$0 + 100 >> 2];
if (!$5) {
break label$1;
}
FUNCTION_TABLE[$5 | 0](HEAP32[$0 + 4 >> 2], HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2] ? $3 : 0);
}
return $9;
}
function Quaternion__setCompose_28Quaternion_20const__29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0);
$2 = Quaternion__y_28_29_20const($0);
$3 = Quaternion__z_28_29_20const($1);
$4 = Quaternion__z_28_29_20const($0);
$5 = Quaternion__y_28_29_20const($1);
$6 = Quaternion__x_28_29_20const($0);
$7 = Quaternion__w_28_29_20const($1);
$8 = Quaternion__w_28_29_20const($0);
$9 = Quaternion__x_28_29_20const($1);
$10 = Quaternion__z_28_29_20const($0);
$11 = Quaternion__x_28_29_20const($1);
$12 = Quaternion__x_28_29_20const($0);
$13 = Quaternion__z_28_29_20const($1);
$14 = Quaternion__y_28_29_20const($0);
$15 = Quaternion__w_28_29_20const($1);
$16 = Quaternion__w_28_29_20const($0);
$17 = Quaternion__y_28_29_20const($1);
$18 = Quaternion__x_28_29_20const($0);
$19 = Quaternion__y_28_29_20const($1);
$20 = Quaternion__y_28_29_20const($0);
$21 = Quaternion__x_28_29_20const($1);
$22 = Quaternion__z_28_29_20const($0);
$23 = Quaternion__w_28_29_20const($1);
$24 = Quaternion__w_28_29_20const($0);
$25 = Quaternion__z_28_29_20const($1);
$26 = Quaternion__x_28_29_20const($0);
$27 = Quaternion__x_28_29_20const($1);
$28 = Quaternion__y_28_29_20const($0);
$29 = Quaternion__y_28_29_20const($1);
$30 = Quaternion__z_28_29_20const($0);
$31 = Quaternion__z_28_29_20const($1);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround($8 * $9) + Math_fround(Math_fround($6 * $7) + Math_fround(Math_fround($2 * $3) - Math_fround($5 * $4)))), Math_fround(Math_fround($16 * $17) + Math_fround(Math_fround($14 * $15) + Math_fround(Math_fround($10 * $11) - Math_fround($13 * $12)))), Math_fround(Math_fround($24 * $25) + Math_fround(Math_fround($22 * $23) + Math_fround(Math_fround($18 * $19) - Math_fround($21 * $20)))), Math_fround(Math_fround(Quaternion__w_28_29_20const($0) * Quaternion__w_28_29_20const($1)) + Math_fround(Math_fround(Math_fround($27 * Math_fround(-$26)) - Math_fround($29 * $28)) - Math_fround($30 * $31))));
}
function printDigitPairAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20DigitIndex_2c_20DigitIndex_29($0, $1, $2, $3, $4) {
if (!(($3 | 0) == -1 | ($4 | 0) == -1)) {
if ($1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262);
SprintDigit_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20DigitIndex_29($0, $3);
SprintDigit_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20DigitIndex_29($0, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
return;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262);
SprintDigit_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20DigitIndex_29($0, $3);
SprintDigit_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20DigitIndex_29($0, $4);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 48530);
}
}
function Quaternion__setPreInvCompose_28Quaternion_20const__29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0);
$2 = Quaternion__y_28_29_20const($1);
$3 = Quaternion__z_28_29_20const($0);
$4 = Quaternion__z_28_29_20const($1);
$5 = Quaternion__y_28_29_20const($0);
$6 = Quaternion__x_28_29_20const($1);
$7 = Quaternion__w_28_29_20const($0);
$8 = Quaternion__w_28_29_20const($1);
$9 = Quaternion__x_28_29_20const($0);
$10 = Quaternion__z_28_29_20const($1);
$11 = Quaternion__x_28_29_20const($0);
$12 = Quaternion__x_28_29_20const($1);
$13 = Quaternion__z_28_29_20const($0);
$14 = Quaternion__y_28_29_20const($1);
$15 = Quaternion__w_28_29_20const($0);
$16 = Quaternion__w_28_29_20const($1);
$17 = Quaternion__y_28_29_20const($0);
$18 = Quaternion__x_28_29_20const($1);
$19 = Quaternion__y_28_29_20const($0);
$20 = Quaternion__y_28_29_20const($1);
$21 = Quaternion__x_28_29_20const($0);
$22 = Quaternion__z_28_29_20const($1);
$23 = Quaternion__w_28_29_20const($0);
$24 = Quaternion__w_28_29_20const($1);
$25 = Quaternion__z_28_29_20const($0);
$26 = Quaternion__x_28_29_20const($1);
$27 = Quaternion__x_28_29_20const($0);
$28 = Quaternion__y_28_29_20const($1);
$29 = Quaternion__y_28_29_20const($0);
$30 = Quaternion__z_28_29_20const($1);
$31 = Quaternion__z_28_29_20const($0);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround($8 * $9) + Math_fround(Math_fround(Math_fround($4 * $5) - Math_fround($2 * $3)) - Math_fround($6 * $7))), Math_fround(Math_fround($16 * $17) + Math_fround(Math_fround(Math_fround($12 * $13) - Math_fround($10 * $11)) - Math_fround($14 * $15))), Math_fround(Math_fround($24 * $25) + Math_fround(Math_fround(Math_fround($20 * $21) - Math_fround($18 * $19)) - Math_fround($22 * $23))), Math_fround(Math_fround(Quaternion__w_28_29_20const($1) * Quaternion__w_28_29_20const($0)) + Math_fround(Math_fround($30 * $31) + Math_fround(Math_fround($26 * $27) + Math_fround($28 * $29)))));
}
function Quaternion__setComposeInv_28Quaternion_20const__29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0);
$2 = Quaternion__y_28_29_20const($0);
$3 = Quaternion__z_28_29_20const($1);
$4 = Quaternion__z_28_29_20const($0);
$5 = Quaternion__y_28_29_20const($1);
$6 = Quaternion__x_28_29_20const($0);
$7 = Quaternion__w_28_29_20const($1);
$8 = Quaternion__w_28_29_20const($0);
$9 = Quaternion__x_28_29_20const($1);
$10 = Quaternion__z_28_29_20const($0);
$11 = Quaternion__x_28_29_20const($1);
$12 = Quaternion__x_28_29_20const($0);
$13 = Quaternion__z_28_29_20const($1);
$14 = Quaternion__y_28_29_20const($0);
$15 = Quaternion__w_28_29_20const($1);
$16 = Quaternion__w_28_29_20const($0);
$17 = Quaternion__y_28_29_20const($1);
$18 = Quaternion__x_28_29_20const($0);
$19 = Quaternion__y_28_29_20const($1);
$20 = Quaternion__y_28_29_20const($0);
$21 = Quaternion__x_28_29_20const($1);
$22 = Quaternion__z_28_29_20const($0);
$23 = Quaternion__w_28_29_20const($1);
$24 = Quaternion__w_28_29_20const($0);
$25 = Quaternion__z_28_29_20const($1);
$26 = Quaternion__x_28_29_20const($0);
$27 = Quaternion__x_28_29_20const($1);
$28 = Quaternion__y_28_29_20const($0);
$29 = Quaternion__y_28_29_20const($1);
$30 = Quaternion__z_28_29_20const($0);
$31 = Quaternion__z_28_29_20const($1);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround(Math_fround($6 * $7) + Math_fround(Math_fround($4 * $5) - Math_fround($2 * $3))) - Math_fround($8 * $9)), Math_fround(Math_fround(Math_fround($14 * $15) + Math_fround(Math_fround($12 * $13) - Math_fround($10 * $11))) - Math_fround($16 * $17)), Math_fround(Math_fround(Math_fround($22 * $23) + Math_fround(Math_fround($20 * $21) - Math_fround($18 * $19))) - Math_fround($24 * $25)), Math_fround(Math_fround(Quaternion__w_28_29_20const($0) * Quaternion__w_28_29_20const($1)) + Math_fround(Math_fround($30 * $31) + Math_fround(Math_fround($26 * $27) + Math_fround($28 * $29)))));
}
function HanimAvatar__createSitePair_28SiteID_2c_20float_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0);
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
HEAP32[$4 + 60 >> 2] = 0;
HEAP32[$4 + 56 >> 2] = 0;
$5 = HEAP32[$1 >> 2];
HEAP32[$4 + 12 >> 2] = $5;
HEAP32[$4 + 48 >> 2] = $5;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 1, $4 + 12 | 0, 0, $4 + 56 | 0, $4 + 60 | 0);
label$1: {
$5 = HEAP32[$4 + 60 >> 2];
label$2: {
if (!$5) {
break label$2;
}
$8 = Vector__Vector_28Vector_20const__29($4 + 32 | 0, Site__getGlobalPosition_28_29($5));
$10 = HEAP16[24298];
$6 = $8 + ($10 << 2) | 0;
HEAPF32[$6 >> 2] = HEAPF32[$6 >> 2] + $2;
SiteID__makeSide_28AbsoluteBodySide_29_20const($4 + 24 | 0, $1, 2);
$11 = HEAPF32[$5 + 20 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
$7 = HEAP32[$4 + 56 >> 2];
$9 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $4 + 8 | 0, $7, $8, $11);
HEAPF32[$6 >> 2] = HEAPF32[$6 >> 2] - Math_fround($2 + $2);
SiteID__makeSide_28AbsoluteBodySide_29_20const($4 + 16 | 0, $1, 1);
$2 = HEAPF32[$5 + 20 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 16 >> 2];
$8 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $4 + 4 | 0, $7, $8, $2);
$0 = HEAP32[$5 + 24 >> 2];
if (!$0) {
break label$2;
}
$2 = Vector__length_28_29_20const($0);
$3 = tanf($3);
$0 = operator_20new_28unsigned_20long_29(12);
$6 = HEAP32[$5 + 24 >> 2];
HEAP32[19359] = 0;
$6 = invoke_iii(329, $0 | 0, $6 | 0) | 0;
$7 = HEAP32[19359];
HEAP32[19359] = 0;
if (($7 | 0) == 1) {
break label$1;
}
HEAP32[$9 + 24 >> 2] = $6;
$7 = $10 << 2;
$0 = $7 + $6 | 0;
$3 = Math_fround($2 * $3);
HEAPF32[$0 >> 2] = $3 + HEAPF32[$0 >> 2];
Vector__setLength_28float_29(HEAP32[$9 + 24 >> 2], $2);
$0 = operator_20new_28unsigned_20long_29(12);
$1 = HEAP32[$5 + 24 >> 2];
HEAP32[19359] = 0;
$6 = invoke_iii(329, $0 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$8 + 24 >> 2] = $6;
$5 = HEAP32[$9 + 24 >> 2] + $7 | 0;
HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] - $3;
Vector__setLength_28float_29(HEAP32[$9 + 24 >> 2], $2);
}
__stack_pointer = $4 - -64 | 0;
return;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
__resumeException($4 | 0);
abort();
}
function printAttribValue_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
if ($2) {
if ($1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262), safeString_28char_20const__29($3)), 34);
return;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262), safeString_28char_20const__29($3)), 34);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 10);
}
}
function DeleteNonmanualTables_28_29() {
var $0 = 0;
$0 = HEAP32[18845];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18845] = 0;
}
$0 = HEAP32[18846];
if ($0) {
dlfree($0);
HEAP32[18846] = 0;
}
$0 = HEAP32[18847];
if ($0) {
operator_20delete_28void__29(HashAny_int_2c_20int____HashAny_28_29($0));
HEAP32[18847] = 0;
}
$0 = HEAP32[18848];
if ($0) {
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($0));
HEAP32[18848] = 0;
}
$0 = HEAP32[18849];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18849] = 0;
}
$0 = HEAP32[18850];
if ($0) {
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($0));
HEAP32[18850] = 0;
}
$0 = HEAP32[18851];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18851] = 0;
}
$0 = HEAP32[18852];
if ($0) {
operator_20delete_28void__29(HashAny_int_2c_20int____HashAny_28_29($0));
HEAP32[18852] = 0;
}
$0 = HEAP32[18853];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18853] = 0;
}
$0 = HEAP32[18854];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18854] = 0;
}
$0 = HEAP32[18855];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18855] = 0;
}
$0 = HEAP32[18856];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18856] = 0;
}
$0 = HEAP32[18857];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18857] = 0;
}
$0 = HEAP32[18858];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18858] = 0;
}
$0 = HEAP32[18859];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18859] = 0;
}
$0 = HEAP32[18860];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18860] = 0;
}
$0 = HEAP32[18861];
if ($0) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0));
HEAP32[18861] = 0;
}
}
function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
$14 = 1;
$9 = $0;
$10 = $1;
$12 = ($9 | $10) != 0;
$9 = $3;
$10 = $9 & 2147483647;
$13 = $10;
$8 = $2;
$2 = $8;
$15 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
$9 = $10;
$11 = $8;
label$1: {
if (!$11 & ($9 | 0) == 2147418112 ? $12 : $15) {
break label$1;
}
$8 = $4;
$11 = $5;
$15 = ($8 | $11) != 0;
$8 = $7;
$11 = $8 & 2147483647;
$12 = $11;
$10 = $6;
$6 = $10;
$8 = $10;
$16 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
$8 = $11;
$9 = $10;
if (!$9 & ($8 | 0) == 2147418112 ? $15 : $16) {
break label$1;
}
$10 = $0;
$11 = $4;
$15 = $10 | $11;
$9 = $1;
$8 = $5;
$8 = $9 | $8;
$14 = $8;
$10 = $12;
$8 = $13;
$10 = $10 | $8;
$13 = $10;
$11 = $6;
$9 = $2;
$11 = $11 | $9;
$8 = $15;
$10 = $14;
$9 = $13;
$9 = $10 | $9;
if (!($11 | $8 | $9)) {
return 0;
}
$9 = $3;
$8 = $7;
$8 = $9 & $8;
$10 = $2;
$11 = $6;
if (($8 | 0) > 0 | ($8 | 0) >= 0) {
$14 = -1;
$9 = $1;
$8 = $5;
$10 = $4;
$11 = $0;
$13 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
$10 = $2;
$8 = $6;
$11 = $3;
$9 = $7;
$12 = $10 >>> 0 < $8 >>> 0 & ($11 | 0) <= ($9 | 0) | ($11 | 0) < ($9 | 0);
$9 = $8;
$8 = $10;
$10 = $11;
$11 = $7;
if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $13 : $12) {
break label$1;
}
$11 = $4;
$9 = $0;
$4 = $11 ^ $9;
$10 = $5;
$8 = $1;
$10 = $10 ^ $8;
$0 = $10;
$10 = $3;
$9 = $7;
$9 = $10 ^ $9;
$1 = $9;
$11 = $6;
$8 = $2;
$11 = $11 ^ $8;
$9 = $0;
$8 = $1;
$8 = $9 | $8;
$10 = $4;
$9 = $11 | $10;
return ($9 | $8) != 0;
}
$14 = -1;
$9 = $1;
$8 = $5;
$10 = $4;
$11 = $0;
$13 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
$10 = $2;
$8 = $6;
$11 = $3;
$9 = $7;
$12 = $10 >>> 0 > $8 >>> 0 & ($11 | 0) >= ($9 | 0) | ($11 | 0) > ($9 | 0);
$9 = $8;
$8 = $10;
$10 = $11;
$11 = $7;
if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $13 : $12) {
break label$1;
}
$11 = $4;
$9 = $0;
$4 = $11 ^ $9;
$10 = $5;
$8 = $1;
$10 = $10 ^ $8;
$0 = $10;
$10 = $3;
$9 = $7;
$9 = $10 ^ $9;
$1 = $9;
$11 = $6;
$8 = $2;
$11 = $11 ^ $8;
$9 = $0;
$8 = $1;
$8 = $9 | $8;
$10 = $4;
$9 = $11 | $10;
$14 = ($9 | $8) != 0;
}
return $14;
}
function DirectedMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
label$1: {
if ($2 <= Math_fround(0) | Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]) <= $2) {
break label$1;
}
$5 = $0 + 560 | 0;
if (wasm2js_i32$0 = 0, wasm2js_i32$1 = Direction2__isUndef_28_29_20const($5), wasm2js_i32$2 = HEAP32[$0 + 572 >> 2], 
wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
break label$1;
}
$6 = BasicMovement__GetTrajectoryFraction_28float_2c_20bool_29($0, $2, $3);
$7 = $6;
if (HEAPU8[$0 + 33 | 0]) {
$7 = BasicMovement__GetTrajectoryFraction_28float_2c_20bool_29($0, $2, $3 ^ 1);
}
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$3 = Vector__Vector_28_29($4 + 16 | 0);
label$5: {
if (Direction2__defined_28_29_20const($5)) {
OneHDirMoveSpec__currentPosition_28Vector__2c_20float_29($0 + 600 | 0, $3, $6);
Vector__setAdd_28Vector_20const__29($3, $0 - -64 | 0);
break label$5;
}
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($3, $0 - -64 | 0, $0 + 288 | 0, $6);
}
if (HEAP32[$0 + 572 >> 2]) {
$8 = Vector__Vector_28_29($4);
ZigzagInfo__zigzagTrajectory_28Vector__2c_20float_29_20const($0 + 644 | 0, $8, $6);
Vector__setAdd_28Vector_20const__29($3, $8);
}
Vector__setFrom_28Vector_20const__29($1 + 4 | 0, $3);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
$3 = Vector__Vector_28_29($4 + 16 | 0);
label$8: {
if (Direction2__defined_28_29_20const($5)) {
OneHDirMoveSpec__currentPosition_28Vector__2c_20float_29($0 + 672 | 0, $3, $6);
Vector__setAdd_28Vector_20const__29($3, $0 + 176 | 0);
break label$8;
}
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($3, $0 + 176 | 0, $0 + 400 | 0, $7);
}
if (HEAP32[$0 + 572 >> 2]) {
$5 = $0 + 716 | 0;
$0 = Vector__Vector_28_29($4);
ZigzagInfo__zigzagTrajectory_28Vector__2c_20float_29_20const($5, $0, $7);
Vector__setAdd_28Vector_20const__29($3, $0);
}
Vector__setFrom_28Vector_20const__29($1 + 116 | 0, $3);
}
__stack_pointer = $4 + 32 | 0;
}
function DirectedMovement__setAvatarDependentValues1_28OneHDirMoveSpec__2c_20Vector__2c_20AvatarTiming_20const__2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0;
$6 = __stack_pointer - 80 | 0;
__stack_pointer = $6;
$5 = Direction3__Direction3_28Direction3_20const__29($6 - -64 | 0, $0 + 528 | 0);
$8 = HEAP32[$0 + 540 >> 2];
$9 = Direction3__Direction3_28Direction3_20const__29($6 + 48 | 0, $0 + 544 | 0);
$4 = HEAPU16[($4 ? 70298 : 70296) >> 1];
HEAP16[$6 + 40 >> 1] = $4;
HEAP16[$6 + 6 >> 1] = $4;
ConvertDirectionPair_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($2, $5, $8, $9, $6 + 6 | 0);
Vector__setScale_28float_29($2, HEAPF32[$0 + 48 >> 2]);
$4 = $0 + 560 | 0;
if (!Direction2__isUndef_28_29_20const($4)) {
$7 = HEAPF32[$0 + 44 >> 2];
$5 = HEAP32[$0 + 568 >> 2];
HEAPF32[$0 + 40 >> 2] = $7 + Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - $7) * HEAPF32[(($5 << 2) + 68592 | 0) + 100 >> 2]);
$5 = $1 + 28 | 0;
SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($5, $2, Direction2__Direction2_28Direction2_20const__29($6 + 32 | 0, $4));
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($1, $5, $2);
Vector__setUnit_28_29($1);
HEAPF32[$1 + 12 >> 2] = HEAPF32[((HEAP32[$0 + 568 >> 2] << 2) + 68592 | 0) + 60 >> 2];
HEAPF32[$1 + 40 >> 2] = HEAPF32[((HEAP32[$0 + 568 >> 2] << 2) + 68592 | 0) + 80 >> 2];
$4 = Vector__Vector_28Vector_20const__29($6 + 16 | 0, $5);
$5 = $1 + 16 | 0;
Vector__setScale_28Vector_20const__2c_20float_29($5, $2, Math_fround(-.5));
Vector__setScale_28float_29($4, Math_fround(Vector__length_28_29_20const($5) * cot_28float_29(Math_fround(HEAPF32[$1 + 12 >> 2] * Math_fround(.5)))));
Vector__setAdd_28Vector_20const__29($5, $4);
}
$4 = HEAP32[$0 + 572 >> 2];
if ($4) {
$7 = HEAPF32[$0 + 44 >> 2];
HEAPF32[$0 + 40 >> 2] = Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - $7) * HEAPF32[$3 + 8 >> 2]) + $7;
HEAP32[$1 + 44 >> 2] = $4;
$4 = $1 + 48 | 0;
SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($4, $2, Direction2__Direction2_28Direction2_20const__29($6 + 8 | 0, $0 + 588 | 0));
$0 = HEAP32[$0 + 576 >> 2];
Vector__setScale_28float_29($4, Math_fround(Math_fround(HEAPF32[(($0 << 2) + 68592 | 0) + 160 >> 2] * HEAPF32[17154]) * Vector__length_28_29_20const($2)));
HEAPF32[$1 + 68 >> 2] = HEAPF32[$3 + 12 >> 2];
}
__stack_pointer = $6 + 80 | 0;
}
function __getf2($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
$16 = -1;
$9 = $0;
$10 = $1;
$12 = ($9 | $10) != 0;
$9 = $3;
$10 = $9 & 2147483647;
$13 = $10;
$8 = $2;
$2 = $8;
$14 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
$9 = $10;
$11 = $8;
label$1: {
if (!$11 & ($9 | 0) == 2147418112 ? $12 : $14) {
break label$1;
}
$8 = $4;
$11 = $5;
$14 = ($8 | $11) != 0;
$8 = $7;
$11 = $8 & 2147483647;
$12 = $11;
$10 = $6;
$6 = $10;
$8 = $10;
$15 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
$8 = $11;
$9 = $10;
if (!$9 & ($8 | 0) == 2147418112 ? $14 : $15) {
break label$1;
}
$10 = $0;
$11 = $4;
$15 = $10 | $11;
$9 = $1;
$8 = $5;
$8 = $9 | $8;
$14 = $8;
$10 = $12;
$8 = $13;
$10 = $10 | $8;
$13 = $10;
$11 = $6;
$9 = $2;
$11 = $11 | $9;
$8 = $15;
$10 = $14;
$9 = $13;
$9 = $10 | $9;
if (!($11 | $8 | $9)) {
return 0;
}
$9 = $3;
$8 = $7;
$8 = $9 & $8;
$10 = $2;
$11 = $6;
if (($8 | 0) > 0 | ($8 | 0) >= 0) {
$9 = $1;
$8 = $5;
$10 = $4;
$11 = $0;
$13 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
$10 = $2;
$8 = $6;
$11 = $3;
$9 = $7;
$12 = $10 >>> 0 < $8 >>> 0 & ($11 | 0) <= ($9 | 0) | ($11 | 0) < ($9 | 0);
$9 = $8;
$8 = $10;
$10 = $11;
$11 = $7;
if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $13 : $12) {
break label$1;
}
$11 = $4;
$9 = $0;
$4 = $11 ^ $9;
$10 = $5;
$8 = $1;
$10 = $10 ^ $8;
$0 = $10;
$10 = $3;
$9 = $7;
$9 = $10 ^ $9;
$1 = $9;
$11 = $6;
$8 = $2;
$11 = $11 ^ $8;
$9 = $0;
$8 = $1;
$8 = $9 | $8;
$10 = $4;
$9 = $11 | $10;
return ($9 | $8) != 0;
}
$9 = $1;
$8 = $5;
$10 = $4;
$11 = $0;
$13 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
$10 = $2;
$8 = $6;
$11 = $3;
$9 = $7;
$12 = $10 >>> 0 > $8 >>> 0 & ($11 | 0) >= ($9 | 0) | ($11 | 0) > ($9 | 0);
$9 = $8;
$8 = $10;
$10 = $11;
$11 = $7;
if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $13 : $12) {
break label$1;
}
$11 = $4;
$9 = $0;
$4 = $11 ^ $9;
$10 = $5;
$8 = $1;
$10 = $10 ^ $8;
$0 = $10;
$10 = $3;
$9 = $7;
$9 = $10 ^ $9;
$1 = $9;
$11 = $6;
$8 = $2;
$11 = $11 ^ $8;
$9 = $0;
$8 = $1;
$8 = $9 | $8;
$10 = $4;
$9 = $11 | $10;
$16 = ($9 | $8) != 0;
}
return $16;
}
function getAttributeId($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = HEAP32[$0 + 340 >> 2];
$7 = $4 + 80 | 0;
label$1: {
$5 = HEAP32[$4 + 92 >> 2];
if (($5 | 0) == HEAP32[$4 + 88 >> 2]) {
if (!poolGrow($7)) {
break label$1;
}
$5 = HEAP32[$4 + 92 >> 2];
}
HEAP32[$4 + 92 >> 2] = $5 + 1;
HEAP8[$5 | 0] = 0;
$1 = poolStoreString($7, $1, $2, $3);
if (!$1) {
break label$1;
}
$2 = $1 + 1 | 0;
$6 = lookup($4 + 40 | 0, $2, 12);
if (!$6) {
break label$1;
}
label$3: {
if (HEAP32[$6 >> 2] != ($2 | 0)) {
HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 96 >> 2];
break label$3;
}
HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2];
if (!HEAPU8[$0 + 232 | 0]) {
break label$3;
}
label$5: {
$5 = HEAPU8[$2 | 0];
if (($5 | 0) != 120 | HEAPU8[$1 + 2 | 0] != 109 | (HEAPU8[$1 + 3 | 0] != 108 | HEAPU8[$1 + 4 | 0] != 110)) {
break label$5;
}
if (HEAPU8[$1 + 5 | 0] != 115) {
break label$5;
}
$0 = HEAPU8[$1 + 6 | 0];
label$6: {
if (($0 | 0) != 58) {
if ($0) {
break label$5;
}
$4 = $4 + 132 | 0;
break label$6;
}
$4 = lookup($4 + 60 | 0, $1 + 7 | 0, 8);
}
HEAP8[$6 + 9 | 0] = 1;
HEAP32[$6 + 4 >> 2] = $4;
break label$3;
}
$0 = 0;
$1 = 0;
while (1) {
$5 = $5 & 255;
if (!$5) {
break label$3;
}
if (($5 | 0) == 58) {
while (1) {
label$11: {
$3 = HEAP32[$4 + 88 >> 2];
$5 = HEAP32[$4 + 92 >> 2];
if (($0 | 0) == ($1 | 0)) {
break label$11;
}
if (($3 | 0) == ($5 | 0)) {
if (!poolGrow($7)) {
break label$1;
}
$5 = HEAP32[$4 + 92 >> 2];
}
$3 = HEAPU8[$0 + $2 | 0];
HEAP32[$4 + 92 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $3;
$0 = $0 + 1 | 0;
continue;
}
break;
}
if (($3 | 0) == ($5 | 0)) {
if (!poolGrow($7)) {
break label$1;
}
$5 = HEAP32[$4 + 92 >> 2];
}
HEAP32[$4 + 92 >> 2] = $5 + 1;
HEAP8[$5 | 0] = 0;
$5 = lookup($4 + 60 | 0, HEAP32[$4 + 96 >> 2], 8);
HEAP32[$6 + 4 >> 2] = $5;
$0 = HEAP32[$5 >> 2];
$5 = HEAP32[$4 + 96 >> 2];
if (($0 | 0) == ($5 | 0)) {
HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2];
break label$3;
}
HEAP32[$4 + 92 >> 2] = $5;
} else {
$1 = $1 + 1 | 0;
$5 = HEAPU8[$2 + $1 | 0];
continue;
}
break;
}
}
return $6;
}
return 0;
}
function SeqMovement__printTopLevelSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$3 = $0 + 528 | 0;
$2 = HEAP32[$0 + 540 >> 2] << 16;
if (($2 | 0) == 131072) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, 1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1);
return;
}
if (($2 | 0) >= 131073) {
$4 = $2 >> 16;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5878);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$0 = 1;
while (1) {
$2 = $0 << 16 >> 16;
if (($4 | 0) <= ($2 | 0)) {
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5878), 32284);
$0 = 0;
} else {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 80 >> 2]]($2, $1);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
}
function OneHAbstractPosture__printLocationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
var $2 = 0, $3 = 0;
$3 = $0 + 4 | 0;
$2 = SiteID__isHandSite_28_29_20const($3);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
$2 = $2 ? 10070 : 6528;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), $2), 48530);
SiteIDPair__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($3, $1);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0 + 16 | 0, $1);
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), $2), 32284);
}
function Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0);
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
$5 = Vector__Vector_28_29($6 + 32 | 0);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($5, $1, $2);
label$1: {
label$2: {
$3 = Vector__lengthsq_28_29_20const($5);
$4 = Vector__dotProduct_28Vector_20const__29_20const($1, $2);
$7 = Math_fround($3 + Math_fround($4 * $4));
if (+$7 < 1e-6) {
break label$2;
}
label$3: {
if (+$3 < 1e-6) {
if ($4 > Math_fround(0)) {
break label$2;
}
if (Vector__x_28_29_20const($1) == Math_fround(0)) {
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(1), Math_fround(0), Math_fround(0), Math_fround(0));
break label$1;
}
$5 = Vector__Vector_28_29($6 + 16 | 0);
$4 = Vector__x_28_29_20const($1);
$3 = Vector__z_28_29_20const($1);
label$6: {
if (!(!($4 > Math_fround(0) & $3 > $4) & (!($4 < Math_fround(0)) | !($4 > $3)))) {
Vector__setFrom_28float_2c_20float_2c_20float_29($5, Math_fround(0), Math_fround(-$3), Vector__y_28_29_20const($1));
break label$6;
}
Vector__setFrom_28float_2c_20float_2c_20float_29($5, Math_fround(-Vector__y_28_29_20const($1)), $4, Math_fround(0));
}
$2 = Vector__Vector_28_29($6);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($2, $1, $5);
Vector__setScale_28float_29($2, Math_fround(Math_fround(1) / Vector__lengthsq_28_29_20const($1)));
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Vector__x_28_29_20const($2), Vector__y_28_29_20const($2), Vector__z_28_29_20const($2), Math_fround(0));
break label$3;
}
$4 = sqrt_28float_29(Math_fround(Math_fround(Math_fround($4 / sqrt_28float_29($7)) + Math_fround(1)) * Math_fround(.5)));
$7 = sqrt_28float_29(Math_fround($3 / $7));
$3 = sqrt_28float_29($3);
$3 = Math_fround(Math_fround($7 / Math_fround($4 + $4)) / $3);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Vector__x_28_29_20const($5) * $3), Math_fround($3 * Vector__y_28_29_20const($5)), Math_fround($3 * Vector__z_28_29_20const($5)), $4);
}
Quaternion__checkValidQuat_28_29_20const($0);
break label$1;
}
Quaternion__setZero_28_29($0);
}
__stack_pointer = $6 + 48 | 0;
}
function SeqMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$2 = __stack_pointer - 128 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 + 112 >> 2] = $0;
fiprintf($1, 32389, $2 + 112 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
if (HEAPU16[$0 + 544 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21827, $1);
HEAP32[$2 + 96 >> 2] = HEAP16[$0 + 544 >> 1];
fiprintf($1, 30758, $2 + 96 | 0);
}
if (HEAPF32[$0 + 548 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 548 >> 2];
HEAP32[$2 + 80 >> 2] = 3;
HEAPF64[$2 + 88 >> 3] = $3;
__small_fprintf($1, 29109, $2 + 80 | 0);
}
if (HEAPF32[$0 + 552 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 552 >> 2];
HEAP32[$2 + 64 >> 2] = 3;
HEAPF64[$2 + 72 >> 3] = $3;
__small_fprintf($1, 29090, $2 - -64 | 0);
}
if (HEAPU16[$0 + 556 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21913, $1);
HEAP32[$2 + 48 >> 2] = HEAP16[$0 + 556 >> 1];
fiprintf($1, 30758, $2 + 48 | 0);
}
$5 = HEAP16[$0 + 540 >> 1];
printIndent_28_IO_FILE__29($1);
HEAP32[$2 + 32 >> 2] = $5;
fiprintf($1, 25336, $2 + 32 | 0);
HEAP16[33801] = HEAPU16[33801] + 1;
$6 = $0 + 560 | 0;
$7 = $0 + 528 | 0;
while (1) {
$0 = $4 << 16 >> 16;
if (($5 | 0) <= ($0 | 0)) {
HEAP16[33801] = HEAPU16[33801] - 1;
$0 = 67602;
} else {
printIndent_28_IO_FILE__29($1);
if ($4 & 65535) {
$3 = DynamicArray0_float___getElement_28int_29_20const($6, $0 - 1 | 0);
} else {
$3 = Math_fround(0);
}
wasm2js_i32$0 = $2, wasm2js_f64$0 = +DynamicArray0_float___getElement_28int_29_20const($6, $0), 
HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
HEAPF64[$2 + 8 >> 3] = $3;
HEAP32[$2 >> 2] = $0;
__small_fprintf($1, 20886, $2);
label$11: {
if (!DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, $0)) {
fputs(14681, $1);
break label$11;
}
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($7, $0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $2 + 128 | 0;
}
function processXmlDecl($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
HEAP32[$4 + 28 >> 2] = 0;
HEAP32[$4 + 24 >> 2] = 0;
HEAP32[$4 + 20 >> 2] = 0;
HEAP32[$4 + 12 >> 2] = -1;
label$1: {
if (!XmlParseXmlDecl($1, HEAP32[$0 + 144 >> 2], $2, $3, $0 + 272 | 0, $4 + 20 | 0, $4 + 16 | 0, $4 + 28 | 0, $4 + 24 | 0, $4 + 12 | 0)) {
$1 = $1 ? 31 : 30;
break label$1;
}
if (!(HEAP32[$4 + 12 >> 2] != 1 | $1)) {
HEAP8[HEAP32[$0 + 340 >> 2] + 130 | 0] = 1;
}
label$4: {
label$5: {
if (HEAP32[$0 + 140 >> 2]) {
$2 = 0;
$1 = HEAP32[$4 + 28 >> 2];
if ($1) {
$3 = HEAP32[$0 + 144 >> 2];
$5 = poolStoreString($0 + 424 | 0, $3, $1, (FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]]($3, $1) | 0) + $1 | 0);
if (!$5) {
break label$4;
}
HEAP32[$0 + 440 >> 2] = HEAP32[$0 + 436 >> 2];
}
$1 = HEAP32[$4 + 20 >> 2];
if ($1) {
$2 = HEAP32[$0 + 144 >> 2];
$2 = poolStoreString($0 + 424 | 0, $2, $1, HEAP32[$4 + 16 >> 2] - HEAP32[$2 + 64 >> 2] | 0);
if (!$2) {
break label$4;
}
}
FUNCTION_TABLE[HEAP32[$0 + 140 >> 2]](HEAP32[$0 + 4 >> 2], $2, $5, HEAP32[$4 + 12 >> 2]);
break label$5;
}
if (HEAP32[$0 + 80 >> 2]) {
reportDefault($0, HEAP32[$0 + 144 >> 2], $2, $3);
}
$2 = 0;
}
label$10: {
if (HEAP32[$0 + 228 >> 2]) {
break label$10;
}
label$11: {
$1 = HEAP32[$4 + 24 >> 2];
if ($1) {
if (HEAP32[$1 + 64 >> 2] == HEAP32[HEAP32[$0 + 144 >> 2] + 64 >> 2]) {
break label$11;
}
HEAP32[$0 + 272 >> 2] = HEAP32[$4 + 28 >> 2];
$1 = 19;
break label$1;
}
$1 = HEAP32[$4 + 28 >> 2];
if (!$1) {
break label$10;
}
if (!$5) {
$2 = HEAP32[$0 + 144 >> 2];
$5 = poolStoreString($0 + 424 | 0, $2, $1, (FUNCTION_TABLE[HEAP32[$2 + 28 >> 2]]($2, $1) | 0) + $1 | 0);
if (!$5) {
break label$4;
}
}
$1 = handleUnknownEncoding($0, $5);
poolClear($0 + 424 | 0);
if (($1 | 0) != 18) {
break label$1;
}
HEAP32[$0 + 272 >> 2] = HEAP32[$4 + 28 >> 2];
$1 = 18;
break label$1;
}
HEAP32[$0 + 144 >> 2] = $1;
}
$1 = 0;
if (!($2 | $5)) {
break label$1;
}
poolClear($0 + 424 | 0);
break label$1;
}
$1 = 1;
}
__stack_pointer = $4 + 32 | 0;
return $1;
}
function little2_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$0 = HEAP32[$1 >> 2];
while (1) {
label$2: {
label$3: {
if (($2 | 0) != ($0 | 0)) {
$6 = HEAPU8[$0 | 0];
$7 = $6 << 24 >> 24;
label$5: {
label$6: {
label$7: {
label$8: {
$5 = HEAPU8[$0 + 1 | 0];
switch ($5 | 0) {
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
break label$7;
case 0:
break label$8;
default:
break label$6;
}
}
if (($7 | 0) < 0) {
break label$7;
}
$5 = HEAP32[$3 >> 2];
if (($5 | 0) == ($4 | 0)) {
break label$5;
}
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7;
break label$2;
}
$6 = HEAP32[$3 >> 2];
if (($4 - $6 | 0) < 2) {
break label$5;
}
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 << 2 | $7 << 24 >>> 30 | 192;
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7 & 63 | 128;
break label$2;
}
if ($5 - 216 >>> 0 >= 4) {
$6 = HEAP32[$3 >> 2];
if (($4 - $6 | 0) < 3) {
break label$5;
}
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 >>> 4 | 224;
$6 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 << 2 & 60 | ($7 & 192) >>> 6 | 128;
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7 & 63 | 128;
break label$2;
}
$8 = HEAP32[$3 >> 2];
if (($4 - $8 | 0) >= 4) {
break label$3;
}
}
$2 = $0;
}
HEAP32[$1 >> 2] = $2;
return;
}
HEAP32[$3 >> 2] = $8 + 1;
$5 = ($5 << 2 & 12 | $6 >>> 6) + 1 | 0;
HEAP8[$8 | 0] = $5 >>> 2 | 240;
$8 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $8 + 1;
HEAP8[$8 | 0] = $5 << 4 & 48 | $6 >>> 2 & 15 | 128;
$6 = HEAPU8[$0 + 3 | 0];
$5 = HEAPU8[$0 + 2 | 0];
$8 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $8 + 1;
HEAP8[$8 | 0] = $6 << 2 & 12 | ($7 << 4 & 48 | $5 >>> 6) | 128;
$7 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $7 + 1;
HEAP8[$7 | 0] = $5 & 63 | 128;
$0 = $0 + 2 | 0;
}
$0 = $0 + 2 | 0;
continue;
}
}
function big2_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$0 = HEAP32[$1 >> 2];
while (1) {
label$2: {
label$3: {
if (($2 | 0) != ($0 | 0)) {
$6 = HEAPU8[$0 + 1 | 0];
$7 = $6 << 24 >> 24;
label$5: {
label$6: {
label$7: {
label$8: {
$5 = HEAPU8[$0 | 0];
switch ($5 | 0) {
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
break label$7;
case 0:
break label$8;
default:
break label$6;
}
}
if (($7 | 0) < 0) {
break label$7;
}
$5 = HEAP32[$3 >> 2];
if (($5 | 0) == ($4 | 0)) {
break label$5;
}
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7;
break label$2;
}
$6 = HEAP32[$3 >> 2];
if (($4 - $6 | 0) < 2) {
break label$5;
}
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 << 2 | $7 << 24 >>> 30 | 192;
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7 & 63 | 128;
break label$2;
}
if ($5 - 216 >>> 0 >= 4) {
$6 = HEAP32[$3 >> 2];
if (($4 - $6 | 0) < 3) {
break label$5;
}
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 >>> 4 | 224;
$6 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5 << 2 & 60 | ($7 & 192) >>> 6 | 128;
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $7 & 63 | 128;
break label$2;
}
$8 = HEAP32[$3 >> 2];
if (($4 - $8 | 0) >= 4) {
break label$3;
}
}
$2 = $0;
}
HEAP32[$1 >> 2] = $2;
return;
}
HEAP32[$3 >> 2] = $8 + 1;
$5 = ($5 << 2 & 12 | $6 >>> 6) + 1 | 0;
HEAP8[$8 | 0] = $5 >>> 2 | 240;
$8 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $8 + 1;
HEAP8[$8 | 0] = $5 << 4 & 48 | $6 >>> 2 & 15 | 128;
$6 = HEAPU8[$0 + 2 | 0];
$5 = HEAPU8[$0 + 3 | 0];
$8 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $8 + 1;
HEAP8[$8 | 0] = $6 << 2 & 12 | ($7 << 4 & 48 | $5 >>> 6) | 128;
$7 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $7 + 1;
HEAP8[$7 | 0] = $5 & 63 | 128;
$0 = $0 + 2 | 0;
}
$0 = $0 + 2 | 0;
continue;
}
}
function printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0);
$5 = Math_fround(Math_floor($1));
label$1: {
if ($1 > Math_fround(0)) {
if ($1 == $5) {
if (Math_fround(Math_abs($5)) < Math_fround(2147483648)) {
$3 = ~~$5;
} else {
$3 = -2147483648;
}
$3 = ($3 | 0) > 0 ? $3 : 0;
while (1) {
if (($3 | 0) == ($4 | 0)) {
break label$1;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $2);
$4 = $4 + 1 | 0;
continue;
}
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $2), $1);
return;
}
if (!($1 < Math_fround(0))) {
break label$1;
}
if ($1 == $5) {
if (Math_fround(Math_abs($5)) < Math_fround(2147483648)) {
$4 = ~~$5;
} else {
$4 = -2147483648;
}
$2 = ($4 | 0) > 0 ? $4 : 0;
while (1) {
if (($2 | 0) == ($4 | 0)) {
break label$1;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $3);
$4 = $4 + 1 | 0;
continue;
}
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $3), 32), Math_fround(-$1)), 32);
}
}
function Joint__InitArticulation_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
if (HEAP32[$0 + 36 >> 2]) {
break label$2;
}
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$1 = HEAP32[$0 + 24 >> 2];
switch ($1 - 1 | 0) {
case 0:
break label$4;
case 3:
break label$5;
case 2:
break label$6;
case 1:
break label$7;
case 4:
break label$8;
default:
break label$3;
}
}
$1 = operator_20new_28unsigned_20long_29(24);
HEAP32[19359] = 0;
$2 = invoke_iii(141, $1 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 36 >> 2] = $2;
break label$2;
}
$1 = operator_20new_28unsigned_20long_29(40);
HEAP32[19359] = 0;
$2 = invoke_iii(142, $1 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 36 >> 2] = $2;
break label$2;
}
break label$1;
}
$1 = operator_20new_28unsigned_20long_29(72);
HEAP32[19359] = 0;
$2 = invoke_iii(143, $1 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 36 >> 2] = $2;
break label$2;
}
break label$1;
}
$1 = operator_20new_28unsigned_20long_29(68);
HEAP32[19359] = 0;
$2 = invoke_iii(144, $1 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 36 >> 2] = $2;
break label$2;
}
break label$1;
}
$1 = operator_20new_28unsigned_20long_29(24);
HEAP32[19359] = 0;
$2 = invoke_iii(145, $1 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 36 >> 2] = $2;
break label$2;
}
break label$1;
}
HEAP32[$4 >> 2] = $1;
eprintf_28char_20const__2c_20____29(44486, $4);
}
__stack_pointer = $4 + 16 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function RepeatMovement__RepeatMovement_28RepeatMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62268;
Direction3__Direction3_28_29($0 + 544 | 0);
HEAP32[19359] = 0;
invoke_ii(472, $0 + 568 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 592 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 604 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 616 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 628 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 640 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 652 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 664 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 676 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_iii(473, $0 | 0, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$2 = HEAP32[$1 + 696 >> 2];
$3 = HEAP32[HEAP32[$2 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
$2 = invoke_ii($3 | 0, $2 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 696 >> 2] = $2;
$1 = HEAP32[$1 + 700 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
$2 = invoke_ii($2 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 700 >> 2] = $2;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP8[$3 + 15 | 0] = $1;
label$1: {
label$2: {
label$3: {
label$4: {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0);
$2 = $1 - 1 | 0;
$4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
if (($2 | 0) == ($4 | 0)) {
break label$4;
}
break label$2;
}
$4 = 10;
$2 = 10;
$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
if (($1 | 0) != 10) {
break label$3;
}
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2, 0, 0);
$1 = $4;
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
break label$2;
}
}
$2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
break label$1;
}
$2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
$1 = $4;
}
$0 = $1 + $2 | 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $3 + 15 | 0);
HEAP8[$3 + 14 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + 1 | 0, $3 + 14 | 0);
__stack_pointer = $3 + 16 | 0;
}
function AnchorFinalMorphs_28float_2c_20AbstractTimedMorph_20const__29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
label$1: {
while (1) {
if (!$1) {
break label$1;
}
label$3: {
switch (HEAP32[$1 + 20 >> 2] - 1 | 0) {
case 0:
$4 = HEAPU8[$1 + 48 | 0];
if (!$4 | !HEAPU8[$1 + 49 | 0]) {
$2 = $1 + 16 | 0;
} else {
$2 = $1 + 12 | 0;
}
$3 = HEAPF32[$2 >> 2];
if (!($3 < $0)) {
break label$1;
}
$3 = Math_fround($0 - $3);
if (!($3 > Math_fround(0))) {
break label$1;
}
$2 = HEAPU8[$1 + 49 | 0];
if ($2) {
HEAPF32[$1 + 12 >> 2] = $3 + HEAPF32[$1 + 12 >> 2];
HEAPF32[$1 + 16 >> 2] = $3 + HEAPF32[$1 + 16 >> 2];
}
label$9: {
if ($4) {
$5 = HEAPF32[$1 + 8 >> 2];
break label$9;
}
HEAPF32[$1 + 4 >> 2] = $3 + HEAPF32[$1 + 4 >> 2];
$5 = Math_fround($3 + HEAPF32[$1 + 8 >> 2]);
HEAPF32[$1 + 8 >> 2] = $5;
}
if ($0 < $5) {
HEAPF32[$1 + 8 >> 2] = $0;
$0 = Math_fround(Math_fround($5 - $0) / Math_fround($5 - HEAPF32[$1 + 4 >> 2]));
HEAPF32[$1 + 36 >> 2] = Math_fround(HEAPF32[$1 + 28 >> 2] * $0) + Math_fround(HEAPF32[$1 + 36 >> 2] * Math_fround(Math_fround(1) - $0));
}
if (!HEAPU8[67595] | !(!$4 | ($2 | 0) != 0)) {
break label$1;
}
HEAPF64[$6 >> 3] = $3;
eprintf_28char_20const__2c_20____29(33154, $6);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, HEAP32[16886]);
eputc_28char_29(10);
break label$1;
case 2:
$1 = HEAP32[$1 + 24 >> 2];
$2 = HEAPU16[$1 + 12 >> 1];
if ($2 << 16 <= 0) {
break label$1;
}
$1 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($1, $2 - 1 | 0);
continue;
case 1:
break label$3;
default:
break label$1;
}
}
break;
}
$7 = HEAP16[HEAP32[$1 + 24 >> 2] + 12 >> 1];
$2 = 0;
while (1) {
$4 = $2 << 16 >> 16;
if (($7 | 0) <= ($4 | 0)) {
break label$1;
}
AnchorFinalMorphs_28float_2c_20AbstractTimedMorph_20const__29($0, DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[$1 + 24 >> 2], $4));
$2 = $2 + 1 | 0;
continue;
}
}
__stack_pointer = $6 + 16 | 0;
}
function SplitMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5832);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = HEAP32[$0 + 528 >> 2];
label$1: {
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 80 >> 2]]($2, $1);
break label$1;
}
printSiGMLNoMotion_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($1);
}
$0 = HEAP32[$0 + 532 >> 2];
label$3: {
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1);
break label$3;
}
printSiGMLNoMotion_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($1);
}
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5832), 32284);
}
function poolGrow($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
label$2: {
label$3: {
$1 = HEAP32[$0 + 4 >> 2];
if (!$1) {
break label$3;
}
$2 = HEAP32[$0 + 16 >> 2];
if (!$2) {
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
HEAP32[$1 >> 2] = 0;
$2 = HEAP32[$0 >> 2];
$1 = $2 + 8 | 0;
HEAP32[$0 + 16 >> 2] = $1;
$2 = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 12 >> 2] = $1;
HEAP32[$0 + 8 >> 2] = $1 + $2;
break label$2;
}
if (HEAP32[$1 + 4 >> 2] <= (HEAP32[$0 + 8 >> 2] - $2 | 0)) {
break label$3;
}
$2 = HEAP32[$1 >> 2];
HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
$1 = HEAP32[$0 + 4 >> 2];
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
$4 = $1 + 8 | 0;
$1 = HEAP32[$0 + 16 >> 2];
__memcpy($4, $1, HEAP32[$0 + 8 >> 2] - $1 | 0);
$2 = HEAP32[$0 + 16 >> 2];
$3 = HEAP32[$0 >> 2];
$1 = $3 + 8 | 0;
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = (HEAP32[$0 + 12 >> 2] - $2 | 0) + $1;
HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 4 >> 2] + $1;
break label$2;
}
$3 = HEAP32[$0 + 8 >> 2];
$2 = HEAP32[$0 >> 2];
$1 = HEAP32[$0 + 16 >> 2];
if (!(!$2 | ($1 | 0) != ($2 + 8 | 0))) {
$3 = $3 - $1 << 1;
$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 20 >> 2] + 4 >> 2]]($2, $3 + 8 | 0) | 0;
HEAP32[$0 >> 2] = $1;
if (!$1) {
break label$1;
}
HEAP32[$1 + 4 >> 2] = $3;
$2 = HEAP32[$0 + 16 >> 2];
$1 = HEAP32[$0 >> 2] + 8 | 0;
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = (HEAP32[$0 + 12 >> 2] - $2 | 0) + $1;
HEAP32[$0 + 8 >> 2] = $1 + $3;
return 1;
}
$1 = $3 - $1 | 0;
$2 = ($1 | 0) < 1024 ? 1024 : $1 << 1;
$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 20 >> 2] >> 2]]($2 + 8 | 0) | 0;
if (!$1) {
break label$1;
}
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = $1;
$3 = HEAP32[$0 + 12 >> 2];
$4 = HEAP32[$0 + 16 >> 2];
label$6: {
if (($3 | 0) == ($4 | 0)) {
$4 = $3;
break label$6;
}
__memcpy($1 + 8 | 0, $4, $3 - $4 | 0);
$3 = HEAP32[$0 + 16 >> 2];
$4 = HEAP32[$0 + 12 >> 2];
}
$1 = $1 + 8 | 0;
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = ($4 - $3 | 0) + $1;
HEAP32[$0 + 8 >> 2] = $1 + $2;
}
return 1;
}
return 0;
}
function GetTrajectoryInfo_28XMLCell__29($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$0 = XMLCell__element_28char_20const__29($0, 4056);
wasm2js_i32$0 = 61424, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2197, Math_fround(.9950000047683716)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 61420, wasm2js_i32$1 = XMLCell__attrib_int32_28char_20const__2c_20int_29($0, 3651, 1e3), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$5 = HEAP32[$0 + 8 >> 2];
if ($5) {
$1 = HEAP32[$5 + 12 >> 2];
}
$7 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($6 | 0) != ($7 | 0)) {
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const($5, $6);
$0 = HEAP32[$1 >> 2];
$4 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[17604], $0);
label$4: {
if ($4) {
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2636, Math_fround(0));
$0 = Math_imul($4, 28);
HEAPF32[$0 + HEAP32[17605] >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2649, Math_fround(0));
HEAPF32[(HEAP32[17605] + $0 | 0) + 4 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5271, Math_fround(0));
HEAPF32[(HEAP32[17605] + $0 | 0) + 8 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2120, Math_fround(0));
HEAPF32[(HEAP32[17605] + $0 | 0) + 12 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 2197, HEAPF32[15356]);
HEAPF32[(HEAP32[17605] + $0 | 0) + 20 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 5552, Math_fround(0));
HEAPF32[(HEAP32[17605] + $0 | 0) + 24 >> 2] = $2;
break label$4;
}
LogTime_28_29();
HEAP32[$3 + 16 >> 2] = HEAP32[$1 >> 2];
eprintf_28char_20const__2c_20____29(42764, $3 + 16 | 0);
}
if (HEAPU8[67596]) {
HEAP32[$3 >> 2] = $4;
eprintf_28char_20const__2c_20____29(20462, $3);
TrajectoryParams__print_28_IO_FILE__29(HEAP32[17605] + Math_imul($4, 28) | 0, HEAP32[16886]);
eputc_28char_29(10);
}
$6 = $6 + 1 | 0;
continue;
}
break;
}
__stack_pointer = $3 + 32 | 0;
}
function SplitMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0;
$6 = __stack_pointer - 224 | 0;
__stack_pointer = $6;
label$1: {
label$2: {
label$3: {
if (!($2 <= Math_fround(0))) {
$7 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if (!($7 <= $2)) {
break label$3;
}
}
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
break label$2;
}
label$5: {
if (HEAP32[$0 + 528 >> 2]) {
$4 = TwoHConcretePosture__TwoHConcretePosture_28TwoHConcretePosture_20const__29($6, $1);
$5 = HEAP32[$0 + 528 >> 2];
$8 = HEAP32[HEAP32[$5 >> 2] + 60 >> 2];
HEAP32[19359] = 0;
invoke_viifi($8 | 0, $5 | 0, $4 | 0, Math_fround($2), $3 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
__memcpy($1, $4, 112);
TwoHConcretePosture___TwoHConcretePosture_28_29($4);
break label$5;
}
OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_2c_20bool_29($1, $0 + 60 | 0, $0 + 284 | 0, Math_fround($2 / $7), (HEAPU16[$0 + 508 >> 1] & 64) >>> 6 | 0);
}
if (HEAP32[$0 + 532 >> 2]) {
$4 = TwoHConcretePosture__TwoHConcretePosture_28TwoHConcretePosture_20const__29($6, $1);
$0 = HEAP32[$0 + 532 >> 2];
$5 = HEAP32[HEAP32[$0 >> 2] + 60 >> 2];
HEAP32[19359] = 0;
invoke_viifi($5 | 0, $0 | 0, $4 | 0, Math_fround($2), $3 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
__memcpy($1 + 112 | 0, $4 + 112 | 0, 112);
TwoHConcretePosture___TwoHConcretePosture_28_29($4);
break label$2;
}
break label$1;
}
OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_2c_20bool_29($1 + 112 | 0, $0 + 172 | 0, $0 + 396 | 0, Math_fround($2 / $7), (HEAPU16[$0 + 508 >> 1] & 64) >>> 6 | 0);
}
__stack_pointer = $6 + 224 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHConcretePosture___TwoHConcretePosture_28_29($4);
__resumeException($0 | 0);
abort();
}
function printDigitsAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20short_29($0, $1, $2, $3) {
if ($3) {
if ($1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262);
SprintDigits_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20short_29($0, $3);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
return;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262);
SprintDigits_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20short_29($0, $3);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 48530);
}
}
function RepeatMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 5821), 48530);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 0);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$0 = HEAP32[$0 + 696 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1);
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5821), 32284);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
std____2__allocator_char__20std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($1));
$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $2 + 8 | 0, $2);
label$1: {
if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($1)) {
$1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($1);
$3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
HEAP32[$3 + 4 >> 2] = $4;
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_copy_ctor_external_28char_20const__2c_20unsigned_20long_29($0, char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($1)), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($1));
}
__stack_pointer = $2 + 16 | 0;
return $0 | 0;
}
function HanimAnimationRecord__generate1ARPAnimation_28Gesture__2c_20bool_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = HEAPF32[$0 + 56 >> 2];
$9 = HEAP32[$1 + 44 >> 2];
$6 = HEAPF32[$9 + 40 >> 2];
$1 = HEAP32[$1 + 48 >> 2];
TwoArmAnimator__setMovement_28BasicMovement__29(HEAP32[$0 + 100 >> 2], $9);
FaceAnimator__setMovement_28NonmanualMovement___29(HEAP32[$0 + 104 >> 2], $1);
$5 = HEAP32[$0 + 108 >> 2];
$4 = HEAPF32[$0 + 8 >> 2];
$7 = Math_fround(HEAPF32[$0 + 56 >> 2] / $4);
label$1: {
if (Math_fround(Math_abs($7)) < Math_fround(2147483648)) {
$1 = ~~$7;
break label$1;
}
$1 = -2147483648;
}
if (($5 | 0) < ($1 | 0)) {
HEAP32[$0 + 108 >> 2] = $1;
$5 = $1;
}
$6 = Math_fround($3 + $6);
$3 = Math_fround($4 * Math_fround($5 | 0));
HEAPF32[$0 + 60 >> 2] = $3;
$5 = $0 + 120 | 0;
$1 = 1;
while (1) {
if (!(!($3 <= $6) | !($1 & 1))) {
AvatarJointRotationIndex__ZeroBodyRotations_28_29($5);
$1 = 1;
$4 = Math_fround(HEAPF32[$0 + 60 >> 2] - HEAPF32[$0 + 56 >> 2]);
$3 = Math_fround(HEAPF32[$0 + 8 >> 2] * Math_fround(HEAP32[$0 + 108 >> 2] + 1 | 0));
FaceAnimator__newTime_28float_2c_20float_2c_20float__2c_20bool_29(HEAP32[$0 + 104 >> 2], $4, HEAPF32[$9 + 40 >> 2], HEAP32[$0 + 348 >> 2], $6 < $3 & $2);
HanimAnimationRecord__ApplyPseudoMorphs_28_29($0);
TwoArmAnimator__newTime_28float_29(HEAP32[$0 + 100 >> 2], $4);
$7 = HEAPF32[$0 + 60 >> 2];
$4 = HEAPF32[$0 + 8 >> 2];
$8 = HEAPU8[$0 + 24 | 0];
fillARPFrame_28SSFrame__2c_20int_2c_20float_2c_20float_2c_20AvatarJointRotationIndex__2c_20float__2c_20float__2c_20bool_29(HEAP32[17070], $7, $4, $5, HEAP32[$0 + 344 >> 2], HEAP32[$0 + 348 >> 2], $8);
$8 = HEAP32[$0 + 68 >> 2];
if ($8) {
$1 = FUNCTION_TABLE[$8 | 0](HEAP32[$0 + 76 >> 2], HEAP32[17070]) | 0;
}
HEAPF32[$0 + 60 >> 2] = $3;
HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
wasm2js_i32$0 = $0, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0 + 344 >> 2], HEAP32[$0 + 348 >> 2], 32, 0), 
HEAP32[wasm2js_i32$0 + 344 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 348 >> 2] = i64toi32_i32$HIGH_BITS;
continue;
}
break;
}
HEAPF32[$0 + 56 >> 2] = $6;
}
function parserCreate($0, $1, $2) {
var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
label$1: {
label$2: {
if ($1) {
$3 = FUNCTION_TABLE[HEAP32[$1 >> 2]](472) | 0;
if (!$3) {
break label$1;
}
$4 = HEAP32[$1 >> 2];
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 + 8 >> 2];
break label$2;
}
$3 = dlmalloc(472);
if (!$3) {
break label$1;
}
$4 = 767;
HEAP32[$3 + 12 >> 2] = 767;
HEAP32[$3 + 16 >> 2] = 768;
$1 = 769;
}
HEAP32[$3 + 364 >> 2] = 16;
HEAP32[$3 + 32 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 20 >> 2] = $1;
$1 = FUNCTION_TABLE[$4 | 0](256) | 0;
HEAP32[$3 + 376 >> 2] = $1;
if (!$1) {
FUNCTION_TABLE[HEAP32[$3 + 20 >> 2]]($3);
return 0;
}
$1 = FUNCTION_TABLE[HEAP32[$3 + 12 >> 2]](1024) | 0;
HEAP32[$3 + 44 >> 2] = $1;
if (!$1) {
$1 = $3 + 20 | 0;
FUNCTION_TABLE[HEAP32[$1 >> 2]](HEAP32[$3 + 376 >> 2]);
FUNCTION_TABLE[HEAP32[$3 + 20 >> 2]]($3);
break label$1;
}
HEAP32[$3 + 48 >> 2] = $1 + 1024;
$1 = $3 + 12 | 0;
$4 = dtdCreate($1);
HEAP32[$3 + 340 >> 2] = $4;
if (!$4) {
$1 = $3 + 20 | 0;
FUNCTION_TABLE[HEAP32[$1 >> 2]](HEAP32[$3 + 44 >> 2]);
FUNCTION_TABLE[HEAP32[$3 + 20 >> 2]](HEAP32[$3 + 376 >> 2]);
FUNCTION_TABLE[HEAP32[$3 + 20 >> 2]]($3);
break label$1;
}
HEAP32[$3 + 352 >> 2] = 0;
HEAP32[$3 + 360 >> 2] = 0;
HEAP32[$3 + 288 >> 2] = 0;
HEAP32[$3 + 448 >> 2] = 0;
HEAP32[$3 + 452 >> 2] = 0;
HEAP8[$3 + 456 | 0] = 33;
HEAP32[$3 + 244 >> 2] = 0;
HEAP32[$3 + 124 >> 2] = 0;
HEAP32[$3 + 380 >> 2] = 0;
HEAP32[$3 + 384 >> 2] = 0;
HEAP16[$3 + 232 >> 1] = 0;
HEAP8[$3 + 388 | 0] = 0;
poolInit($3 + 400 | 0, $1);
poolInit($3 + 424 | 0, $1);
parserInit($3, $0);
if (!(HEAP32[$3 + 228 >> 2] | !$0)) {
XML_ParserFree($3);
break label$1;
}
label$8: {
if ($2) {
HEAP8[$3 + 232 | 0] = 1;
wasm2js_i32$0 = $3, wasm2js_i32$1 = XmlGetUtf8InternalEncoding(), HEAP32[wasm2js_i32$0 + 224 >> 2] = wasm2js_i32$1;
HEAP8[$3 + 456 | 0] = HEAPU8[$2 | 0];
break label$8;
}
wasm2js_i32$0 = $3, wasm2js_i32$1 = XmlGetUtf8InternalEncoding(), HEAP32[wasm2js_i32$0 + 224 >> 2] = wasm2js_i32$1;
}
return $3;
}
return 0;
}
function TwoHConcretePostureChange__interpolate_28TwoHConcretePosture__2c_20float_2c_20SET_OF_HANDS_2c_20bool_29_20const($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$5 = __stack_pointer + -64 | 0;
__stack_pointer = $5;
label$1: {
label$2: {
label$3: {
if (HaveRightHand_28SET_OF_HANDS_29($3)) {
HEAP16[$5 + 40 >> 1] = HEAPU16[$0 + 448 >> 1];
$6 = HEAP32[$0 + 456 >> 2];
$8 = HEAP32[$0 + 452 >> 2];
$7 = $8;
HEAP32[19359] = 0;
HEAP32[$5 + 32 >> 2] = $7;
HEAP32[$5 + 36 >> 2] = $6;
HEAP32[$5 + 8 >> 2] = $7;
HEAP32[$5 + 12 >> 2] = $6;
invoke_vifiii(448, $5 + 48 | 0, Math_fround($2), $5 + 40 | 0, $5 + 8 | 0, $4 | 0);
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$3;
}
PostureChangeFlags___PostureChangeFlags_28_29($5 + 40 | 0);
OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_20const__2c_20bool_29($1, $0, $0 + 224 | 0, $5 + 48 | 0, (HEAPU16[$0 + 448 >> 1] & 64) >>> 6 | 0);
}
if (HaveLeftHand_28SET_OF_HANDS_29($3)) {
HEAP16[$5 + 24 >> 1] = HEAPU16[$0 + 450 >> 1];
$8 = HEAP32[$0 + 464 >> 2];
$6 = HEAP32[$0 + 460 >> 2];
$7 = $6;
HEAP32[19359] = 0;
HEAP32[$5 + 16 >> 2] = $7;
HEAP32[$5 + 20 >> 2] = $8;
HEAP32[$5 >> 2] = $7;
HEAP32[$5 + 4 >> 2] = $8;
invoke_vifiii(448, $5 + 48 | 0, Math_fround($2), $5 + 24 | 0, $5 | 0, $4 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$2;
}
PostureChangeFlags___PostureChangeFlags_28_29($5 + 24 | 0);
OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_20const__2c_20bool_29($1 + 112 | 0, $0 + 112 | 0, $0 + 336 | 0, $5 + 48 | 0, (HEAPU16[$0 + 450 >> 1] & 64) >>> 6 | 0);
}
__stack_pointer = $5 - -64 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($5 + 40 | 0);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($5 + 24 | 0);
}
__resumeException($0 | 0);
abort();
}
function AnimgenInstance__AGIFrame_28SSFrame__2c_20bool__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
$3 = __stack_pointer - 112 | 0;
__stack_pointer = $3;
$5 = SSFrame__GetNumMorphs_28_29_20const($1);
$7 = SSFrame__GetNumPRSets_28_29_20const($1);
$4 = HEAP32[$0 + 36 >> 2];
$6 = HEAPF32[$1 + 28 >> 2];
HEAPF64[$3 + 104 >> 3] = Math_fround(HEAPF32[$1 + 32 >> 2] * Math_fround(1e3));
HEAPF64[$3 + 96 >> 3] = Math_fround($6 * Math_fround(1e3));
HEAP32[$3 + 88 >> 2] = $5;
HEAP32[$3 + 84 >> 2] = $7;
HEAP32[$3 + 80 >> 2] = $4;
emscripten_asm_const_int(66642, 49581, $3 + 80 | 0) | 0;
$4 = 0;
$8 = ($5 | 0) > 0 ? $5 : 0;
$9 = $1 + 16 | 0;
while (1) {
if (($4 | 0) == ($8 | 0)) {
label$3: {
$5 = 0;
$8 = ($7 | 0) > 0 ? $7 : 0;
$9 = $1 + 4 | 0;
while (1) {
if (($5 | 0) == ($8 | 0)) {
break label$3;
}
$4 = HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($9, $5) >> 2];
$6 = HEAPF32[$4 + 12 >> 2];
$11 = HEAPF32[$4 + 16 >> 2];
$12 = HEAPF32[$4 + 20 >> 2];
$13 = HEAPF32[$4 + 24 >> 2];
$14 = HEAPF32[$4 + 32 >> 2];
$15 = HEAPF32[$4 + 36 >> 2];
$10 = HEAP32[$0 + 36 >> 2];
HEAPF64[$3 + 40 >> 3] = HEAPF32[$4 + 28 >> 2];
HEAPF64[$3 + 56 >> 3] = $15;
HEAPF64[$3 + 48 >> 3] = $14;
HEAPF64[$3 + 32 >> 3] = $13;
HEAPF64[$3 + 24 >> 3] = $12;
HEAPF64[$3 + 16 >> 3] = $11;
HEAPF64[$3 + 8 >> 3] = $6;
HEAP32[$3 + 4 >> 2] = $4 + 4;
HEAP32[$3 >> 2] = $10;
emscripten_asm_const_int(66802, 49591, $3 | 0) | 0;
$5 = $5 + 1 | 0;
continue;
}
}
} else {
$5 = HEAP32[std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($9, $4) >> 2];
$6 = HEAPF32[$5 + 12 >> 2];
$10 = HEAP32[$0 + 36 >> 2];
HEAP32[$3 + 68 >> 2] = $5 + 4;
HEAP32[$3 + 64 >> 2] = $10;
HEAPF64[$3 + 72 >> 3] = $6;
emscripten_asm_const_int(66684, 49587, $3 - -64 | 0) | 0;
$4 = $4 + 1 | 0;
continue;
}
break;
}
HEAP8[$2 | 0] = 1;
__stack_pointer = $3 + 112 | 0;
}
function Handshape__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
var $2 = 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 7474), 48530);
SiGMLHandshape__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, 0);
$2 = HEAP32[$0 + 220 >> 2];
label$1: {
if (!$2) {
break label$1;
}
SiGMLHandshape__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($2, $1, 0);
if (HEAPF32[$0 + 224 >> 2] == Math_fround(.5)) {
break label$1;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15097);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 224 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15263);
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function Site__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
fputs(20217, $1);
SiteID__print_28_IO_FILE__29_20const($0 + 12 | 0, $1);
$5 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[$0 >> 2];
$4 = HEAP32[$0 + 16 >> 2];
if ($4) {
$4 = HEAP32[$4 >> 2];
} else {
$4 = 0;
}
HEAP32[$3 + 24 >> 2] = $4;
HEAP32[$3 + 20 >> 2] = $5;
HEAP32[$3 + 16 >> 2] = $2;
fiprintf($1, 46827, $3 + 16 | 0);
$2 = $0 + 28 | 0;
label$4: {
label$5: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$5;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$4;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22701, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 40 | 0;
label$6: {
label$7: {
if (Vector__x_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Vector__y_28_29_20const($2) != Math_fround(0)) {
break label$7;
}
if (Vector__z_28_29_20const($2) == Math_fround(0)) {
break label$6;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22720, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($2, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPF32[$0 + 20 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$6 = HEAPF32[$0 + 20 >> 2];
HEAP32[$3 >> 2] = 3;
HEAPF64[$3 + 8 >> 3] = $6;
__small_fprintf($1, 29053, $3);
}
if (!HEAP32[$0 + 24 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22800, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const(HEAP32[$0 + 24 >> 2], $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $3 + 32 | 0;
}
function normal_scanComment($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$2: {
label$3: {
label$4: {
if (HEAPU8[$1 | 0] != 45) {
break label$4;
}
$4 = $1 + 1 | 0;
while (1) {
$1 = $4;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($4 | 0) {
case 6:
break label$10;
case 5:
break label$11;
case 0:
case 1:
case 8:
break label$4;
case 2:
case 3:
case 4:
break label$7;
case 7:
break label$9;
default:
break label$8;
}
}
if (($2 - $1 | 0) < 2) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 352 >> 2]]($0, $1) | 0) {
break label$4;
}
$4 = $1 + 2 | 0;
continue;
}
if (($2 - $1 | 0) < 3) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 356 >> 2]]($0, $1) | 0) {
break label$4;
}
$4 = $1 + 3 | 0;
continue;
}
if (($2 - $1 | 0) < 4) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$0 + 360 >> 2]]($0, $1) | 0) {
break label$4;
}
$4 = $1 + 4 | 0;
continue;
}
if (($4 | 0) == 27) {
break label$6;
}
}
$4 = $1 + 1 | 0;
continue;
}
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$1;
}
if (HEAPU8[$4 | 0] != 45) {
continue;
}
break;
}
$5 = -1;
$0 = $1 + 2 | 0;
if (($2 | 0) == ($0 | 0)) {
break label$3;
}
$2 = HEAPU8[$1 + 2 | 0] == 62;
$1 = $2 ? $1 + 3 | 0 : $0;
$5 = $2 ? 13 : 0;
}
HEAP32[$3 >> 2] = $1;
}
return $5;
}
return -2;
}
return -1;
}
function SeqMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5878);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$3 = $0 + 528 | 0;
$4 = HEAP16[$0 + 540 >> 1];
$0 = 0;
while (1) {
$2 = $0 << 16 >> 16;
if (($4 | 0) <= ($2 | 0)) {
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5878), 32284);
$0 = 0;
} else {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 80 >> 2]]($2, $1);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function ParMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5867);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32284);
HEAP16[33801] = HEAPU16[33801] + 1;
$3 = $0 + 528 | 0;
$4 = HEAP16[$0 + 540 >> 1];
$0 = 0;
while (1) {
$2 = $0 << 16 >> 16;
if (($4 | 0) <= ($2 | 0)) {
$0 = HEAPU16[33801] - 1 | 0;
HEAP16[33801] = $0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, $0 << 16 >> 16);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12868), 5867), 32284);
$0 = 0;
} else {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 80 >> 2]]($2, $1);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function SpliceMorphs_28Gesture__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
label$3: {
if (!HEAP32[$0 + 48 >> 2]) {
break label$3;
}
while (1) {
if (($1 | 0) == 8) {
break label$3;
}
$2 = HEAP32[HEAP32[$0 + 48 >> 2] + ($1 << 2) >> 2];
if ($2) {
AnchorFinalMorphs_28float_2c_20AbstractTimedMorph_20const__29(HEAPF32[HEAP32[$0 + 44 >> 2] + 40 >> 2], HEAP32[$2 + 20 >> 2]);
ExtendTrailingMorphs_28AbstractTimedMorph__29(HEAP32[$2 + 20 >> 2]);
}
$1 = $1 + 1 | 0;
continue;
}
}
$3 = CollectTrailingMorphs_28_29();
label$6: {
if (!HEAP32[$0 + 48 >> 2]) {
break label$6;
}
$1 = 0;
while (1) {
if (($1 | 0) == 8) {
break label$6;
}
$2 = HEAP32[HEAP32[$0 + 48 >> 2] + ($1 << 2) >> 2];
if ($2) {
MakeTrailingMorphs_28AbstractTimedMorph_20const__29(HEAP32[$2 + 20 >> 2]);
}
$1 = $1 + 1 | 0;
continue;
}
}
if (!$3) {
break label$2;
}
$1 = HEAP32[$0 + 48 >> 2];
if (!$1) {
MakeNonmanualSlots_28Gesture__29($0);
$1 = HEAP32[$0 + 48 >> 2];
}
$1 = HEAP32[$1 + 28 >> 2];
if (!$1) {
$1 = NonmanualMovement__NonmanualMovement_28_29(operator_20new_28unsigned_20long_29(28));
HEAP32[HEAP32[$0 + 48 >> 2] + 28 >> 2] = $1;
}
label$11: {
if (!HEAP32[$1 + 20 >> 2]) {
$0 = $3;
break label$11;
}
$2 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$0 = invoke_ii(381, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29(HEAP32[$0 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29(HEAP32[$0 + 24 >> 2], $3);
}
HEAP32[$1 + 20 >> 2] = $0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, Math_fround(0));
HEAPF32[$1 + 24 >> 2] = HEAPF32[HEAP32[$1 + 20 >> 2] + 16 >> 2];
}
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($1 | 0);
abort();
}
function InvertibleStringArray__vSetAsArrayA_28short_2c_20void__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $2;
$2 = HEAP32[$0 + 4 >> 2];
if ($2) {
dlfree($2);
HEAP32[$0 + 4 >> 2] = 0;
}
$2 = HEAP32[$0 >> 2];
if ($2) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($2));
HEAP32[$0 >> 2] = 0;
}
HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
$7 = HEAP32[$0 + 12 >> 2];
$2 = HEAP32[$4 + 12 >> 2];
$3 = $1;
while (1) {
$3 = $3 << 16 >> 16;
if (($7 | 0) != ($3 | 0)) {
if (($3 | 0) >= ($5 | 0)) {
$5 = $3 + 1 | 0;
HEAP32[$0 + 8 >> 2] = $5;
}
$6 = $2 + 8 | 0;
HEAP32[$4 + 12 >> 2] = $6;
$3 = HEAP32[$2 + 4 >> 2];
$2 = $6;
continue;
}
break;
}
label$6: {
$3 = HEAP32[$0 + 8 >> 2];
if (($3 | 0) <= 0) {
break label$6;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = dlmalloc($3 << 2), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
$2 = 0;
while (1) if (($2 | 0) >= ($3 | 0)) {
$6 = operator_20new_28unsigned_20long_29(28);
$5 = HEAP32[$0 + 12 >> 2];
HEAP32[19359] = 0;
$5 = invoke_iiii(38, $6 | 0, $5 | 0, $3 << 1) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 >> 2] = $5;
HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2];
while (1) {
$2 = $1 << 16 >> 16;
if (($2 | 0) == HEAP32[$0 + 12 >> 2]) {
break label$6;
}
$3 = HEAP32[$4 + 12 >> 2];
HEAP32[$4 + 12 >> 2] = $3 + 4;
$3 = HEAP32[$3 >> 2];
HEAP32[HEAP32[$0 + 4 >> 2] + ($2 << 2) >> 2] = $3;
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29(HEAP32[$0 >> 2], $3, $2);
$2 = HEAP32[$4 + 12 >> 2];
HEAP32[$4 + 12 >> 2] = $2 + 4;
$1 = HEAP32[$2 >> 2];
continue;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
__resumeException($0 | 0);
abort();
} else {
HEAP32[HEAP32[$0 + 4 >> 2] + ($2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
$3 = HEAP32[$0 + 8 >> 2];
continue;
}
}
__stack_pointer = $4 + 16 | 0;
}
function MakeTrailingMorphs_28AbstractTimedMorph_20const__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
while (1) {
if (!$0) {
break label$1;
}
label$4: {
switch (HEAP32[$0 + 20 >> 2] - 1 | 0) {
case 0:
if (!HEAPU8[$0 + 48 | 0] | !HEAPU8[$0 + 49 | 0]) {
break label$1;
}
if (!HEAP32[17655]) {
$2 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$1 = invoke_ii(382, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$2;
}
HEAP32[17655] = $1;
}
$1 = MakeTrailingMorph_28AtomicTimedMorph_20const__29($0);
DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29(HEAP32[17655], $1);
if (!HEAPU8[67595]) {
break label$1;
}
HEAP32[$3 >> 2] = HEAP32[HEAP32[17655] + 12 >> 2];
eprintf_28char_20const__2c_20____29(33047, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[16886]);
label$8: {
if (!$1) {
eputs_28char_20const__29(14681);
break label$8;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, HEAP32[16886]);
}
eputc_28char_29(10);
break label$1;
case 2:
$0 = HEAP32[$0 + 24 >> 2];
$1 = HEAPU16[$0 + 12 >> 1];
if ($1 << 16 <= 0) {
break label$1;
}
$0 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($0, $1 - 1 | 0);
continue;
case 1:
break label$4;
default:
break label$1;
}
}
break;
}
$4 = HEAP16[HEAP32[$0 + 24 >> 2] + 12 >> 1];
$1 = 0;
while (1) {
$2 = $1 << 16 >> 16;
if (($4 | 0) <= ($2 | 0)) {
break label$1;
}
MakeTrailingMorphs_28AbstractTimedMorph_20const__29(DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[$0 + 24 >> 2], $2));
$1 = $1 + 1 | 0;
continue;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function SplitMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
HEAP16[$3 + 40 >> 1] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8;
$1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
HEAP32[19359] = 0;
HEAP16[$3 + 32 >> 1] = $1;
invoke_viii(416, $0 | 0, $3 + 40 | 0, $3 + 32 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
if (($1 | 0) != 1) {
PostureChangeFlags___PostureChangeFlags_28_29($3 + 32 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 40 | 0);
$2 = HEAP32[$0 + 528 >> 2];
if ($2) {
HEAP16[$3 + 24 >> 1] = HEAPU16[$0 + 508 >> 1];
HEAP16[$3 + 16 >> 1] = HEAPU16[$0 + 510 >> 1];
$1 = HEAP32[HEAP32[$2 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($1 | 0, $2 | 0, $3 + 24 | 0, $3 + 16 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
PostureChangeFlags___PostureChangeFlags_28_29($3 + 16 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 24 | 0);
}
$2 = HEAP32[$0 + 532 >> 2];
if ($2) {
HEAP16[$3 + 8 >> 1] = HEAPU16[$0 + 508 >> 1];
HEAP16[$3 >> 1] = HEAPU16[$0 + 510 >> 1];
$1 = HEAP32[HEAP32[$2 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($1 | 0, $2 | 0, $3 + 8 | 0, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 8 | 0);
}
__stack_pointer = $3 + 48 | 0;
return;
}
$2 = $3 + 40 | 0;
$3 = $3 + 32 | 0;
$0 = __cxa_find_matching_catch_2() | 0;
break label$1;
}
$2 = $3 + 24 | 0;
$3 = $3 + 16 | 0;
$0 = __cxa_find_matching_catch_2() | 0;
break label$1;
}
$2 = $3 + 8 | 0;
$0 = __cxa_find_matching_catch_2() | 0;
}
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($2);
__resumeException($0 | 0);
abort();
}
function RepeatMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 160 | 0;
__stack_pointer = $4;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 60 | 0, $1);
label$1: {
if (HEAPU8[$0 + 570 | 0]) {
$5 = TwoHandStuff__TwoHandStuff_28TwoHandStuff_20const__29($4 + 72 | 0, $1);
HEAP32[19359] = 0;
$2 = invoke_iii(475, $4 | 0, $2 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
label$4: {
if (($3 | 0) != 1) {
$3 = HEAP32[$0 + 696 >> 2];
$6 = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
HEAP32[19359] = 0;
invoke_viii($6 | 0, $3 | 0, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$4;
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
$1 = $0 + 508 | 0;
wasm2js_i32$0 = $1, wasm2js_i32$1 = HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 508 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
$1 = $0 + 510 | 0;
wasm2js_i32$0 = $1, wasm2js_i32$1 = HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 510 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
ArmHandConstellation___ArmHandConstellation_28_29($2);
TwoHandStuff___TwoHandStuff_28_29($5);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$3;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ArmHandConstellation___ArmHandConstellation_28_29($2);
}
TwoHandStuff___TwoHandStuff_28_29($5);
__resumeException($0 | 0);
abort();
}
$3 = HEAP32[$0 + 696 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $1, $2);
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
$1 = HEAP32[$0 + 696 >> 2];
HEAP16[$0 + 508 >> 1] = HEAPU16[$1 + 508 >> 1];
HEAP16[$0 + 510 >> 1] = HEAPU16[$1 + 510 >> 1];
}
__stack_pointer = $4 + 160 | 0;
}
function WristMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = Math_fround(0);
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
label$1: {
if ($2 <= Math_fround(0)) {
break label$1;
}
$6 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if (!HEAP32[$0 + 528 >> 2] | $6 <= $2) {
break label$1;
}
$2 = Math_fround(Math_fround(($3 ? $2 : Math_fround($6 - $2)) / $6) * Math_fround(HEAPF32[17667] * HEAPF32[$0 + 544 >> 2]));
$3 = Quaternion__Quaternion_28_29($5 + 16 | 0);
$4 = HEAP32[$0 + 528 >> 2];
if (($4 & -2) == 4) {
$2 = ($4 | 0) == 4 ? Math_fround(-$2) : $2;
$3 = Vector__Vector_28float_2c_20float_2c_20float_29($5, Math_fround(-cos_28float_29($2)), Math_fround(0), sin_28float_29($2));
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($1 + 76 | 0, $3, HEAPF32[$0 + 536 >> 2], 1);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
$4 = (HEAP16[24300] << 2) + $3 | 0;
HEAPF32[$4 >> 2] = -HEAPF32[$4 >> 2];
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($1 + 188 | 0, $3, HEAPF32[$0 + 536 >> 2], 1);
break label$1;
}
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($3, $0 + 548 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 536 >> 2] + HEAPF32[$0 + 540 >> 2]) * Math_fround(.5)) + Math_fround(Math_fround(WaggleTrajectory_28float_29($2) * Math_fround(HEAPF32[$0 + 536 >> 2] - HEAPF32[$0 + 540 >> 2])) * Math_fround(.5))), 1);
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
Quaternion__setFrom_28Quaternion_20const__29($1 + 76 | 0, $3);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
if (HEAP32[$0 + 528 >> 2] != 2) {
Quaternion__setInverse_28_29($3);
}
Quaternion__setFrom_28Quaternion_20const__29($1 + 188 | 0, $3);
}
__stack_pointer = $5 + 32 | 0;
}
function SiGML__convertCurveDirection_28Vector__2c_20Vector_20const__2c_20Direction2_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0);
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
label$1: {
if (Vector__z_28_29_20const($1) == Math_fround(0)) {
if (Vector__x_28_29_20const($1) == Math_fround(0)) {
Vector__setFrom_28float_2c_20float_2c_20float_29($0, HEAPF32[$2 >> 2], Math_fround(0), HEAPF32[$2 + 4 >> 2]);
break label$1;
}
$3 = sqrt_28float_29(Math_fround(Math_fround(Vector__x_28_29_20const($1) * Vector__x_28_29_20const($1)) + Math_fround(Vector__y_28_29_20const($1) * Vector__y_28_29_20const($1))));
$7 = Vector__x_28_29_20const($1);
$6 = HEAPF32[$2 + 4 >> 2];
label$4: {
if ($7 < Math_fround(0)) {
$6 = Math_fround($6 * Vector__y_28_29_20const($1));
$7 = Math_fround(-HEAPF32[$2 + 4 >> 2]);
$9 = Vector__x_28_29_20const($1);
break label$4;
}
$6 = Math_fround(Vector__y_28_29_20const($1) * Math_fround(-$6));
$9 = HEAPF32[$2 + 4 >> 2];
$7 = Vector__x_28_29_20const($1);
}
Vector__setFrom_28float_2c_20float_2c_20float_29($0, Math_fround($6 / $3), Math_fround(Math_fround($9 * $7) / $3), Math_fround(-HEAPF32[$2 >> 2]));
break label$1;
}
$3 = Vector__lengthsq_28_29_20const($1);
$8 = Vector__Vector_28Vector_20const__29($4 + 48 | 0, $1);
Vector__setUnit_28_29($8);
$5 = Vector__Vector_28Vector_20const__29($4 + 32 | 0, $1);
Vector__setScale_28float_29($5, Math_fround(Vector__y_28_29_20const($1) / $3));
$1 = Vector__Vector_28Vector_20const__29($4 + 16 | 0, 68044);
Vector__setSubtract_28Vector_20const__29($1, $5);
Vector__setUnit_28_29($1);
$5 = Vector__Vector_28_29($4);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($5, $8, $1);
$3 = HEAPF32[$2 >> 2];
Vector__setScale_28float_29($5, Vector__z_28_29_20const($8) > Math_fround(0) ? Math_fround(-$3) : $3);
Vector__setScale_28float_29($1, HEAPF32[$2 + 4 >> 2]);
Vector__setFrom_28Vector_20const__29($0, $5);
Vector__setAdd_28Vector_20const__29($0, $1);
}
Vector__setUnit_28_29($0);
__stack_pointer = $4 - -64 | 0;
}
function TwoHConcretePostureChange__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 >> 2] = $0;
fiprintf($1, 24434, $2);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22411, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
PostureChangeFlags__print_28_IO_FILE__29_20const($0 + 448 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22427, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
PostureChangeFlags__print_28_IO_FILE__29_20const($0 + 450 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22031, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22165, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0 + 112 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22014, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0 + 224 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22149, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0 + 336 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22874, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
PostureChangeTiming__print_28_IO_FILE__29_20const($0 + 452 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22897, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
PostureChangeTiming__print_28_IO_FILE__29_20const($0 + 460 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 16 | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$9 = __stack_pointer - 16 | 0;
__stack_pointer = $9;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
$8 = std____2__ios_base__width_28_29_20const($4);
$6 = $2 - $1 | 0;
if (($6 | 0) > 0) {
if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $1, $6) | 0) != ($6 | 0)) {
break label$2;
}
}
$7 = $3 - $1 | 0;
$1 = ($7 | 0) < ($8 | 0) ? $8 - $7 | 0 : 0;
if (($1 | 0) > 0) {
$7 = 0;
$6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($9, $1, $5);
$5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6);
HEAP32[19359] = 0;
$8 = invoke_iiii(32, $0 | 0, $5 | 0, $1 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) == 1) {
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
if (($1 | 0) != ($8 | 0)) {
break label$2;
}
}
$1 = $3 - $2 | 0;
if (($1 | 0) > 0) {
$7 = 0;
if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $2, $1) | 0) != ($1 | 0)) {
break label$2;
}
}
std____2__ios_base__width_28long_29($4, 0);
$7 = $0;
}
__stack_pointer = $9 + 16 | 0;
return $7 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
__resumeException($0 | 0);
abort();
}
function SSFrame__TrimMorphs_28unsigned_20int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
label$1: {
$3 = $0 + 16 | 0;
$5 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($3);
if ($5 >>> 0 <= $1 >>> 0) {
break label$1;
}
$0 = $1;
while (1) {
if (($0 | 0) == ($5 | 0)) {
wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___begin_28_29($3), 
HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2____wrap_iter_SSMorph_____operator__28long_29_20const($2 + 24 | 0, $1), 
HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
$0 = std____2____wrap_iter_SSMorph__20const______wrap_iter_SSMorph____28std____2____wrap_iter_SSMorph____20const__2c_20std____2__enable_if_is_convertible_SSMorph___2c_20SSMorph__20const____value_2c_20void___type__29($2 + 40 | 0, $2 + 32 | 0, 0);
wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___end_28_29($3), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
$4 = std____2____wrap_iter_SSMorph__20const______wrap_iter_SSMorph____28std____2____wrap_iter_SSMorph____20const__2c_20std____2__enable_if_is_convertible_SSMorph___2c_20SSMorph__20const____value_2c_20void___type__29($2 + 16 | 0, $2 + 8 | 0, 0);
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___erase_28std____2____wrap_iter_SSMorph__20const___2c_20std____2____wrap_iter_SSMorph__20const___29($3, HEAP32[$0 >> 2], HEAP32[$4 >> 2]);
break label$1;
}
$4 = HEAP32[std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($3, $0) >> 2];
if ($4) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4);
}
wasm2js_i32$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($3, $0), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$0 = $0 + 1 | 0;
continue;
}
}
__stack_pointer = $2 + 48 | 0;
}
function normal_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
label$3: {
label$4: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = 2;
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
label$13: {
label$14: {
$6 = HEAPU8[(HEAPU8[$4 | 0] + $0 | 0) + 72 | 0];
switch ($6 - 3 | 0) {
case 6:
break label$10;
case 7:
break label$11;
case 0:
break label$12;
case 4:
break label$13;
case 3:
break label$14;
case 2:
break label$7;
case 1:
case 5:
break label$8;
default:
break label$9;
}
}
$5 = 3;
break label$7;
}
$5 = 4;
break label$7;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
return normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 1;
return 7;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
HEAP32[$3 >> 2] = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0] == 10 ? $1 + 2 | 0 : $4;
return 7;
}
if (($6 | 0) == 30) {
break label$4;
}
}
$5 = 1;
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$2;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = normal_scanPercent($0, $1 + 1 | 0, $2, $3);
return (($4 | 0) == 22 ? 0 : $4) | 0;
}
HEAP32[$3 >> 2] = $4;
}
return 6;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___insertString_28int_2c_20SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChainItem_28SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(409, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChainItem_28SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChain_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_20const__2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$5 = __stack_pointer + -64 | 0;
__stack_pointer = $5;
$7 = HEAPF32[$3 + 12 >> 2];
$8 = HEAPF32[$3 + 8 >> 2];
$9 = HEAPF32[$3 + 4 >> 2];
$6 = HEAPF32[$3 >> 2];
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0 + 4 | 0, $1 + 4 | 0, $2 + 4 | 0, $6);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0 + 16 | 0, $1 + 16 | 0, $2 + 16 | 0, $6);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0 + 28 | 0, $1 + 28 | 0, $2 + 28 | 0, $6);
$10 = HEAPU8[$0 | 0];
Quaternion__setSlerp1_28Quaternion_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($0 + 40 | 0, $1 + 40 | 0, $2 + 40 | 0, $10 ? 70624 : 70652, $9);
$10 = HEAP32[$2 + 56 >> 2];
HEAPF32[$0 + 60 >> 2] = $4 ? $8 : Math_fround(1);
HEAP32[$0 + 56 >> 2] = $10;
wasm2js_i32$0 = $0, wasm2js_f32$0 = midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$1 + 64 >> 2], HEAPF32[$2 + 64 >> 2], $7), 
HEAPF32[wasm2js_i32$0 + 64 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $0, wasm2js_f32$0 = midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$1 + 68 >> 2], HEAPF32[$2 + 68 >> 2], $7), 
HEAPF32[wasm2js_i32$0 + 68 >> 2] = wasm2js_f32$0;
HEAPF32[$0 + 72 >> 2] = HEAPF32[$2 + 72 >> 2];
__memcpy($0 + 76 | 0, $2 + 76 | 0, 36);
if (HEAPU8[67567]) {
$7 = HEAPF32[$3 >> 2];
$6 = HEAPF32[$3 + 4 >> 2];
$8 = HEAPF32[$3 + 8 >> 2];
$9 = HEAPF32[$3 + 12 >> 2];
$11 = HEAPF32[$1 + 64 >> 2];
$12 = HEAPF32[$2 + 64 >> 2];
HEAPF64[$5 + 48 >> 3] = HEAPF32[$0 + 64 >> 2];
HEAPF64[$5 + 40 >> 3] = $12;
HEAPF64[$5 + 32 >> 3] = $11;
HEAPF64[$5 + 24 >> 3] = $9;
HEAPF64[$5 + 16 >> 3] = $8;
HEAPF64[$5 + 8 >> 3] = $6;
HEAPF64[$5 >> 3] = $7;
eprintf_28char_20const__2c_20____29(26575, $5);
}
__stack_pointer = $5 - -64 | 0;
}
function FingerBaseJointRotation__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
$3 = __stack_pointer - 240 | 0;
__stack_pointer = $3;
if ($1) {
$4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
$9 = $0 + 8 | 0;
$5 = Vector__x_28_29_20const($9);
$6 = Vector__y_28_29_20const($9);
$7 = Vector__z_28_29_20const($9);
$8 = HEAPF32[$0 + 44 >> 2];
HEAP32[$3 + 224 >> 2] = $2;
HEAPF64[$3 + 216 >> 3] = $7;
HEAP32[$3 + 208 >> 2] = $2;
HEAPF64[$3 + 200 >> 3] = $6;
HEAP32[$3 + 192 >> 2] = $2;
HEAPF64[$3 + 232 >> 3] = $8;
HEAPF64[$3 + 184 >> 3] = $5;
HEAP32[$3 + 180 >> 2] = $2;
HEAP32[$3 + 176 >> 2] = $4;
__small_fprintf($1, 28833, $3 + 176 | 0);
printIndent_28_IO_FILE__29($1);
$4 = $0 + 20 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 48 >> 2];
HEAP32[$3 + 160 >> 2] = $2;
HEAPF64[$3 + 152 >> 3] = $7;
HEAP32[$3 + 144 >> 2] = $2;
HEAPF64[$3 + 136 >> 3] = $6;
HEAP32[$3 + 128 >> 2] = $2;
HEAPF64[$3 + 168 >> 3] = $8;
HEAPF64[$3 + 120 >> 3] = $5;
HEAP32[$3 + 112 >> 2] = $2;
__small_fprintf($1, 28799, $3 + 112 | 0);
printIndent_28_IO_FILE__29($1);
$4 = $0 + 32 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
HEAP32[$3 + 96 >> 2] = $2;
HEAPF64[$3 + 88 >> 3] = $6;
HEAP32[$3 + 80 >> 2] = $2;
HEAPF64[$3 + 104 >> 3] = $7;
HEAPF64[$3 + 72 >> 3] = $5;
HEAP32[$3 + 64 >> 2] = $2;
__small_fprintf($1, 47414, $3 - -64 | 0);
printIndent_28_IO_FILE__29($1);
$5 = HEAPF32[$0 + 52 >> 2];
$6 = HEAPF32[$0 + 56 >> 2];
$7 = HEAPF32[$0 + 64 >> 2];
$8 = HEAPF32[$0 + 68 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $8;
HEAPF64[$3 + 40 >> 3] = $7;
HEAPF64[$3 + 24 >> 3] = $6;
HEAP32[$3 >> 2] = $2;
HEAPF64[$3 + 8 >> 3] = $5;
__small_fprintf($1, 7943, $3);
}
__stack_pointer = $3 + 240 | 0;
}
function Getopts__argsFromFile_28char_20const__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
if (!$2) {
break label$2;
}
if (fileExists_28char_20const__29($1)) {
break label$2;
}
if (!HEAPU8[67571]) {
break label$1;
}
HEAP32[$3 + 32 >> 2] = $1;
eprintf_28char_20const__2c_20____29(43456, $3 + 32 | 0);
break label$1;
}
$5 = operator_20new_28unsigned_20long_29(40);
HEAP32[19359] = 0;
$2 = invoke_iii(53, $5 | 0, $1 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
label$4: {
$6 = HEAPU8[$2 + 8 | 0];
label$5: {
if ($6) {
HEAP32[$3 + 16 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36679, $3 + 16 | 0);
break label$5;
}
if (HEAPU8[67571]) {
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36718, $3);
}
TokenStream__allowComments_28bool_29($2, 1);
TokenStream__allowQuotedStrings_28bool_29($2, 1);
$5 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_ii(54, $5 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
while (1) {
$1 = TokenStream__nextToken_28_29($2);
if ($1) {
DynamicArrayP_char_20const___appendElement_28char_20const__29($4, copyString_28char_20const__29($1));
continue;
}
break;
}
DynamicArrayP_char_20const___appendElement_28char_20const__29($4, 0);
Getopts__processArgs_28char_20const___29($0, DynamicArrayP_char_20const___getElements_28_29_20const($4));
DynamicArrayP_char_20const___freeAll_28_29($4);
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($4));
}
$4 = !$6;
operator_20delete_28void__29(TokenStream___TokenStream_28_29($2));
break label$1;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($1 | 0);
abort();
}
__stack_pointer = $3 + 48 | 0;
return $4;
}
function InvertibleStringArray__vSetAsArrayH_28char_20const__2c_20void__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = HEAP32[$0 + 4 >> 2];
if ($2) {
dlfree($2);
HEAP32[$0 + 4 >> 2] = 0;
}
$2 = HEAP32[$0 >> 2];
if ($2) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($2));
HEAP32[$0 >> 2] = 0;
}
HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 12 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
$2 = $1;
while (1) {
if ($2) {
$2 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $2 + 4;
$5 = HEAP16[$2 >> 1];
if (($5 | 0) >= ($4 | 0)) {
$4 = $5 + 1 | 0;
HEAP32[$0 + 8 >> 2] = $4;
}
HEAP32[$3 + 12 >> 2] = $2 + 8;
$2 = HEAP32[$2 + 4 >> 2];
continue;
}
break;
}
label$6: {
$4 = HEAP32[$0 + 8 >> 2];
if (($4 | 0) <= 0) {
break label$6;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = dlmalloc($4 << 2), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
$2 = 0;
while (1) if (($2 | 0) >= ($4 | 0)) {
$5 = operator_20new_28unsigned_20long_29(28);
$2 = HEAP32[$0 + 12 >> 2];
HEAP32[19359] = 0;
$2 = invoke_iiii(38, $5 | 0, $2 | 0, $4 << 1) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[$0 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2];
while (1) {
if (!$1) {
break label$6;
}
$2 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $2 + 4;
$2 = HEAP32[$2 >> 2] << 16;
HEAP32[HEAP32[$0 + 4 >> 2] + ($2 >> 14) >> 2] = $1;
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29(HEAP32[$0 >> 2], $1, $2 >> 16);
$2 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $2 + 4;
$1 = HEAP32[$2 >> 2];
continue;
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($3 | 0);
abort();
} else {
HEAP32[HEAP32[$0 + 4 >> 2] + ($2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
$4 = HEAP32[$0 + 8 >> 2];
continue;
}
}
__stack_pointer = $3 + 16 | 0;
}
function OneHConcretePostureModifier__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
label$2: {
label$3: {
if (Quaternion__x_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Quaternion__y_28_29_20const($0) != Math_fround(0)) {
break label$3;
}
if (Quaternion__z_28_29_20const($0) == Math_fround(0)) {
break label$2;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21886, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Quaternion__print_28_IO_FILE__2c_20int_29_20const($0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 16 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23455, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 16 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
}
if (HEAPF32[$0 + 20 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 20 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 29068, $2 + 32 | 0);
}
if (HEAPF32[$0 + 24 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 24 >> 2];
HEAP32[$2 + 16 >> 2] = 3;
HEAPF64[$2 + 24 >> 3] = $3;
__small_fprintf($1, 29420, $2 + 16 | 0);
}
if (HEAPF32[$0 + 28 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 28 >> 2];
HEAP32[$2 >> 2] = 3;
HEAPF64[$2 + 8 >> 3] = $3;
__small_fprintf($1, 29372, $2);
}
if (HEAPU16[$0 + 32 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16617, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 32 >> 1]);
fputc(10, $1);
}
if (!HEAPU16[$0 + 34 >> 1]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16600, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 34 >> 1]);
fputc(10, $1);
}
__stack_pointer = $2 - -64 | 0;
}
function Gesture__CopyGesture_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
invoke_ii(359, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$3 + 4 >> 2] = $1;
HEAP32[$3 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24828, $3);
}
$2 = __memcpy($1, $0, 52);
if (HEAP32[$2 + 4 >> 2]) {
HEAP32[$2 + 4 >> 2] = 0;
}
$1 = HEAP32[$2 + 8 >> 2];
if ($1) {
wasm2js_i32$0 = $2, wasm2js_i32$1 = copyString_28char_20const__29($1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
}
$1 = HEAP32[$2 + 20 >> 2];
if ($1) {
wasm2js_i32$0 = $2, wasm2js_i32$1 = OneHGesture__CopyOneHGesture_28Gesture__29_20const($1, $2), 
HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
}
$1 = HEAP32[$2 + 24 >> 2];
label$6: {
if (!$1) {
$1 = 0;
break label$6;
}
$1 = OneHGesture__CopyOneHGesture_28Gesture__29_20const($1, $2);
HEAP32[$2 + 24 >> 2] = $1;
}
$4 = HEAP32[$2 + 20 >> 2];
$0 = HEAPU8[$0 + 13 | 0] & 64;
HEAP32[$2 + 32 >> 2] = $0 ? $1 : $4;
HEAP32[$2 + 28 >> 2] = $0 ? $4 : $1;
$1 = HEAP32[$2 + 36 >> 2];
if ($1) {
SiGMLConstellation__CopySiGMLConstellation_28_29_20const($1);
HEAP32[$2 + 36 >> 2] = 0;
}
$1 = HEAP32[$2 + 40 >> 2];
if ($1) {
ArmHandConstellation__CopyArmHandConstellation_28_29_20const($1);
HEAP32[$2 + 40 >> 2] = 0;
}
$1 = HEAP32[$2 + 44 >> 2];
if ($1) {
wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0, 
HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
}
wasm2js_i32$0 = $2, wasm2js_i32$1 = CopyNonmanualMovementArray_28NonmanualMovement___29(HEAP32[$2 + 48 >> 2]), 
HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
__stack_pointer = $3 + 16 | 0;
return $2 | 0;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($2 | 0);
abort();
}
function ThumbBaseJointRotation__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
$3 = __stack_pointer - 256 | 0;
__stack_pointer = $3;
if ($1) {
$10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
$4 = $0 + 8 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 44 >> 2];
$9 = HEAPF32[$0 + 56 >> 2];
HEAP32[$3 + 232 >> 2] = $2;
HEAP32[$3 + 216 >> 2] = $2;
HEAPF64[$3 + 208 >> 3] = $7;
HEAP32[$3 + 200 >> 2] = $2;
HEAPF64[$3 + 192 >> 3] = $6;
HEAP32[$3 + 184 >> 2] = $2;
HEAPF64[$3 + 176 >> 3] = $5;
HEAPF64[$3 + 240 >> 3] = $9;
HEAPF64[$3 + 224 >> 3] = $8;
HEAP32[$3 + 168 >> 2] = $2;
HEAP32[$3 + 164 >> 2] = $0;
HEAP32[$3 + 160 >> 2] = $10;
__small_fprintf($1, 28721, $3 + 160 | 0);
printIndent_28_IO_FILE__29($1);
$4 = $0 + 20 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 48 >> 2];
$9 = HEAPF32[$0 + 60 >> 2];
HEAP32[$3 + 144 >> 2] = $2;
HEAP32[$3 + 128 >> 2] = $2;
HEAPF64[$3 + 120 >> 3] = $7;
HEAP32[$3 + 112 >> 2] = $2;
HEAPF64[$3 + 104 >> 3] = $6;
HEAP32[$3 + 96 >> 2] = $2;
HEAPF64[$3 + 152 >> 3] = $9;
HEAPF64[$3 + 136 >> 3] = $8;
HEAPF64[$3 + 88 >> 3] = $5;
HEAP32[$3 + 80 >> 2] = $2;
__small_fprintf($1, 28767, $3 + 80 | 0);
printIndent_28_IO_FILE__29($1);
$4 = $0 + 32 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 52 >> 2];
$9 = HEAPF32[$0 + 64 >> 2];
HEAP32[$3 - -64 >> 2] = $2;
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $7;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $6;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 72 >> 3] = $9;
HEAPF64[$3 + 56 >> 3] = $8;
HEAPF64[$3 + 8 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 28767, $3);
}
__stack_pointer = $3 + 256 | 0;
}
function __shgetc($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
$4 = HEAP32[$0 + 116 >> 2];
$11 = $4;
$2 = HEAP32[$0 + 112 >> 2];
$12 = $2;
$8 = !!($4 | $2);
$4 = HEAP32[$0 + 120 >> 2];
$5 = $4;
$2 = HEAP32[$0 + 124 >> 2];
$1 = $2;
$6 = HEAP32[$0 + 4 >> 2];
$9 = HEAP32[$0 + 44 >> 2];
$4 = $6 - $9 | 0;
$2 = $4 >> 31;
$10 = $2;
$7 = $4;
$3 = $5 + $4 | 0;
$2 = $1;
$4 = $10;
$1 = $2 + $4 | 0;
$1 = $3 >>> 0 < $7 >>> 0 ? $1 + 1 | 0 : $1;
$13 = $3;
label$1: {
$2 = $12;
$10 = $1;
$5 = $1;
$1 = $11;
if (!(($2 >>> 0 <= $3 >>> 0 & ($5 | 0) >= ($1 | 0) | ($1 | 0) < ($5 | 0)) & $8)) {
$9 = __uflow($0);
if (($9 | 0) >= 0) {
break label$1;
}
$9 = HEAP32[$0 + 44 >> 2];
$6 = HEAP32[$0 + 4 >> 2];
}
HEAP32[$0 + 112 >> 2] = -1;
HEAP32[$0 + 116 >> 2] = -1;
HEAP32[$0 + 104 >> 2] = $6;
$1 = $9 - $6 | 0;
$2 = $1 >> 31;
$5 = $1;
$1 = $2;
$2 = $10;
$3 = $2 + $1 | 0;
$4 = $5 + $13 | 0;
$3 = $4 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
HEAP32[$0 + 120 >> 2] = $4;
HEAP32[$0 + 124 >> 2] = $3;
return -1;
}
$3 = $10;
$2 = $13;
$1 = $2 + 1 | 0;
$4 = $1 ? $3 : $3 + 1 | 0;
$13 = $1;
$10 = $4;
$6 = HEAP32[$0 + 4 >> 2];
$8 = HEAP32[$0 + 8 >> 2];
$2 = HEAP32[$0 + 116 >> 2];
$11 = $2;
$4 = HEAP32[$0 + 112 >> 2];
$12 = $4;
label$3: {
if (!($2 | $4)) {
break label$3;
}
$3 = $12;
$5 = $13;
$7 = $3 - $5 | 0;
$12 = $7;
$2 = $11;
$4 = $10;
$1 = $4 + ($3 >>> 0 < $5 >>> 0) | 0;
$1 = $2 - $1 | 0;
$11 = $1;
$3 = $8 - $6 | 0;
$1 = $3 >> 31;
$5 = $3;
$3 = $1;
$1 = $11;
$2 = $7;
if (($3 | 0) <= ($1 | 0) & $2 >>> 0 >= $5 >>> 0 | ($1 | 0) > ($3 | 0)) {
break label$3;
}
$8 = $6 + $12 | 0;
}
HEAP32[$0 + 104 >> 2] = $8;
$8 = HEAP32[$0 + 44 >> 2];
$1 = $8 - $6 | 0;
$2 = $1 >> 31;
$3 = $1;
$1 = $2;
$2 = $10;
$7 = $2 + $1 | 0;
$5 = $13;
$4 = $5 + $3 | 0;
$7 = $4 >>> 0 < $3 >>> 0 ? $7 + 1 | 0 : $7;
HEAP32[$0 + 120 >> 2] = $4;
HEAP32[$0 + 124 >> 2] = $7;
if ($6 >>> 0 <= $8 >>> 0) {
HEAP8[$6 - 1 | 0] = $9;
}
return $9;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
label$2: {
if (!$2) {
break label$2;
}
$1 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($1 + $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
if (!$2) {
break label$2;
}
$1 = HEAP32[$0 + 4 >> 2];
if (!(std____2__ios_base__flags_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] - 12 >> 2] | 0) & 8192)) {
break label$2;
}
if (std__uncaught_exception_28_29()) {
break label$2;
}
$1 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
$2 = invoke_ii(901, $2 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
if (($2 | 0) != -1) {
break label$2;
}
$1 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
invoke_vii(28, $1 + $2 | 0, 1);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$2;
}
}
$1 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
__cxa_begin_catch($1 | 0) | 0;
HEAP32[19359] = 0;
invoke_v(30);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
}
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function ThumbBending__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if (ThumbBending__defined_28_29_20const($0)) {
wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__setprecision_28int_29(2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20std____2____iom_t5_20const__29($1, $2 + 8 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 4 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 8 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 12 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 16 >> 2]);
}
__stack_pointer = $2 + 16 | 0;
}
function BasicMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
if (HEAPU8[67558]) {
HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
eprintf_28char_20const__2c_20____29(30596, $5);
eprintf_28char_20const__2c_20____29(17975, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(17982, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19656, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($0 + 508 | 0, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19664, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($0 + 510 | 0, HEAP32[16886]);
eputc_28char_29(10);
$3 = 0;
}
$3 = 512;
$6 = $1;
if (!(HEAPU8[$1 + 1 | 0] & 2)) {
$3 = PostureChangeFlags__sets_handPos_28_29_20const($0 + 508 | 0) ? 512 : 0;
}
$4 = $0 + 508 | 0;
$1 = HEAPU16[$4 >> 1] & -513 | $3;
HEAP16[$4 >> 1] = $1;
$3 = 1024;
if (!(HEAPU8[$6 + 1 | 0] & 4)) {
$3 = PostureChangeFlags__sets_handRot_28_29_20const($4) ? 1024 : 0;
$1 = HEAPU16[$4 >> 1];
}
HEAP16[$4 >> 1] = $1 & 64511 | $3;
$1 = 512;
$6 = $2;
$3 = $2 + 1 | 0;
if (!(HEAPU8[$3 | 0] & 2)) {
$1 = PostureChangeFlags__sets_handPos_28_29_20const($0 + 510 | 0) ? 512 : 0;
}
$0 = $0 + 510 | 0;
$1 = HEAPU16[$0 >> 1] & -513 | $1;
HEAP16[$0 >> 1] = $1;
$2 = 1024;
if (!(HEAPU8[$6 + 1 | 0] & 4)) {
$2 = PostureChangeFlags__sets_handRot_28_29_20const($0) ? 1024 : 0;
$1 = HEAPU16[$0 >> 1];
}
HEAP16[$0 >> 1] = $1 & 64511 | $2;
if (HEAPU8[67558]) {
eprintf_28char_20const__2c_20____29(15354, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($4, HEAP32[16886]);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(15362, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
}
__stack_pointer = $5 + 16 | 0;
}
function little2_scanComment($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = -1;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
label$3: {
if (HEAPU8[$1 + 1 | 0] | HEAPU8[$1 | 0] != 45) {
break label$3;
}
$4 = $1 + 2 | 0;
while (1) {
$1 = $4;
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
$4 = HEAPU8[$1 | 0];
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
$6 = HEAPU8[$1 + 1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 5:
break label$10;
case 0:
case 1:
case 8:
break label$3;
case 2:
case 3:
case 4:
break label$6;
case 7:
break label$8;
case 6:
break label$9;
default:
break label$7;
}
}
if (($2 - $1 | 0) >= 2) {
break label$6;
}
break label$1;
}
if (($2 - $1 | 0) < 3) {
break label$1;
}
$4 = $1 + 3 | 0;
continue;
}
if (($2 - $1 | 0) < 4) {
break label$1;
}
$4 = $1 + 4 | 0;
continue;
}
if (($4 | 0) == 27) {
break label$5;
}
}
$4 = $1 + 2 | 0;
continue;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$4 | 0] != 45) {
continue;
}
break;
}
$4 = $1 + 4 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$1 + 5 | 0]) {
$1 = $4;
break label$3;
}
$2 = HEAPU8[$1 + 4 | 0] == 62;
$1 = $2 ? $1 + 6 | 0 : $4;
$7 = $2 ? 13 : 0;
}
HEAP32[$3 >> 2] = $1;
$5 = $7;
}
return $5;
}
return -2;
}
function big2_scanComment($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = -1;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
label$3: {
if (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] != 45) {
break label$3;
}
$4 = $1 + 2 | 0;
while (1) {
$1 = $4;
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
$4 = HEAPU8[$1 + 1 | 0];
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
$6 = HEAPU8[$1 | 0];
if ($6) {
$4 = unicode_byte_type($6 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 | 0) {
case 5:
break label$10;
case 0:
case 1:
case 8:
break label$3;
case 2:
case 3:
case 4:
break label$6;
case 7:
break label$8;
case 6:
break label$9;
default:
break label$7;
}
}
if (($2 - $1 | 0) >= 2) {
break label$6;
}
break label$1;
}
if (($2 - $1 | 0) < 3) {
break label$1;
}
$4 = $1 + 3 | 0;
continue;
}
if (($2 - $1 | 0) < 4) {
break label$1;
}
$4 = $1 + 4 | 0;
continue;
}
if (($4 | 0) == 27) {
break label$5;
}
}
$4 = $1 + 2 | 0;
continue;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$4 | 0] | HEAPU8[$1 + 3 | 0] != 45) {
continue;
}
break;
}
$4 = $1 + 4 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
if (HEAPU8[$4 | 0]) {
$1 = $4;
break label$3;
}
$2 = HEAPU8[$1 + 5 | 0] == 62;
$1 = $2 ? $1 + 6 | 0 : $4;
$7 = $2 ? 13 : 0;
}
HEAP32[$3 >> 2] = $1;
$5 = $7;
}
return $5;
}
return -2;
}
function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
$11 = $2;
$9 = $8;
$9 = __wasm_i64_mul($1, $11, $7, $9);
$8 = $9;
$11 = i64toi32_i32$HIGH_BITS;
$7 = $11;
$11 = $4;
$9 = $6;
$9 = __wasm_i64_mul($3, $11, $5, $9);
$13 = $9;
$11 = i64toi32_i32$HIGH_BITS;
$9 = $11;
$11 = $7;
$12 = $11 + $9 | 0;
$9 = $8;
$10 = $9 + $13 | 0;
$14 = $10;
$12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$10 = $12;
$9 = 0;
$8 = $9;
$11 = 0;
$4 = $11;
$12 = $6;
$7 = $12;
$9 = $2;
$3 = $9;
$12 = __wasm_i64_mul($6, $8, $9, $11);
$13 = $12;
$11 = i64toi32_i32$HIGH_BITS;
$12 = $11;
$11 = $10;
$10 = $11 + $12 | 0;
$9 = $14;
$9 = $9 + $13 | 0;
$10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$15 = $9;
$16 = $10;
$11 = $5;
$5 = $11;
$9 = 0;
$6 = $9;
$10 = $1;
$1 = $10;
$11 = 0;
$2 = $11;
$11 = $6;
$10 = $2;
$10 = __wasm_i64_mul($5, $11, $1, $10);
$14 = $10;
$10 = 0;
$2 = $10;
$11 = i64toi32_i32$HIGH_BITS;
$10 = $4;
$9 = $6;
$9 = __wasm_i64_mul($3, $10, $5, $9);
$13 = $9;
$12 = $11 + $9 | 0;
$10 = i64toi32_i32$HIGH_BITS;
$9 = $10;
$10 = $2;
$9 = $9 + $10 | 0;
$5 = $12;
$9 = $12 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$6 = $9;
$11 = 0;
$10 = $11;
$11 = $16;
$12 = $11 + $10 | 0;
$9 = $15;
$13 = $6;
$9 = $9 + $13 | 0;
$12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
$4 = $9;
$3 = $12;
$12 = $2;
$9 = $8;
$9 = __wasm_i64_mul($1, $12, $7, $9);
$12 = i64toi32_i32$HIGH_BITS;
$1 = $12;
$11 = $5;
$13 = $11;
$12 = $9;
$10 = $11 + $12 | 0;
$9 = 0;
$11 = $9;
$9 = $1;
$9 = $11 + $9 | 0;
$5 = $10;
$9 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
$6 = $9;
$12 = 0;
$9 = $12;
$12 = $3;
$10 = $9 + $12 | 0;
$9 = $4;
$13 = $6;
$11 = $9 + $13 | 0;
$10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
$9 = $0;
HEAP32[$9 + 8 >> 2] = $11;
HEAP32[$9 + 12 >> 2] = $10;
$9 = 0;
$1 = $9;
$12 = $14;
$9 = $12;
$13 = 0;
$2 = $9 | $13;
$9 = $0;
HEAP32[$9 >> 2] = $2;
$10 = $5;
$12 = $1;
$10 = $10 | $12;
HEAP32[$9 + 4 >> 2] = $10;
}
function DistributeRotation_28Vector_20const__2c_20float_2c_20float_2c_20DynamicArray1_JointRotation____2c_20HanimAvatar_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
$4 = __stack_pointer - 96 | 0;
__stack_pointer = $4;
label$1: {
$5 = HEAP32[$3 + 12 >> 2] << 16;
if (!$5) {
break label$1;
}
if (($5 | 0) == 65536) {
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($4 + 80 | 0, $0, $1, 1), DynamicArray1_JointRotation____getElement_28int_29_20const($3, 0));
break label$1;
}
$5 = $5 >> 16;
$6 = Math_fround($5 | 0);
$8 = Math_fround($2 / $6);
$7 = Math_fround($1 / $6);
$6 = Math_fround(Math_fround($8 * Math_fround(3)) - Math_fround($7 + $7));
$9 = Math_fround(Math_fround($7 - $8) * Math_fround(6));
$10 = $5 - 1 | 0;
$11 = Math_fround($9 / Math_fround($10 | 0));
if (HEAPU8[67557]) {
HEAPF64[$4 - -64 >> 3] = $6;
HEAPF64[$4 + 56 >> 3] = $11;
HEAPF64[$4 + 48 >> 3] = $9;
HEAPF64[$4 + 40 >> 3] = $8;
HEAPF64[$4 + 32 >> 3] = Math_fround(Math_fround(Math_fround($5 + 1 | 0) * $2) * Math_fround(.5));
HEAPF64[$4 + 24 >> 3] = $7;
HEAPF64[$4 + 16 >> 3] = $1;
eprintf_28char_20const__2c_20____29(24064, $4 + 16 | 0);
}
$5 = $10 << 16 >> 16;
while (1) {
if (($5 | 0) < 0) {
if (!HEAPU8[67557]) {
break label$1;
}
eputc_28char_29(10);
break label$1;
}
AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29(Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($4 + 80 | 0, $0, $6, 1), DynamicArray1_JointRotation____getElement_28int_29_20const($3, $5));
if (HEAPU8[67557]) {
HEAP32[$4 >> 2] = $5;
HEAPF64[$4 + 8 >> 3] = $6;
eprintf_28char_20const__2c_20____29(7569, $4);
}
$5 = $5 - 1 | 0;
$6 = Math_fround($11 + $6);
continue;
}
}
__stack_pointer = $4 + 96 | 0;
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____insertString_28int_2c_20char_20const__2c_20HashAny_char_20const__2c_20int___29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChainItem_28char_20const__2c_20HashAny_char_20const__2c_20int___29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(716, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChainItem_28char_20const__2c_20HashAny_char_20const__2c_20int___29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChain_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function Direction3__setFromString_28char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
break label$1;
}
HEAP32[$2 + 28 >> 2] = 0;
HEAP32[$2 + 24 >> 2] = 0;
HEAP32[$2 + 20 >> 2] = 0;
$3 = HEAPU8[$1 | 0];
label$3: {
if (($3 - 97 & 255) >>> 0 <= 25) {
while (1) {
if (!($3 & 255)) {
break label$3;
}
$7 = $1;
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
label$12: {
$3 = $3 << 24 >> 24;
switch ($3 - 108 | 0) {
case 6:
break label$10;
case 0:
break label$11;
case 1:
case 2:
case 4:
case 5:
case 7:
case 8:
break label$6;
case 3:
break label$7;
case 9:
break label$9;
default:
break label$12;
}
}
if (($3 | 0) == 100) {
break label$8;
}
if (($3 | 0) != 105) {
break label$6;
}
$4 = $4 - 1 | 0;
break label$6;
}
$5 = $5 + 1 | 0;
break label$6;
}
$5 = $5 - 1 | 0;
break label$6;
}
$6 = $6 + 1 | 0;
break label$6;
}
$6 = $6 - 1 | 0;
break label$6;
}
$4 = $4 + 1 | 0;
}
$1 = $7 + 1 | 0;
$3 = HEAPU8[$7 + 1 | 0];
continue;
}
}
HEAP32[$2 + 8 >> 2] = $2 + 20;
HEAP32[$2 + 4 >> 2] = $2 + 24;
HEAP32[$2 >> 2] = $2 + 28;
sscanf($1, 10735, $2);
$4 = HEAP32[$2 + 20 >> 2];
$6 = HEAP32[$2 + 24 >> 2];
$5 = HEAP32[$2 + 28 >> 2];
}
HEAPF32[$0 + 8 >> 2] = $4 | 0;
HEAPF32[$0 + 4 >> 2] = $6 | 0;
HEAPF32[$0 >> 2] = $5 | 0;
}
__stack_pointer = $2 + 32 | 0;
}
function HandshapeThumbbend_28ThumbBending__2c_20HandshapeType_2c_20ThumbbendType_2c_20FingerbendType_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
$8 = Math_imul($1, 160);
$4 = ($8 + 70752 | 0) + Math_imul($2, 20) | 0;
HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 48 >> 2];
$6 = HEAP32[$4 + 40 >> 2];
$7 = HEAP32[$4 + 44 >> 2];
HEAP32[$0 + 8 >> 2] = $6;
HEAP32[$0 + 12 >> 2] = $7;
$6 = HEAP32[$4 + 36 >> 2];
$7 = HEAP32[$4 + 32 >> 2];
HEAP32[$0 >> 2] = $7;
HEAP32[$0 + 4 >> 2] = $6;
label$1: {
label$2: {
label$3: {
switch ($3 | 0) {
case 2:
if ((HEAP32[($8 + 70752 | 0) + 156 >> 2] & -4) != 4) {
switch ($2 - 2 | 0) {
case 0:
case 2:
break label$2;
default:
break label$1;
}
}
$4 = Math_imul($1, 160) + 70752 | 0;
HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 148 >> 2];
$6 = HEAP32[$4 + 140 >> 2];
$7 = HEAP32[$4 + 144 >> 2];
HEAP32[$0 + 8 >> 2] = $6;
HEAP32[$0 + 12 >> 2] = $7;
$6 = HEAP32[$4 + 136 >> 2];
$7 = HEAP32[$4 + 132 >> 2];
HEAP32[$0 >> 2] = $7;
HEAP32[$0 + 4 >> 2] = $6;
break label$1;
case 0:
case 1:
break label$1;
default:
break label$3;
}
}
$4 = Math_imul($3, 20) + 74944 | 0;
HEAP32[$5 + 24 >> 2] = HEAP32[$4 + 16 >> 2];
$6 = HEAP32[$4 + 8 >> 2];
$7 = HEAP32[$4 + 12 >> 2];
HEAP32[$5 + 16 >> 2] = $6;
HEAP32[$5 + 20 >> 2] = $7;
$6 = HEAP32[$4 + 4 >> 2];
$7 = HEAP32[$4 >> 2];
HEAP32[19359] = 0;
HEAP32[$5 + 8 >> 2] = $7;
HEAP32[$5 + 12 >> 2] = $6;
invoke_vii(431, $0 | 0, $5 + 8 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
ThumbBending___ThumbBending_28_29($5 + 8 | 0);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
ThumbBending___ThumbBending_28_29($5 + 8 | 0);
__resumeException($0 | 0);
abort();
}
ThumbBending__setAdd_28ThumbBending_20const__29($0, 74984);
}
__stack_pointer = $5 + 32 | 0;
}
function Gesture__Gesture_28char_20const__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
HEAP8[$0 + 12 | 0] = 1;
HEAP32[$0 + 8 >> 2] = $1;
$1 = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 >> 2] = $2;
$2 = GestureFlags__GestureFlags_28_29($0 + 13 | 0);
Mirroring__Mirroring_28_29($0 + 14 | 0);
memset($0 + 16 | 0, 0, 36);
$4 = HEAP32[$0 >> 2];
if (!$4) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37525, 0);
return $0 | 0;
}
HEAP8[$2 | 0] = HEAPU8[$2 | 0] & 191 | ($3 ? 64 : 0);
$2 = HEAP32[HEAP32[$4 + 104 >> 2] + 12 >> 2];
wasm2js_i32$0 = $0, wasm2js_i32$1 = dlmalloc($2 << 2), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
$4 = ($2 | 0) > 0 ? $2 : 0;
while (1) if (($1 | 0) == ($4 | 0)) {
$1 = operator_20new_28unsigned_20long_29(84);
HEAP32[19359] = 0;
$2 = invoke_ii(357, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
label$5: {
HEAP32[$0 + 36 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(76);
HEAP32[19359] = 0;
$2 = invoke_iiii(358, $1 | 0, 1, $0 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$5;
}
HEAP32[$0 + 20 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(76);
HEAP32[19359] = 0;
$4 = invoke_iiii(358, $1 | 0, 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$5;
}
HEAP32[$0 + 24 >> 2] = $4;
$1 = HEAP32[$0 + 20 >> 2];
HEAP32[$0 + 32 >> 2] = $3 ? $4 : $1;
HEAP32[$0 + 28 >> 2] = $3 ? $1 : $4;
return $0 | 0;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
} else {
$2 = Joint__NewJointRotation_28_29(DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[HEAP32[$0 >> 2] + 104 >> 2], $1));
HEAP32[HEAP32[$0 + 4 >> 2] + ($1 << 2) >> 2] = $2;
$1 = $1 + 1 | 0;
continue;
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
label$2: {
if ($2 >>> 0 <= 10) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
break label$2;
}
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
$5 = $3 + 1 | 0;
$3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $5);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
}
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
HEAP8[$4 + 15 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
__stack_pointer = $4 + 16 | 0;
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0);
abort();
}
function little2_scanDecl($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = -1;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
$4 = HEAPU8[$1 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 20 | 0) {
case 2:
case 4:
break label$4;
case 0:
break label$5;
case 7:
break label$6;
default:
break label$3;
}
}
return little2_scanComment($0, $1 + 2 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $1 + 2;
return 33;
}
label$9: {
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
$5 = HEAPU8[$4 + 2 | 0];
label$11: {
$7 = HEAPU8[$4 + 3 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 21 | 0) {
case 0:
break label$1;
case 1:
case 3:
continue;
case 9:
break label$11;
case 2:
case 4:
case 5:
case 6:
case 7:
case 8:
break label$3;
default:
break label$9;
}
}
break;
}
if (($4 + 4 | 0) == ($2 | 0)) {
break label$2;
}
$5 = HEAPU8[$4 + 4 | 0];
$4 = HEAPU8[$4 + 5 | 0];
if ($4) {
$4 = unicode_byte_type($4 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if ($4 >>> 0 > 30) {
break label$1;
}
if (1 << $4 & 1075840512) {
break label$3;
}
break label$1;
}
if ($5 - 9 >>> 0 < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
return $6;
}
HEAP32[$3 >> 2] = $1;
return 16;
}
function RepeatMovement__RepeatMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 8, $1);
HEAP32[$0 + 528 >> 2] = 0;
HEAP32[$0 + 532 >> 2] = 0;
HEAP32[$0 >> 2] = 62268;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 + 540 >> 2] = 0;
Direction3__Direction3_28_29($0 + 544 | 0);
HEAP32[$0 + 564 >> 2] = 0;
HEAP32[$0 + 556 >> 2] = 0;
HEAP32[$0 + 560 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(472, $0 + 568 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 592 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 604 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 616 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 628 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 640 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 652 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 664 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 676 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 696 >> 2] = 0;
HEAP32[$0 + 700 >> 2] = 0;
HEAP32[$0 + 688 >> 2] = 1065353216;
HEAP32[$0 + 692 >> 2] = 1065353216;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $1 >>> 0) {
label$2: {
if ($1 >>> 0 <= 10) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
break label$2;
}
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($1);
$5 = $3 + 1 | 0;
$3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $5);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
}
std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
HEAP8[$4 + 15 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $4 + 15 | 0);
__stack_pointer = $4 + 16 | 0;
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0);
abort();
}
function big2_scanDecl($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = -1;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
$4 = HEAPU8[$1 + 1 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 20 | 0) {
case 2:
case 4:
break label$4;
case 0:
break label$5;
case 7:
break label$6;
default:
break label$3;
}
}
return big2_scanComment($0, $1 + 2 | 0, $2, $3);
}
HEAP32[$3 >> 2] = $1 + 2;
return 33;
}
label$9: {
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
$5 = HEAPU8[$4 + 3 | 0];
label$11: {
$7 = HEAPU8[$4 + 2 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
switch ($5 - 21 | 0) {
case 0:
break label$1;
case 1:
case 3:
continue;
case 9:
break label$11;
case 2:
case 4:
case 5:
case 6:
case 7:
case 8:
break label$3;
default:
break label$9;
}
}
break;
}
if (($4 + 4 | 0) == ($2 | 0)) {
break label$2;
}
$5 = HEAPU8[$4 + 5 | 0];
$4 = HEAPU8[$4 + 4 | 0];
if ($4) {
$4 = unicode_byte_type($4 << 24 >> 24, $5 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if ($4 >>> 0 > 30) {
break label$1;
}
if (1 << $4 & 1075840512) {
break label$3;
}
break label$1;
}
if ($5 - 9 >>> 0 < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
return $6;
}
HEAP32[$3 >> 2] = $1;
return 16;
}
function printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($0, $1, $2, $3) {
label$1: {
if (!Direction3__defined_28_29_20const($3)) {
break label$1;
}
label$2: {
if ($1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 32);
break label$2;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 15262);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 + 4 >> 2], 117, 100);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 + 8 >> 2], 111, 105);
printDirCoordSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20float_2c_20char_2c_20char_29($0, HEAPF32[$3 >> 2], 108, 114);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 34);
if ($1) {
break label$1;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 10);
}
}
function HanimAvatar__AddARPSiteByName_28char_20const__2c_20Joint__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
label$1: {
if ($2) {
$5 = copyString_28char_20const__29($1);
$4 = operator_20new_28unsigned_20long_29(56);
HEAP32[19359] = 0;
$1 = invoke_iii(328, $4 | 0, $5 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$1;
}
HashAny_char_20const__2c_20SiteID___lookupString_28char_20const__29_20const($3 + 72 | 0, HEAP32[17502], $5);
HEAP8[$1 + 14 | 0] = HEAPU8[$3 + 74 | 0];
HEAP16[$1 + 12 >> 1] = HEAPU16[$3 + 72 >> 1];
$4 = HEAP32[$1 + 12 >> 2];
HEAP32[$3 + 64 >> 2] = $4;
$6 = HEAP32[17576];
HEAP32[$3 + 56 >> 2] = $6;
HEAP32[$3 + 28 >> 2] = $4;
HEAP32[$3 + 24 >> 2] = $6;
wasm2js_i32$0 = $1, wasm2js_i32$1 = operator___28SiteID_2c_20SiteID_29_1($3 + 28 | 0, $3 + 24 | 0) ? 3 : 1, 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
DynamicArrayP_Site___appendElement_28Site__29(HEAP32[$0 + 108 >> 2], $1);
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29($0 + 144 | 0, $5, HEAP32[HEAP32[$0 + 108 >> 2] + 12 >> 2] - 1 | 0);
$4 = HEAP32[$1 + 12 >> 2];
HEAP32[$3 + 48 >> 2] = $4;
$5 = HEAP32[17576];
HEAP32[$3 + 40 >> 2] = $5;
HEAP32[$3 + 20 >> 2] = $4;
HEAP32[$3 + 16 >> 2] = $5;
if (operator___28SiteID_2c_20SiteID_29($3 + 20 | 0, $3 + 16 | 0)) {
$4 = HEAP32[$1 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 32 >> 2] = $4;
HashAny_SiteID_20const_2c_20Site____addItem_28SiteID_2c_20Site__29($0 + 172 | 0, $3 + 12 | 0, $1);
}
Joint__addSite_28Site__29($2, $1);
HEAP32[$1 + 16 >> 2] = $2;
UNIMPLEMENTED_28char_20const__29(8327);
HEAP32[$1 + 20 >> 2] = 1028443341;
}
__stack_pointer = $3 + 80 | 0;
return;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($3 | 0);
abort();
}
function WristMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 96 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
HEAP32[$2 + 80 >> 2] = $0;
fiprintf($1, 32311, $2 + 80 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
if (HEAP32[$0 + 528 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22650, $1);
HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 528 >> 2];
fiprintf($1, 30758, $2 - -64 | 0);
}
if (HEAP32[$0 + 532 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23111, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 532 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
}
if (HEAPF32[$0 + 536 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 536 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 29399, $2 + 32 | 0);
}
if (HEAPF32[$0 + 540 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 540 >> 2];
HEAP32[$2 + 16 >> 2] = 3;
HEAPF64[$2 + 24 >> 3] = $3;
__small_fprintf($1, 29351, $2 + 16 | 0);
}
if (HEAPF32[$0 + 544 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 544 >> 2];
HEAP32[$2 >> 2] = 3;
HEAPF64[$2 + 8 >> 3] = $3;
__small_fprintf($1, 28921, $2);
}
$0 = $0 + 548 | 0;
label$7: {
if (Vector__x_28_29_20const($0) != Math_fround(0)) {
break label$7;
}
if (Vector__y_28_29_20const($0) != Math_fround(0)) {
break label$7;
}
if (Vector__z_28_29_20const($0) == Math_fround(0)) {
break label$1;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22353, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 96 | 0;
}
function little2_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
label$3: {
label$4: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = HEAPU8[$4 | 0];
$6 = HEAPU8[$4 + 1 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
$5 = 2;
label$9: {
label$10: {
switch ($6 - 2 | 0) {
case 4:
$5 = 3;
break label$9;
case 5:
$5 = 4;
break label$9;
case 1:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
return little2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
case 0:
HEAP32[$3 >> 2] = $4;
return 0;
case 8:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
case 7:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$5 = HEAPU8[$1 + 2 | 0];
$2 = $1 + 4 | 0;
$6 = HEAPU8[$1 + 3 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($5 | 0) == 10 ? $2 : $4;
return 7;
case 2:
case 3:
case 6:
break label$9;
default:
break label$10;
}
}
if (($6 | 0) == 21) {
break label$4;
}
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$2;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 39;
}
HEAP32[$3 >> 2] = $4;
}
return 6;
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
__cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
return;
}
$6 = HEAPU8[$1 + 53 | 0];
$8 = HEAP32[$0 + 12 >> 2];
HEAP8[$1 + 53 | 0] = 0;
$7 = HEAPU8[$1 + 52 | 0];
HEAP8[$1 + 52 | 0] = 0;
$12 = $0 + 16 | 0;
__cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($12, $1, $2, $3, $4, $5);
$9 = HEAPU8[$1 + 53 | 0];
$11 = $9 | $6;
$10 = HEAPU8[$1 + 52 | 0];
$7 = $10 | $7;
$6 = $0 + 24 | 0;
$8 = ($8 << 3) + $12 | 0;
label$2: {
if ($6 >>> 0 >= $8 >>> 0) {
break label$2;
}
while (1) {
if (HEAPU8[$1 + 54 | 0]) {
break label$2;
}
label$4: {
if ($10) {
if (HEAP32[$1 + 24 >> 2] == 1) {
break label$2;
}
if (HEAPU8[$0 + 8 | 0] & 2) {
break label$4;
}
break label$2;
}
if (!$9) {
break label$4;
}
if (!(HEAP8[$0 + 8 | 0] & 1)) {
break label$2;
}
}
HEAP16[$1 + 52 >> 1] = 0;
__cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
$9 = HEAPU8[$1 + 53 | 0];
$11 = $9 | $11;
$10 = HEAPU8[$1 + 52 | 0];
$7 = $10 | $7;
$6 = $6 + 8 | 0;
if ($8 >>> 0 > $6 >>> 0) {
continue;
}
break;
}
}
HEAP8[$1 + 53 | 0] = ($11 & 255) != 0;
HEAP8[$1 + 52 | 0] = ($7 & 255) != 0;
}
function big2_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
label$3: {
label$4: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = HEAPU8[$4 + 1 | 0];
$6 = HEAPU8[$4 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
$5 = 2;
label$9: {
label$10: {
switch ($6 - 2 | 0) {
case 4:
$5 = 3;
break label$9;
case 5:
$5 = 4;
break label$9;
case 1:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
return big2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
case 0:
HEAP32[$3 >> 2] = $4;
return 0;
case 8:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
case 7:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$5 = HEAPU8[$1 + 3 | 0];
$2 = $1 + 4 | 0;
$6 = HEAPU8[$1 + 2 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($5 | 0) == 10 ? $2 : $4;
return 7;
case 2:
case 3:
case 6:
break label$9;
default:
break label$10;
}
}
if (($6 | 0) == 21) {
break label$4;
}
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$2;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 39;
}
HEAP32[$3 >> 2] = $4;
}
return 6;
}
function GetNonmanualDefs_28XMLCell__2c_20char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_iii(456, $3 | 0, 100) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
label$2: {
HEAP32[17653] = $4;
$3 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$4 = invoke_iiii(457, $3 | 0, 0, 100) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$3: {
label$4: {
if (($2 | 0) != 1) {
HEAP32[17652] = $4;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_ii(458, $3 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
HEAP32[17654] = $4;
if ($0) {
break label$4;
}
LogTime_28_29();
HEAP32[$5 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36591, $5);
eprintf_28char_20const__2c_20____29(42521, 0);
break label$3;
}
break label$2;
}
$4 = HEAP32[$0 + 8 >> 2];
if (!$4) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($0));
break label$3;
}
$3 = 0;
$2 = HEAP32[$4 + 12 >> 2];
$6 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($3 | 0) != ($6 | 0)) {
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, $3);
label$9: {
if (!strcmp(HEAP32[$2 >> 2], 11056)) {
GetSAMPADef_28XMLCell__2c_20char_20const__29($2);
break label$9;
}
GetNonmanualDef_28XMLCell__2c_20char_20const__29($2, $1);
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
operator_20delete_28void__29(XMLCell___XMLCell_28_29($0));
}
__stack_pointer = $5 + 16 | 0;
return;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($2 | 0);
abort();
}
function FingerBending__SetFingerBending_28char_20const__2c_20HashAny_char_20const__2c_20FingerBending___29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = Math_fround(0);
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
if ($2) {
HashAny_char_20const__2c_20FingerBending___lookupString_28char_20const__29_20const($3 - -64 | 0, $2, $1);
$2 = HEAP32[$3 + 76 >> 2];
$4 = HEAP32[$3 + 72 >> 2];
HEAP32[$0 + 8 >> 2] = $4;
HEAP32[$0 + 12 >> 2] = $2;
$4 = HEAP32[$3 + 68 >> 2];
$2 = HEAP32[$3 + 64 >> 2];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $4;
FingerBending___FingerBending_28_29($3 - -64 | 0);
}
if (FingerBending__defined_28_29_20const($0)) {
break label$1;
}
HEAP32[$3 + 16 >> 2] = $3 - -64;
HEAP32[$3 + 20 >> 2] = $3 + 56;
HEAP32[$3 + 24 >> 2] = $3 + 48;
HEAP32[$3 + 28 >> 2] = $3 + 40;
label$3: {
switch (sscanf($1, 7519, $3 + 16 | 0) - 3 | 0) {
case 0:
HEAPF32[$0 >> 2] = HEAPF64[$3 + 64 >> 3];
HEAPF32[$0 + 4 >> 2] = HEAPF64[$3 + 56 >> 3];
HEAPF32[$0 + 8 >> 2] = HEAPF64[$3 + 48 >> 3];
break label$1;
case 1:
HEAPF32[$0 >> 2] = HEAPF64[$3 + 64 >> 3];
HEAPF32[$0 + 4 >> 2] = HEAPF64[$3 + 56 >> 3];
HEAPF32[$0 + 8 >> 2] = HEAPF64[$3 + 48 >> 3];
HEAPF32[$0 + 12 >> 2] = HEAPF64[$3 + 40 >> 3];
break label$1;
default:
break label$3;
}
}
$2 = strlen($1) << 16;
if (!(($2 | 0) != 262144 & ($2 | 0) != 196608)) {
HEAPF32[$0 >> 2] = HEAP8[$1 | 0] - 48 | 0;
HEAPF32[$0 + 4 >> 2] = HEAP8[$1 + 1 | 0] - 48 | 0;
HEAPF32[$0 + 8 >> 2] = HEAP8[$1 + 2 | 0] - 48 | 0;
$5 = Math_fround(-100);
$5 = ($2 | 0) == 262144 ? Math_fround(HEAP8[$1 + 3 | 0] - 48 | 0) : $5;
HEAPF32[$0 + 12 >> 2] = $5;
break label$1;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(46714, $3);
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
}
__stack_pointer = $3 + 80 | 0;
}
function little2_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
label$3: {
label$4: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = HEAPU8[$4 | 0];
$6 = HEAPU8[$4 + 1 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
$5 = 2;
label$9: {
label$10: {
switch ($6 - 3 | 0) {
case 3:
$5 = 3;
break label$9;
case 4:
$5 = 4;
break label$9;
case 0:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
return little2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
case 7:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
case 6:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$5 = HEAPU8[$1 + 2 | 0];
$2 = $1 + 4 | 0;
$6 = HEAPU8[$1 + 3 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($5 | 0) == 10 ? $2 : $4;
return 7;
case 1:
case 2:
case 5:
break label$9;
default:
break label$10;
}
}
if (($6 | 0) == 30) {
break label$4;
}
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$2;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = little2_scanPercent($0, $1 + 2 | 0, $2, $3);
return (($4 | 0) == 22 ? 0 : $4) | 0;
}
HEAP32[$3 >> 2] = $4;
}
return 6;
}
function SSFrame__SSFrame_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
HEAP32[$0 >> 2] = 59112;
$3 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___vector_28_29($0 + 4 | 0);
$4 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___vector_28_29($0 + 16 | 0);
$1 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($3);
$2 = ($1 | 0) > 0 ? $1 : 0;
$1 = 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
label$3: {
$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($4);
$2 = ($1 | 0) > 0 ? $1 : 0;
$1 = 0;
while (1) if (($1 | 0) == ($2 | 0)) {
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[19359] = 0;
$1 = invoke_ii(1, 312) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$3;
}
HEAP32[$0 + 36 >> 2] = $1;
$1 = 0;
while (1) if (($1 | 0) == 78) {
HEAP32[$0 + 40 >> 2] = 0;
return $0 | 0;
} else {
HEAP32[HEAP32[$0 + 36 >> 2] + ($1 << 2) >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
} else {
wasm2js_i32$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($4, $1), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = $1 + 1 | 0;
continue;
}
}
} else {
wasm2js_i32$0 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($3, $1), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____vector_28_29($4);
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____vector_28_29($3);
__resumeException($1 | 0);
abort();
}
function atan2f($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
label$1: {
if ((__FLOAT_BITS($1) & 2147483647) >>> 0 <= 2139095040) {
if ((__FLOAT_BITS($0) & 2147483647) >>> 0 < 2139095041) {
break label$1;
}
}
return Math_fround($0 + $1);
}
$2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
if (($2 | 0) == 1065353216) {
return atanf($0);
}
$6 = $2 >>> 30 & 2;
$3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$4 = $6 | $3 >>> 31;
folding_inner0: {
label$4: {
$3 = $3 & 2147483647;
label$5: {
if (!$3) {
label$7: {
switch ($4 - 2 | 0) {
case 0:
return Math_fround(3.1415927410125732);
case 1:
break label$7;
default:
break label$5;
}
}
return Math_fround(-3.1415927410125732);
}
$2 = $2 & 2147483647;
if (($2 | 0) != 2139095040) {
if (!$2 | !(($3 | 0) != 2139095040 & $2 + 218103808 >>> 0 >= $3 >>> 0)) {
break folding_inner0;
}
label$12: {
if ($6) {
$5 = Math_fround(0);
if ($3 + 218103808 >>> 0 < $2 >>> 0) {
break label$12;
}
}
$5 = atanf(fabsf(Math_fround($0 / $1)));
}
$0 = $5;
label$14: {
switch ($4 | 0) {
case 1:
return Math_fround(-$0);
case 2:
return Math_fround(Math_fround(3.1415927410125732) - Math_fround($0 + Math_fround(8.742277657347586e-8)));
case 0:
break label$5;
default:
break label$14;
}
}
return Math_fround(Math_fround($0 + Math_fround(8.742277657347586e-8)) + Math_fround(-3.1415927410125732));
}
if (($3 | 0) == 2139095040) {
break label$4;
}
$0 = HEAPF32[($4 << 2) + 51868 >> 2];
}
return $0;
}
return HEAPF32[($4 << 2) + 51852 >> 2];
}
return wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141403), 
wasm2js_scratch_load_f32();
}
function big2_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
label$3: {
label$4: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = HEAPU8[$4 + 1 | 0];
$6 = HEAPU8[$4 | 0];
if ($6) {
$6 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$6 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
$5 = 2;
label$9: {
label$10: {
switch ($6 - 3 | 0) {
case 3:
$5 = 3;
break label$9;
case 4:
$5 = 4;
break label$9;
case 0:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
return big2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
case 7:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
HEAP32[$3 >> 2] = $1 + 2;
return 7;
case 6:
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = $1 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
$5 = HEAPU8[$1 + 3 | 0];
$2 = $1 + 4 | 0;
$6 = HEAPU8[$1 + 2 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
HEAP32[$3 >> 2] = ($5 | 0) == 10 ? $2 : $4;
return 7;
case 1:
case 2:
case 5:
break label$9;
default:
break label$10;
}
}
if (($6 | 0) == 30) {
break label$4;
}
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
break label$2;
}
if (($1 | 0) != ($4 | 0)) {
break label$3;
}
$4 = big2_scanPercent($0, $1 + 2 | 0, $2, $3);
return (($4 | 0) == 22 ? 0 : $4) | 0;
}
HEAP32[$3 >> 2] = $4;
}
return 6;
}
function HashAny_char_20const__2c_20SiteID___insertString_28int_2c_20char_20const__2c_20SiteID_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$3 = HEAP32[$3 >> 2];
HEAP32[$4 + 8 >> 2] = $3;
HEAP32[$4 + 16 >> 2] = $3;
$2 = HashChainItem_char_20const__2c_20SiteID___HashChainItem_28char_20const__2c_20SiteID_29($4 + 24 | 0, $2, $4 + 8 | 0);
HEAP32[19359] = 0;
invoke_vii(281, $5 | 0, $2 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($2);
$3 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$3 = HEAP32[$3 >> 2];
HEAP32[$4 + 12 >> 2] = $3;
HEAP32[$4 + 32 >> 2] = $3;
$3 = HashChainItem_char_20const__2c_20SiteID___HashChainItem_28char_20const__2c_20SiteID_29($4 + 40 | 0, $2, $4 + 12 | 0);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20SiteID___HashChain_28HashChainItem_char_20const__2c_20SiteID__29($5, $3), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($3);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$3 = $0 + 16 | 0;
}
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 48 | 0;
}
function MergeTgts_28DynamicArrayP_BasicMovement___29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
label$1: {
if (HEAP32[$0 + 12 >> 2] < 2) {
break label$1;
}
UNIMPLEMENTED_28char_20const__29(3320);
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0, 0);
$1 = HEAP32[$0 + 12 >> 2];
$9 = ($1 | 0) > 1 ? $1 : 1;
$6 = HEAP32[$2 + 528 >> 2];
$7 = 1;
while (1) {
if (($7 | 0) == ($9 | 0)) {
HEAP32[$0 + 12 >> 2] = 1;
break label$1;
}
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0, $7);
$3 = HEAP32[$1 + 12 >> 2];
if (($3 | 0) > HEAP32[$2 + 12 >> 2]) {
HEAP32[$2 + 12 >> 2] = $3;
}
$4 = HEAPF32[$1 + 40 >> 2];
if ($4 < HEAPF32[$2 + 40 >> 2]) {
HEAPF32[$2 + 40 >> 2] = $4;
}
$4 = HEAPF32[$1 + 52 >> 2];
if ($4 < HEAPF32[$2 + 52 >> 2]) {
HEAPF32[$2 + 52 >> 2] = $4;
}
$4 = HEAPF32[$1 + 56 >> 2];
if ($4 < HEAPF32[$2 + 56 >> 2]) {
HEAPF32[$2 + 56 >> 2] = $4;
}
$3 = HEAP32[$1 + 528 >> 2];
SiGMLConstellation__mergeFrom_28SiGMLConstellation_20const__29(HEAP32[$6 + 36 >> 2], HEAP32[$3 + 36 >> 2]);
$5 = HEAP32[$3 + 20 >> 2];
$8 = HEAP32[$6 + 20 >> 2];
label$8: {
if (!$8) {
HEAP32[$6 + 20 >> 2] = $5;
HEAP32[$3 + 20 >> 2] = 0;
break label$8;
}
if (!$5) {
break label$8;
}
OneHAbstractPosture__defaultFrom_28OneHAbstractPosture_20const__29($8, $5);
}
$5 = HEAP32[$3 + 24 >> 2];
$8 = HEAP32[$6 + 24 >> 2];
label$10: {
if (!$8) {
HEAP32[$6 + 24 >> 2] = $5;
HEAP32[$3 + 24 >> 2] = 0;
break label$10;
}
if (!$5) {
break label$10;
}
OneHAbstractPosture__defaultFrom_28OneHAbstractPosture_20const__29($8, $5);
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($0, $7, 0);
$7 = $7 + 1 | 0;
continue;
}
}
}
function normal_scanLit($0, $1, $2, $3, $4) {
var $5 = 0;
label$1: {
label$2: {
label$3: {
while (1) {
if (($2 | 0) == ($3 | 0)) {
return -1;
}
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$5 = HEAPU8[(HEAPU8[$2 | 0] + $1 | 0) + 72 | 0];
switch ($5 | 0) {
case 6:
break label$10;
case 5:
break label$11;
case 0:
case 1:
case 8:
break label$6;
case 12:
case 13:
break label$8;
case 7:
break label$9;
default:
break label$7;
}
}
if (($3 - $2 | 0) < 2) {
break label$1;
}
if (FUNCTION_TABLE[HEAP32[$1 + 352 >> 2]]($1, $2) | 0) {
break label$6;
}
$2 = $2 + 2 | 0;
continue;
}
if (($3 - $2 | 0) < 3) {
break label$1;
}
if (FUNCTION_TABLE[HEAP32[$1 + 356 >> 2]]($1, $2) | 0) {
break label$6;
}
$2 = $2 + 3 | 0;
continue;
}
if (($3 - $2 | 0) < 4) {
break label$1;
}
if (FUNCTION_TABLE[HEAP32[$1 + 360 >> 2]]($1, $2) | 0) {
break label$6;
}
$2 = $2 + 4 | 0;
continue;
}
$2 = $2 + 1 | 0;
if (($0 | 0) != ($5 | 0)) {
continue;
}
if (($2 | 0) == ($3 | 0)) {
return -27;
}
HEAP32[$4 >> 2] = $2;
$1 = HEAPU8[(HEAPU8[$2 | 0] + $1 | 0) + 72 | 0];
if ($1 >>> 0 > 30) {
break label$3;
}
$2 = 27;
if (1 << $1 & 1076891136) {
break label$2;
}
break label$3;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
HEAP32[$4 >> 2] = $2;
}
$2 = 0;
}
return $2;
}
return -2;
}
function QuaternionController__microUpdate_28float_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0);
$2 = $0 + 548 | 0;
Quaternion__normalise_28_29($2);
$5 = $0 + 532 | 0;
Quaternion__normalise_28_29($5);
$3 = $0 + 564 | 0;
computeError1_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($3, $5, $2);
if (HEAP32[$0 + 448 >> 2] == 3) {
compute_k1k2_28float__2c_20float__2c_20float_2c_20float_29($0 + 468 | 0, $0 + 472 | 0, Math_fround(HEAPF32[$0 + 452 >> 2] * scaling_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 460 >> 2], Quaternion__length_28_29_20const($3), HEAPF32[$0 + 8 >> 2])), HEAPF32[$0 + 456 >> 2]);
}
$8 = errorSize_28Quaternion_20const__29($3);
$6 = HEAPF32[$0 + 464 >> 2];
if (!(!($6 > Math_fround(0)) | (!(Math_fround(-$6) < $8) | (HEAPU8[$0 + 624 | 0] | !($8 < $6))))) {
$4 = HEAP32[$0 + 584 >> 2];
$7 = HEAP32[$0 + 580 >> 2];
HEAP32[$2 >> 2] = $7;
HEAP32[$2 + 4 >> 2] = $4;
$7 = HEAP32[$0 + 592 >> 2];
$4 = HEAP32[$0 + 588 >> 2];
HEAP32[$2 + 8 >> 2] = $4;
HEAP32[$2 + 12 >> 2] = $7;
computeError1_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($3, $5, $2);
setZeroPer2_28Quaternion__29($0 + 484 | 0);
HEAP8[$0 + 624 | 0] = 1;
}
$2 = $0 + 500 | 0;
setRef2_28Quaternion__2c_20Quaternion_20const__2c_20float_29($2, $3, HEAPF32[$0 + 468 >> 2]);
$4 = $0 + 516 | 0;
$3 = $0 + 484 | 0;
computeError2_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($4, $3, $2);
$2 = $0 + 596 | 0;
setAccel_28Quaternion__2c_20Quaternion_20const__2c_20float_29($2, $4, Math_fround(HEAPF32[$0 + 472 >> 2] / HEAPF32[$0 + 476 >> 2]));
trimLength_28Quaternion__2c_20float_29($2, HEAPF32[$0 + 612 >> 2]);
updatePer1_28Quaternion__2c_20Quaternion_20const__2c_20float_29($5, $3, $1);
updatePer2_28Quaternion__2c_20Quaternion_20const__2c_20float_29($3, $2, $1);
trimLength_28Quaternion__2c_20float_29($3, HEAPF32[$0 + 616 >> 2]);
}
function calcLeadFractions_28float__2c_20float_2c_20PostureChangeFlags_2c_20PostureChangeTiming_2c_20bool_29($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0);
$5 = __stack_pointer + -64 | 0;
__stack_pointer = $5;
$6 = $4 ? $1 : Math_fround(Math_fround(1) - $1);
HEAPF32[$0 >> 2] = $6;
$9 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
$10 = $9 & 64;
$7 = $6;
$8 = $9 & 1536;
if (($8 | 0) == 1536) {
$7 = rescaleSpace_28float_2c_20float_29($6, HEAPF32[$3 + 4 >> 2]);
}
HEAPF32[$0 + 4 >> 2] = $7;
$7 = $6;
label$2: {
if (!$10) {
break label$2;
}
$7 = $6;
if (!$8) {
break label$2;
}
$7 = rescaleSpace_28float_2c_20float_29($6, HEAPF32[$3 >> 2]);
}
HEAPF32[$0 + 12 >> 2] = $6;
HEAPF32[$0 + 8 >> 2] = $7;
label$3: {
if ($4) {
break label$3;
}
$8 = 0;
while (1) {
if (($8 | 0) == 4) {
break label$3;
}
$11 = ($8 << 2) + $0 | 0;
HEAPF32[$11 >> 2] = Math_fround(1) - HEAPF32[$11 >> 2];
$8 = $8 + 1 | 0;
continue;
}
}
if (HEAPU8[67558]) {
eprintf_28char_20const__2c_20____29(16705, 0);
PostureChangeFlags__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputc_28char_29(10);
HEAP32[$5 + 56 >> 2] = $10 ? 84 : 70;
HEAP32[$5 + 52 >> 2] = $9 & 1024 ? 84 : 70;
HEAP32[$5 + 48 >> 2] = $9 & 512 ? 84 : 70;
eprintf_28char_20const__2c_20____29(31141, $5 + 48 | 0);
$6 = HEAPF32[$0 >> 2];
$7 = HEAPF32[$0 + 4 >> 2];
$12 = HEAPF32[$0 + 8 >> 2];
HEAPF64[$5 + 40 >> 3] = HEAPF32[$0 + 12 >> 2];
HEAPF64[$5 + 32 >> 3] = $12;
HEAPF64[$5 + 24 >> 3] = $7;
HEAPF64[$5 + 16 >> 3] = $6;
HEAPF64[$5 + 8 >> 3] = $1;
HEAP32[$5 >> 2] = $4 ? 84 : 70;
eprintf_28char_20const__2c_20____29(16121, $5);
PostureChangeTiming__print_28_IO_FILE__29_20const($3, HEAP32[16886]);
eputc_28char_29(10);
}
__stack_pointer = $5 - -64 | 0;
}
function HashAny_SiteID_20const_2c_20Site____insertString_28int_2c_20SiteID_2c_20Site__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HEAP32[$2 >> 2];
HEAP32[$4 + 8 >> 2] = $2;
HEAP32[$4 + 16 >> 2] = $2;
$3 = HashChainItem_SiteID_20const_2c_20Site____HashChainItem_28SiteID_2c_20Site__29($4 + 24 | 0, $4 + 8 | 0, $3);
HEAP32[19359] = 0;
invoke_vii(327, $5 | 0, $3 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($3);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($3);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HEAP32[$2 >> 2];
HEAP32[$4 + 12 >> 2] = $2;
HEAP32[$4 + 32 >> 2] = $2;
$2 = HashChainItem_SiteID_20const_2c_20Site____HashChainItem_28SiteID_2c_20Site__29($4 + 40 | 0, $4 + 12 | 0, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_SiteID_20const_2c_20Site____HashChain_28HashChainItem_SiteID_20const_2c_20Site___29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 48 | 0;
}
function little2_scanLit($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
while (1) {
$5 = $2;
if (($5 | 0) == ($3 | 0)) {
return -1;
}
$6 = HEAPU8[$5 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$2 = HEAPU8[$5 + 1 | 0];
if ($2) {
$6 = unicode_byte_type($2 << 24 >> 24, $6 << 24 >> 24);
} else {
$6 = HEAPU8[($1 + $6 | 0) + 72 | 0];
}
switch ($6 | 0) {
case 6:
break label$10;
case 5:
break label$11;
case 12:
case 13:
break label$7;
case 0:
case 1:
case 8:
break label$8;
case 7:
break label$9;
default:
break label$4;
}
}
if (($3 - $5 | 0) >= 2) {
break label$4;
}
break label$3;
}
if (($3 - $5 | 0) < 3) {
break label$3;
}
$2 = $5 + 3 | 0;
continue;
}
if (($3 - $5 | 0) < 4) {
break label$3;
}
$2 = $5 + 4 | 0;
continue;
}
HEAP32[$4 >> 2] = $5;
break label$6;
}
$2 = $5 + 2 | 0;
if (($0 | 0) != ($6 | 0)) {
continue;
}
if (($2 | 0) == ($3 | 0)) {
return -27;
}
HEAP32[$4 >> 2] = $2;
$6 = HEAPU8[$5 + 2 | 0];
$5 = HEAPU8[$5 + 3 | 0];
if ($5) {
$6 = unicode_byte_type($5 << 24 >> 24, $6 << 24 >> 24);
} else {
$6 = HEAPU8[($1 + $6 | 0) + 72 | 0];
}
if ($6 >>> 0 > 30) {
break label$6;
}
$5 = 27;
if (1 << $6 & 1076891136) {
break label$5;
}
}
$5 = 0;
}
return $5;
}
$2 = $5 + 2 | 0;
continue;
}
break;
}
return -2;
}
function big2_scanLit($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
while (1) {
$5 = $2;
if (($5 | 0) == ($3 | 0)) {
return -1;
}
$6 = HEAPU8[$5 + 1 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
label$11: {
$2 = HEAPU8[$5 | 0];
if ($2) {
$6 = unicode_byte_type($2 << 24 >> 24, $6 << 24 >> 24);
} else {
$6 = HEAPU8[($1 + $6 | 0) + 72 | 0];
}
switch ($6 | 0) {
case 6:
break label$10;
case 5:
break label$11;
case 12:
case 13:
break label$7;
case 0:
case 1:
case 8:
break label$8;
case 7:
break label$9;
default:
break label$4;
}
}
if (($3 - $5 | 0) >= 2) {
break label$4;
}
break label$3;
}
if (($3 - $5 | 0) < 3) {
break label$3;
}
$2 = $5 + 3 | 0;
continue;
}
if (($3 - $5 | 0) < 4) {
break label$3;
}
$2 = $5 + 4 | 0;
continue;
}
HEAP32[$4 >> 2] = $5;
break label$6;
}
$2 = $5 + 2 | 0;
if (($0 | 0) != ($6 | 0)) {
continue;
}
if (($2 | 0) == ($3 | 0)) {
return -27;
}
HEAP32[$4 >> 2] = $2;
$6 = HEAPU8[$5 + 3 | 0];
$5 = HEAPU8[$5 + 2 | 0];
if ($5) {
$6 = unicode_byte_type($5 << 24 >> 24, $6 << 24 >> 24);
} else {
$6 = HEAPU8[($1 + $6 | 0) + 72 | 0];
}
if ($6 >>> 0 > 30) {
break label$6;
}
$5 = 27;
if (1 << $6 & 1076891136) {
break label$5;
}
}
$5 = 0;
}
return $5;
}
$2 = $5 + 2 | 0;
continue;
}
break;
}
return -2;
}
function Joint__setGlobalGlobalDirection_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$3 = __stack_pointer - 96 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28_29($3 + 80 | 0);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($4, $1, $2);
if (HEAPU8[67584]) {
HEAP32[$3 + 48 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(17442, $3 + 48 | 0);
Quaternion__print_28_IO_FILE__2c_20int_29($4, HEAP32[16886], 6);
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Quaternion__getAngle_28_29_20const($4), HEAPF64[wasm2js_i32$0 + 32 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(7557, $3 + 32 | 0);
eputs_28char_20const__29(17789);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 6);
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Vector__length_28_29_20const($1), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(7544, $3 + 16 | 0);
eputs_28char_20const__29(19756);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 6);
eputc_28char_29(10);
}
Joint__addGlobalRotation_28Quaternion_20const__29($0, $4);
if (HEAPU8[67584]) {
$0 = $0 + 68 | 0;
$1 = Vector__Vector_28Vector_20const__29($3 - -64 | 0, 68032);
Transform__transformDirection_28Vector__29_20const($0, $1);
eprintf_28char_20const__2c_20____29(16456, 0);
Transform__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 6);
eputs_28char_20const__29(15534);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 6);
wasm2js_i32$0 = $3, wasm2js_f64$0 = +Vector__length_28_29_20const($1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(7544, $3);
eputs_28char_20const__29(19756);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 6);
eputc_28char_29(10);
eputc_28char_29(10);
}
__stack_pointer = $3 + 96 | 0;
}
function FingerPlayMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 96 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
HEAP32[$2 + 80 >> 2] = $0;
fiprintf($1, 32287, $2 + 80 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
if (HEAP32[$0 + 528 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23500, $1);
HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 528 >> 2];
fiprintf($1, 30758, $2 - -64 | 0);
}
if (HEAP32[$0 + 532 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23475, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 532 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
}
if (HEAPF32[$0 + 536 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 536 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 29399, $2 + 32 | 0);
}
if (HEAPF32[$0 + 540 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 540 >> 2];
HEAP32[$2 + 16 >> 2] = 3;
HEAPF64[$2 + 24 >> 3] = $3;
__small_fprintf($1, 29351, $2 + 16 | 0);
}
if (HEAPF32[$0 + 544 >> 2] != Math_fround(0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 544 >> 2];
HEAP32[$2 >> 2] = 3;
HEAPF64[$2 + 8 >> 3] = $3;
__small_fprintf($1, 28921, $2);
}
if (HEAPU16[$0 + 548 >> 1]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16617, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 548 >> 1]);
fputc(10, $1);
}
if (!HEAPU16[$0 + 550 >> 1]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(16600, $1);
printDigits_28_IO_FILE__2c_20short_29($1, HEAP16[$0 + 550 >> 1]);
fputc(10, $1);
}
__stack_pointer = $2 + 96 | 0;
}
function HandJointRotations__interpolateHandrots_28HandJointRotations_20const__2c_20HandJointRotations_20const__2c_20float_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
if (!$1) {
die_28char_20const__29(11687);
}
if (!$2) {
die_28char_20const__29(11632);
}
if (!$1) {
die_28char_20const__29(11808);
}
if (!$2) {
die_28char_20const__29(11742);
}
if (($1 | 0) == ($2 | 0)) {
HandJointRotations__setFrom_28HandJointRotations_20const__29($0, $1);
}
label$6: while (1) {
if (($8 | 0) != 5) {
$7 = ($8 << 2) + $3 | 0;
$9 = 0;
while (1) if (($9 | 0) == 3) {
$8 = $8 + 1 | 0;
continue label$6;
} else {
$5 = $9 << 2;
$6 = Math_imul($8, 12);
$4 = HEAP32[$5 + ($6 + $0 | 0) >> 2];
label$11: {
if (!$4) {
break label$11;
}
label$12: {
switch (HEAP32[HEAP32[$4 + 4 >> 2] + 24 >> 2] - 1 | 0) {
case 4:
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4, HEAP32[($1 + $6 | 0) + $5 >> 2], HEAP32[($2 + $6 | 0) + $5 >> 2], HEAPF32[$7 >> 2]);
break label$11;
case 1:
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4, HEAP32[($1 + $6 | 0) + $5 >> 2], HEAP32[($2 + $6 | 0) + $5 >> 2], HEAPF32[$7 >> 2]);
break label$11;
case 2:
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4, HEAP32[($1 + $6 | 0) + $5 >> 2], HEAP32[($2 + $6 | 0) + $5 >> 2], HEAPF32[$7 >> 2]);
break label$11;
case 3:
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4, HEAP32[($1 + $6 | 0) + $5 >> 2], HEAP32[($2 + $6 | 0) + $5 >> 2], HEAPF32[$7 >> 2]);
break label$11;
case 0:
break label$12;
default:
break label$11;
}
}
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4, HEAP32[($1 + $6 | 0) + $5 >> 2], HEAP32[($2 + $6 | 0) + $5 >> 2], HEAPF32[$7 >> 2]);
}
$9 = $9 + 1 | 0;
continue;
}
}
break;
}
}
function Joint__NewJointRotation_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
Joint__InitArticulation_28_29($0);
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$1 = HEAP32[$0 + 24 >> 2];
switch ($1 - 1 | 0) {
case 0:
break label$4;
case 3:
break label$5;
case 2:
break label$6;
case 1:
break label$7;
case 4:
break label$8;
default:
break label$2;
}
}
$1 = operator_20new_28unsigned_20long_29(24);
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iii(148, $1 | 0, $0 | 0) | 0;
break label$3;
}
$1 = operator_20new_28unsigned_20long_29(40);
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iii(149, $1 | 0, $0 | 0) | 0;
break label$3;
}
$1 = operator_20new_28unsigned_20long_29(72);
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iii(150, $1 | 0, $0 | 0) | 0;
break label$3;
}
$1 = operator_20new_28unsigned_20long_29(68);
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iii(151, $1 | 0, $0 | 0) | 0;
break label$3;
}
$1 = operator_20new_28unsigned_20long_29(24);
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iii(152, $1 | 0, $0 | 0) | 0;
}
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(44486, $2);
$0 = 0;
}
__stack_pointer = $2 + 16 | 0;
return $0 | 0;
}
function Gesture___Gesture_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP32[$0 + 36 >> 2];
if ($1) {
operator_20delete_28void__29(SiGMLConstellation___SiGMLConstellation_28_29($1));
HEAP32[$0 + 36 >> 2] = 0;
}
$1 = HEAP32[$0 + 40 >> 2];
if ($1) {
operator_20delete_28void__29(ArmHandConstellation___ArmHandConstellation_28_29($1));
HEAP32[$0 + 40 >> 2] = 0;
}
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
operator_20delete_28void__29(OneHGesture___OneHGesture_28_29($1));
HEAP32[$0 + 20 >> 2] = 0;
}
$1 = HEAP32[$0 + 24 >> 2];
if ($1) {
operator_20delete_28void__29(OneHGesture___OneHGesture_28_29($1));
HEAP32[$0 + 24 >> 2] = 0;
}
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
$1 = HEAP32[$0 + 44 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 44 >> 2] = 0;
}
label$6: {
if (!HEAP32[$0 + 48 >> 2]) {
break label$6;
}
$1 = 0;
while (1) {
$2 = HEAP32[$0 + 48 >> 2];
if (($1 | 0) == 8) {
if (!$2) {
break label$6;
}
dlfree($2);
HEAP32[$0 + 48 >> 2] = 0;
break label$6;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + $2 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 + 48 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
label$10: {
if (!HEAP32[$0 + 4 >> 2]) {
break label$10;
}
$1 = 0;
while (1) {
$2 = HEAP32[$0 + 4 >> 2];
if (HEAP32[HEAP32[HEAP32[$0 >> 2] + 104 >> 2] + 12 >> 2] <= ($1 | 0)) {
if (!$2) {
break label$10;
}
dlfree($2);
HEAP32[$0 + 4 >> 2] = 0;
break label$10;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + $2 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 + 4 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 8 >> 2] = 0;
}
HEAP32[$0 >> 2] = 0;
return $0;
}
function HashAny_char_20const__2c_20AbstractTimedMorph____insertString_28int_2c_20char_20const__2c_20AbstractTimedMorph__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__2c_20AbstractTimedMorph____HashChainItem_28char_20const__2c_20AbstractTimedMorph__29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(523, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__2c_20AbstractTimedMorph____HashChainItem_28char_20const__2c_20AbstractTimedMorph__29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20AbstractTimedMorph____HashChain_28HashChainItem_char_20const__2c_20AbstractTimedMorph___29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function atanf($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
$5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$1 = $5 & 2147483647;
if ($1 >>> 0 >= 1283457024) {
return (__FLOAT_BITS_1($0) & 2147483647) >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), 
wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32());
}
label$2: {
label$3: {
if ($1 >>> 0 <= 1054867455) {
$3 = -1;
if ($1 >>> 0 >= 964689920) {
break label$3;
}
break label$2;
}
$0 = fabsf($0);
if ($1 >>> 0 <= 1066926079) {
if ($1 >>> 0 <= 1060110335) {
$0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1)) / Math_fround($0 + Math_fround(2)));
$3 = 0;
break label$3;
}
$0 = Math_fround(Math_fround($0 + Math_fround(-1)) / Math_fround($0 + Math_fround(1)));
$3 = 1;
break label$3;
}
if ($1 >>> 0 <= 1075576831) {
$0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1)));
$3 = 2;
break label$3;
}
$0 = Math_fround(Math_fround(-1) / $0);
$3 = 3;
}
$4 = Math_fround($0 * $0);
$2 = Math_fround($4 * $4);
$6 = Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
$2 = Math_fround($4 * Math_fround(Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
if ($1 >>> 0 <= 1054867455) {
return Math_fround($0 - Math_fround($0 * Math_fround($6 + $2)));
}
$1 = $3 << 2;
$0 = Math_fround(HEAPF32[$1 + 51888 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $2)) - HEAPF32[$1 + 51904 >> 2]) - $0));
$0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
}
return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_copy_ctor_external_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0, $4 = 0;
label$1: {
label$2: {
if ($2 >>> 0 <= 10) {
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
break label$2;
}
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 < $2 >>> 0) {
break label$1;
}
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
$4 = $3 + 1 | 0;
$3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $4);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $4);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
}
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2 + 1 | 0);
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0);
abort();
}
function RepeatMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 5910, HEAP32[$0 + 528 >> 2], HEAP32[18788]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 5903, HEAP32[$0 + 532 >> 2], HEAP32[18788]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 4844, HEAP32[$0 + 536 >> 2], HEAP32[18784]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8233, HEAP32[$0 + 540 >> 2], HEAP32[18787]);
printDirection3SiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Direction3_29($1, $2, 2821, Direction3__Direction3_28Direction3_20const__29($3, $0 + 544 | 0));
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 4825, HEAP32[$0 + 560 >> 2], HEAP32[18784]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8209, HEAP32[$0 + 564 >> 2], HEAP32[18787]);
__stack_pointer = $3 + 16 | 0;
}
function ProcessOptions_28Getopts__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = __stack_pointer - 48 | 0;
__stack_pointer = $1;
$2 = Getopts__FlagOption_28char_20const__29($0, 4332);
HEAP32[16886] = $2 ? 0 : HEAP32[13692];
HEAP32[$1 + 32 >> 2] = 11224;
HEAP32[$1 + 36 >> 2] = 3;
HEAP32[$1 + 40 >> 2] = 11609;
HEAP32[$1 + 44 >> 2] = 0;
wasm2js_i32$0 = 75632, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayA_28short_2c_20short_2c_20____29(0, 1, $1 + 32 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 75636, wasm2js_i32$1 = copyString_28char_20const__29(Getopts__OptionValue_28char_20const__2c_20char_20const__29($0, 12334, 0)), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = Getopts__FlagOption_28char_20const__29($0, 4339);
$3 = HEAP32[18909];
label$1: {
if (!$3 | !HEAP32[16886]) {
break label$1;
}
$2 = fopen($3, $2 ? 11069 : 1780);
HEAP32[16886] = $2;
if ($2) {
wasm2js_i32$0 = $1, wasm2js_i32$1 = VersionString_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(25899, $1 + 16 | 0);
break label$1;
}
HEAP32[$1 >> 2] = HEAP32[18909];
eprintf_28char_20const__2c_20____29(40598, $1);
}
wasm2js_i32$0 = 75640, wasm2js_i32$1 = Getopts__OptionValue_28char_20const__2c_20char_20const__29($0, 4881, 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
Getopts__FlagOption_28char_20const__29($0, 3934);
wasm2js_i32$0 = 70316, wasm2js_i32$1 = Getopts__FlagOption_28char_20const__29($0, 5072), 
HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
wasm2js_i32$0 = 70600, wasm2js_i32$1 = Getopts__FlagOption_28char_20const__29($0, 6862), 
HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
wasm2js_i32$0 = 67552, wasm2js_i32$1 = Getopts__FlagOption_28char_20const__29($0, 6934), 
HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
__stack_pointer = $1 + 48 | 0;
}
function FingerBending__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!FingerBending__defined_28_29_20const($0)) {
break label$1;
}
wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__setprecision_28int_29(2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20std____2____iom_t5_20const__29($1, $2 + 8 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 4 >> 2]), 32);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 8 >> 2]);
if (HEAPF32[$0 + 12 >> 2] == Math_fround(-100)) {
break label$1;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 32), HEAPF32[$0 + 12 >> 2]);
}
__stack_pointer = $2 + 16 | 0;
}
function HashAny_char_20const__20const_2c_20AvatarType___insertString_28int_2c_20char_20const__2c_20AvatarType_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__20const_2c_20AvatarType___HashChainItem_28char_20const__2c_20AvatarType_29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(282, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__20const_2c_20AvatarType___HashChainItem_28char_20const__2c_20AvatarType_29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__20const_2c_20AvatarType___HashChain_28HashChainItem_char_20const__20const_2c_20AvatarType__29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function OneHGesture__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0;
label$1: {
if (!$1) {
break label$1;
}
printIndent_28_IO_FILE__29($1);
$2 = $0 + 4 | 0;
if (!SiteIDPair__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23132, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteIDPair__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 16 | 0;
if (!SiteID__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23156, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiteID__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 20 | 0;
if (!Direction3__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22462, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction3__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$2 = $0 + 32 | 0;
if (!Direction2__isUndef_28_29_20const($2)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22442, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Direction2__print_28_IO_FILE__29_20const($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21983, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
ElbowDisplacement__print_28_IO_FILE__29_20const($0 + 60 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
if (!HEAP32[$0 + 56 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23560, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Handshape__print_28_IO_FILE__29_20const(HEAP32[$0 + 56 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
}
function ExtendTrailingMorphs_28AbstractTimedMorph__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$1 = HEAP32[17655];
label$1: {
if (!$1) {
if (!HEAPU8[67595]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(31461, 0);
break label$1;
}
$5 = HEAP16[$1 + 12 >> 1];
label$3: {
if (!HEAPU8[67595]) {
break label$3;
}
HEAP32[$3 + 16 >> 2] = $5;
eprintf_28char_20const__2c_20____29(32500, $3 + 16 | 0);
$1 = 0;
while (1) {
$2 = $1 << 16 >> 16;
if (($5 | 0) <= ($2 | 0)) {
break label$3;
}
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[17655], $2);
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, HEAP32[16886]);
eputc_28char_29(10);
}
$1 = $1 + 1 | 0;
continue;
}
}
$1 = 0;
while (1) {
$2 = $1 << 16 >> 16;
if (($5 | 0) <= ($2 | 0)) {
if (HEAPU8[67595]) {
HEAP32[$3 >> 2] = $6 << 16 >> 16;
eprintf_28char_20const__2c_20____29(35052, $3);
}
if ($6 & 65535) {
break label$1;
}
$1 = HEAP32[17655];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(DynamicArrayP_AbstractTimedMorph____DynamicArrayP_28_29($1));
HEAP32[17655] = 0;
} else {
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[17655], $2);
label$10: {
if (!$4) {
break label$10;
}
if (ExtendTrailingMorph_28AtomicTimedMorph__2c_20AbstractTimedMorph__29($4, $0)) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4);
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29(HEAP32[17655], $2, 0);
break label$10;
}
$6 = $6 + 1 | 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $3 + 32 | 0;
}
function VectorController2__VectorController2_28_29($0) {
var $1 = 0;
$0 = GeneralController_Vector_2c_20Vector___GeneralController_28_29($0);
HEAP32[$0 >> 2] = 59320;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 16 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 28 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 40 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 52 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 - -64 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 76 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 88 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 100 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 112 >> 2] = 3;
ControllerParams__ControllerParams_28float_2c_20float_2c_20float_2c_20float_29($0 + 116 | 0, Math_fround(10), Math_fround(.05000000074505806), Math_fround(7), Math_fround(0));
HEAP32[$0 + 140 >> 2] = 1065353216;
HEAP32[$0 + 144 >> 2] = -1082130432;
HEAP32[$0 + 132 >> 2] = 1082130432;
HEAP32[$0 + 136 >> 2] = 1097859072;
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
GeneralController_Vector_2c_20Vector____GeneralController_28_29($0);
__resumeException($1 | 0);
abort();
}
function SiGML__handOrientation_28Quaternion__2c_20bool_2c_20Direction3_2c_20Direction2_29($0, $1, $2, $3) {
var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
if (Direction3__isUndef_28_29_20const($2)) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(43535, 0);
break label$1;
}
if (Direction2__isUndef_28_29_20const($3)) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(43501, 0);
break label$1;
}
$4 = HEAPF32[$2 >> 2];
$6 = Math_fround($4 * $4);
$4 = HEAPF32[$2 + 8 >> 2];
$4 = sqrt_28float_29(Math_fround($6 + Math_fround($4 * $4)));
$4 = atan2_28float_2c_20float_29(HEAPF32[$2 + 4 >> 2], $4);
$8 = 1;
$7 = Quaternion__Quaternion_28_29($5 + 16 | 0);
Quaternion__setFromVecAngle_28float_2c_20float_2c_20float_2c_20float_2c_20bool_29($7, Math_fround(-1), Math_fround(0), Math_fround(0), $4, 1);
Quaternion__setFromVecAngle_28float_2c_20float_2c_20float_2c_20float_2c_20bool_29($0, Math_fround(0), Math_fround(1), Math_fround(0), atan2_28float_2c_20float_29(HEAPF32[$2 >> 2], HEAPF32[$2 + 8 >> 2]), 1);
$4 = HEAPF32[$3 >> 2];
$4 = atan2_28float_2c_20float_29(HEAPF32[$3 + 4 >> 2], HEAPF32[$2 + 8 >> 2] >= Math_fround(0) ? $4 : Math_fround(-$4));
$6 = HEAPF32[18867];
$2 = Quaternion__Quaternion_28_29($5);
Quaternion__setFromVecAngle_28float_2c_20float_2c_20float_2c_20float_2c_20bool_29($2, Math_fround(0), Math_fround(0), Math_fround(1), Math_fround($4 + ($1 ? Math_fround(-0) : $6)), 1);
Quaternion__setCompose_28Quaternion_20const__29($0, $7);
Quaternion__setCompose_28Quaternion_20const__29($0, $2);
if (Quaternion__w_28_29_20const($0) < Math_fround(0)) {
Quaternion__setFlip_28_29($0);
}
Quaternion__setCompose_28Quaternion_20const__29($0, 70724);
}
__stack_pointer = $5 + 32 | 0;
return $8;
}
function HashAny_char_20const__2c_20char_20const____insertString_28int_2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__2c_20char_20const____HashChainItem_28char_20const__2c_20char_20const__29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(333, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__2c_20char_20const____HashChainItem_28char_20const__2c_20char_20const__29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20char_20const____HashChain_28HashChainItem_char_20const__2c_20char_20const___29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function CreateMovementTables_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 128 | 0;
__stack_pointer = $0;
$3 = Vector__Vector_28_29($0 + 112 | 0);
$1 = HEAP32[$3 >> 2];
$2 = HEAP32[$3 + 4 >> 2];
HEAP32[17632] = $1;
HEAP32[17633] = $2;
HEAP32[17634] = HEAP32[$3 + 8 >> 2];
$1 = HEAP32[17015];
$2 = HEAP32[17014];
HEAP32[17635] = $2;
HEAP32[17636] = $1;
HEAP32[17637] = HEAP32[17016];
$2 = HEAP32[17009];
$1 = HEAP32[17008];
HEAP32[17638] = $1;
HEAP32[17639] = $2;
HEAP32[17640] = HEAP32[17010];
$1 = HEAP32[17012];
$2 = HEAP32[17011];
HEAP32[17641] = $2;
HEAP32[17642] = $1;
HEAP32[17643] = HEAP32[17013];
$2 = HEAP32[17009];
$1 = HEAP32[17008];
HEAP32[17644] = $1;
HEAP32[17645] = $2;
HEAP32[17646] = HEAP32[17010];
HEAP32[17649] = HEAP32[17010];
$1 = HEAP32[17009];
$2 = HEAP32[17008];
HEAP32[17647] = $2;
HEAP32[17648] = $1;
HEAP32[$0 + 96 >> 2] = 12;
HEAP32[$0 + 100 >> 2] = 0;
HEAP32[$0 + 92 >> 2] = 2516;
HEAP32[$0 + 88 >> 2] = 11;
HEAP32[$0 + 84 >> 2] = 2484;
HEAP32[$0 + 80 >> 2] = 10;
HEAP32[$0 + 76 >> 2] = 2473;
HEAP32[$0 + 72 >> 2] = 9;
HEAP32[$0 + 68 >> 2] = 2529;
HEAP32[$0 - -64 >> 2] = 8;
HEAP32[$0 + 60 >> 2] = 2417;
HEAP32[$0 + 56 >> 2] = 7;
HEAP32[$0 + 52 >> 2] = 2403;
HEAP32[$0 + 48 >> 2] = 6;
HEAP32[$0 + 44 >> 2] = 2461;
HEAP32[$0 + 40 >> 2] = 5;
HEAP32[$0 + 36 >> 2] = 2449;
HEAP32[$0 + 32 >> 2] = 4;
HEAP32[$0 + 28 >> 2] = 2370;
HEAP32[$0 + 24 >> 2] = 3;
HEAP32[$0 + 20 >> 2] = 2389;
HEAP32[$0 + 16 >> 2] = 2;
HEAP32[$0 + 12 >> 2] = 2432;
HEAP32[$0 + 8 >> 2] = 1;
HEAP32[$0 + 4 >> 2] = 2547;
HEAP32[$0 >> 2] = 0;
wasm2js_i32$0 = 70604, wasm2js_i32$1 = InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29(2502, $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__stack_pointer = $0 + 128 | 0;
}
function Quaternion__setSlerp1_28Quaternion_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($0, $1, $2, $3, $4) {
var $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0);
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
$5 = Quaternion__quatCosAngle_28Quaternion_20const__29_20const($1, $2);
$3 = Quaternion__Quaternion_28Quaternion_20const__29($6 + 32 | 0, $3);
Quaternion__setInverse_28_29($3);
$7 = Quaternion__Quaternion_28Quaternion_20const__29($6 + 16 | 0, $1);
Quaternion__setCompose_28Quaternion_20const__29($7, $3);
$8 = Quaternion__Quaternion_28Quaternion_20const__29($6, $2);
Quaternion__setCompose_28Quaternion_20const__29($8, $3);
$3 = Quaternion__w_28_29_20const($7) >= Math_fround(0) ^ Quaternion__w_28_29_20const($8) >= Math_fround(0);
$7 = !$3;
$5 = $3 ? Math_fround(-$5) : $5;
label$1: {
if (Math_fround(Math_fround(1) - $5) < Math_fround(9999999747378752e-20)) {
$5 = Math_fround(Math_fround(1) - $4);
break label$1;
}
$5 = acos_28float_29($5);
$9 = sin_28float_29($5);
$10 = sin_28float_29(Math_fround($5 * $4));
$5 = Math_fround(sin((1 - +$4) * +$5) / +$9);
$4 = Math_fround($10 / $9);
}
$4 = $7 ? $4 : Math_fround(-$4);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround($5 * Quaternion__x_28_29_20const($1)) + Math_fround($4 * Quaternion__x_28_29_20const($2))), Math_fround(Math_fround($5 * Quaternion__y_28_29_20const($1)) + Math_fround($4 * Quaternion__y_28_29_20const($2))), Math_fround(Math_fround($5 * Quaternion__z_28_29_20const($1)) + Math_fround($4 * Quaternion__z_28_29_20const($2))), Math_fround(Math_fround($5 * Quaternion__w_28_29_20const($1)) + Math_fround($4 * Quaternion__w_28_29_20const($2))));
Quaternion__checkValidQuat_28_29_20const($0);
__stack_pointer = $6 + 48 | 0;
}
function HanimAnimationRecord__animateARP_28DynamicArrayP_Gesture___2c_20void_20_28__29_28void__2c_20char_20const__2c_20int_2c_20int_29_2c_20bool_20_28__29_28void__2c_20SSFrame__29_2c_20void_20_28__29_28void__2c_20PostMortem__29_2c_20void__29($0, $1, $2, $3, $4, $5) {
var $6 = Math_fround(0);
HEAP32[$0 + 76 >> 2] = $5;
HEAP32[$0 + 72 >> 2] = $4;
HEAP32[$0 + 68 >> 2] = $3;
HEAP32[$0 + 64 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
label$1: {
if (!$1 | !HEAP32[$1 + 12 >> 2]) {
break label$1;
}
$6 = totalTime_28DynamicArrayP_Gesture__20const__29($1);
HEAPF32[$0 + 112 >> 2] = $6;
if ($6 == Math_fround(0)) {
break label$1;
}
$6 = Math_fround($6 / HEAPF32[$0 + 8 >> 2]);
label$2: {
if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
$1 = ~~$6;
break label$2;
}
$1 = -2147483648;
}
HEAP32[$0 + 116 >> 2] = $1 + 1;
if (($1 | 0) <= 0) {
break label$1;
}
MakeARPFrameBuffer_28HanimAvatar__2c_20bool_29(HEAP32[$0 + 4 >> 2], HEAPU8[$0 + 24 | 0]);
HanimAnimationRecord__printARPHeader_28_29($0);
$1 = 0;
HEAP32[$0 + 52 >> 2] = 0;
$3 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
$4 = $3 - 1 | 0;
while (1) {
if (($1 | 0) < ($3 | 0)) {
$1 = DynamicArrayP_Gesture___getElement_28int_29_20const(HEAP32[$0 >> 2], $1);
$2 = HEAP32[$0 + 64 >> 2];
if ($2) {
FUNCTION_TABLE[$2 | 0](HEAP32[$0 + 76 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$0 + 52 >> 2], HEAP32[$0 + 108 >> 2]);
}
HanimAnimationRecord__generate1ARPAnimation_28Gesture__2c_20bool_29($0, $1, HEAP32[$0 + 52 >> 2] == ($4 | 0));
$1 = HEAP32[$0 + 52 >> 2] + 1 | 0;
HEAP32[$0 + 52 >> 2] = $1;
continue;
}
break;
}
HanimAnimationRecord__printARPFooter_28_29($0);
$0 = HEAP32[17070];
if (!$0) {
break label$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
HEAP32[17070] = 0;
}
}
function parsePseudoAttribute($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
HEAP32[$3 >> 2] = 0;
break label$2;
}
if (!isSpace(toAscii($0, $1, $2))) {
break label$1;
}
while (1) {
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
if (isSpace(toAscii($0, $1, $2))) {
continue;
}
break;
}
if (($1 | 0) == ($2 | 0)) {
HEAP32[$3 >> 2] = 0;
break label$2;
}
HEAP32[$3 >> 2] = $1;
label$6: {
while (1) {
$7 = toAscii($0, $1, $2);
if (($7 | 0) != 61) {
if (($7 | 0) == -1) {
break label$1;
}
if (isSpace($7)) {
HEAP32[$4 >> 2] = $1;
while (1) {
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
$7 = toAscii($0, $1, $2);
if (isSpace($7)) {
continue;
}
break;
}
if (($7 | 0) != 61) {
break label$1;
}
break label$6;
} else {
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
continue;
}
}
break;
}
HEAP32[$4 >> 2] = $1;
}
if (HEAP32[$3 >> 2] == ($1 | 0)) {
break label$1;
}
while (1) {
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
$3 = toAscii($0, $1, $2);
if (isSpace($3)) {
continue;
}
break;
}
if (($3 | 0) != 34 & ($3 | 0) != 39) {
break label$1;
}
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
HEAP32[$5 >> 2] = $1;
while (1) {
$7 = toAscii($0, $1, $2);
if (($7 | 0) != ($3 | 0)) {
if (($7 & -33) - 65 >>> 0 < 26 | $7 - 58 >>> 0 > 4294967285 | (($7 | 0) == 95 | $7 - 45 >>> 0 < 2)) {
$1 = HEAP32[$0 + 64 >> 2] + $1 | 0;
continue;
} else {
HEAP32[$6 >> 2] = $1;
return 0;
}
}
break;
}
HEAP32[$6 >> 2] = HEAP32[$0 + 64 >> 2] + $1;
}
return 1;
}
HEAP32[$6 >> 2] = $1;
return 0;
}
function Getopts__argsFromFile_28char_20const__2c_20DynamicArrayP_char___29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
HEAP32[$3 + 64 >> 2] = $1;
fiprintf(HEAP32[13692], 25807, $3 - -64 | 0);
if (HEAPU8[67575]) {
HEAP32[$3 + 52 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$3 + 48 >> 2] = $1;
eprintf_28char_20const__2c_20____29(25408, $3 + 48 | 0);
}
$6 = 1;
$5 = Getopts__argsFromFile_28char_20const__2c_20bool_29($0, $1, 1);
$4 = HEAPU8[67575];
label$2: {
label$3: {
if ($5) {
if (!($4 & 255)) {
break label$2;
}
$4 = 40147;
break label$3;
}
if ($4 & 255) {
eprintf_28char_20const__2c_20____29(43718, 0);
}
if ($2) {
$5 = 0;
while (1) {
$4 = HEAP32[$2 + 12 >> 2];
$6 = ($5 | 0) < ($4 | 0);
if (($4 | 0) <= ($5 | 0)) {
break label$2;
}
if (HEAPU8[67575]) {
HEAP32[$3 + 32 >> 2] = $5;
eprintf_28char_20const__2c_20____29(44283, $3 + 32 | 0);
}
$4 = makeFullFilename_28char_20const__2c_20char_20const__29(DynamicArrayP_char___getElement_28int_29_20const($2, $5), $1);
if (HEAPU8[67575]) {
HEAP32[$3 + 16 >> 2] = $4;
eprintf_28char_20const__2c_20____29(25791, $3 + 16 | 0);
}
$7 = Getopts__argsFromFile_28char_20const__2c_20bool_29($0, $4, 1);
if (HEAPU8[67575]) {
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $7 ? 48531 : 15563;
eprintf_28char_20const__2c_20____29(40707, $3);
}
dlfree($4);
$5 = $5 + 1 | 0;
if (!$7) {
continue;
}
break;
}
break label$2;
}
if (HEAPU8[67575]) {
$4 = 38914;
break label$3;
}
$6 = 0;
break label$2;
}
eprintf_28char_20const__2c_20____29($4, 0);
$6 = $5;
}
__stack_pointer = $3 + 80 | 0;
return $6;
}
function MakeARPFrameBuffer_28HanimAvatar__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
label$1: {
if (HEAP32[17070]) {
break label$1;
}
$3 = operator_20new_28unsigned_20long_29(44);
HEAP32[19359] = 0;
$5 = invoke_ii(136, $3 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$2: {
if (($4 | 0) != 1) {
HEAP32[17070] = $5;
if ($1) {
break label$2;
}
$4 = 0;
label$4: while (1) {
if (($4 | 0) == 2) {
break label$1;
}
$5 = (HEAP32[$0 + 72 >> 2] + ($4 << 4) | 0) + 20 | 0;
$3 = 0;
$2 = 0;
while (1) {
if (($2 | 0) != 4) {
$1 = HEAP32[($2 << 2) + $5 >> 2];
addARPBone_28SSFrame__2c_20Joint_20const__29(HEAP32[17070], $1);
$2 = $2 + 1 | 0;
continue;
}
break;
}
while (1) {
$2 = 0;
if (($3 | 0) == 5) {
$4 = $4 + 1 | 0;
continue label$4;
} else {
while (1) {
if (($2 | 0) != 3) {
$1 = HEAP32[(((HEAP32[$0 + 72 >> 2] + Math_imul($4, 60) | 0) + Math_imul($3, 12) | 0) + ($2 << 2) | 0) + 52 >> 2];
addARPBone_28SSFrame__2c_20Joint_20const__29(HEAP32[17070], $1);
$2 = $2 + 1 | 0;
continue;
}
break;
}
$3 = $3 + 1 | 0;
continue;
}
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($2 | 0);
abort();
}
$5 = HEAP16[HEAP32[$0 + 104 >> 2] + 12 >> 1];
$2 = 0;
while (1) {
$1 = $2 << 16 >> 16;
if (($5 | 0) <= ($1 | 0)) {
break label$1;
}
$3 = HEAP32[$0 + 104 >> 2];
$1 = DynamicArrayP_Joint___getElement_28int_29_20const($3, $1);
addARPBone_28SSFrame__2c_20Joint_20const__29(HEAP32[17070], $1);
$2 = $2 + 1 | 0;
continue;
}
}
}
function AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 80 | 0;
__stack_pointer = $4;
if ($2) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($4 + 72 | 0, $1, 0, 0, 0, 1, 0);
$5 = HEAP32[17502];
$7 = concatStrings($0, 12511);
$6 = HEAP32[$4 + 72 >> 2];
HEAP32[$4 + 64 >> 2] = $6;
HEAP32[$4 + 36 >> 2] = $6;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($5, $7, $4 + 36 | 0);
}
label$2: {
if (!$3) {
break label$2;
}
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($4 + 72 | 0, $1, 2, 0, 0, 1, 0);
$5 = HEAP32[17502];
$6 = concatStrings($0, 12085);
$3 = HEAP32[$4 + 72 >> 2];
HEAP32[$4 + 56 >> 2] = $3;
HEAP32[$4 + 32 >> 2] = $3;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($5, $6, $4 + 32 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($4 + 48 | 0, $1, 1, 0, 0, 1, 0);
HEAP8[$4 + 74 | 0] = HEAPU8[$4 + 50 | 0];
HEAP16[$4 + 72 >> 1] = HEAPU16[$4 + 48 >> 1];
$7 = HEAP32[17502];
$3 = concatStrings($0, 11490);
$5 = HEAP32[$4 + 72 >> 2];
HEAP32[$4 + 40 >> 2] = $5;
HEAP32[$4 + 28 >> 2] = $5;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($7, $3, $4 + 28 | 0);
if (!HEAPU8[67591] | ($1 | 0) != 44) {
break label$2;
}
HEAP32[$4 + 12 >> 2] = 1;
HEAP32[$4 + 8 >> 2] = $2;
HEAP32[$4 + 4 >> 2] = 44;
HEAP32[$4 >> 2] = $0;
eprintf_28char_20const__2c_20____29(48199, $4);
SiteID__print_28_IO_FILE__29_20const($4 + 72 | 0, HEAP32[16886]);
eputc_28char_29(10);
}
__stack_pointer = $4 + 80 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____append_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
if (HEAP32[std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____construct_at_end_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1, $2);
break label$2;
}
$3 = std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0);
$3 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SSPRSet____29($4 + 8 | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) + $1 | 0), std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0), $3);
HEAP32[19359] = 0;
invoke_viii(4, $3 | 0, $1 | 0, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vii(5, $0 | 0, $3 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_________split_buffer_28_29($3);
}
__stack_pointer = $4 + 32 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_________split_buffer_28_29($3);
__resumeException($0 | 0);
abort();
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____append_28unsigned_20long_2c_20SSMorph__20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
if (HEAP32[std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____end_cap_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____construct_at_end_28unsigned_20long_2c_20SSMorph__20const__29($0, $1, $2);
break label$2;
}
$3 = std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0);
$3 = std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SSMorph____29($4 + 8 | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0) + $1 | 0), std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0), $3);
HEAP32[19359] = 0;
invoke_viii(6, $3 | 0, $1 | 0, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vii(7, $0 | 0, $3 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_________split_buffer_28_29($3);
}
__stack_pointer = $4 + 32 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_________split_buffer_28_29($3);
__resumeException($0 | 0);
abort();
}
function NonmanualMovement___NonmanualMovement_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP32[$0 >> 2] = 61760;
label$1: {
$1 = HEAP32[$0 + 4 >> 2];
label$2: {
if (!$1) {
break label$2;
}
$1 = HEAP32[$1 + 12 >> 2];
$6 = ($1 | 0) > 0 ? $1 : 0;
label$3: while (1) {
label$4: {
$2 = HEAP32[$0 + 4 >> 2];
if (($4 | 0) == ($6 | 0)) {
break label$4;
}
$1 = 0;
$5 = DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($2, $4);
$2 = HEAP32[$5 + 12 >> 2];
$7 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($1 | 0) == ($7 | 0)) {
$4 = $4 + 1 | 0;
continue label$3;
}
HEAP32[19359] = 0;
invoke_viii(453, $3 | 0, $5 | 0, $1 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
$2 = HEAP32[$3 + 8 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$3 + 8 >> 2] = 0;
}
$1 = $1 + 1 | 0;
AtomicNonmanual___AtomicNonmanual_28_29($3);
continue;
}
}
break;
}
if (!$2) {
break label$2;
}
DynamicArray1_DynamicArray1_AtomicNonmanual_____deleteAll_28_29($2);
$1 = HEAP32[$0 + 4 >> 2];
if (!$1) {
break label$2;
}
operator_20delete_28void__29(DynamicArray1_DynamicArray1_AtomicNonmanual______DynamicArray1_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 20 >> 2] = 0;
}
__stack_pointer = $3 + 32 | 0;
return $0 | 0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function HanimAnimationRecord___HanimAnimationRecord_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = HEAP32[17070];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[17070] = 0;
}
$1 = HEAP32[$0 + 100 >> 2];
if ($1) {
operator_20delete_28void__29(TwoArmAnimator___TwoArmAnimator_28_29($1));
HEAP32[$0 + 100 >> 2] = 0;
}
$1 = HEAP32[$0 + 104 >> 2];
if ($1) {
operator_20delete_28void__29(FaceAnimator___FaceAnimator_28_29($1));
HEAP32[$0 + 104 >> 2] = 0;
}
$1 = 0;
while (1) {
if (($1 | 0) == 2) {
$1 = HEAP32[$0 + 304 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 304 >> 2] = 0;
}
$1 = HEAP32[$0 + 340 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 340 >> 2] = 0;
}
DynamicArray1_JointRotation____deleteAll_28_29($0 + 324 | 0);
DynamicArray1_JointRotation____deleteAll_28_29($0 + 308 | 0);
$1 = HEAP32[$0 + 344 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 344 >> 2] = 0;
}
$1 = HEAP32[$0 + 348 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 348 >> 2] = 0;
}
$1 = HEAP32[$0 + 88 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 88 >> 2] = 0;
}
AvatarJointRotationIndex___AvatarJointRotationIndex_28_29($0 + 120 | 0);
} else {
$2 = ($1 << 2) + $0 | 0;
$3 = HEAP32[$2 + 288 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 4 >> 2]]($3);
HEAP32[$2 + 288 >> 2] = 0;
}
$3 = HEAP32[$2 + 272 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 4 >> 2]]($3);
HEAP32[$2 + 272 >> 2] = 0;
}
$4 = $2;
$3 = $2 + 296 | 0;
$2 = HEAP32[$3 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$4 + 296 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
return $0;
}
function XMLCell__print_28_IO_FILE__2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if ($2) {
$5 = HEAP32[$2 + 12 >> 2];
} else {
$5 = 0;
}
$2 = 1;
$4 = HEAP32[$0 + 4 >> 2];
if ($4) {
$2 = !HEAP32[$4 + 24 >> 2];
}
$4 = HEAP32[$0 + 12 >> 2];
$4 = ($4 | 0) != 0 | ($5 | 0) > 0;
if ($4 | !$2) {
$6 = HEAP32[$0 >> 2];
label$6: {
if ($2) {
HEAP32[$3 + 16 >> 2] = $6;
fiprintf($1, 12560, $3 + 16 | 0);
printIndent_28_IO_FILE__29($1);
break label$6;
}
HEAP32[$3 + 32 >> 2] = $6;
fiprintf($1, 4302, $3 + 32 | 0);
HEAP16[33801] = HEAPU16[33801] + 1;
HashAny_char_20const__2c_20char_20const____print_28_IO_FILE__29_20const(HEAP32[$0 + 4 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__29($1);
if ($4) {
fputc(62, $1);
break label$6;
}
fputs(12574, $1);
}
if (($5 | 0) > 0) {
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = 0;
while (1) {
if (($2 | 0) == ($5 | 0)) {
HEAP16[33801] = HEAPU16[33801] - 1;
$2 = 67602;
} else {
fputc(10, $1);
printIndent_28_IO_FILE__29($1);
XMLCell__print_28_IO_FILE__29(DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$0 + 8 >> 2], $2), $1);
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
if (HEAP32[$0 + 12 >> 2]) {
fputc(10, $1);
fputs(HEAP32[$0 + 12 >> 2], $1);
}
if (!$4) {
break label$1;
}
fputc(10, $1);
printIndent_28_IO_FILE__29($1);
$2 = 12565;
} else {
$2 = 12571;
}
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
fiprintf($1, $2, $3);
}
__stack_pointer = $3 + 48 | 0;
}
function HashAny_char_20const__2c_20Gesture____insertString_28int_2c_20char_20const__2c_20Gesture__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__2c_20Gesture____HashChainItem_28char_20const__2c_20Gesture__29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(406, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__2c_20Gesture____HashChainItem_28char_20const__2c_20Gesture__29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20Gesture____HashChain_28HashChainItem_char_20const__2c_20Gesture___29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____swap_out_circular_buffer_28std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_delete_28_29_20const($0);
$2 = $1 + 4 | 0;
void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SSPRSet___2c_20SSPRSet__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20SSPRSet___2c_20SSPRSet____29(std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
std____2__enable_if_is_move_constructible_SSPRSet_____value_20___20is_move_assignable_SSPRSet_____value_2c_20void___type_20std____2__swap_SSPRSet____28SSPRSet____2c_20SSPRSet____29($0, $2);
std____2__enable_if_is_move_constructible_SSPRSet_____value_20___20is_move_assignable_SSPRSet_____value_2c_20void___type_20std____2__swap_SSPRSet____28SSPRSet____2c_20SSPRSet____29($0 + 4 | 0, $1 + 8 | 0);
std____2__enable_if_is_move_constructible_SSPRSet_____value_20___20is_move_assignable_SSPRSet_____value_2c_20void___type_20std____2__swap_SSPRSet____28SSPRSet____2c_20SSPRSet____29(std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29($0), std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________end_cap_28_29($1));
HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0));
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____invalidate_all_iterators_28_29($0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____swap_out_circular_buffer_28std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_delete_28_29_20const($0);
$2 = $1 + 4 | 0;
void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SSMorph___2c_20SSMorph__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___2c_20SSMorph___2c_20SSMorph____29(std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
std____2__enable_if_is_move_constructible_SSMorph_____value_20___20is_move_assignable_SSMorph_____value_2c_20void___type_20std____2__swap_SSMorph____28SSMorph____2c_20SSMorph____29($0, $2);
std____2__enable_if_is_move_constructible_SSMorph_____value_20___20is_move_assignable_SSMorph_____value_2c_20void___type_20std____2__swap_SSMorph____28SSMorph____2c_20SSMorph____29($0 + 4 | 0, $1 + 8 | 0);
std____2__enable_if_is_move_constructible_SSMorph_____value_20___20is_move_assignable_SSMorph_____value_2c_20void___type_20std____2__swap_SSMorph____28SSMorph____2c_20SSMorph____29(std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____end_cap_28_29($0), std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________end_cap_28_29($1));
HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0));
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_all_iterators_28_29($0);
}
function DynamicArray1_AtomicNonmanual___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
label$1: {
if (!$1) {
DynamicArray1_AtomicNonmanual___clear_28_29($0);
break label$1;
}
$4 = HEAP32[$0 + 8 >> 2];
if (($4 | 0) == ($1 | 0)) {
break label$1;
}
$9 = dlmalloc(Math_imul($1, 28));
if (!$9) {
if (($1 | 0) <= ($4 | 0)) {
break label$1;
}
HEAP32[$6 + 4 >> 2] = $1;
HEAP32[$6 >> 2] = $4;
eprintf_28char_20const__2c_20____29(39318, $6);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$4 = 0;
$5 = HEAP32[$0 + 12 >> 2];
if (($5 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$5 = $1;
}
$12 = ($5 | 0) > 0 ? $5 : 0;
$10 = HEAP32[$0 >> 2];
while (1) {
if (($4 | 0) == ($12 | 0)) {
if ($10) {
dlfree($10);
$5 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $9;
DynamicArray1_AtomicNonmanual___clearData_28int_2c_20int_29($0, $5, $1 - $5 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$3 = Math_imul($4, 28);
$7 = $9 + $3 | 0;
$3 = $3 + $10 | 0;
$2 = HEAP32[$3 >> 2];
$8 = HEAP32[$3 + 4 >> 2];
$11 = $2;
$2 = $7;
HEAP32[$2 >> 2] = $11;
HEAP32[$2 + 4 >> 2] = $8;
HEAP32[$2 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
$2 = HEAP32[$3 + 20 >> 2];
$8 = HEAP32[$3 + 16 >> 2];
HEAP32[$7 + 16 >> 2] = $8;
HEAP32[$7 + 20 >> 2] = $2;
$8 = HEAP32[$3 + 12 >> 2];
$2 = HEAP32[$3 + 8 >> 2];
$11 = $2;
$2 = $7;
HEAP32[$2 + 8 >> 2] = $11;
HEAP32[$2 + 12 >> 2] = $8;
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $6 + 16 | 0;
}
function CalcThumbBending_28ThumbBending__2c_20HandshapeType_2c_20BendSource_2c_20FingerbendType_2c_20FingerBending_2c_20FingerbendType_2c_20ThumbBending_2c_20ThumbbendType_29($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
label$1: {
if (ThumbBending__defined_28_29_20const($0)) {
break label$1;
}
$7 = $7 ? $7 : 1;
label$2: {
label$3: {
switch ($2 - 1 | 0) {
case 3:
if (ThumbBending__defined_28_29_20const($6)) {
$2 = HEAP32[$6 >> 2];
$1 = HEAP32[$6 + 4 >> 2];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
$2 = HEAP32[$6 + 12 >> 2];
$1 = HEAP32[$6 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = $2;
return;
}
HandshapeThumbbend_28ThumbBending__2c_20HandshapeType_2c_20ThumbbendType_2c_20FingerbendType_29($0, $1, $7, $5);
return;
case 0:
case 2:
break label$2;
case 1:
break label$3;
default:
break label$1;
}
}
if (FingerBending__defined_28_29_20const($4)) {
ThumbBending__ModifyByFingerBending_28FingerBending_20const__29($0, $4);
return;
}
if ($3) {
break label$2;
}
$7 = (Math_imul($1 << 16 >> 16, 160) + 70752 | 0) + Math_imul($7, 20) | 0;
HEAP32[$0 + 16 >> 2] = HEAP32[$7 + 48 >> 2];
$6 = $7;
$2 = HEAP32[$6 + 40 >> 2];
$1 = HEAP32[$6 + 44 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = $1;
$2 = HEAP32[$6 + 36 >> 2];
$1 = HEAP32[$6 + 32 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return;
}
HandshapeThumbbend_28ThumbBending__2c_20HandshapeType_2c_20ThumbbendType_2c_20FingerbendType_29($0, $1, $7, $3);
}
}
function big2_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
label$2: {
$3 = HEAPU8[$1 + 4 | 0];
if (!($3 | HEAPU8[$1 + 5 | 0] != 120)) {
$1 = $1 + 6 | 0;
while (1) {
label$5: {
if (HEAPU8[$1 | 0]) {
break label$5;
}
$0 = HEAP8[$1 + 1 | 0];
if (($0 | 0) == 59) {
break label$2;
}
label$6: {
label$7: {
label$8: {
label$9: {
$3 = $0 - 48 | 0;
switch ($3 | 0) {
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
break label$7;
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
break label$8;
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
break label$9;
default:
break label$5;
}
}
$2 = $2 << 4 | $3;
break label$6;
}
$2 = (($2 << 4) + $0 | 0) - 55 | 0;
break label$6;
}
$2 = (($2 << 4) + $0 | 0) - 87 | 0;
}
if (($2 | 0) <= 1114111) {
break label$5;
}
return -1;
}
$1 = $1 + 2 | 0;
continue;
}
}
$1 = $1 + 4 | 0;
while (1) {
$4 = -1;
$0 = -1;
if (!($3 & 255)) {
$0 = HEAP8[$1 + 1 | 0];
if (($0 | 0) == 59) {
break label$2;
}
}
$2 = (Math_imul($2, 10) + $0 | 0) - 48 | 0;
if (($2 | 0) > 1114111) {
break label$1;
}
$3 = HEAPU8[$1 + 2 | 0];
$1 = $1 + 2 | 0;
continue;
}
}
$4 = checkCharRefNumber($2);
}
return $4 | 0;
}
function OneHGesture__transferHandsiteNormalToGlobalFrame_28Vector__2c_20SiteID_29($0, $1, $2) {
var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
HEAP32[$3 + 60 >> 2] = 0;
HEAP32[$3 + 56 >> 2] = 0;
$4 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2];
$2 = HEAP32[$2 >> 2];
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 + 48 >> 2] = $2;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($4, 0, $3 + 4 | 0, 0, $3 + 56 | 0, $3 + 60 | 0);
$2 = HandJointRotations__transferSiteNormalToWrist_28Vector__2c_20Site__29(HEAP32[HEAP32[$0 + 56 >> 2] + 236 >> 2], $1, HEAP32[$3 + 60 >> 2]);
label$1: {
if (!$2) {
break label$1;
}
if (HEAPU8[67576]) {
wasm2js_i32$0 = $3, wasm2js_i32$1 = OneHGesture__isRightHand_28_29_20const($0) ? 82 : 76, 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(19692, $3);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
}
$4 = Quaternion__Quaternion_28_29($3 + 32 | 0);
SiGML__handOrientation_28Quaternion__2c_20bool_2c_20Direction3_2c_20Direction2_29($4, OneHGesture__isRightHand_28_29_20const($0), Direction3__Direction3_28Direction3_20const__29($3 + 16 | 0, $0 + 20 | 0), Direction2__Direction2_28Direction2_20const__29($3 + 8 | 0, $0 + 32 | 0));
Quaternion__rotateVector_28Vector__29_20const($4, $1);
if (!HEAPU8[67576]) {
break label$1;
}
eprintf_28char_20const__2c_20____29(15661, 0);
Quaternion__print_28_IO_FILE__2c_20int_29($4, HEAP32[16886], 3);
eputc_28char_29(10);
eprintf_28char_20const__2c_20____29(19718, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputc_28char_29(10);
}
__stack_pointer = $3 - -64 | 0;
return $2;
}
function __stdio_write($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$3 = HEAP32[$0 + 28 >> 2];
HEAP32[$4 + 16 >> 2] = $3;
$5 = HEAP32[$0 + 20 >> 2];
HEAP32[$4 + 28 >> 2] = $2;
HEAP32[$4 + 24 >> 2] = $1;
$1 = $5 - $3 | 0;
HEAP32[$4 + 20 >> 2] = $1;
$7 = $1 + $2 | 0;
$3 = $4 + 16 | 0;
$8 = 2;
label$1: {
label$2: {
label$3: {
label$4: {
if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
$5 = $3;
break label$4;
}
while (1) {
$1 = HEAP32[$4 + 12 >> 2];
if (($7 | 0) == ($1 | 0)) {
break label$3;
}
if (($1 | 0) < 0) {
$5 = $3;
break label$2;
}
$6 = HEAP32[$3 + 4 >> 2];
$9 = $6 >>> 0 < $1 >>> 0;
$5 = ($9 << 3) + $3 | 0;
$6 = $1 - ($9 ? $6 : 0) | 0;
HEAP32[$5 >> 2] = $6 + HEAP32[$5 >> 2];
$3 = ($9 ? 12 : 4) + $3 | 0;
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - $6;
$7 = $7 - $1 | 0;
$3 = $5;
$8 = $8 - $9 | 0;
if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 | 0, $8 | 0, $4 + 12 | 0) | 0)) {
continue;
}
break;
}
}
if (($7 | 0) != -1) {
break label$2;
}
}
$1 = HEAP32[$0 + 44 >> 2];
HEAP32[$0 + 28 >> 2] = $1;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
$1 = $2;
break label$1;
}
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
$1 = 0;
if (($8 | 0) == 2) {
break label$1;
}
$1 = $2 - HEAP32[$5 + 4 >> 2] | 0;
}
__stack_pointer = $4 + 32 | 0;
return $1 | 0;
}
function little2_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
label$1: {
label$2: {
$0 = $1 + 4 | 0;
if (!(HEAPU8[$1 + 5 | 0] | HEAPU8[$0 | 0] != 120)) {
$0 = $1 + 6 | 0;
$1 = 0;
while (1) {
label$5: {
if (HEAPU8[$0 + 1 | 0]) {
break label$5;
}
$2 = HEAP8[$0 | 0];
if (($2 | 0) == 59) {
break label$2;
}
label$6: {
label$7: {
label$8: {
label$9: {
$3 = $2 - 48 | 0;
switch ($3 | 0) {
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
break label$7;
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
break label$8;
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
break label$9;
default:
break label$5;
}
}
$1 = $1 << 4 | $3;
break label$6;
}
$1 = (($1 << 4) + $2 | 0) - 55 | 0;
break label$6;
}
$1 = (($1 << 4) + $2 | 0) - 87 | 0;
}
if (($1 | 0) <= 1114111) {
break label$5;
}
return -1;
}
$0 = $0 + 2 | 0;
continue;
}
}
$1 = 0;
while (1) {
$3 = -1;
$2 = -1;
if (!HEAPU8[$0 + 1 | 0]) {
$2 = HEAP8[$0 | 0];
if (($2 | 0) == 59) {
break label$2;
}
}
$0 = $0 + 2 | 0;
$1 = (Math_imul($1, 10) + $2 | 0) - 48 | 0;
if (($1 | 0) <= 1114111) {
continue;
}
break;
}
break label$1;
}
$3 = checkCharRefNumber($1);
}
return $3 | 0;
}
function mbrtowc($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
$5 = $3 ? $3 : 76936;
$3 = HEAP32[$5 >> 2];
label$1: {
label$2: {
label$3: {
if (!$1) {
if ($3) {
break label$3;
}
break label$1;
}
$4 = -2;
if (!$2) {
break label$1;
}
$8 = $0 ? $0 : $7 + 12 | 0;
label$5: {
if ($3) {
$0 = $2;
break label$5;
}
$3 = HEAPU8[$1 | 0];
$0 = $3 << 24 >> 24;
if (($0 | 0) >= 0) {
HEAP32[$8 >> 2] = $3;
$4 = ($0 | 0) != 0;
break label$1;
}
$3 = __get_tp();
$0 = HEAP8[$1 | 0];
if (!HEAP32[HEAP32[$3 + 88 >> 2] >> 2]) {
HEAP32[$8 >> 2] = $0 & 57343;
$4 = 1;
break label$1;
}
$3 = ($0 & 255) - 194 | 0;
if ($3 >>> 0 > 50) {
break label$3;
}
$3 = HEAP32[($3 << 2) + 55760 >> 2];
$0 = $2 - 1 | 0;
if (!$0) {
break label$2;
}
$1 = $1 + 1 | 0;
}
$6 = HEAPU8[$1 | 0];
$9 = $6 >>> 3 | 0;
if (($9 - 16 | ($3 >> 26) + $9) >>> 0 > 7) {
break label$3;
}
while (1) {
$0 = $0 - 1 | 0;
$3 = $6 - 128 | $3 << 6;
if (($3 | 0) >= 0) {
HEAP32[$5 >> 2] = 0;
HEAP32[$8 >> 2] = $3;
$4 = $2 - $0 | 0;
break label$1;
}
if (!$0) {
break label$2;
}
$1 = $1 + 1 | 0;
$6 = HEAPU8[$1 | 0];
if (($6 & 192) == 128) {
continue;
}
break;
}
}
HEAP32[$5 >> 2] = 0;
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$4 = -1;
break label$1;
}
HEAP32[$5 >> 2] = $3;
}
__stack_pointer = $7 + 16 | 0;
return $4;
}
function HanimAvatar__setSiteNormals_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
$1 = __stack_pointer + -64 | 0;
__stack_pointer = $1;
label$1: while (1) {
if (($3 | 0) != 2) {
$5 = HEAP32[($3 << 2) + 48916 >> 2];
$2 = 0;
while (1) if (($2 | 0) == 5) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($1 + 24 | 0, 1, $5, 3, 0);
HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 24 >> 2];
HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__29($0, $1 + 8 | 0, 68056);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($1 + 16 | 0, 1, $5, 4, 0);
HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__29($0, $1 + 4 | 0, 68092);
$3 = $3 + 1 | 0;
continue label$1;
} else {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($1 + 56 | 0, 7, $5, 0, MakeDigit_28DigitIndex_29($2));
$4 = (HEAP32[$0 + 72 >> 2] + Math_imul($3, 60) | 0) + Math_imul($2, 12) | 0;
$6 = HEAP32[$4 + 60 >> 2];
$7 = Vector__y_28_29_20const(HEAP32[$4 + 56 >> 2] + 68 | 0);
$8 = Vector__y_28_29_20const($6 + 68 | 0);
$9 = HEAPF32[(Math_imul($3, 20) + 68552 | 0) + ($2 << 2) >> 2];
HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 56 >> 2];
$4 = Vector__Vector_28float_2c_20float_2c_20float_29($1 + 32 | 0, Math_fround(0), Math_fround($9 * Math_fround(-Math_fround($7 - $8))), Math_fround(0));
HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 48 >> 2];
HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__2c_20float_29($0, $1 + 12 | 0, $4, HEAPF32[17148]);
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
__stack_pointer = $1 - -64 | 0;
}
function SNMtoATM_28DynamicArray1_DynamicArray1_AtomicNonmanual_____29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
label$3: {
switch (HEAP32[$0 + 12 >> 2]) {
case 1:
return PNMtoATM_28DynamicArray1_AtomicNonmanual___29(DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($0, 0));
case 0:
break label$2;
default:
break label$3;
}
}
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$1 = invoke_ii(436, $4 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
label$5: {
while (1) {
label$7: {
$3 = $2 << 16 >> 16;
if (($3 | 0) >= HEAP32[$0 + 12 >> 2]) {
$2 = HEAP32[$1 + 24 >> 2];
switch (HEAP32[$2 + 12 >> 2]) {
case 1:
break label$5;
case 0:
break label$7;
default:
break label$2;
}
}
$3 = PNMtoATM_28DynamicArray1_AtomicNonmanual___29(DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($0, $3));
if ($3) {
SeqTimedMorph__appendElement_28AbstractTimedMorph__29($1, $3);
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
return 0;
}
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, 0);
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29(HEAP32[$1 + 24 >> 2], 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
$1 = $2;
}
return $1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($2 | 0);
abort();
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___erase_28std____2____wrap_iter_SSMorph__20const___2c_20std____2____wrap_iter_SSMorph__20const___29($0, $1, $2) {
var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP32[$3 + 16 >> 2] = $2;
HEAP32[$3 + 24 >> 2] = $1;
$1 = HEAP32[$0 >> 2];
wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___begin_28_29($0), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
$1 = (decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SSMorph__20const__2c_20SSMorph____28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph____20const__29($3 + 24 | 0, $3 + 8 | 0) << 2) + $1 | 0;
if (bool_20std____2__operator___SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29($3 + 24 | 0, $3 + 16 | 0)) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, SSMorph___20std____2__move_SSMorph___2c_20SSMorph____28SSMorph___2c_20SSMorph___2c_20SSMorph___29((decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SSMorph__20const__2c_20SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29($3 + 16 | 0, $3 + 24 | 0) << 2) + $1 | 0, HEAP32[$0 + 4 >> 2], $1));
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_iterators_past_28SSMorph___29($0, $1 - 4 | 0);
}
$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____make_iter_28SSMorph___29($0, $1);
__stack_pointer = $3 + 32 | 0;
return $0;
}
function ProcessSpeed_28XMLCell__2c_20Gesture__29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0;
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
label$1: {
if (!$1 | !HEAP32[$1 + 44 >> 2]) {
break label$1;
}
HEAP32[$2 + 60 >> 2] = -1082130432;
label$2: {
if (!XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 60 | 0, 6151)) {
break label$2;
}
$3 = HEAPF32[$2 + 60 >> 2];
if ($3 > Math_fround(0)) {
$4 = HEAP32[$1 + 44 >> 2];
if (HEAPF32[$4 + 40 >> 2] == $3) {
break label$2;
}
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $3, 1);
break label$2;
}
LogTime_28_29();
HEAPF64[$2 + 32 >> 3] = HEAPF32[$2 + 60 >> 2];
eprintf_28char_20const__2c_20____29(40039, $2 + 32 | 0);
}
label$4: {
if (!XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 56 | 0, 10481)) {
break label$4;
}
$3 = HEAPF32[$2 + 56 >> 2];
if ($3 > Math_fround(0)) {
if ($3 == Math_fround(1)) {
break label$4;
}
BasicMovement__scaleDuration_28float_2c_20bool_29(HEAP32[$1 + 44 >> 2], Math_fround(Math_fround(1) / $3), 1);
break label$4;
}
LogTime_28_29();
HEAPF64[$2 + 16 >> 3] = HEAPF32[$2 + 56 >> 2];
eprintf_28char_20const__2c_20____29(40100, $2 + 16 | 0);
}
if (!XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 52 | 0, 9533)) {
break label$1;
}
$3 = HEAPF32[$2 + 52 >> 2];
if ($3 > Math_fround(0)) {
if ($3 == Math_fround(1)) {
break label$1;
}
BasicMovement__scaleDuration_28float_2c_20bool_29(HEAP32[$1 + 44 >> 2], $3, 1);
break label$1;
}
LogTime_28_29();
HEAPF64[$2 >> 3] = HEAPF32[$2 + 52 >> 2];
eprintf_28char_20const__2c_20____29(40069, $2);
}
__stack_pointer = $2 - -64 | 0;
}
function CreateWaitGesture_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$0 = XMLCell__element_28char_20const__29(XMLCell__element_28char_20const__29(HEAP32[17100], 8995), 6430);
$2 = HEAP32[18905];
$1 = HEAP32[18906];
$2 = ParserData__ParserData_28HashAny_char_20const__2c_20Gesture____2c_20HanimAvatar_20const__29($3 + 8 | 0, $2, $1);
HEAP32[19359] = 0;
invoke_iiii(762, $0 | 0, $2 | 0, 70444) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($0 | 0) == 1) {
break label$2;
}
label$3: {
label$4: {
if (!HEAP32[17611]) {
HEAP32[19359] = 0;
invoke_vii(71, 39499, 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
HEAP32[18884] = 8;
break label$4;
}
HEAP32[19359] = 0;
$1 = invoke_ii(64, 224) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
$0 = invoke_ii(88, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$3;
}
HEAP32[17612] = $0;
HEAP32[19359] = 0;
$1 = HEAP32[17611];
invoke_vii(763, $1 | 0, $0 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
}
ParserData___ParserData_28_29($2);
__stack_pointer = $3 + 32 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
ParserData___ParserData_28_29($2);
__resumeException($0 | 0);
abort();
}
function SHMScalarController__microUpdate_28float_29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
HEAP32[17059] = HEAP32[17059] + 1;
$2 = Math_fround(HEAPF32[$0 + 76 >> 2] - HEAPF32[$0 + 80 >> 2]);
HEAPF32[$0 + 84 >> 2] = $2;
if (HEAP32[$0 + 60 >> 2] == 3) {
compute_k1k2_28float__2c_20float__2c_20float_2c_20float_29($0 + 36 | 0, $0 + 44 | 0, Math_fround(HEAPF32[$0 + 16 >> 2] * scaling_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 24 >> 2], $2, HEAPF32[$0 + 8 >> 2])), HEAPF32[$0 + 20 >> 2]);
}
$2 = HEAPF32[$0 + 28 >> 2];
label$2: {
if (HEAPU8[$0 + 32 | 0] | !($2 > Math_fround(0))) {
break label$2;
}
$3 = HEAPF32[$0 + 84 >> 2];
if (!($3 < $2) | !(Math_fround(-$2) < $3)) {
break label$2;
}
HEAP32[$0 + 92 >> 2] = 0;
HEAP8[$0 + 32 | 0] = 1;
$2 = HEAPF32[$0 + 72 >> 2];
HEAPF32[$0 + 76 >> 2] = $2;
HEAPF32[$0 + 84 >> 2] = $2 - HEAPF32[$0 + 80 >> 2];
}
$2 = Math_fround(HEAPF32[$0 + 84 >> 2] * HEAPF32[$0 + 36 >> 2]);
HEAPF32[$0 + 88 >> 2] = $2;
$4 = HEAPF32[$0 + 92 >> 2];
$2 = Math_fround($2 - $4);
HEAPF32[$0 + 96 >> 2] = $2;
$2 = Math_fround($2 * HEAPF32[$0 + 44 >> 2]);
HEAPF32[$0 + 100 >> 2] = $2;
$2 = Math_fround($2 / HEAPF32[$0 + 52 >> 2]);
HEAPF32[$0 + 104 >> 2] = $2;
$3 = HEAPF32[$0 + 48 >> 2];
label$3: {
if (!($3 < $2)) {
$3 = Math_fround(-$3);
if (!($3 > $2)) {
break label$3;
}
}
HEAPF32[$0 + 104 >> 2] = $3;
$2 = $3;
}
$3 = Math_fround(Math_fround($2 * $1) + $4);
HEAPF32[$0 + 92 >> 2] = $3;
HEAPF32[$0 + 80 >> 2] = Math_fround($4 * $1) + HEAPF32[$0 + 80 >> 2];
$2 = HEAPF32[$0 + 40 >> 2];
label$5: {
if (!($3 > $2)) {
$2 = Math_fround(-$2);
if (!($3 < $2)) {
break label$5;
}
}
HEAPF32[$0 + 92 >> 2] = $2;
}
}
function HashAny_char_20const__2c_20int___insertString_28int_2c_20char_20const__2c_20int_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_char_20const__2c_20int___HashChainItem_28char_20const__2c_20int_29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(40, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_char_20const__2c_20int____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_char_20const__2c_20int____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_char_20const__2c_20int___HashChainItem_28char_20const__2c_20int_29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_char_20const__2c_20int___HashChain_28HashChainItem_char_20const__2c_20int__29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20int____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function HanimAvatar__SetFacePoint_28char_20const__2c_20short_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
$3 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $1);
if ($3) {
label$2: {
if (!HEAPU8[69853]) {
break label$2;
}
if (!(Math_fround(Vector__length_28_29_20const(Site__getLocalPosition_28_29($3)) * Math_fround(23.622047424316406)) < Math_fround(.5))) {
break label$2;
}
HEAP32[$4 + 16 >> 2] = HEAP32[$3 >> 2];
eprintf_28char_20const__2c_20____29(19261, $4 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const(Site__getLocalPosition_28_29($3), HEAP32[16886], 3);
$1 = Vector__Vector_28Vector_20const__29($4 + 32 | 0, Site__getLocalPosition_28_29($3));
Vector__setScale_28float_29($1, Math_fround(23.622047424316406));
Site__setLocalPosition_28Vector_20const__29($3, $1);
Site__getGlobalPosition_28Vector__29($3, $1);
Vector__setAdd_28Vector_20const__29($1, 69856);
Site__setGlobalPosition_28Vector_20const__29($3, $1);
$1 = HEAP32[$3 + 24 >> 2];
if ($1) {
Vector__setScale_28float_29($1, Math_fround(23.622047424316406));
}
eprintf_28char_20const__2c_20____29(17396, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const(Site__getLocalPosition_28_29($3), HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(48530, 0);
}
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 488 >> 2], $2, Site__getGlobalPosition_28_29($3));
__stack_pointer = $4 + 48 | 0;
return;
}
LogTime_28_29();
HEAP32[$4 >> 2] = $1;
eprintf_28char_20const__2c_20____29(37573, $4);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 15) | 0, 60484, 0);
abort();
}
function IsCombinedDirection_28Direction3_2c_20Direction3_29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0;
$9 = 65535;
$2 = HEAPF32[$0 >> 2];
label$1: {
if ($2 > Math_fround(1) | $2 < Math_fround(-1)) {
break label$1;
}
$3 = HEAPF32[$0 + 4 >> 2];
if ($3 > Math_fround(1) | $3 < Math_fround(-1)) {
break label$1;
}
$6 = HEAPF32[$0 + 8 >> 2];
if ($6 > Math_fround(1) | $6 < Math_fround(-1)) {
break label$1;
}
$4 = HEAPF32[$1 >> 2];
if ($4 > Math_fround(1) | $4 < Math_fround(-1)) {
break label$1;
}
$5 = HEAPF32[$1 + 4 >> 2];
if ($5 > Math_fround(1) | $5 < Math_fround(-1)) {
break label$1;
}
$7 = HEAPF32[$1 + 8 >> 2];
if ($3 == Math_fround(0) & $2 == Math_fround(0) | ($7 > Math_fround(1) | $7 < Math_fround(-1) | (((($3 == Math_fround(0)) + ($2 == Math_fround(0)) | 0) + ($6 == Math_fround(0)) | 0) != 1 | ((($5 == Math_fround(0)) + ($4 == Math_fround(0)) | 0) + ($7 == Math_fround(0)) | 0) != 1))) {
break label$1;
}
$1 = $3 == Math_fround(0) ? 1 : $2 != Math_fround(0) ? -1 : 0;
if ($6 == Math_fround(0)) {
if (($1 | 0) != -1) {
break label$1;
}
$1 = 2;
}
if ($5 == Math_fround(0) & $4 == Math_fround(0)) {
break label$1;
}
$8 = $5 == Math_fround(0) ? 1 : $4 != Math_fround(0) ? -1 : 0;
if ($7 == Math_fround(0)) {
if (($8 | 0) != -1) {
break label$1;
}
$8 = 2;
}
if (($1 | 0) == ($8 | 0)) {
break label$1;
}
$0 = 0;
while (1) {
$9 = $0;
$0 = $0 + 1 | 0;
$10 = $9 & 65535;
if (($10 | 0) == ($1 & 65535) | ($8 & 65535) == ($10 | 0)) {
continue;
}
break;
}
}
return $9 << 16 >> 16;
}
function CreateTrajectoryTable_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 96 | 0;
__stack_pointer = $0;
HEAP32[$0 + 56 >> 2] = 7;
HEAP32[$0 + 60 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 8909;
HEAP32[$0 + 48 >> 2] = 6;
HEAP32[$0 + 44 >> 2] = 2923;
HEAP32[$0 + 40 >> 2] = 5;
HEAP32[$0 + 36 >> 2] = 2911;
HEAP32[$0 + 32 >> 2] = 4;
HEAP32[$0 + 28 >> 2] = 5118;
HEAP32[$0 + 24 >> 2] = 8;
HEAP32[$0 + 20 >> 2] = 1692;
HEAP32[$0 + 16 >> 2] = 3;
HEAP32[$0 + 8 >> 2] = 2;
HEAP32[$0 >> 2] = 1;
HEAP32[$0 + 12 >> 2] = 1725;
HEAP32[$0 + 4 >> 2] = 2022;
wasm2js_i32$0 = 70416, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 10211, $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 70420, wasm2js_i32$1 = dlmalloc(280), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
while (1) {
if (($5 | 0) == 10) {
__stack_pointer = $0 + 96 | 0;
} else {
$2 = TrajectoryParams__TrajectoryParams_28_29($0 - -64 | 0);
$1 = HEAP32[$2 >> 2];
$3 = HEAP32[$2 + 4 >> 2];
$4 = $1;
$7 = Math_imul($5, 28);
$6 = $7 + HEAP32[17605] | 0;
$1 = $6;
HEAP32[$1 >> 2] = $4;
HEAP32[$1 + 4 >> 2] = $3;
HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
$1 = HEAP32[$2 + 20 >> 2];
$3 = HEAP32[$2 + 16 >> 2];
$4 = $3;
$3 = $6;
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 20 >> 2] = $1;
$3 = HEAP32[$2 + 12 >> 2];
$1 = HEAP32[$2 + 8 >> 2];
$4 = $1;
$1 = $6;
HEAP32[$1 + 8 >> 2] = $4;
HEAP32[$1 + 12 >> 2] = $3;
TrajectoryParams___TrajectoryParams_28_29($2);
HEAP32[HEAP32[17605] + $7 >> 2] = 0;
$5 = $5 + 1 | 0;
continue;
}
break;
}
}
function Controller__microUpdate_28float_29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
HEAP32[17059] = HEAP32[17059] + 1;
$2 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 68 >> 2]);
HEAPF32[$0 + 72 >> 2] = $2;
if (HEAP32[$0 + 44 >> 2] == 3) {
compute_k1k2_28float__2c_20float__2c_20float_2c_20float_29($0 + 20 | 0, $0 + 28 | 0, Math_fround(HEAPF32[$0 >> 2] * scaling_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 8 >> 2], $2, HEAPF32[$0 + 96 >> 2])), HEAPF32[$0 + 4 >> 2]);
}
$2 = HEAPF32[$0 + 12 >> 2];
label$2: {
if (HEAPU8[$0 + 16 | 0] | !($2 > Math_fround(0))) {
break label$2;
}
$3 = HEAPF32[$0 + 72 >> 2];
if (!($3 < $2) | !(Math_fround(-$2) < $3)) {
break label$2;
}
HEAP32[$0 + 80 >> 2] = 0;
HEAP8[$0 + 16 | 0] = 1;
$2 = HEAPF32[$0 + 60 >> 2];
HEAPF32[$0 + 64 >> 2] = $2;
HEAPF32[$0 + 72 >> 2] = $2 - HEAPF32[$0 + 68 >> 2];
}
$2 = Math_fround(HEAPF32[$0 + 72 >> 2] * HEAPF32[$0 + 20 >> 2]);
HEAPF32[$0 + 76 >> 2] = $2;
$4 = HEAPF32[$0 + 80 >> 2];
$2 = Math_fround($2 - $4);
HEAPF32[$0 + 84 >> 2] = $2;
$2 = Math_fround($2 * HEAPF32[$0 + 28 >> 2]);
HEAPF32[$0 + 88 >> 2] = $2;
$2 = Math_fround($2 / HEAPF32[$0 + 36 >> 2]);
HEAPF32[$0 + 92 >> 2] = $2;
$3 = HEAPF32[$0 + 32 >> 2];
label$3: {
if (!($3 < $2)) {
$3 = Math_fround(-$3);
if (!($3 > $2)) {
break label$3;
}
}
HEAPF32[$0 + 92 >> 2] = $3;
$2 = $3;
}
$3 = Math_fround(Math_fround($2 * $1) + $4);
HEAPF32[$0 + 80 >> 2] = $3;
HEAPF32[$0 + 68 >> 2] = Math_fround($4 * $1) + HEAPF32[$0 + 68 >> 2];
$2 = HEAPF32[$0 + 24 >> 2];
label$5: {
if (!($3 > $2)) {
$2 = Math_fround(-$2);
if (!($3 < $2)) {
break label$5;
}
}
HEAPF32[$0 + 80 >> 2] = $2;
}
}
function ParMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP16[$3 + 24 >> 1] = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8;
$1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8;
HEAP32[19359] = 0;
HEAP16[$3 + 16 >> 1] = $1;
invoke_viii(416, $0 | 0, $3 + 24 | 0, $3 + 16 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) != 1) {
PostureChangeFlags___PostureChangeFlags_28_29($3 + 16 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 24 | 0);
$2 = HEAP16[$0 + 540 >> 1];
$4 = ($2 | 0) > 0 ? $2 : 0;
$5 = $0 + 528 | 0;
$2 = 0;
while (1) {
if (($2 | 0) == ($4 | 0)) {
__stack_pointer = $3 + 32 | 0;
return;
}
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($5, $2);
HEAP16[$3 + 8 >> 1] = HEAPU16[$0 + 508 >> 1];
HEAP16[$3 >> 1] = HEAPU16[$0 + 510 >> 1];
$6 = HEAP32[HEAP32[$1 >> 2] + 28 >> 2];
HEAP32[19359] = 0;
invoke_viii($6 | 0, $1 | 0, $3 + 8 | 0, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
$2 = $2 + 1 | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($3 + 8 | 0);
continue;
}
break;
}
$1 = $3 + 8 | 0;
$2 = __cxa_find_matching_catch_2() | 0;
break label$1;
}
$1 = $3 + 24 | 0;
$3 = $3 + 16 | 0;
$2 = __cxa_find_matching_catch_2() | 0;
}
getTempRet0() | 0;
PostureChangeFlags___PostureChangeFlags_28_29($3);
PostureChangeFlags___PostureChangeFlags_28_29($1);
__resumeException($2 | 0);
abort();
}
function ExtendTrailingMorph_28AtomicTimedMorph__2c_20AbstractTimedMorph__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$0 | !$1) {
break label$1;
}
label$2: {
label$3: {
switch (HEAP32[$1 + 20 >> 2] - 1 | 0) {
case 0:
$2 = HEAP32[$0 + 24 >> 2];
if (($2 | 0) != HEAP32[$1 + 24 >> 2]) {
break label$1;
}
HEAP32[$1 + 4 >> 2] = 0;
HEAPF32[$1 + 32 >> 2] = HEAPF32[$0 + 28 >> 2];
$3 = 1;
if (!HEAPU8[67595]) {
break label$1;
}
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(33610, $4);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, HEAP32[16886]);
eputc_28char_29(10);
break label$1;
case 2:
$2 = HEAP32[$1 + 24 >> 2];
if (!HEAP32[$2 + 12 >> 2]) {
break label$1;
}
if (!ExtendTrailingMorph_28AtomicTimedMorph__2c_20AbstractTimedMorph__29($0, DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, 0))) {
break label$1;
}
HEAP32[$1 + 4 >> 2] = 0;
break label$2;
case 1:
break label$3;
default:
break label$1;
}
}
$5 = HEAP32[$1 + 24 >> 2];
$7 = HEAP16[$5 + 12 >> 1];
while (1) {
$6 = $3 << 16 >> 16;
if (($6 | 0) >= ($7 | 0)) {
$3 = 0;
if (!($2 & 1)) {
break label$1;
}
HEAP32[$1 + 4 >> 2] = 0;
} else {
$3 = $3 + 1 | 0;
$2 = ExtendTrailingMorph_28AtomicTimedMorph__2c_20AbstractTimedMorph__29($0, DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($5, $6)) | $2;
continue;
}
break;
}
}
$3 = 1;
}
__stack_pointer = $4 + 16 | 0;
return $3;
}
function scalbnl($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0;
$6 = __stack_pointer - 80 | 0;
__stack_pointer = $6;
label$1: {
if (($5 | 0) >= 16384) {
$7 = $2;
__multf3($6 + 32 | 0, $1, $7, $3, $4, 0, 0, 0, 2147352576);
$8 = HEAP32[$6 + 40 >> 2];
$3 = $8;
$4 = HEAP32[$6 + 44 >> 2];
$1 = HEAP32[$6 + 32 >> 2];
$8 = HEAP32[$6 + 36 >> 2];
$2 = $8;
if ($5 >>> 0 < 32767) {
$5 = $5 - 16383 | 0;
break label$1;
}
$8 = $2;
__multf3($6 + 16 | 0, $1, $8, $3, $4, 0, 0, 0, 2147352576);
$5 = (($5 | 0) < 49149 ? $5 : 49149) - 32766 | 0;
$7 = HEAP32[$6 + 24 >> 2];
$3 = $7;
$4 = HEAP32[$6 + 28 >> 2];
$1 = HEAP32[$6 + 16 >> 2];
$7 = HEAP32[$6 + 20 >> 2];
$2 = $7;
break label$1;
}
if (($5 | 0) > -16383) {
break label$1;
}
$7 = $2;
__multf3($6 - -64 | 0, $1, $7, $3, $4, 0, 0, 0, 7471104);
$8 = HEAP32[$6 + 72 >> 2];
$3 = $8;
$4 = HEAP32[$6 + 76 >> 2];
$1 = HEAP32[$6 + 64 >> 2];
$8 = HEAP32[$6 + 68 >> 2];
$2 = $8;
if ($5 >>> 0 > 4294934644) {
$5 = $5 + 16269 | 0;
break label$1;
}
$8 = $2;
__multf3($6 + 48 | 0, $1, $8, $3, $4, 0, 0, 0, 7471104);
$5 = (($5 | 0) > -48920 ? $5 : -48920) + 32538 | 0;
$7 = HEAP32[$6 + 56 >> 2];
$3 = $7;
$4 = HEAP32[$6 + 60 >> 2];
$1 = HEAP32[$6 + 48 >> 2];
$7 = HEAP32[$6 + 52 >> 2];
$2 = $7;
}
$7 = $4;
$8 = $5 + 16383 << 16;
__multf3($6, $1, $2, $3, $7, 0, 0, 0, $8);
$7 = HEAP32[$6 + 12 >> 2];
$8 = HEAP32[$6 + 8 >> 2];
$1 = $8;
$8 = $0;
HEAP32[$8 + 8 >> 2] = $1;
HEAP32[$8 + 12 >> 2] = $7;
$8 = HEAP32[$6 + 4 >> 2];
$7 = HEAP32[$6 >> 2];
$1 = $7;
$7 = $0;
HEAP32[$7 >> 2] = $1;
HEAP32[$7 + 4 >> 2] = $8;
__stack_pointer = $6 + 80 | 0;
}
function TorsoCurve__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
Vector__Vector_28_29($3 + 48 | 0);
fputs(21414, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const(TorsoCurve__farleft_28_29_20const($0), $1, $2);
fputc(10, $1);
fputs(21417, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const(TorsoCurve__left_28_29_20const($0), $1, $2);
fputc(10, $1);
fputs(21425, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const(TorsoCurve__centre_28_29_20const($0), $1, $2);
fputc(10, $1);
fputs(21405, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const(TorsoCurve__right_28_29_20const($0), $1, $2);
fputc(10, $1);
fputs(21402, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const(TorsoCurve__farright_28_29_20const($0), $1, $2);
fputc(10, $1);
fputs(20231, $1);
CircleInfo__print_28_IO_FILE__2c_20short_29_20const($0 + 60 | 0, $1, $2);
fputc(10, $1);
fputs(20210, $1);
EllipseInfo__print_28_IO_FILE__2c_20short_29_20const($0 + 92 | 0, $1, $2);
fputc(10, $1);
fputs(20223, $1);
CircleInfo__print_28_IO_FILE__2c_20short_29_20const($0 + 76 | 0, $1, $2);
fputc(10, $1);
fputs(20202, $1);
EllipseInfo__print_28_IO_FILE__2c_20short_29_20const($0 + 108 | 0, $1, $2);
fputc(10, $1);
$4 = HEAPF32[$0 + 124 >> 2];
$5 = HEAPF32[$0 + 128 >> 2];
$6 = HEAPF32[$0 + 132 >> 2];
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $6;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 47443, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function Handshape__Handshape_28bool_2c_20Gesture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$0 = SiGMLHandshape__SiGMLHandshape_28_29($0);
HEAP32[$0 + 224 >> 2] = 1056964608;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 220 >> 2] = 0;
$4 = HEAPU8[$2 + 13 | 0];
HEAP8[$0 + 233 | 0] = 0;
HEAP32[$0 + 236 >> 2] = 0;
$5 = !($4 & 64) ^ $1;
HEAP8[$0 + 232 | 0] = $5;
label$1: {
label$2: {
label$3: {
if (HEAP32[$2 + 4 >> 2]) {
HEAP32[19359] = 0;
$4 = invoke_ii(64, 64) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_iiii(434, $4 | 0, $5 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[$0 + 236 >> 2] = $4;
break label$1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
break label$2;
}
HEAP32[19359] = 0;
invoke_i(305) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[19359] = 0;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = $1 ? 68 : 78;
invoke_vii(71, 25434, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$1;
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
SiGMLHandshape___SiGMLHandshape_28_29($0);
__resumeException($2 | 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
return $0 | 0;
}
function AbstractTimedMorph__rescale_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
$5 = Math_fround(($3 <= Math_fround(0) ? Math_fround(1) : $3) / ($2 <= Math_fround(0) ? Math_fround(1) : $2));
label$1: {
if (!($1 > Math_fround(0)) | $1 == Math_fround(-1)) {
break label$1;
}
$6 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 12 >> 2] + HEAPF32[$0 + 16 >> 2]) - HEAPF32[$0 + 4 >> 2]) - HEAPF32[$0 + 8 >> 2]) * Math_fround(.5));
if (!($6 > Math_fround(0))) {
break label$1;
}
$5 = Math_fround($5 * Math_fround($1 / $6));
}
label$2: {
if ($5 == Math_fround(1)) {
break label$2;
}
if (HEAPU8[67582]) {
HEAPF64[$4 + 56 >> 3] = $5;
HEAPF64[$4 + 48 >> 3] = $3;
HEAPF64[$4 + 40 >> 3] = $2;
HEAPF64[$4 + 32 >> 3] = $1;
eprintf_28char_20const__2c_20____29(28669, $4 + 32 | 0);
HEAPF64[$4 + 16 >> 3] = HEAPF32[$0 + 4 >> 2];
eprintf_28char_20const__2c_20____29(28297, $4 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[16886]);
eputc_28char_29(10);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $5);
if (HEAPU8[67582]) {
HEAPF64[$4 >> 3] = $5;
eprintf_28char_20const__2c_20____29(26237, $4);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[16886]);
eputc_28char_29(10);
}
$5 = HEAPF32[$0 + 4 >> 2];
if ($5 == Math_fround(0)) {
break label$2;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, Math_fround(-$5));
}
__stack_pointer = $4 - -64 | 0;
}
function HanimAvatar__CreateJointIndex_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 + 100 >> 2];
if ($1) {
$1 = HEAP32[$1 >> 2];
$2 = HEAP32[17493];
label$6: {
if (!strcmp($1, HEAP32[$2 >> 2])) {
HEAP32[$0 + 68 >> 2] = $2;
break label$6;
}
$2 = HEAP32[17494];
if (!strcmp($1, HEAP32[$2 >> 2])) {
HEAP32[$0 + 68 >> 2] = $2;
break label$6;
}
$2 = HEAP32[17495];
if (!strcmp($1, HEAP32[$2 >> 2])) {
HEAP32[$0 + 68 >> 2] = $2;
break label$6;
}
if (!HEAP32[$0 + 68 >> 2]) {
break label$1;
}
}
$1 = operator_20new_28unsigned_20long_29(268);
HEAP32[19359] = 0;
invoke_iii(285, $1 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$4;
}
HEAP32[$0 + 72 >> 2] = $1;
$2 = operator_20new_28unsigned_20long_29(132);
HEAP32[19359] = 0;
invoke_iii(286, $2 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[$0 + 76 >> 2] = $2;
}
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
$1 = $2;
}
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
eprintf_28char_20const__2c_20____29(40479, 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 14) | 0, 60484, 0);
abort();
}
function SSFrame__MakeEmpty_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = $0 + 4 | 0;
$1 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($4);
$3 = ($1 | 0) > 0 ? $1 : 0;
$1 = 0;
while (1) {
label$2: {
if (($1 | 0) == ($3 | 0)) {
$3 = $0 + 16 | 0;
$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($3);
$5 = ($1 | 0) > 0 ? $1 : 0;
$1 = 0;
while (1) {
if (($1 | 0) == ($5 | 0)) {
break label$2;
}
$2 = HEAP32[std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($3, $1) >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
}
wasm2js_i32$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($3, $1), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = $1 + 1 | 0;
continue;
}
}
$2 = HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($4, $1) >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
}
wasm2js_i32$0 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($4, $1), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$1 = $1 + 1 | 0;
continue;
}
break;
}
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___clear_28_29($4);
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___clear_28_29($3);
HEAP32[$0 + 40 >> 2] = 0;
}
function ParMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 + 32 >> 2] = $0;
fiprintf($1, 32372, $2 + 32 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
$3 = $0 + 544 | 0;
label$2: {
label$3: {
if (Vector__x_28_29_20const($3) != Math_fround(0)) {
break label$3;
}
if (Vector__y_28_29_20const($3) != Math_fround(0)) {
break label$3;
}
if (Vector__z_28_29_20const($3) == Math_fround(0)) {
break label$2;
}
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23680, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($3, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
$5 = HEAP16[$0 + 540 >> 1];
printIndent_28_IO_FILE__29($1);
HEAP32[$2 + 16 >> 2] = $5;
fiprintf($1, 25310, $2 + 16 | 0);
HEAP16[33801] = HEAPU16[33801] + 1;
$3 = $0 + 528 | 0;
$4 = 0;
while (1) {
$0 = $4 << 16 >> 16;
if (($5 | 0) <= ($0 | 0)) {
HEAP16[33801] = HEAPU16[33801] - 1;
$0 = 67602;
} else {
printIndent_28_IO_FILE__29($1);
HEAP32[$2 >> 2] = $0;
fiprintf($1, 19748, $2);
label$7: {
if (!DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $0)) {
fputs(14681, $1);
break label$7;
}
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $2 + 48 | 0;
}
function element7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
switch ($1 - 35 | 0) {
default:
label$10: {
switch ($1 - 21 | 0) {
case 3:
break label$10;
case 1:
case 2:
break label$2;
case 0:
break label$4;
default:
break label$3;
}
}
$1 = HEAP32[$0 + 4 >> 2] - 1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
$2 = 45;
if ($1) {
break label$1;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 45;
case 1:
$1 = HEAP32[$0 + 4 >> 2] - 1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
$2 = 46;
if ($1) {
break label$1;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 46;
case 0:
$1 = HEAP32[$0 + 4 >> 2] - 1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
$2 = 47;
if ($1) {
break label$1;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 47;
case 2:
$1 = HEAP32[$0 + 4 >> 2] - 1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
$2 = 48;
if ($1) {
break label$1;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 48;
case 3:
break label$5;
}
}
HEAP32[$0 >> 2] = 819;
return 50;
}
HEAP32[$0 >> 2] = 819;
return 49;
}
$2 = 39;
if (($1 | 0) == 15) {
break label$1;
}
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function DestroyNameIndexes_28_29() {
var $0 = 0;
$0 = HEAP32[17508];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20char_20const_____HashAny_28_29($0));
HEAP32[17508] = 0;
}
$0 = HEAP32[17495];
if ($0) {
operator_20delete_28void__29(AvatarNameIndex___AvatarNameIndex_28_29($0));
HEAP32[17495] = 0;
}
$0 = HEAP32[17494];
if ($0) {
operator_20delete_28void__29(AvatarNameIndex___AvatarNameIndex_28_29($0));
HEAP32[17494] = 0;
}
$0 = HEAP32[17493];
if ($0) {
operator_20delete_28void__29(AvatarNameIndex___AvatarNameIndex_28_29($0));
HEAP32[17493] = 0;
}
$0 = HEAP32[17500];
label$5: {
if (!$0) {
break label$5;
}
HashAny_char_20const__2c_20SiteID___freeStrings_28_29($0);
$0 = HEAP32[17500];
if (!$0) {
break label$5;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20SiteID____HashAny_28_29($0));
HEAP32[17500] = 0;
}
$0 = HEAP32[17501];
label$6: {
if (!$0) {
break label$6;
}
HashAny_char_20const__2c_20SiteID___freeStrings_28_29($0);
$0 = HEAP32[17501];
if (!$0) {
break label$6;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20SiteID____HashAny_28_29($0));
HEAP32[17501] = 0;
}
$0 = HEAP32[17502];
label$7: {
if (!$0) {
break label$7;
}
HashAny_char_20const__2c_20SiteID___freeStrings_28_29($0);
$0 = HEAP32[17502];
if (!$0) {
break label$7;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20SiteID____HashAny_28_29($0));
HEAP32[17502] = 0;
}
$0 = HEAP32[17467];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__20const_2c_20AvatarType____HashAny_28_29($0));
HEAP32[17467] = 0;
}
}
function ArmHandConstellation__updateFrom_28ArmHandConstellation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
if (HEAPU8[$1 + 60 | 0]) {
HEAP8[$0 + 60 | 0] = 1;
}
if (HEAPU8[$1 + 61 | 0]) {
HEAP8[$0 + 61 | 0] = 1;
}
if (HEAPU8[$1 + 62 | 0]) {
HEAP8[$0 + 62 | 0] = 1;
}
$2 = HEAP32[$1 + 44 >> 2];
if ($2) {
HEAP32[$0 + 44 >> 2] = $2;
}
$2 = $1 + 12 | 0;
if (SiteIDPair__defined_28_29_20const($2)) {
$3 = HEAP32[$2 + 4 >> 2];
$4 = HEAP32[$2 >> 2];
HEAP32[$0 + 12 >> 2] = $4;
HEAP32[$0 + 16 >> 2] = $3;
HEAP32[$0 + 20 >> 2] = HEAP32[$2 + 8 >> 2];
SiteIDPair__setUndefined_28_29($0);
}
$2 = $1 + 24 | 0;
if (SiteIDPair__defined_28_29_20const($2)) {
$4 = HEAP32[$2 + 4 >> 2];
$3 = HEAP32[$2 >> 2];
HEAP32[$0 + 24 >> 2] = $3;
HEAP32[$0 + 28 >> 2] = $4;
HEAP32[$0 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
SiteIDPair__setUndefined_28_29($0);
}
if (SiteIDPair__defined_28_29_20const($1)) {
$3 = HEAP32[$1 + 4 >> 2];
$4 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $4;
HEAP32[$0 + 4 >> 2] = $3;
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
SiteIDPair__setUndefined_28_29($0 + 12 | 0);
SiteIDPair__setUndefined_28_29($0 + 24 | 0);
}
$2 = $1 + 36 | 0;
if (SiteID__defined_28_29_20const($2)) {
HEAP16[$0 + 36 >> 1] = HEAPU16[$2 >> 1];
HEAP8[$0 + 38 | 0] = HEAPU8[$2 + 2 | 0];
}
$1 = $1 + 40 | 0;
if (SiteID__defined_28_29_20const($1)) {
HEAP16[$0 + 40 >> 1] = HEAPU16[$1 >> 1];
HEAP8[$0 + 42 | 0] = HEAPU8[$1 + 2 | 0];
}
if (HEAPU8[67560]) {
eprintf_28char_20const__2c_20____29(33012, 0);
ArmHandConstellation__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
}
}
function Expat_start_28void__2c_20char_20const__2c_20char_20const___29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
while (1) {
$4 = $3;
$3 = $3 + 1 | 0;
if (HEAP32[($4 << 2) + $2 >> 2]) {
continue;
}
break;
}
$5 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$3 = invoke_ii(290, $1 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
label$2: {
label$3: {
if (($6 | 0) == 1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_iii(726, $5 | 0, $3 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) == 1) {
break label$3;
}
$6 = $4 - 1 | 0;
$3 = 0;
while (1) {
if (($3 | 0) >= ($6 | 0)) {
break label$2;
}
$4 = $3 << 2;
HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29(HEAP32[$5 + 4 >> 2], copyString_28char_20const__29(HEAP32[$4 + $2 >> 2]), copyString_28char_20const__29(HEAP32[($4 | 4) + $2 >> 2]));
$3 = $3 + 2 | 0;
continue;
}
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($3 | 0);
abort();
}
DynamicArrayP_XMLCell___appendElement_28XMLCell__29(HEAP32[$0 + 28 >> 2], $5);
$2 = HEAP32[$0 + 4 >> 2];
label$5: {
if (HEAP32[$0 + 8 >> 2] | !$2) {
break label$5;
}
$3 = 0;
while (1) {
if (HEAP32[$2 + 12 >> 2] <= ($3 | 0)) {
break label$5;
}
if (strcmp(DynamicArrayP_char_20const___getElement_28int_29_20const($2, $3), $1)) {
$3 = $3 + 1 | 0;
$2 = HEAP32[$0 + 4 >> 2];
continue;
}
break;
}
HEAP32[$0 + 8 >> 2] = $5;
}
}
function HashAny_int_2c_20int___insertString_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
switch (HEAPU16[$1 + 4 >> 1]) {
case 0:
break label$2;
case 1:
break label$4;
default:
break label$3;
}
}
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] - 1;
}
$5 = HEAP32[$1 >> 2];
$2 = HashChainItem_int_2c_20int___HashChainItem_28int_2c_20int_29($4, $2, $3);
HEAP32[19359] = 0;
invoke_vii(715, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HashChainItem_int_2c_20int____HashChainItem_28_29($2);
$2 = $0 + 8 | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashChainItem_int_2c_20int____HashChainItem_28_29($2);
__resumeException($0 | 0);
abort();
}
$5 = operator_20new_28unsigned_20long_29(12);
$2 = HashChainItem_int_2c_20int___HashChainItem_28int_2c_20int_29($4 + 8 | 0, $2, $3);
wasm2js_i32$0 = $1, wasm2js_i32$1 = HashChain_int_2c_20int___HashChain_28HashChainItem_int_2c_20int__29($5, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HashChainItem_int_2c_20int____HashChainItem_28_29($2);
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
$2 = $0 + 16 | 0;
}
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
$2 = $1;
$1 = $1 + 4 | 0;
HEAP16[$1 >> 1] = HEAPU16[$2 + 4 >> 1] + 1;
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
__stack_pointer = $4 + 16 | 0;
}
function OneHConcretePosture__computeWristLoc_28HanimAvatar_20const__2c_20Vector__29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
$4 = $0 + 4 | 0;
Vector__setFrom_28Vector_20const__29($2, $4);
if ($1) {
$3 = Vector__Vector_28_29($5 + 16 | 0);
$6 = $0 + 28 | 0;
$7 = $0 + 16 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($3, $6, $7);
Quaternion__rotateVector_28Vector__29_20const($0 + 40 | 0, $3);
Vector__setAdd_28Vector_20const__29($3, $4);
$4 = Vector__Vector_28_29($5);
if (!(!HEAPU8[67572] | !HEAPU8[$0 | 0])) {
eprintf_28char_20const__2c_20____29(20057, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($6, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(20139, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($7, HEAP32[16886], 3);
eputc_28char_29(10);
eputs_28char_20const__29(20093);
Vector__print_28_IO_FILE__2c_20int_29_20const($3, HEAP32[16886], 3);
eputc_28char_29(10);
}
HanimAvatar__ForceOutsideTorsoOffset_28Vector_20const__2c_20Vector__29_20const($1, $3, $4);
$3 = HEAPU8[$0 | 0];
if (!(!HEAPU8[67572] | !$3)) {
eputs_28char_20const__29(20115);
Vector__print_28_IO_FILE__2c_20int_29_20const($4, HEAP32[16886], 3);
eputc_28char_29(10);
}
Vector__setAdd_28Vector_20const__29($2, $4);
}
$1 = $0 + 40 | 0;
$0 = Vector__Vector_28Vector_20const__29($5 + 16 | 0, $0 + 16 | 0);
Quaternion__rotateVector_28Vector__29_20const($1, $0);
Vector__setSubtract_28Vector_20const__29($2, $0);
__stack_pointer = $5 + 32 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
label$1: {
if ($3 >>> 0 >= $2 >>> 0) {
$3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($3, $1, $2);
HEAP8[$4 + 15 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $2);
break label$1;
}
$5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, $2 - $3 | 0, $5, 0, $5, $2, $1);
}
__stack_pointer = $4 + 16 | 0;
return $0;
}
function pop_arg($0, $1, $2, $3) {
label$1: {
switch ($1 - 9 | 0) {
case 0:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
return;
case 6:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$1 = HEAP16[$1 >> 1];
$2 = $1 >> 31;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return;
case 7:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$2 = HEAPU16[$1 >> 1];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = 0;
return;
case 8:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$1 = HEAP8[$1 | 0];
$2 = $1 >> 31;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return;
case 9:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$2 = HEAPU8[$1 | 0];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = 0;
return;
case 16:
$1 = HEAP32[$2 >> 2] + 7 & -8;
HEAP32[$2 >> 2] = $1 + 8;
HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
return;
case 17:
FUNCTION_TABLE[$3 | 0]($0, $2);
default:
return;
case 1:
case 4:
case 14:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$1 = HEAP32[$1 >> 2];
$2 = $1 >> 31;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return;
case 2:
case 5:
case 11:
case 15:
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = $1 + 4;
$2 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = 0;
return;
case 3:
case 10:
case 12:
case 13:
break label$1;
}
}
$1 = HEAP32[$2 >> 2] + 7 & -8;
HEAP32[$2 >> 2] = $1 + 8;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
}
function OctantInterpolator__OctantInterpolator_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = Math_fround(0), $9 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$7 = __stack_pointer + -64 | 0;
__stack_pointer = $7;
$0 = Vector__Vector_28Vector_20const__29($0, $1);
Vector__Vector_28Vector_20const__29($0 + 12 | 0, $2);
Vector__Vector_28Vector_20const__29($0 + 24 | 0, $3);
Vector__Vector_28Vector_20const__29($0 + 36 | 0, $4);
Vector__Vector_28Vector_20const__29($0 + 48 | 0, $5);
Vector__Vector_28Vector_20const__29($0 + 60 | 0, $6);
HEAP32[$0 + 80 >> 2] = 0;
HEAP32[$0 + 72 >> 2] = 0;
HEAP32[$0 + 76 >> 2] = 0;
$9 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($7 + 48 | 0, $1, HEAPF32[16989], 1);
$2 = Vector__Vector_28_29($7 + 32 | 0);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($9, $5, $2);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__angleWith_28Vector_20const__2c_20Vector_20const__29_20const($2, $6, $3), 
HEAPF32[wasm2js_i32$0 + 76 >> 2] = wasm2js_f32$0;
$2 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($7 + 16 | 0, $3, Math_fround(-HEAPF32[16989]), 1);
$3 = Vector__Vector_28_29($7);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($2, $5, $3);
$8 = Vector__angleWith_28Vector_20const__2c_20Vector_20const__29_20const($3, $4, $1);
HEAPF32[$0 + 72 >> 2] = $8;
HEAPF32[$0 + 80 >> 2] = Math_fround($8 - HEAPF32[16989]) - HEAPF32[$0 + 76 >> 2];
__stack_pointer = $7 - -64 | 0;
return $0;
}
function __dynamic_cast($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
$6 = HEAP32[$0 >> 2];
$5 = HEAP32[$6 - 4 >> 2];
$6 = HEAP32[$6 - 8 >> 2];
HEAP32[$4 + 32 >> 2] = 0;
HEAP32[$4 + 36 >> 2] = 0;
HEAP32[$4 + 40 >> 2] = 0;
HEAP32[$4 + 44 >> 2] = 0;
HEAP32[$4 + 48 >> 2] = 0;
HEAP32[$4 + 52 >> 2] = 0;
HEAP8[$4 + 55 | 0] = 0;
HEAP8[$4 + 56 | 0] = 0;
HEAP8[$4 + 57 | 0] = 0;
HEAP8[$4 + 58 | 0] = 0;
HEAP8[$4 + 59 | 0] = 0;
HEAP8[$4 + 60 | 0] = 0;
HEAP8[$4 + 61 | 0] = 0;
HEAP8[$4 + 62 | 0] = 0;
HEAP32[$4 + 24 >> 2] = 0;
HEAP32[$4 + 28 >> 2] = 0;
HEAP32[$4 + 20 >> 2] = $3;
HEAP32[$4 + 16 >> 2] = $1;
HEAP32[$4 + 12 >> 2] = $0;
HEAP32[$4 + 8 >> 2] = $2;
$0 = $0 + $6 | 0;
$1 = 0;
label$1: {
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($5, $2, 0)) {
HEAP32[$4 + 56 >> 2] = 1;
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, $4 + 8 | 0, $0, $0, 1, 0);
$1 = HEAP32[$4 + 32 >> 2] == 1 ? $0 : 0;
break label$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $4 + 8 | 0, $0, 1, 0);
label$3: {
switch (HEAP32[$4 + 44 >> 2]) {
case 0:
$1 = HEAP32[$4 + 48 >> 2] == 1 ? HEAP32[$4 + 36 >> 2] == 1 ? HEAP32[$4 + 40 >> 2] == 1 ? HEAP32[$4 + 28 >> 2] : 0 : 0 : 0;
break label$1;
case 1:
break label$3;
default:
break label$1;
}
}
if (HEAP32[$4 + 32 >> 2] != 1) {
if (HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 36 >> 2] != 1 | HEAP32[$4 + 40 >> 2] != 1) {
break label$1;
}
}
$1 = HEAP32[$4 + 24 >> 2];
}
__stack_pointer = $4 - -64 | 0;
return $1;
}
function void_20std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____push_back_slow_path_SSPRSet__20const___28SSPRSet__20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$3 = std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0);
$2 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SSPRSet____29($4 + 8 | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) + 1 | 0), std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0), $3);
$5 = HEAP32[$2 + 8 >> 2];
$5 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($5);
HEAP32[19359] = 0;
invoke_viii(9, $3 | 0, $5 | 0, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 4;
HEAP32[19359] = 0;
invoke_vii(5, $0 | 0, $2 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_________split_buffer_28_29($2);
__stack_pointer = $4 + 32 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_________split_buffer_28_29($2);
__resumeException($0 | 0);
abort();
}
function HanimAvatar__FakeFarSites_28_29($0) {
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 25, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 26, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 27, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 28, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 29, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 30, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 31, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 32, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 33, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 34, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 35, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 36, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 37, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 38, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 39, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 40, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 41, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 42, Math_fround(1.5));
HanimAvatar__fakeFarLeftRight_28Location_2c_20float_29($0, 43, Math_fround(1.5));
}
function ThumbBending__SetThumbBending_28char_20const__2c_20HashAny_char_20const__2c_20ThumbBending___29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
$3 = __stack_pointer - 96 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
if ($2) {
HashAny_char_20const__2c_20ThumbBending___lookupString_28char_20const__29_20const($3 + 48 | 0, $2, $1);
HEAP32[$0 + 16 >> 2] = HEAP32[$3 - -64 >> 2];
$2 = HEAP32[$3 + 60 >> 2];
$4 = HEAP32[$3 + 56 >> 2];
HEAP32[$0 + 8 >> 2] = $4;
HEAP32[$0 + 12 >> 2] = $2;
$4 = HEAP32[$3 + 52 >> 2];
$2 = HEAP32[$3 + 48 >> 2];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $4;
ThumbBending___ThumbBending_28_29($3 + 48 | 0);
}
if (ThumbBending__defined_28_29_20const($0)) {
break label$1;
}
HEAP32[$3 + 32 >> 2] = $3 + 80;
HEAP32[$3 + 20 >> 2] = $3 + 48 | 8;
HEAP32[$3 + 24 >> 2] = $3 - -64;
HEAP32[$3 + 28 >> 2] = $3 + 72;
HEAP32[$3 + 16 >> 2] = $3 + 48;
label$3: {
if ((sscanf($1, 7515, $3 + 16 | 0) | 0) == 5) {
HEAPF32[$0 >> 2] = HEAPF64[$3 + 48 >> 3];
$6 = Math_fround(HEAPF64[$3 + 72 >> 3]);
$7 = Math_fround(HEAPF64[$3 + 64 >> 3]);
$8 = Math_fround(HEAPF64[$3 + 56 >> 3]);
$5 = Math_fround(HEAPF64[$3 + 80 >> 3]);
break label$3;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(46771, $3);
HEAP32[$0 >> 2] = 0;
$5 = Math_fround(0);
}
HEAPF32[$0 + 16 >> 2] = $5;
HEAPF32[$0 + 12 >> 2] = $6;
HEAPF32[$0 + 8 >> 2] = $7;
HEAPF32[$0 + 4 >> 2] = $8;
}
__stack_pointer = $3 + 96 | 0;
}
function ExpatWrapper__ParseFile_28_IO_FILE__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 8208 | 0;
__stack_pointer = $3;
$2 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_ii(717, $2 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
HEAP32[$0 + 28 >> 2] = $5;
label$2: {
label$3: {
while (1) {
$2 = 0;
if ($4) {
break label$3;
}
$2 = fread($3 + 16 | 0, 1, 8192, $1);
if (ferror($1)) {
eprintf_28char_20const__2c_20____29(25903, 0);
$4 = 2;
break label$2;
}
$4 = feof($1);
if (XML_Parse(HEAP32[$0 + 24 >> 2], $3 + 16 | 0, $2, $4)) {
continue;
}
break;
}
$4 = XML_GetCurrentLineNumber(HEAP32[$0 + 24 >> 2]);
wasm2js_i32$0 = $3, wasm2js_i32$1 = XML_ErrorString(XML_GetErrorCode(HEAP32[$0 + 24 >> 2])), 
HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
HEAP32[$3 >> 2] = $4;
eprintf_28char_20const__2c_20____29(25874, $3);
$2 = 3;
}
$4 = $2;
fclose($1);
$1 = HEAP32[$0 + 28 >> 2];
if (!$1) {
break label$2;
}
DynamicArrayP_XMLCell___deleteAll_28_29($1);
$1 = HEAP32[$0 + 28 >> 2];
if (!$1) {
break label$2;
}
operator_20delete_28void__29(DynamicArrayP_XMLCell____DynamicArrayP_28_29($1));
HEAP32[$0 + 28 >> 2] = 0;
}
__stack_pointer = $3 + 8208 | 0;
return $4 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($1 | 0);
abort();
}
function CircularMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
label$1: {
if ($2 <= Math_fround(0)) {
break label$1;
}
$4 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if ($4 <= $2) {
break label$1;
}
$2 = Math_fround(($3 ? $2 : Math_fround($4 - $2)) / $4);
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$4 = HEAPF32[$0 + 680 >> 2];
$6 = HEAPF32[$0 + 676 >> 2];
$3 = Vector__Vector_28_29($5);
GetCircularOffset_28Vector__2c_20OneHCircMoveSpec_20const__2c_20float_29($3, $0 + 616 | 0, Math_fround($6 + Math_fround($2 * $4)));
Vector__setSubtract_28Vector_20const__29($3, $0 + 652 | 0);
Vector__setAdd_28Vector_20const__29($1 + 4 | 0, $3);
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
$4 = HEAPF32[$0 + 748 >> 2];
$6 = HEAPF32[$0 + 744 >> 2];
$7 = HEAPF32[17668];
$8 = HEAPU8[$0 + 33 | 0];
$3 = Vector__Vector_28_29($5);
GetCircularOffset_28Vector__2c_20OneHCircMoveSpec_20const__2c_20float_29($3, $0 + 684 | 0, Math_fround(Math_fround($6 + Math_fround($2 * $4)) + ($8 ? $7 : Math_fround(-0))));
Vector__setSubtract_28Vector_20const__29($3, $0 + 720 | 0);
Vector__setAdd_28Vector_20const__29($1 + 116 | 0, $3);
}
__stack_pointer = $5 + 16 | 0;
}
function little2_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
label$1: {
label$2: {
while (1) {
$4 = HEAPU8[$1 | 0];
label$4: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$3 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$3 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
label$5: {
if (!(!(1 << $3 & 792723456) | $3 >>> 0 > 29)) {
$3 = 0;
if (HEAPU8[$2 | 0] != ($4 | 0) | HEAPU8[$2 + 1 | 0] != ($5 | 0)) {
break label$2;
}
break label$5;
}
label$9: {
switch ($3 - 5 | 0) {
case 2:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$1 = $1 + 1 | 0;
$2 = $2 + 1 | 0;
$4 = $5;
case 1:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$2 = $2 + 1 | 0;
$4 = HEAPU8[$1 + 1 | 0];
$1 = $1 + 1 | 0;
break;
case 0:
break label$9;
default:
break label$4;
}
}
$3 = 0;
if (HEAPU8[$2 | 0] != ($4 & 255) | HEAPU8[$1 + 1 | 0] != HEAPU8[$2 + 1 | 0]) {
break label$2;
}
}
$1 = $1 + 2 | 0;
$2 = $2 + 2 | 0;
continue;
}
break;
}
$1 = HEAPU8[$2 | 0];
$2 = HEAPU8[$2 + 1 | 0];
if ($2) {
$1 = unicode_byte_type($2 << 24 >> 24, $1 << 24 >> 24);
} else {
$1 = HEAPU8[($0 + $1 | 0) + 72 | 0];
}
if ($1 >>> 0 <= 29) {
$3 = 0;
if (1 << $1 & 792723680) {
break label$2;
}
}
$3 = 1;
}
return $3 | 0;
}
return 0;
}
function big2_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
label$1: {
label$2: {
while (1) {
$5 = HEAPU8[$1 + 1 | 0];
label$4: {
$4 = HEAPU8[$1 | 0];
if ($4) {
$3 = unicode_byte_type($4 << 24 >> 24, $5 << 24 >> 24);
} else {
$3 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
label$5: {
if (!(!(1 << $3 & 792723456) | $3 >>> 0 > 29)) {
$3 = 0;
if (HEAPU8[$2 | 0] != ($4 | 0) | HEAPU8[$2 + 1 | 0] != ($5 | 0)) {
break label$2;
}
break label$5;
}
label$9: {
switch ($3 - 5 | 0) {
case 2:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$1 = $1 + 1 | 0;
$2 = $2 + 1 | 0;
$4 = $5;
case 1:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$2 = $2 + 1 | 0;
$4 = HEAPU8[$1 + 1 | 0];
$1 = $1 + 1 | 0;
break;
case 0:
break label$9;
default:
break label$4;
}
}
$3 = 0;
if (HEAPU8[$2 | 0] != ($4 & 255) | HEAPU8[$1 + 1 | 0] != HEAPU8[$2 + 1 | 0]) {
break label$2;
}
}
$1 = $1 + 2 | 0;
$2 = $2 + 2 | 0;
continue;
}
break;
}
$1 = HEAPU8[$2 + 1 | 0];
$2 = HEAPU8[$2 | 0];
if ($2) {
$1 = unicode_byte_type($2 << 24 >> 24, $1 << 24 >> 24);
} else {
$1 = HEAPU8[($0 + $1 | 0) + 72 | 0];
}
if ($1 >>> 0 <= 29) {
$3 = 0;
if (1 << $1 & 792723680) {
break label$2;
}
}
$3 = 1;
}
return $3 | 0;
}
return 0;
}
function TargettedMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
PostureChangeFlags__setHandFlags_28OneHAbstractPosture_20const__29($0 + 508 | 0, HEAP32[HEAP32[$0 + 528 >> 2] + 28 >> 2]);
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
PostureChangeFlags__setHandFlags_28OneHAbstractPosture_20const__29($0 + 510 | 0, HEAP32[HEAP32[$0 + 528 >> 2] + 32 >> 2]);
}
$3 = $0 + 60 | 0;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($3, $1);
Gesture__propagateHandStuff_28TwoHandStuff__29(HEAP32[$0 + 528 >> 2], $1);
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
Gesture__MakeArmHandConstellation_28ArmHandConstellation_20const__29(HEAP32[$0 + 528 >> 2], HEAPU8[$0 + 532 | 0] ? $2 : 0);
label$3: {
if (HEAPU8[$0 + 532 | 0]) {
TwoHConcretePostureChange__setConstellationFlags_28SET_OF_HANDS_2c_20Gesture__29($3, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 528 >> 2]);
break label$3;
}
TwoHConcretePostureChange__setInitFlags_28_29($3);
}
if (HEAPU8[67586]) {
eputs_28char_20const__29(21026);
$1 = HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2];
label$6: {
if (!$1) {
eputs_28char_20const__29(14681);
break label$6;
}
ArmHandConstellation__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
}
eputs_28char_20const__29(20757);
ArmHandConstellation__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
}
__memcpy($2, HEAP32[HEAP32[$0 + 528 >> 2] + 40 >> 2], 65);
}
function normal_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
label$1: {
label$2: {
$0 = HEAPU8[$1 + 2 | 0];
if (($0 | 0) != 120) {
$2 = $1 + 2 | 0;
$1 = 0;
while (1) {
if (($0 & 255) == 59) {
break label$2;
}
$1 = (Math_imul($1, 10) + ($0 << 24 >> 24) | 0) - 48 | 0;
if (($1 | 0) > 1114111) {
break label$1;
}
$0 = HEAPU8[$2 + 1 | 0];
$2 = $2 + 1 | 0;
continue;
}
}
$0 = $1 + 3 | 0;
$1 = 0;
while (1) {
$2 = HEAP8[$0 | 0];
if (($2 | 0) == 59) {
break label$2;
}
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
$3 = $2 - 48 | 0;
switch ($3 | 0) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
break label$10;
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
break label$8;
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
break label$9;
default:
break label$6;
}
}
$1 = $1 << 4 | $3;
break label$7;
}
$1 = (($1 << 4) + $2 | 0) - 55 | 0;
break label$7;
}
$1 = (($1 << 4) + $2 | 0) - 87 | 0;
}
if (($1 | 0) > 1114111) {
break label$1;
}
}
$0 = $0 + 1 | 0;
continue;
}
}
return checkCharRefNumber($1) | 0;
}
return -1;
}
function normal_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
if (($1 | 0) == ($2 | 0)) {
return -4;
}
$4 = $1;
label$2: {
while (1) {
if (($2 | 0) != ($4 | 0)) {
$5 = 2;
label$5: {
label$6: {
label$7: {
label$8: {
switch (HEAPU8[(HEAPU8[$4 | 0] + $0 | 0) + 72 | 0] - 2 | 0) {
case 4:
$5 = 3;
break label$5;
case 5:
$5 = 4;
break label$5;
case 1:
if (($1 | 0) != ($4 | 0)) {
break label$7;
}
return normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
case 0:
HEAP32[$3 >> 2] = $4;
return 0;
case 8:
if (($1 | 0) != ($4 | 0)) {
break label$7;
}
HEAP32[$3 >> 2] = $1 + 1;
return 7;
case 7:
if (($1 | 0) != ($4 | 0)) {
break label$7;
}
$4 = $1 + 1 | 0;
if (($4 | 0) == ($2 | 0)) {
return -3;
}
HEAP32[$3 >> 2] = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0] == 10 ? $1 + 2 | 0 : $4;
return 7;
case 3:
break label$5;
case 19:
break label$8;
default:
break label$6;
}
}
if (($1 | 0) != ($4 | 0)) {
break label$7;
}
HEAP32[$3 >> 2] = $1 + 1;
return 39;
}
HEAP32[$3 >> 2] = $4;
break label$2;
}
$5 = 1;
}
$4 = $4 + $5 | 0;
continue;
}
break;
}
HEAP32[$3 >> 2] = $2;
}
return 6;
}
function InstallParPosture_28Vector__2c_20Vector__2c_20OneHConcretePosture__2c_20PostureChangeFlags_20const__2c_20OneHConcretePosture_20const__2c_20Vector_20const__29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0;
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
if ($6 & 1) {
Vector__setAdd_28Vector_20const__29($0, $4 + 4 | 0);
Vector__setSubtract_28Vector_20const__29($0, $5);
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 2) {
Vector__setFrom_28Vector_20const__29($1, $4 + 4 | 0);
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 8) {
Vector__setFrom_28Vector_20const__29($2 + 16 | 0, $4 + 16 | 0);
Vector__setFrom_28Vector_20const__29($2 + 28 | 0, $4 + 28 | 0);
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 48) {
Quaternion__setFrom_28Quaternion_20const__29($2 + 40 | 0, $4 + 40 | 0);
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 64) {
HEAP32[$2 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
HEAPF32[$2 + 60 >> 2] = HEAPF32[$4 + 60 >> 2];
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 128) {
HEAP32[$2 + 92 >> 2] = HEAP32[$4 + 92 >> 2];
HEAPF32[$2 + 96 >> 2] = HEAPF32[$4 + 96 >> 2];
HEAPF32[$2 + 100 >> 2] = HEAPF32[$4 + 100 >> 2];
HEAPF32[$2 + 104 >> 2] = HEAPF32[$4 + 104 >> 2];
HEAP16[$2 + 108 >> 1] = HEAPU16[$4 + 108 >> 1];
HEAP16[$2 + 110 >> 1] = HEAPU16[$4 + 110 >> 1];
$6 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
}
if ($6 & 256) {
Quaternion__setCompose_28Quaternion_20const__29($2 + 76 | 0, $4 + 76 | 0);
}
}
function TorsoCurve__TorsoCurve_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $6 = 0, $7 = 0, $8 = 0;
while (1) {
Vector__Vector_28_29(Math_imul($6, 12) + $0 | 0);
$6 = $6 + 1 | 0;
if (($6 | 0) != 5) {
continue;
}
break;
}
CircleInfo__CircleInfo_28_29($0 + 60 | 0);
CircleInfo__CircleInfo_28_29($0 + 76 | 0);
EllipseInfo__EllipseInfo_28_29($0 + 92 | 0);
EllipseInfo__EllipseInfo_28_29($0 + 108 | 0);
$6 = TorsoCurve__farleft_28_29($0);
HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$7 = $1;
$1 = HEAP32[$7 >> 2];
$8 = HEAP32[$7 + 4 >> 2];
HEAP32[$6 >> 2] = $1;
HEAP32[$6 + 4 >> 2] = $8;
$6 = TorsoCurve__left_28_29($0);
HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$7 = $2;
$8 = HEAP32[$7 >> 2];
$1 = HEAP32[$7 + 4 >> 2];
HEAP32[$6 >> 2] = $8;
HEAP32[$6 + 4 >> 2] = $1;
$6 = TorsoCurve__centre_28_29($0);
HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
$7 = $3;
$1 = HEAP32[$7 >> 2];
$8 = HEAP32[$7 + 4 >> 2];
HEAP32[$6 >> 2] = $1;
HEAP32[$6 + 4 >> 2] = $8;
$6 = TorsoCurve__right_28_29($0);
HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
$7 = $4;
$8 = HEAP32[$7 >> 2];
$1 = HEAP32[$7 + 4 >> 2];
HEAP32[$6 >> 2] = $8;
HEAP32[$6 + 4 >> 2] = $1;
$6 = TorsoCurve__farright_28_29($0);
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
$7 = $5;
$1 = HEAP32[$7 >> 2];
$8 = HEAP32[$7 + 4 >> 2];
HEAP32[$6 >> 2] = $1;
HEAP32[$6 + 4 >> 2] = $8;
TorsoCurve__initialise_28_29($0);
return $0 | 0;
}
function __extenddftf2($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
wasm2js_scratch_store_f64(+$1);
$2 = wasm2js_scratch_load_i32(1) | 0;
$5 = wasm2js_scratch_load_i32(0) | 0;
$10 = $2;
$6 = $2 & 2147483647;
$4 = 1048576;
$4 = $6 - $4 | 0;
label$1: {
if (($4 | 0) == 2145386495 | $4 >>> 0 < 2145386495) {
$2 = $5;
$4 = $2 << 28;
$8 = $4;
$4 = $6;
$2 = $4 >>> 4 | 0;
$4 = ($4 & 15) << 28 | $5 >>> 4;
$9 = $4;
$3 = $2 + 1006632960 | 0;
break label$1;
}
$3 = $6;
if (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072) {
$2 = $5;
$3 = $2 << 28;
$8 = $3;
$3 = $10;
$2 = $3 >>> 4 | 0;
$3 = ($3 & 15) << 28 | $5 >>> 4;
$9 = $3;
$2 = $2 | 2147418112;
$3 = $2;
break label$1;
}
$2 = $6;
if (!($2 | $5)) {
$3 = 0;
break label$1;
}
$11 = $6 ? Math_clz32($6) : Math_clz32($5) + 32 | 0;
__ashlti3($7, $5, $6, 0, 0, $11 + 49 | 0);
$4 = $7;
$3 = HEAP32[$4 >> 2];
$12 = $3;
$2 = HEAP32[$4 + 4 >> 2];
$8 = $2;
$3 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
$4 = $2;
$2 = $3 ^ 65536;
$9 = 0 | $4;
$3 = 15372 - $11 | 0;
$4 = $3 << 16;
$3 = $4;
$4 = $2;
$3 = $3 | $4;
}
$6 = $3;
$2 = $0;
HEAP32[$2 >> 2] = $12;
$3 = $8;
HEAP32[$2 + 4 >> 2] = $3;
$3 = $10;
$2 = $3 & -2147483648;
$4 = $2;
$2 = 0;
$5 = $9;
$3 = $5;
$2 = $2 | $3;
$3 = $0;
HEAP32[$3 + 8 >> 2] = $2;
$2 = $6;
$4 = $2 | $4;
HEAP32[$3 + 12 >> 2] = $4;
__stack_pointer = $7 + 16 | 0;
}
function GetNonmanualDef_28XMLCell__2c_20char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
$3 = HEAP32[$0 >> 2];
$4 = HashAny_int_2c_20int___lookupString_28int_29_20const(HEAP32[18852], InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18782], $3)) << 16;
label$1: {
if (!$4) {
LogTime_28_29();
HEAP32[$2 + 4 >> 2] = $1;
HEAP32[$2 >> 2] = $3;
eprintf_28char_20const__2c_20____29(36528, $2);
break label$1;
}
$5 = HEAP32[HEAP32[18846] + ($4 >> 14) >> 2];
$4 = XMLCell__attrib_string_28char_20const__29($0, 9337);
if (!$4) {
LogTime_28_29();
HEAP32[$2 + 20 >> 2] = $1;
HEAP32[$2 + 16 >> 2] = $3;
HEAP32[$2 + 24 >> 2] = 9337;
eprintf_28char_20const__2c_20____29(43057, $2 + 16 | 0);
break label$1;
}
if ((InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const($5, $4) & 65535) == 65535) {
$3 = HEAP32[17516];
HEAP32[17516] = $3 + 1;
$3 = $3 << 16 >> 16;
InvertibleDynamicStringArray__AddValue_28short_2c_20char_20const__29($5, $3, $4);
$0 = ProcessSeqXMLMorph_28XMLCell__2c_20bool_29($0, 1);
HEAP32[$2 + 44 >> 2] = $0;
if (!$0) {
break label$1;
}
DynamicArray1_AbstractTimedMorph____setElement_28int_2c_20AbstractTimedMorph__20const__29(HEAP32[17653], $3, $2 + 44 | 0);
break label$1;
}
LogTime_28_29();
HEAP32[$2 + 40 >> 2] = $4;
HEAP32[$2 + 32 >> 2] = $3;
HEAP32[$2 + 36 >> 2] = 9337;
eprintf_28char_20const__2c_20____29(42836, $2 + 32 | 0);
}
__stack_pointer = $2 + 48 | 0;
}
function internalSubset($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
label$6: {
switch ($1 - 11 | 0) {
default:
switch ($1 - 26 | 0) {
case 1:
break label$2;
case 0:
break label$4;
case 2:
break label$5;
default:
break label$3;
}
;
case 5:
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49828) | 0) {
HEAP32[$0 >> 2] = 787;
return 11;
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49835) | 0) {
HEAP32[$0 >> 2] = 788;
return 33;
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49843) | 0) {
HEAP32[$0 >> 2] = 789;
return 39;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49851) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 790;
return 17;
case 0:
return 55;
case 4:
break label$1;
case 1:
case 3:
break label$2;
case 2:
break label$6;
}
}
return 56;
}
return 57;
}
HEAP32[$0 >> 2] = 791;
return 3;
}
if (($1 | 0) == -4) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
function XML_ParserFree($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
if ($0) {
$1 = HEAP32[$0 + 348 >> 2];
while (1) {
label$3: {
if (!$1) {
$1 = HEAP32[$0 + 352 >> 2];
if (!$1) {
break label$3;
}
HEAP32[$0 + 352 >> 2] = 0;
}
$2 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$1 + 36 >> 2]);
destroyBindings(HEAP32[$1 + 44 >> 2], $0);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]]($1);
$1 = $2;
continue;
}
break;
}
$1 = HEAP32[$0 + 284 >> 2];
while (1) {
label$6: {
if (!$1) {
$1 = HEAP32[$0 + 288 >> 2];
if (!$1) {
break label$6;
}
HEAP32[$0 + 288 >> 2] = 0;
}
$2 = HEAP32[$1 + 8 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]]($1);
$1 = $2;
continue;
}
break;
}
destroyBindings(HEAP32[$0 + 360 >> 2], $0);
destroyBindings(HEAP32[$0 + 356 >> 2], $0);
poolDestroy($0 + 400 | 0);
poolDestroy($0 + 424 | 0);
$1 = HEAP32[$0 + 340 >> 2];
if ($1) {
dtdDestroy($1, !HEAP32[$0 + 460 >> 2], $0 + 12 | 0);
}
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 376 >> 2]);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 448 >> 2]);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 8 >> 2]);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 44 >> 2]);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 380 >> 2]);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 236 >> 2]);
$1 = HEAP32[$0 + 248 >> 2];
if ($1) {
FUNCTION_TABLE[$1 | 0](HEAP32[$0 + 240 >> 2]);
}
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]]($0);
}
}
function std____2__system_error__system_error_28std____2__error_code_2c_20char_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($3, $2);
HEAP32[19359] = 0;
invoke_viii(929, $3 + 16 | 0, $1 | 0, $4 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
$2 = invoke_iii(930, $0 | 0, $3 + 16 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + 16 | 0);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($4);
HEAP32[$2 >> 2] = 58244;
$0 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $0;
__stack_pointer = $3 + 32 | 0;
return $2;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + 16 | 0);
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($4);
__resumeException($2 | 0);
abort();
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
__cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
return;
}
label$2: {
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
if (($3 | 0) != 1) {
break label$2;
}
HEAP32[$1 + 32 >> 2] = 1;
return;
}
HEAP32[$1 + 32 >> 2] = $3;
label$6: {
if (HEAP32[$1 + 44 >> 2] == 4) {
break label$6;
}
HEAP16[$1 + 52 >> 1] = 0;
$0 = HEAP32[$0 + 8 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
if (HEAPU8[$1 + 53 | 0]) {
HEAP32[$1 + 44 >> 2] = 3;
if (!HEAPU8[$1 + 52 | 0]) {
break label$6;
}
break label$2;
}
HEAP32[$1 + 44 >> 2] = 4;
}
HEAP32[$1 + 20 >> 2] = $2;
HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
break label$2;
}
HEAP8[$1 + 54 | 0] = 1;
return;
}
$0 = HEAP32[$0 + 8 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
}
}
function cosf($0) {
var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$3 = $4 & 2147483647;
label$1: {
if ($3 >>> 0 <= 1061752794) {
$1 = Math_fround(1);
if ($3 >>> 0 < 964689920) {
break label$1;
}
$1 = __cosdf(+$0);
break label$1;
}
if ($3 >>> 0 <= 1081824209) {
if ($3 >>> 0 >= 1075235812) {
$1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0));
break label$1;
}
$5 = +$0;
if (($4 | 0) < 0) {
$1 = __sindf($5 + 1.5707963267948966);
break label$1;
}
$1 = __sindf(1.5707963267948966 - $5);
break label$1;
}
if ($3 >>> 0 <= 1088565717) {
if ($3 >>> 0 >= 1085271520) {
$1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
break label$1;
}
if (($4 | 0) < 0) {
$1 = __sindf(-4.71238898038469 - +$0);
break label$1;
}
$1 = __sindf(+$0 + -4.71238898038469);
break label$1;
}
$1 = Math_fround($0 - $0);
if ($3 >>> 0 >= 2139095040) {
break label$1;
}
label$9: {
switch (__rem_pio2f($0, $2 + 8 | 0) & 3) {
case 0:
$1 = __cosdf(HEAPF64[$2 + 8 >> 3]);
break label$1;
case 1:
$1 = __sindf(-HEAPF64[$2 + 8 >> 3]);
break label$1;
case 2:
$1 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
break label$1;
default:
break label$9;
}
}
$1 = __sindf(HEAPF64[$2 + 8 >> 3]);
}
__stack_pointer = $2 + 16 | 0;
return $1;
}
function OneHPostureDistance_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__29($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$2 = Math_fround(1);
label$1: {
if (HEAP32[$0 + 56 >> 2] != HEAP32[$1 + 56 >> 2]) {
break label$1;
}
$5 = Math_fround(Vector__distance_28Vector_20const__29_20const($0 + 4 | 0, $1 + 4 | 0) / Math_fround(.05000000074505806));
$2 = Math_fround(1);
if ($5 >= Math_fround(1)) {
break label$1;
}
$6 = Math_fround(Vector__distance_28Vector_20const__29_20const($0 + 16 | 0, $1 + 16 | 0) / Math_fround(.05000000074505806));
$2 = Math_fround(1);
if ($6 >= Math_fround(1)) {
break label$1;
}
$8 = Quaternion__Quaternion_28Quaternion_20const__29($4, $0 + 40 | 0);
Quaternion__setComposeInv_28Quaternion_20const__29($8, $1 + 40 | 0);
$7 = Math_fround(Quaternion__getAngle_28_29_20const($8) / HEAPF32[17669]);
$2 = Math_fround(1);
if ($7 >= Math_fround(1)) {
break label$1;
}
$3 = HEAPF32[17670];
$2 = Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[$1 + 64 >> 2] - HEAPF32[$0 + 64 >> 2]))) / $3);
$3 = Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[$1 + 68 >> 2] - HEAPF32[$0 + 68 >> 2]))) / $3);
$3 = $3 < $2 ? $2 : $3;
$2 = Math_fround(1);
if ($3 >= Math_fround(1)) {
break label$1;
}
$2 = $5 < $6 ? $6 : $5;
$2 = $2 < $7 ? $7 : $2;
$2 = $3 > $2 ? $3 : $2;
}
__stack_pointer = $4 + 16 | 0;
return $2;
}
function MergeTargettedMovements_28DynamicArrayP_BasicMovement___29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$2 = HEAP32[$0 + 12 >> 2];
$6 = ($2 | 0) > 0 ? $2 : 0;
$3 = DynamicArrayP_BasicMovement___DynamicArrayP_28_29($4);
$2 = 0;
while (1) {
label$2: {
if (($2 | 0) == ($6 | 0)) {
HEAP32[$0 + 12 >> 2] = $5;
HEAP32[19359] = 0;
invoke_vi(503, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vii(501, $0 | 0, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[$3 + 12 >> 2] = 0;
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($3);
__stack_pointer = $4 + 16 | 0;
return;
}
$1 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0, $2);
label$4: {
if (HEAP32[$1 + 4 >> 2] == 9) {
HEAP32[19359] = 0;
invoke_vii(502, $3 | 0, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$4;
}
break label$2;
}
HEAP32[19359] = 0;
invoke_viii(481, $0 | 0, $5 | 0, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
$5 = $5 + 1 | 0;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($3);
__resumeException($2 | 0);
abort();
}
function Handshape__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
if ($1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
HEAP32[$2 + 48 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24873, $2 + 48 | 0);
if (!SiGMLHandshape__isUndef_28_29_20const($0)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23610, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiGMLHandshape__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAP32[$0 + 220 >> 2]) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23583, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
SiGMLHandshape__print_28_IO_FILE__29_20const(HEAP32[$0 + 220 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
if (HEAPF32[$0 + 224 >> 2] != Math_fround(.5)) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 224 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 28964, $2 + 32 | 0);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 233 | 0]), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
fiprintf($1, 31277, $2 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
HEAP32[$2 >> 2] = HEAP32[$0 + 236 >> 2];
fiprintf($1, 24241, $2);
}
__stack_pointer = $2 - -64 | 0;
}
function sinf($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$2 = $4 & 2147483647;
label$1: {
if ($2 >>> 0 <= 1061752794) {
if ($2 >>> 0 < 964689920) {
break label$1;
}
$0 = __sindf(+$0);
break label$1;
}
if ($2 >>> 0 <= 1081824209) {
$3 = +$0;
if ($2 >>> 0 <= 1075235811) {
if (($4 | 0) < 0) {
$0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
break label$1;
}
$0 = __cosdf($3 + -1.5707963267948966);
break label$1;
}
$0 = __sindf(-((($4 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $3));
break label$1;
}
if ($2 >>> 0 <= 1088565717) {
if ($2 >>> 0 <= 1085271519) {
$3 = +$0;
if (($4 | 0) < 0) {
$0 = __cosdf($3 + 4.71238898038469);
break label$1;
}
$0 = Math_fround(-__cosdf($3 + -4.71238898038469));
break label$1;
}
$0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
break label$1;
}
if ($2 >>> 0 >= 2139095040) {
$0 = Math_fround($0 - $0);
break label$1;
}
label$10: {
switch (__rem_pio2f($0, $1 + 8 | 0) & 3) {
case 0:
$0 = __sindf(HEAPF64[$1 + 8 >> 3]);
break label$1;
case 1:
$0 = __cosdf(HEAPF64[$1 + 8 >> 3]);
break label$1;
case 2:
$0 = __sindf(-HEAPF64[$1 + 8 >> 3]);
break label$1;
default:
break label$10;
}
}
$0 = Math_fround(-__cosdf(HEAPF64[$1 + 8 >> 3]));
}
__stack_pointer = $1 + 16 | 0;
return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
$4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
label$1: {
if ($3 - $4 >>> 0 >= $2 >>> 0) {
if (!$2) {
break label$1;
}
$3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 + $4 | 0, $1, $2);
$2 = $2 + $4 | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
HEAP8[$5 + 15 | 0] = 0;
std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $5 + 15 | 0);
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
}
__stack_pointer = $5 + 16 | 0;
return $0;
}
function XMLWrapper__SetElements_28HashAny_char_20const__2c_20int___29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if (!HEAP32[$0 + 4 >> 2]) {
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_ii(54, $3 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 4 >> 2] = $5;
}
if ($1) {
HashAny_char_20const__2c_20int___startIteration_28_29_20const($2 + 8 | 0, $1);
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 >> 2] = 0;
label$5: {
while (1) {
if (!HashAny_char_20const__2c_20int___nextIteration_28char_20const___2c_20int__2c_20HashAny_char_20const__2c_20int___Iterator__29_20const($1, $2 + 4 | 0, $2, $2 + 8 | 0)) {
break label$5;
}
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
$4 = HEAP32[$2 + 4 >> 2];
invoke_vii(720, $3 | 0, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashAny_char_20const__2c_20int___Iterator___Iterator_28_29($2 + 8 | 0);
break label$1;
}
HashAny_char_20const__2c_20int___Iterator___Iterator_28_29($2 + 8 | 0);
}
__stack_pointer = $2 + 16 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
}
__resumeException($0 | 0);
abort();
}
function little2_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
$4 = HEAPU8[$1 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 6 | 0) {
case 4:
break label$5;
case 3:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$4;
}
}
$1 = $1 + 3 | 0;
break label$3;
}
$1 = $1 + 4 | 0;
break label$3;
}
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
$4 = $2;
$5 = $1 + 2 | 0;
if (($4 | 0) != ($5 | 0)) {
$4 = HEAPU8[$1 + 2 | 0];
$6 = $1 + 4 | 0;
$1 = HEAPU8[$1 + 3 | 0];
if ($1) {
$4 = unicode_byte_type($1 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = ($4 | 0) == 10 ? $6 : $5;
}
HEAP32[$3 + 4 >> 2] = -1;
$1 = $4;
break label$3;
}
HEAP32[$3 + 4 >> 2] = -1;
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
}
$1 = $1 + 2 | 0;
}
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
continue;
}
break;
}
}
function big2_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
$4 = HEAPU8[$1 + 1 | 0];
label$3: {
label$4: {
label$5: {
label$6: {
label$7: {
label$8: {
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
switch ($4 - 6 | 0) {
case 4:
break label$5;
case 3:
break label$6;
case 1:
break label$7;
case 0:
break label$8;
default:
break label$4;
}
}
$1 = $1 + 3 | 0;
break label$3;
}
$1 = $1 + 4 | 0;
break label$3;
}
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
$4 = $2;
$5 = $1 + 2 | 0;
if (($4 | 0) != ($5 | 0)) {
$4 = HEAPU8[$1 + 3 | 0];
$6 = $1 + 4 | 0;
$1 = HEAPU8[$1 + 2 | 0];
if ($1) {
$4 = unicode_byte_type($1 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = ($4 | 0) == 10 ? $6 : $5;
}
HEAP32[$3 + 4 >> 2] = -1;
$1 = $4;
break label$3;
}
HEAP32[$3 + 4 >> 2] = -1;
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
}
$1 = $1 + 2 | 0;
}
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
continue;
}
break;
}
}
function BreakSymmetry_28SiteID__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
$4 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
label$1: {
if ($4 & 3840 | !($4 & 255)) {
break label$1;
}
$4 = HEAP32[$0 >> 2];
HEAP32[$3 + 20 >> 2] = $4;
HEAP32[$3 + 40 >> 2] = $4;
if (HanimAvatar__locateSiteID_28bool_2c_20SiteID_29_20const($1, 1, $3 + 20 | 0)) {
break label$1;
}
$5 = HEAPU8[$0 + 2 | 0];
$4 = HEAPU16[$0 >> 1];
$6 = HEAPU8[$0 + 3 | 0];
HEAP8[$3 + 35 | 0] = $6;
HEAP16[$3 + 32 >> 1] = $4;
$4 = ($5 << 16 | $4) & -7340033 | 1048576;
HEAP8[$3 + 34 | 0] = $4 >>> 16;
HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 32 >> 2];
if (HanimAvatar__locateSiteID_28bool_2c_20SiteID_29_20const($1, 1, $3 + 16 | 0)) {
break label$1;
}
$5 = SiteID__isArmHandSite_28_29_20const($0);
HEAP8[$3 + 27 | 0] = $6;
$4 = $4 & 10481919;
HEAP8[$3 + 26 | 0] = $4 >>> 16;
$5 = $2 ^ $5 ? 256 : 512;
HEAP16[$3 + 24 >> 1] = $5 | $4;
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
if (!HanimAvatar__locateSiteID_28bool_2c_20SiteID_29_20const($1, 1, $3 + 12 | 0)) {
break label$1;
}
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(17852, 0);
SiteID__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
HEAP32[$3 >> 2] = $2 ? 2792 : 2846;
eprintf_28char_20const__2c_20____29(33857, $3);
}
HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] & 61695 | $5;
}
__stack_pointer = $3 + 48 | 0;
}
function DynamicArray1_Quaternion___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
label$1: {
if (!$1) {
DynamicArray1_Quaternion___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$7 = dlmalloc($1 << 4);
if (!$7) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$6 + 4 >> 2] = $1;
HEAP32[$6 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39318, $6);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$11 = ($3 | 0) > 0 ? $3 : 0;
$8 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($11 | 0)) {
if ($8) {
dlfree($8);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $7;
DynamicArray1_Quaternion___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$4 = $2 << 4;
$5 = $7 + $4 | 0;
$4 = $4 + $8 | 0;
$9 = HEAP32[$4 >> 2];
$10 = HEAP32[$4 + 4 >> 2];
HEAP32[$5 >> 2] = $9;
HEAP32[$5 + 4 >> 2] = $10;
$9 = HEAP32[$4 + 12 >> 2];
$10 = HEAP32[$4 + 8 >> 2];
HEAP32[$5 + 8 >> 2] = $10;
HEAP32[$5 + 12 >> 2] = $9;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $6 + 16 | 0;
}
function little2_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
label$1: {
label$2: {
label$3: {
switch ((($2 - $1 | 0) / 2 | 0) - 2 | 0) {
case 0:
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$1 + 2 | 0] != 116) {
break label$2;
}
$2 = 0;
if (HEAPU8[$1 + 1 | 0]) {
break label$1;
}
$1 = HEAPU8[$1 | 0];
return (($1 | 0) == 103 ? 62 : ($1 | 0) == 108 ? 60 : 0) | 0;
case 1:
if (HEAPU8[$1 + 1 | 0] | HEAPU8[$1 | 0] != 97 | (HEAPU8[$1 + 3 | 0] | HEAPU8[$1 + 2 | 0] != 109)) {
break label$2;
}
if (HEAPU8[$1 + 5 | 0]) {
break label$2;
}
$2 = 38;
if (HEAPU8[$1 + 4 | 0] != 112) {
break label$2;
}
break label$1;
case 2:
break label$3;
default:
break label$2;
}
}
if (HEAPU8[$1 + 1 | 0]) {
break label$2;
}
$2 = HEAP8[$1 | 0];
if (($2 | 0) != 97) {
if (HEAPU8[$1 + 3 | 0] | ($2 | 0) != 113 | (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 2 | 0] != 117)) {
break label$2;
}
if (HEAPU8[$1 + 7 | 0] | HEAPU8[$1 + 4 | 0] != 111) {
break label$2;
}
$2 = 34;
if (HEAPU8[$1 + 6 | 0] != 116) {
break label$2;
}
break label$1;
}
if (HEAPU8[$1 + 3 | 0] | HEAPU8[$1 + 2 | 0] != 112 | (HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 4 | 0] != 111)) {
break label$2;
}
if (HEAPU8[$1 + 7 | 0]) {
break label$2;
}
$2 = 39;
if (HEAPU8[$1 + 6 | 0] == 115) {
break label$1;
}
}
$2 = 0;
}
return $2 | 0;
}
function __vfprintf_internal($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$5 = __stack_pointer - 208 | 0;
__stack_pointer = $5;
HEAP32[$5 + 204 >> 2] = $2;
memset($5 + 160 | 0, 0, 40);
HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
label$1: {
if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
$1 = -1;
break label$1;
}
if (HEAP32[$0 + 76 >> 2] >= 0) {
$8 = __lockfile($0);
}
$6 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 72 >> 2] <= 0) {
HEAP32[$0 >> 2] = $6 & -33;
}
label$5: {
label$6: {
label$7: {
if (!HEAP32[$0 + 48 >> 2]) {
HEAP32[$0 + 48 >> 2] = 80;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
$7 = HEAP32[$0 + 44 >> 2];
HEAP32[$0 + 44 >> 2] = $5;
break label$7;
}
if (HEAP32[$0 + 16 >> 2]) {
break label$6;
}
}
$2 = -1;
if (__towrite($0)) {
break label$5;
}
}
$2 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
}
$1 = $6 & 32;
if ($7) {
FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = $7;
HEAP32[$0 + 28 >> 2] = 0;
$3 = HEAP32[$0 + 20 >> 2];
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
$2 = $3 ? $2 : -1;
}
$3 = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = $3 | $1;
$1 = $3 & 32 ? -1 : $2;
if (!$8) {
break label$1;
}
__unlockfile($0);
}
__stack_pointer = $5 + 208 | 0;
return $1;
}
function big2_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
label$1: {
label$2: {
label$3: {
switch ((($2 - $1 | 0) / 2 | 0) - 2 | 0) {
case 0:
if (HEAPU8[$1 + 2 | 0] | HEAPU8[$1 + 3 | 0] != 116) {
break label$2;
}
$2 = 0;
if (HEAPU8[$1 | 0]) {
break label$1;
}
$1 = HEAPU8[$1 + 1 | 0];
return (($1 | 0) == 103 ? 62 : ($1 | 0) == 108 ? 60 : 0) | 0;
case 1:
if (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] != 97 | (HEAPU8[$1 + 2 | 0] | HEAPU8[$1 + 3 | 0] != 109)) {
break label$2;
}
if (HEAPU8[$1 + 4 | 0]) {
break label$2;
}
$2 = 38;
if (HEAPU8[$1 + 5 | 0] != 112) {
break label$2;
}
break label$1;
case 2:
break label$3;
default:
break label$2;
}
}
if (HEAPU8[$1 | 0]) {
break label$2;
}
$2 = HEAP8[$1 + 1 | 0];
if (($2 | 0) != 97) {
if (HEAPU8[$1 + 2 | 0] | ($2 | 0) != 113 | (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 3 | 0] != 117)) {
break label$2;
}
if (HEAPU8[$1 + 6 | 0] | HEAPU8[$1 + 5 | 0] != 111) {
break label$2;
}
$2 = 34;
if (HEAPU8[$1 + 7 | 0] != 116) {
break label$2;
}
break label$1;
}
if (HEAPU8[$1 + 2 | 0] | HEAPU8[$1 + 3 | 0] != 112 | (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] != 111)) {
break label$2;
}
if (HEAPU8[$1 + 6 | 0]) {
break label$2;
}
$2 = 39;
if (HEAPU8[$1 + 7 | 0] == 115) {
break label$1;
}
}
$2 = 0;
}
return $2 | 0;
}
function __fdopen($0, $1) {
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
label$3: {
if (!strchr(11024, HEAP8[$1 | 0])) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$3;
}
$2 = dlmalloc(1176);
if ($2) {
break label$2;
}
}
$2 = 0;
break label$1;
}
memset($2, 0, 144);
if (!strchr($1, 43)) {
HEAP32[$2 >> 2] = HEAPU8[$1 | 0] == 114 ? 8 : 4;
}
label$6: {
if (HEAPU8[$1 | 0] != 97) {
$1 = HEAP32[$2 >> 2];
break label$6;
}
$1 = __syscall_fcntl64($0 | 0, 3, 0) | 0;
if (!($1 & 1024)) {
$1 = $1 | 1024;
HEAP32[$3 + 16 >> 2] = $1;
HEAP32[$3 + 20 >> 2] = $1 >> 31;
__syscall_fcntl64($0 | 0, 4, $3 + 16 | 0) | 0;
}
$1 = HEAP32[$2 >> 2] | 128;
HEAP32[$2 >> 2] = $1;
}
HEAP32[$2 + 80 >> 2] = -1;
HEAP32[$2 + 48 >> 2] = 1024;
HEAP32[$2 + 60 >> 2] = $0;
HEAP32[$2 + 44 >> 2] = $2 + 152;
label$9: {
if ($1 & 8) {
break label$9;
}
HEAP32[$3 >> 2] = $3 + 24;
HEAP32[$3 + 4 >> 2] = 0;
if (__syscall_ioctl($0 | 0, 21523, $3 | 0) | 0) {
break label$9;
}
HEAP32[$2 + 80 >> 2] = 10;
}
HEAP32[$2 + 40 >> 2] = 891;
HEAP32[$2 + 36 >> 2] = 892;
HEAP32[$2 + 32 >> 2] = 893;
HEAP32[$2 + 12 >> 2] = 894;
if (!HEAPU8[75673]) {
HEAP32[$2 + 76 >> 2] = -1;
}
$2 = __ofl_add($2);
}
__stack_pointer = $3 + 32 | 0;
return $2;
}
function nextScaffoldPart($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
$1 = HEAP32[$0 + 340 >> 2];
if (!HEAP32[$1 + 164 >> 2]) {
$2 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](HEAP32[$0 + 452 >> 2] << 2) | 0;
HEAP32[$1 + 164 >> 2] = $2;
if (!$2) {
break label$1;
}
HEAP32[$2 >> 2] = 0;
}
$3 = HEAP32[$1 + 144 >> 2];
$2 = HEAP32[$1 + 156 >> 2];
$4 = HEAP32[$1 + 152 >> 2];
if ($2 >>> 0 >= $4 >>> 0) {
label$4: {
if ($3) {
$3 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]]($3, Math_imul($4, 56)) | 0;
if (!$3) {
break label$1;
}
$2 = HEAP32[$1 + 152 >> 2] << 1;
break label$4;
}
$2 = 32;
$3 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](896) | 0;
if (!$3) {
break label$1;
}
}
HEAP32[$1 + 144 >> 2] = $3;
HEAP32[$1 + 152 >> 2] = $2;
$2 = HEAP32[$1 + 156 >> 2];
}
HEAP32[$1 + 156 >> 2] = $2 + 1;
$0 = HEAP32[$1 + 160 >> 2];
if ($0) {
$4 = HEAP32[(HEAP32[$1 + 164 >> 2] + ($0 << 2) | 0) - 4 >> 2];
$1 = Math_imul($4, 28) + $3 | 0;
$0 = HEAP32[$1 + 16 >> 2];
if ($0) {
HEAP32[(Math_imul($0, 28) + $3 | 0) + 24 >> 2] = $2;
}
$0 = $1;
$0 = $1;
$1 = HEAP32[$1 + 20 >> 2];
if (!$1) {
HEAP32[(Math_imul($4, 28) + $3 | 0) + 12 >> 2] = $2;
}
HEAP32[$0 + 16 >> 2] = $2;
HEAP32[$0 + 20 >> 2] = $1 + 1;
}
$1 = Math_imul($2, 28) + $3 | 0;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 0;
HEAP32[$1 + 24 >> 2] = 0;
return $2;
}
return -1;
}
function GetArmControllerInfo_28XMLCell__29($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
$0 = XMLCell__element_28char_20const__29($0, 3527);
if (!$0) {
break label$2;
}
$4 = HEAP32[$0 + 8 >> 2];
if (!$4) {
break label$2;
}
$0 = HEAP32[$4 + 12 >> 2];
break label$1;
}
$4 = 0;
$0 = 0;
}
$6 = ($0 | 0) > 0 ? $0 : 0;
while (1) {
if (($5 | 0) != ($6 | 0)) {
$0 = DynamicArrayP_XMLCell___getElement_28int_29_20const($4, $5);
$1 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[17052], HEAP32[$0 >> 2]);
label$5: {
if ($1) {
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2636, Math_fround(0));
$1 = $1 << 4;
HEAPF32[$1 + HEAP32[17051] >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2649, Math_fround(0));
HEAPF32[(HEAP32[17051] + $1 | 0) + 4 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 5271, Math_fround(0));
HEAPF32[(HEAP32[17051] + $1 | 0) + 8 >> 2] = $2;
$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2120, Math_fround(0));
HEAPF32[(HEAP32[17051] + $1 | 0) + 12 >> 2] = $2;
break label$5;
}
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(42764, $3);
}
$5 = $5 + 1 | 0;
continue;
}
break;
}
__stack_pointer = $3 + 16 | 0;
}
function Direction2__setFromString_28char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
break label$1;
}
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
$3 = HEAPU8[$1 | 0];
label$3: {
if (($3 - 97 & 255) >>> 0 <= 25) {
while (1) {
if (!($3 & 255)) {
break label$3;
}
$6 = $1;
label$6: {
label$7: {
label$8: {
label$9: {
label$10: {
$3 = $3 << 24 >> 24;
switch ($3 - 114 | 0) {
case 1:
case 2:
break label$6;
case 3:
break label$8;
case 0:
break label$9;
default:
break label$10;
}
}
if (($3 | 0) == 100) {
break label$7;
}
if (($3 | 0) != 108) {
break label$6;
}
$4 = $4 + 1 | 0;
break label$6;
}
$4 = $4 - 1 | 0;
break label$6;
}
$5 = $5 + 1 | 0;
break label$6;
}
$5 = $5 - 1 | 0;
}
$1 = $6 + 1 | 0;
$3 = HEAPU8[$6 + 1 | 0];
continue;
}
}
HEAP32[$2 + 4 >> 2] = $2 + 8;
HEAP32[$2 >> 2] = $2 + 12;
sscanf($1, 10738, $2);
$5 = HEAP32[$2 + 8 >> 2];
$4 = HEAP32[$2 + 12 >> 2];
}
HEAPF32[$0 + 4 >> 2] = $5 | 0;
HEAPF32[$0 >> 2] = $4 | 0;
}
__stack_pointer = $2 + 16 | 0;
}
function XML_GetBuffer($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 1:
HEAP32[$0 + 268 >> 2] = 33;
break label$3;
case 0:
HEAP32[$0 + 268 >> 2] = 36;
break label$3;
default:
break label$4;
}
}
$3 = HEAP32[$0 + 32 >> 2];
$2 = HEAP32[$0 + 28 >> 2];
if (($3 - $2 | 0) >= ($1 | 0)) {
break label$2;
}
$4 = HEAP32[$0 + 24 >> 2];
$2 = $2 - $4 | 0;
$1 = $2 + $1 | 0;
$5 = HEAP32[$0 + 8 >> 2];
if (($1 | 0) <= ($3 - $5 | 0)) {
memmove($5, $4, $2);
$2 = HEAP32[$0 + 24 >> 2];
$1 = HEAP32[$0 + 8 >> 2];
HEAP32[$0 + 24 >> 2] = $1;
break label$1;
}
$2 = ($3 | 0) == ($4 | 0) ? 1024 : $3 - $4 | 0;
while (1) {
$2 = $2 << 1;
if (($2 | 0) < ($1 | 0)) {
continue;
}
break;
}
$1 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($2) | 0;
if ($1) {
HEAP32[$0 + 32 >> 2] = $1 + $2;
$2 = HEAP32[$0 + 24 >> 2];
if ($2) {
__memcpy($1, $2, HEAP32[$0 + 28 >> 2] - $2 | 0);
FUNCTION_TABLE[HEAP32[$0 + 20 >> 2]](HEAP32[$0 + 8 >> 2]);
$2 = HEAP32[$0 + 24 >> 2];
} else {
$2 = 0;
}
HEAP32[$0 + 24 >> 2] = $1;
HEAP32[$0 + 8 >> 2] = $1;
break label$1;
}
HEAP32[$0 + 268 >> 2] = 1;
}
$2 = 0;
}
return $2;
}
$2 = (HEAP32[$0 + 28 >> 2] - $2 | 0) + $1 | 0;
HEAP32[$0 + 28 >> 2] = $2;
return $2;
}
function SiGMLConstellation__SiGMLConstellation_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$0 = SiteIDPair__SiteIDPair_28_29($0);
SiteID__SiteID_28_29($0 + 12 | 0);
HEAP32[19359] = 0;
$2 = invoke_ii(344, $0 + 16 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
if (($1 | 0) != 1) {
HEAP32[19359] = 0;
$3 = invoke_ii(344, $0 + 28 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
SiteID__SiteID_28_29($0 + 40 | 0);
SiteID__SiteID_28_29($0 + 44 | 0);
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 52 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
SiteID__SiteID_28_29($0 - -64 | 0);
SiteID__SiteID_28_29($0 + 68 | 0);
HEAP32[19359] = 0;
invoke_ii(344, $0 + 72 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($3);
}
SiteIDPair___SiteIDPair_28_29($2);
}
SiteIDPair___SiteIDPair_28_29($0);
__resumeException($1 | 0);
abort();
}
function DynamicArray1_Vector___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
label$1: {
if (!$1) {
DynamicArray1_Vector___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$7 = dlmalloc(Math_imul($1, 12));
if (!$7) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$5 + 4 >> 2] = $1;
HEAP32[$5 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39318, $5);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$9 = ($3 | 0) > 0 ? $3 : 0;
$8 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($9 | 0)) {
if ($8) {
dlfree($8);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $7;
DynamicArray1_Vector___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$4 = Math_imul($2, 12);
$10 = $7 + $4 | 0;
$4 = $4 + $8 | 0;
$6 = HEAP32[$4 >> 2];
$11 = HEAP32[$4 + 4 >> 2];
$12 = $6;
$6 = $10;
HEAP32[$6 >> 2] = $12;
HEAP32[$6 + 4 >> 2] = $11;
HEAP32[$6 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $5 + 16 | 0;
}
function ThumbBaseJointRotation__ThumbBaseJointRotation_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$0 = JointRotation__JointRotation_28Joint__29($0, $1);
HEAP32[$0 >> 2] = 60048;
HEAP32[19359] = 0;
$2 = invoke_ii(69, $0 + 8 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$3 = invoke_ii(69, $0 + 20 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$4 = invoke_ii(69, $0 + 32 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 52 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
$1 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
HEAP32[19359] = 0;
invoke_vi($1 | 0, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function FingerPlayMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = Math_fround(0);
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
label$1: {
if ($2 <= Math_fround(0)) {
break label$1;
}
$4 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if ($4 <= $2) {
break label$1;
}
$4 = Math_fround(($3 ? $2 : Math_fround($4 - $2)) / $4);
$2 = Math_fround(HEAPF32[17667] * HEAPF32[$0 + 544 >> 2]);
$4 = Math_fround($4 * $2);
$2 = SlowInOut_28float_2c_20float_2c_20float_2c_20float_29($4, $2, HEAPF32[17270], HEAPF32[17271]);
label$2: {
if (!HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$2;
}
$3 = HEAP32[$0 + 532 >> 2];
if (!$3) {
break label$2;
}
HEAPF32[$1 + 96 >> 2] = $4;
HEAP32[$1 + 92 >> 2] = $3;
HEAPF32[$1 + 100 >> 2] = $2 * HEAPF32[$0 + 536 >> 2];
HEAPF32[$1 + 104 >> 2] = $2 * HEAPF32[$0 + 540 >> 2];
HEAP16[$1 + 110 >> 1] = HEAPU16[$0 + 550 >> 1];
}
if (!HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
break label$1;
}
$3 = HEAP32[$0 + 528 >> 2];
if (!$3) {
break label$1;
}
HEAPF32[$1 + 208 >> 2] = $4;
HEAP32[$1 + 204 >> 2] = $3;
HEAPF32[$1 + 212 >> 2] = $2 * HEAPF32[$0 + 536 >> 2];
HEAPF32[$1 + 216 >> 2] = $2 * HEAPF32[$0 + 540 >> 2];
HEAP16[$1 + 220 >> 1] = HEAPU16[$0 + 548 >> 1];
}
}
function SeqMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0);
label$1: {
$3 = HEAP32[$0 + 540 >> 2] << 16;
if (!$3) {
break label$1;
}
$6 = $0 + 528 | 0;
$7 = $3 >> 16;
if ($2) {
$4 = Math_fround($1 / HEAPF32[$0 + 40 >> 2]);
HEAPF32[$0 + 44 >> 2] = HEAPF32[$0 + 44 >> 2] * $4;
$3 = 0;
while (1) {
$2 = $3 << 16 >> 16;
if (($7 | 0) <= ($2 | 0)) {
HEAPF32[$0 + 40 >> 2] = $1;
return;
} else {
BasicMovement__scaleDuration_28float_2c_20bool_29(DynamicArrayP_BasicMovement___getElement_28int_29_20const($6, $2), $4, 1);
$3 = $3 + 1 | 0;
continue;
}
}
}
if (($3 | 0) <= 0) {
break label$1;
}
$5 = HEAPF32[$0 + 40 >> 2];
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($6, $7 - 1 | 0);
$8 = HEAPF32[$3 + 40 >> 2];
$4 = HEAPF32[$3 + 44 >> 2];
$5 = Math_fround($1 - $5);
if ($4 < Math_fround(-$5)) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 64 >> 2]]($3, Math_fround($8 - $4), 0);
HEAPF32[$0 + 40 >> 2] = HEAPF32[$0 + 40 >> 2] - $4;
HEAPF32[$0 + 44 >> 2] = HEAPF32[$0 + 44 >> 2] - $4;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1, 1);
return;
}
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 64 >> 2]]($3, Math_fround($5 + $8), 0);
HEAPF32[$0 + 40 >> 2] = $1;
HEAPF32[$0 + 44 >> 2] = $5 + HEAPF32[$0 + 44 >> 2];
}
}
function std____2__system_error____init_28std____2__error_code_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (std____2__error_code__operator_20bool_28_29_20const($1)) {
if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($2)) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_20const__29($2, 21255);
}
std____2__error_code__message_28_29_20const($3, $1);
HEAP32[19359] = 0;
invoke_iii(928, $2 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $2);
__stack_pointer = $3 + 16 | 0;
return;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
__resumeException($2 | 0);
abort();
}
function normal_scanDecl($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$6 = -1;
label$1: {
label$2: {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
label$3: {
label$4: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 20 | 0) {
case 7:
return normal_scanComment($0, $1 + 1 | 0, $2, $3);
case 0:
HEAP32[$3 >> 2] = $1 + 1;
return 33;
case 2:
case 4:
break label$4;
default:
break label$3;
}
}
label$7: {
while (1) {
$4 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
label$9: {
$5 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
switch ($5 - 21 | 0) {
case 0:
break label$1;
case 2:
case 4:
case 5:
case 6:
case 7:
case 8:
break label$3;
case 1:
case 3:
continue;
case 9:
break label$9;
default:
break label$7;
}
}
break;
}
$5 = $4;
$4 = $4 + 2 | 0;
if (($4 | 0) == ($2 | 0)) {
break label$2;
}
$2 = HEAPU8[(HEAPU8[$5 + 2 | 0] + $0 | 0) + 72 | 0];
if ($2 >>> 0 > 30) {
break label$1;
}
if (1 << $2 & 1075840512) {
break label$3;
}
break label$1;
}
if ($5 - 9 >>> 0 < 2) {
break label$1;
}
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
return $6;
}
HEAP32[$3 >> 2] = $1;
return 16;
}
function __wasm_call_ctors() {
_GLOBAL__sub_I_SSMorph_cpp();
_GLOBAL__sub_I_SSPRSet_cpp();
_GLOBAL__sub_I_Basics_cpp();
_GLOBAL__sub_I_DynamicStrings_cpp();
_GLOBAL__sub_I_Filepath_cpp();
_GLOBAL__sub_I_Hash_cpp();
_GLOBAL__sub_I_IO_cpp();
_GLOBAL__sub_I_SAMPA_cpp();
_GLOBAL__sub_I_Version_cpp();
_GLOBAL__sub_I_getopts_cpp();
_GLOBAL__sub_I_AffineTransform_cpp();
_GLOBAL__sub_I_Humanoid_cpp();
_GLOBAL__sub_I_MiscMath_cpp();
_GLOBAL__sub_I_Quaternion_cpp();
_GLOBAL__sub_I_SphereInterpolation_cpp();
_GLOBAL__sub_I_Test_cpp();
_GLOBAL__sub_I_Transform_cpp();
_GLOBAL__sub_I_VRMLRotation_cpp();
_GLOBAL__sub_I_Vector_cpp();
_GLOBAL__sub_I_YXZRotation_cpp();
_GLOBAL__sub_I_ArmAnimator_cpp();
_GLOBAL__sub_I_Controller_cpp();
_GLOBAL__sub_I_FaceAnimator_cpp();
_GLOBAL__sub_I_HanimAnimator_cpp();
_GLOBAL__sub_I_Joint_cpp();
_GLOBAL__sub_I_JointRotation_cpp();
_GLOBAL__sub_I_Segment_cpp();
_GLOBAL__sub_I_Site_cpp();
_GLOBAL__sub_I_SkelTopology_cpp();
_GLOBAL__sub_I_Tables_cpp();
_GLOBAL__sub_I_Trajectory_cpp();
_GLOBAL__sub_I_Gesture_cpp();
_GLOBAL__sub_I_GestureParser_cpp();
_GLOBAL__sub_I_Handshape_cpp();
_GLOBAL__sub_I_Movement_cpp();
_GLOBAL__sub_I_OneHGesture_cpp();
_GLOBAL__sub_I_SiGML_cpp();
_GLOBAL__sub_I_XMLWrapper_cpp();
_GLOBAL__sub_I_AnimgenInstance_cpp();
_GLOBAL__sub_I_AnimgenOptions_cpp();
_GLOBAL__sub_I_animgenlib_cpp();
_GLOBAL__sub_I_animgenlibglobals_cpp();
_GLOBAL__sub_I_animgenlite_cpp();
init_pthread_self();
}
function SiGMLConstellation__SetUnusedHand_28OneHAbstractPosture__2c_20bool_29($0, $1, $2) {
var $3 = 0;
$3 = SiteIDPair__defined_28_29_20const($0);
label$1: {
if ($2) {
if ($3) {
$3 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[$0 >> 2];
HEAP32[$0 + 28 >> 2] = $2;
HEAP32[$0 + 32 >> 2] = $3;
HEAP16[$0 + 44 >> 1] = HEAPU16[$0 + 12 >> 1];
HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP8[$0 + 46 | 0] = HEAPU8[$0 + 14 | 0];
}
$2 = HEAP32[$1 + 8 >> 2];
$3 = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 16 >> 2] = $3;
HEAP32[$0 + 20 >> 2] = $2;
HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP16[$0 + 40 >> 1] = HEAPU16[$1 + 16 >> 1];
HEAP8[$0 + 42 | 0] = HEAPU8[$1 + 18 | 0];
break label$1;
}
if ($3) {
$3 = HEAP32[$0 + 4 >> 2];
$2 = HEAP32[$0 >> 2];
HEAP32[$0 + 16 >> 2] = $2;
HEAP32[$0 + 20 >> 2] = $3;
HEAP16[$0 + 40 >> 1] = HEAPU16[$0 + 12 >> 1];
HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP8[$0 + 42 | 0] = HEAPU8[$0 + 14 | 0];
}
$2 = HEAP32[$1 + 8 >> 2];
$3 = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 28 >> 2] = $3;
HEAP32[$0 + 32 >> 2] = $2;
HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP16[$0 + 44 >> 1] = HEAPU16[$1 + 16 >> 1];
HEAP8[$0 + 46 | 0] = HEAPU8[$1 + 18 | 0];
}
HEAP16[$0 >> 1] = HEAPU16[35152];
HEAP8[$0 + 2 | 0] = HEAPU8[70306];
HEAP16[$0 + 4 >> 1] = HEAPU16[35152];
HEAP8[$0 + 6 | 0] = HEAPU8[70306];
HEAP16[$0 + 12 >> 1] = HEAPU16[35152];
HEAP8[$0 + 14 | 0] = HEAPU8[70306];
}
function Trajectory__DestroyTrajectories_28_29() {
var $0 = 0;
$0 = HEAP32[17580];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17580] = 0;
}
$0 = HEAP32[17581];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17581] = 0;
}
label$3: {
if (HEAPU8[70316]) {
break label$3;
}
$0 = HEAP32[17582];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17582] = 0;
}
$0 = HEAP32[17583];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17583] = 0;
}
$0 = HEAP32[17584];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17584] = 0;
}
$0 = HEAP32[17585];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17585] = 0;
}
$0 = HEAP32[17586];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17586] = 0;
}
$0 = HEAP32[17587];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17587] = 0;
}
$0 = HEAP32[17588];
if ($0) {
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17588] = 0;
}
$0 = HEAP32[17589];
if (!$0) {
break label$3;
}
Trajectory___Trajectory_28_29($0);
operator_20delete_28void__29($0);
HEAP32[17589] = 0;
}
}
function CompoundMovement__CompoundMovement_28CompoundMovement_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$3 >> 2] = 61436;
HEAP32[19359] = 0;
$5 = invoke_ii(380, $3 + 528 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($2 | 0) != 1) {
CompoundMovement__operator__28CompoundMovement_20const__29($3, $1);
$6 = $1 + 528 | 0;
$0 = 0;
while (1) {
if (HEAP32[$1 + 540 >> 2] <= ($0 | 0)) {
break label$1;
}
label$5: {
$2 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($6, $0);
if (!$2) {
break label$5;
}
$4 = HEAP32[HEAP32[$2 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
$4 = invoke_ii($4 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
invoke_viii(481, $5 | 0, $0 | 0, $4 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$5;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($5);
break label$2;
}
$0 = $0 + 1 | 0;
continue;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
}
BasicMovement___BasicMovement_28_29($3);
__resumeException($0 | 0);
abort();
}
return $3;
}
function RepeatMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = HEAP32[$1 + 40 >> 2];
HEAP32[$0 + 528 >> 2] = $3;
$6 = HEAP32[$1 + 44 >> 2];
HEAP32[$0 + 532 >> 2] = $6;
$2 = Math_imul($3, 24) + 70080 | 0;
$4 = HEAP32[$2 >> 2];
$5 = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 568 >> 2] = $4;
HEAP32[$0 + 572 >> 2] = $5;
$4 = HEAP32[$2 + 12 >> 2];
$5 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 576 >> 2] = $5;
HEAP32[$0 + 580 >> 2] = $4;
$5 = HEAP32[$2 + 20 >> 2];
$4 = HEAP32[$2 + 16 >> 2];
HEAP32[$0 + 584 >> 2] = $4;
HEAP32[$0 + 588 >> 2] = $5;
label$1: {
if (!$6) {
break label$1;
}
if (($3 | 0) == ($6 | 0)) {
$2 = $0 + 568 | 0;
HEAP16[$2 >> 1] = HEAPU16[$0 + 568 >> 1] + 1;
break label$1;
}
UNIMPLEMENTED_28char_20const__29(5921);
}
$3 = HEAP32[$1 + 48 >> 2];
HEAP32[$0 + 536 >> 2] = $3;
$2 = HEAP32[$1 + 52 >> 2];
HEAP32[$0 + 540 >> 2] = $2 ? $2 : $3 ? 3 : $2;
$3 = $0 + 544 | 0;
Direction3__operator__28Direction3_20const__29($3, $1 + 56 | 0);
$2 = HEAP32[$1 + 68 >> 2];
HEAP32[$0 + 556 >> 2] = $2;
label$3: {
if ($2) {
break label$3;
}
if (!Direction3__defined_28_29_20const($3)) {
break label$3;
}
HEAP32[$0 + 556 >> 2] = 3;
}
$2 = HEAP32[$1 + 72 >> 2];
HEAP32[$0 + 560 >> 2] = $2;
$1 = HEAP32[$1 + 76 >> 2];
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 11;
HEAP32[$0 + 564 >> 2] = $1 ? $1 : $2 ? 3 : $1;
}
function OneHAbstractPosture__OneHAbstractPosture_28bool_2c_20Gesture__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
HEAP8[$0 | 0] = $1;
$4 = HEAP32[17576];
HEAP32[$3 + 24 >> 2] = $4;
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $4;
$6 = SiteIDPair__SiteIDPair_28SiteID_2c_20SiteID_29($0 + 4 | 0, $3 + 12 | 0, $3 + 8 | 0);
HEAP32[$0 + 16 >> 2] = HEAP32[17576];
Direction3__Direction3_28_29($0 + 20 | 0);
Direction2__Direction2_28_29($0 + 32 | 0);
HEAP16[$0 + 40 >> 1] = 0;
PostureChangeTiming__PostureChangeTiming_28float_2c_20float_29($0 + 44 | 0, Math_fround(-2), Math_fround(-2));
HEAP32[$0 + 56 >> 2] = 0;
HEAP8[$0 + 52 | 0] = 1;
ElbowDisplacement__ElbowDisplacement_28_29($0 + 60 | 0);
HEAP32[19359] = 0;
$5 = invoke_ii(64, 240) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($4 | 0) != 1) {
HEAP32[19359] = 0;
$4 = invoke_iiii(445, $5 | 0, $1 | 0, $2 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 56 >> 2] = $4;
__stack_pointer = $3 + 32 | 0;
return $0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
}
SiteIDPair___SiteIDPair_28_29($6);
__resumeException($0 | 0);
abort();
}
function QuaternionController__XnewTime_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0;
if (HEAP32[$0 + 448 >> 2] == 1) {
$2 = HEAP32[$0 + 552 >> 2];
$3 = HEAP32[$0 + 548 >> 2];
HEAP32[$0 + 532 >> 2] = $3;
HEAP32[$0 + 536 >> 2] = $2;
$3 = HEAP32[$0 + 560 >> 2];
$2 = HEAP32[$0 + 556 >> 2];
HEAP32[$0 + 540 >> 2] = $2;
HEAP32[$0 + 544 >> 2] = $3;
return;
}
$4 = HEAPF32[$0 + 480 >> 2];
label$2: {
if ($4 == Math_fround(-1)) {
$2 = HEAP32[$0 + 552 >> 2];
$3 = HEAP32[$0 + 548 >> 2];
HEAP32[$0 + 532 >> 2] = $3;
HEAP32[$0 + 536 >> 2] = $2;
$3 = HEAP32[$0 + 560 >> 2];
$2 = HEAP32[$0 + 556 >> 2];
HEAP32[$0 + 540 >> 2] = $2;
HEAP32[$0 + 544 >> 2] = $3;
break label$2;
}
label$4: {
$4 = Math_fround($1 - $4);
$5 = HEAPF32[$0 + 620 >> 2];
if ($4 <= $5 | $5 == Math_fround(0)) {
break label$4;
}
$6 = +Math_fround($4 / $5) + .99;
label$5: {
if (Math_abs($6) < 2147483648) {
$2 = ~~$6;
break label$5;
}
$2 = -2147483648;
}
if (($2 | 0) <= 1) {
break label$4;
}
$4 = Math_fround($4 / Math_fround($2 | 0));
while (1) {
if (($2 | 0) == ($3 | 0)) {
break label$2;
}
QuaternionController__microUpdate_28float_29($0, $4);
$3 = $3 + 1 | 0;
continue;
}
}
QuaternionController__microUpdate_28float_29($0, $4);
}
HEAPF32[$0 + 480 >> 2] = $1;
}
function ANMtoATM_28AtomicNonmanual_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
switch (HEAP32[$0 >> 2] - 9 | 0) {
case 2:
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
break label$3;
}
$1 = operator_20new_28unsigned_20long_29(52);
$2 = HEAP16[$0 + 4 >> 1];
HEAP32[19359] = 0;
invoke_iiifffi(455, $1 | 0, $2 | 0, Math_fround(Math_fround(1)), Math_fround(Math_fround(0)), Math_fround(Math_fround(0)), 2673) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
break label$2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
case 0:
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
break label$3;
}
break label$1;
default:
break label$4;
}
}
$1 = HEAP16[$0 + 4 >> 1];
$1 = DynamicArray1_AbstractTimedMorph____getElement_28int_29_20const(HEAP32[17653], $1);
if (!$1) {
break label$1;
}
}
$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0;
if (!$1) {
break label$1;
}
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, HEAPF32[$0 + 12 >> 2], HEAPF32[$0 + 16 >> 2], HEAPF32[$0 + 20 >> 2]);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAPF32[$0 + 24 >> 2]);
return $1 | 0;
}
return 0;
}
function VectorController2__newTime_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$7 = __stack_pointer - 32 | 0;
__stack_pointer = $7;
$3 = HEAPF32[$0 + 144 >> 2];
if (!($3 > $1)) {
$2 = $0 + 52 | 0;
$4 = $0 + 28 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($2, $0 + 16 | 0, $4);
$3 = Math_fround($1 - $3);
if (HEAP32[$0 + 112 >> 2] == 3) {
compute_k1k2_28float__2c_20float__2c_20float_2c_20float_29($0 + 132 | 0, $0 + 136 | 0, Math_fround(HEAPF32[$0 + 116 >> 2] * scaling_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 124 >> 2], Vector__length_28_29_20const($2), HEAPF32[$0 + 8 >> 2])), HEAPF32[$0 + 120 >> 2]);
}
$5 = $0 - -64 | 0;
Vector__setScale_28Vector_20const__2c_20float_29($5, $2, HEAPF32[$0 + 132 >> 2]);
$6 = $0 + 88 | 0;
$2 = $0 + 76 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($6, $5, $2);
$5 = $0 + 100 | 0;
Vector__setScale_28Vector_20const__2c_20float_29($5, $6, Math_fround(HEAPF32[$0 + 136 >> 2] / HEAPF32[$0 + 140 >> 2]));
$6 = Vector__Vector_28Vector_20const__29($7 + 16 | 0, $2);
Vector__setScale_28float_29($6, $3);
Vector__setAdd_28Vector_20const__29($4, $6);
$4 = Vector__Vector_28Vector_20const__29($7, $5);
Vector__setScale_28float_29($4, $3);
Vector__setAdd_28Vector_20const__29($2, $4);
HEAPF32[$0 + 144 >> 2] = $1;
}
__stack_pointer = $7 + 32 | 0;
}
function SphereInterpolator__setFrom_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_20const__29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$7 = __stack_pointer - 96 | 0;
__stack_pointer = $7;
OctantInterpolator__OctantInterpolator_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($7 + 8 | 0, 68056, 68032, 68044, $5, $1, $3);
__memcpy($0 + 252 | 0, $7 + 8 | 0, 84);
OctantInterpolator__OctantInterpolator_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($7 + 8 | 0, 68056, 68080, 68032, $5, $4, $1);
__memcpy($0 + 168 | 0, $7 + 8 | 0, 84);
OctantInterpolator__OctantInterpolator_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($7 + 8 | 0, 68056, 68044, 68068, $5, $3, $2);
__memcpy($0 + 84 | 0, $7 + 8 | 0, 84);
OctantInterpolator__OctantInterpolator_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($7 + 8 | 0, 68056, 68068, 68080, $5, $2, $4);
wasm2js_i32$0 = __memcpy($0, $7 + 8 | 0, 84), wasm2js_f32$0 = HEAPF32[$6 >> 2], 
HEAPF32[wasm2js_i32$0 + 336 >> 2] = wasm2js_f32$0;
__stack_pointer = $7 + 96 | 0;
}
function OctantInterpolator__interpolate_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0;
$5 = __stack_pointer - 48 | 0;
__stack_pointer = $5;
$3 = OctantInterpolator__zeroComponent_28Vector_20const__29_20const($0, $1);
$4 = OctantInterpolator__oneComponent_28Vector_20const__29_20const($0, $1);
$7 = OctantInterpolator__poleComponent_28Vector_20const__29_20const($0, $1);
$6 = atan2f($4, $3);
$3 = atan2f($7, Math_fround(Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)))));
$1 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($5 + 32 | 0, $0, $6, 1);
$8 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($5 + 16 | 0, $0 + 24 | 0, Math_fround(-$3), 1);
$4 = HEAPF32[16989];
$3 = Math_fround($3 / $4);
$4 = Math_fround($6 / $4);
$9 = Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($5, $0 + 12 | 0, Math_fround(Math_fround(Math_fround($3 * HEAPF32[$0 + 72 >> 2]) * Math_fround(Math_fround(1) - $4)) + Math_fround($4 * Math_fround(Math_fround(HEAPF32[$0 + 80 >> 2] * $3) + HEAPF32[$0 + 76 >> 2]))), 1);
Quaternion__setCompose_28Quaternion_20const__29($1, $8);
Quaternion__setCompose_28Quaternion_20const__29($1, $9);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($1, $0 + 48 | 0, $2);
__stack_pointer = $5 + 48 | 0;
}
function normal_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
label$1: {
label$2: {
while (1) {
label$4: {
$4 = HEAPU8[$1 | 0];
$3 = HEAPU8[($4 + $0 | 0) + 72 | 0];
label$5: {
if (!($3 >>> 0 > 29 | !(1 << $3 & 792723456))) {
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
break label$5;
}
label$7: {
switch ($3 - 5 | 0) {
case 2:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$2 = $2 + 1 | 0;
$4 = HEAPU8[$1 + 1 | 0];
$1 = $1 + 1 | 0;
case 1:
if (HEAPU8[$2 | 0] != ($4 | 0)) {
break label$1;
}
$2 = $2 + 1 | 0;
$4 = HEAPU8[$1 + 1 | 0];
$1 = $1 + 1 | 0;
break;
case 0:
break label$7;
default:
break label$4;
}
}
$3 = 0;
if (HEAPU8[$2 | 0] != ($4 | 0) | HEAPU8[$1 + 1 | 0] != HEAPU8[$2 + 1 | 0]) {
break label$2;
}
$1 = $1 + 1 | 0;
$2 = $2 + 1 | 0;
}
$1 = $1 + 1 | 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
$3 = 1;
$1 = HEAPU8[$2 | 0];
if (($4 | 0) == ($1 | 0)) {
break label$2;
}
$1 = HEAPU8[($0 + $1 | 0) + 72 | 0];
if ($1 >>> 0 <= 29) {
$3 = 0;
if (1 << $1 & 792723680) {
break label$2;
}
}
$3 = 1;
}
return $3 | 0;
}
return 0;
}
function Joint__computeGlobalFromLocalTransforms_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$2 = HEAP32[$0 + 8 >> 2];
label$1: {
if (!$2) {
$1 = HEAP32[$0 + 44 >> 2];
$3 = HEAP32[$0 + 40 >> 2];
HEAP32[$0 + 68 >> 2] = $3;
HEAP32[$0 + 72 >> 2] = $1;
HEAP32[$0 + 92 >> 2] = HEAP32[$0 - -64 >> 2];
$3 = HEAP32[$0 + 60 >> 2];
$1 = HEAP32[$0 + 56 >> 2];
HEAP32[$0 + 84 >> 2] = $1;
HEAP32[$0 + 88 >> 2] = $3;
$1 = HEAP32[$0 + 52 >> 2];
$3 = HEAP32[$0 + 48 >> 2];
HEAP32[$0 + 76 >> 2] = $3;
HEAP32[$0 + 80 >> 2] = $1;
break label$1;
}
$3 = HEAP32[$2 + 72 >> 2];
$1 = HEAP32[$2 + 68 >> 2];
HEAP32[$0 + 68 >> 2] = $1;
HEAP32[$0 + 72 >> 2] = $3;
HEAP32[$0 + 92 >> 2] = HEAP32[$2 + 92 >> 2];
$1 = HEAP32[$2 + 88 >> 2];
$3 = HEAP32[$2 + 84 >> 2];
HEAP32[$0 + 84 >> 2] = $3;
HEAP32[$0 + 88 >> 2] = $1;
$3 = HEAP32[$2 + 80 >> 2];
$1 = HEAP32[$2 + 76 >> 2];
HEAP32[$0 + 76 >> 2] = $1;
HEAP32[$0 + 80 >> 2] = $3;
Transform__setCompose_28Transform_20const__29($0 + 68 | 0, $0 + 40 | 0);
}
label$3: {
$1 = HEAP32[$0 + 12 >> 2];
if (!$1) {
break label$3;
}
$2 = 0;
$1 = HEAP32[$1 + 12 >> 2];
$1 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($2 | 0) == ($1 | 0)) {
break label$3;
}
Joint__computeGlobalFromLocalTransforms_28_29(DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 12 >> 2], $2));
$2 = $2 + 1 | 0;
continue;
}
}
}
function GestureGeometry__GestureGeometry_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 272 >> 2] = 0;
HEAP32[$0 + 276 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 1065353216;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
$2 = $0 + 472 | 0;
$1 = $0 + 328 | 0;
while (1) {
$1 = WristWaggling__WristWaggling_28_29($1) + 24 | 0;
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
FingerplayParams__FingerplayParams_28_29($2);
$2 = 0;
while (1) {
if (($3 | 0) == 5) {
$1 = 0;
while (1) {
if (($2 | 0) == 3) {
while (1) {
if (($1 | 0) != 12) {
HEAP32[(($1 << 2) + $0 | 0) + 280 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
} else {
HEAP32[(($2 << 2) + $0 | 0) + 240 >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
} else {
$1 = ($3 << 2) + $0 | 0;
HEAP32[$1 + 252 >> 2] = 0;
HEAP32[$1 + 220 >> 2] = 0;
HEAP32[$1 + 200 >> 2] = 0;
HEAP32[$1 + 180 >> 2] = 0;
HEAP32[$1 + 160 >> 2] = 0;
HEAP32[$1 + 140 >> 2] = 0;
HEAP32[$1 + 120 >> 2] = 0;
HEAP32[$1 + 100 >> 2] = 0;
HEAP32[$1 + 80 >> 2] = 0;
HEAP32[$1 + 60 >> 2] = 0;
HEAP32[$1 + 40 >> 2] = 0;
$3 = $3 + 1 | 0;
continue;
}
break;
}
return $0;
}
function __rem_pio2f($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$2 = $5 & 2147483647;
label$1: {
if ($2 >>> 0 <= 1305022426) {
$6 = +$0;
$3 = $6 * .6366197723675814 + 6755399441055744 + -6755399441055744;
$7 = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
HEAPF64[$1 >> 3] = $7;
$5 = $7 < -.7853981852531433;
if (Math_abs($3) < 2147483648) {
$2 = ~~$3;
} else {
$2 = -2147483648;
}
if ($5) {
$3 = $3 + -1;
HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
$2 = $2 - 1 | 0;
break label$1;
}
if (!($7 > .7853981852531433)) {
break label$1;
}
$3 = $3 + 1;
HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
$2 = $2 + 1 | 0;
break label$1;
}
if ($2 >>> 0 >= 2139095040) {
HEAPF64[$1 >> 3] = Math_fround($0 - $0);
$2 = 0;
break label$1;
}
$8 = ($2 >>> 23 | 0) - 150 | 0;
HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $2 - ($8 << 23) | 0), wasm2js_scratch_load_f32());
$2 = __rem_pio2_large($4 + 8 | 0, $4, $8, 1, 0);
$3 = HEAPF64[$4 >> 3];
if (($5 | 0) < 0) {
HEAPF64[$1 >> 3] = -$3;
$2 = 0 - $2 | 0;
break label$1;
}
HEAPF64[$1 >> 3] = $3;
}
__stack_pointer = $4 + 16 | 0;
return $2;
}
function HanimAnimationRecord__HanimAnimationRecord_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP8[$0 + 24 | 0] = 1;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
memset($0 + 28 | 0, 0, 53);
HEAP8[$0 + 92 | 0] = 0;
HEAP32[$0 + 84 >> 2] = 0;
HEAP32[$0 + 88 >> 2] = 0;
HEAP32[$0 + 96 >> 2] = 0;
HEAP32[$0 + 100 >> 2] = 0;
HEAP32[$0 + 104 >> 2] = 0;
HEAP32[$0 + 108 >> 2] = 0;
HEAP32[$0 + 112 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = -1;
$3 = AvatarJointRotationIndex__AvatarJointRotationIndex_28_29($0 + 120 | 0);
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[19359] = 0;
$2 = invoke_i(130) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 344 >> 2] = $2;
HEAP32[19359] = 0;
$2 = invoke_i(130) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP8[$0 + 81 | 0] = 1;
HEAP8[$0 + 82 | 0] = 2;
HEAP32[$0 + 348 >> 2] = $2;
HEAP8[$0 + 83 | 0] = 0;
$1 = HEAP32[$0 + 344 >> 2];
HEAP32[19359] = 0;
invoke_vi(131, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
AvatarJointRotationIndex___AvatarJointRotationIndex_28_29($3);
__resumeException($0 | 0);
abort();
}
function OneHAbstractPosture__defaultHandstuffFrom_28OneHAbstractPosture_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = $0 + 20 | 0;
if (Direction3__isUndef_28_29_20const($2)) {
Direction3__operator__28Direction3_20const__29($2, $1 + 20 | 0);
HEAP8[$0 + 40 | 0] = HEAPU8[$1 + 40 | 0];
}
$2 = $0 + 32 | 0;
if (Direction2__isUndef_28_29_20const($2)) {
Direction2__operator__28Direction2_20const__29($2, $1 + 32 | 0);
HEAP8[$0 + 41 | 0] = HEAPU8[$1 + 41 | 0];
}
label$3: {
$2 = HEAP32[$0 + 56 >> 2];
label$4: {
if (!$2 | !HEAP32[$1 + 56 >> 2]) {
break label$4;
}
if (!Handshape__isUndef_28_29_20const($2)) {
break label$4;
}
__memcpy(HEAP32[$0 + 56 >> 2], HEAP32[$1 + 56 >> 2], 217);
$2 = HEAP32[HEAP32[$1 + 56 >> 2] + 220 >> 2];
if (!$2) {
break label$4;
}
$3 = HEAP32[HEAP32[$0 + 56 >> 2] + 220 >> 2];
if (!$3) {
$3 = operator_20new_28unsigned_20long_29(220);
HEAP32[19359] = 0;
$2 = invoke_ii(435, $3 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$3;
}
HEAP32[HEAP32[$0 + 56 >> 2] + 220 >> 2] = $2;
$3 = HEAP32[HEAP32[$0 + 56 >> 2] + 220 >> 2];
$2 = HEAP32[HEAP32[$1 + 56 >> 2] + 220 >> 2];
}
__memcpy($3, $2, 217);
}
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function StaticArmData__initialise_28bool_2c_20HanimAvatar_20const__29($0, $1, $2) {
var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
HEAP8[$0 | 0] = $1;
$1 = HEAP32[$2 + 72 >> 2] + ($1 << 4) | 0;
$9 = HEAP32[$1 + 32 >> 2];
$10 = HEAP32[$1 + 24 >> 2];
$7 = HEAP32[$1 + 28 >> 2] + 68 | 0;
$1 = Vector__Vector_28Vector_20const__29_1($4 + 16 | 0, $7);
Vector__setSubtract_28Vector_20const__29_1($1, $10 + 68 | 0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Vector__length_28_29_20const($1), HEAPF32[wasm2js_i32$0 + 4 >> 2] = wasm2js_f32$0;
Vector__setFrom_28Vector_20const__29($1, Vector__Vector_28Vector_20const__29_1($4, $9 + 68 | 0));
Vector__setSubtract_28Vector_20const__29_1($1, $7);
$5 = Vector__length_28_29_20const($1);
HEAPF32[$0 + 8 >> 2] = $5;
$8 = HEAPF32[$0 + 4 >> 2];
$3 = Math_fround($8 / $5);
HEAPF32[$0 + 12 >> 2] = $3;
$6 = HEAPF32[HEAP32[$2 + 228 >> 2] >> 2];
HEAPF32[$0 + 16 >> 2] = $6;
$3 = Math_fround(Math_fround(Math_fround($6 * $6) * Math_fround(.5)) / Math_fround(Math_fround($3 + Math_fround(1)) * Math_fround(Math_fround(Math_fround(1) / $3) + Math_fround(1))));
HEAPF32[$0 + 20 >> 2] = $3;
HEAPF32[$0 + 24 >> 2] = Math_fround($5 + $8) * Math_fround(Math_fround(1) - $3);
__stack_pointer = $4 + 32 | 0;
}
function ProcessAtomicXMLMorph_28XMLCell__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$3 = XMLCell__attrib_string_28char_20const__29($0, 9332);
if (!$3) {
$3 = XMLCell__attrib_string_28char_20const__29($0, 2361);
}
label$2: {
label$3: {
if ($1) {
$4 = RegisterMorph_28char_20const__29($3);
break label$3;
}
$4 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18845], $3);
if (($4 | 0) != -1) {
break label$3;
}
LogTime_28_29();
HEAP32[$2 + 16 >> 2] = $3;
eprintf_28char_20const__2c_20____29(41517, $2 + 16 | 0);
$1 = 0;
break label$2;
}
$5 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2184, Math_fround(1));
$6 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2169, Math_fround(0));
$7 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 2181, Math_fround(0));
$1 = XMLCell__attrib_string_28char_20const__29($0, 7298);
if (!$1) {
LogTime_28_29();
HEAP32[$2 >> 2] = $3;
eprintf_28char_20const__2c_20____29(36370, $2);
$1 = 0;
break label$2;
}
$1 = MakeAtomicTimedMorph_28int_2c_20float_2c_20float_2c_20float_2c_20char_20const__29($4, $5, $6, $7, $1);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 52 >> 2]]($1, $0);
}
__stack_pointer = $2 + 32 | 0;
return $1;
}
function BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, $1, $2) {
var $3 = 0;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 >> 2] = 61628;
MannerFlags__MannerFlags_28_29($0 + 12 | 0);
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
HEAP16[$0 + 32 >> 1] = 0;
HEAP32[$0 + 56 >> 2] = 1065353216;
HEAP32[$0 + 48 >> 2] = 1065353216;
HEAP32[$0 + 52 >> 2] = 0;
$3 = TwoHConcretePostureChange__TwoHConcretePostureChange_28_29($0 + 60 | 0);
$2 = 34474;
label$1: {
label$2: {
label$3: {
label$4: {
$1 = HEAP32[$0 + 8 >> 2];
switch ($1 - 1 | 0) {
case 1:
break label$3;
case 0:
break label$4;
default:
break label$2;
}
}
$2 = 34526;
}
HEAP32[19359] = 0;
invoke_vii(71, $2 | 0, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$1 = AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 8);
HEAP32[19359] = 0;
invoke_viii(270, $1 | 0, 60484, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
abort();
}
return $0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHConcretePostureChange___TwoHConcretePostureChange_28_29($3);
__resumeException($0 | 0);
abort();
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____vmakeHash_28HashAny_char_20const__2c_20int___2c_20char_20const__2c_20void__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $2;
$6 = 1;
if ($1) {
$2 = HEAP32[$3 + 12 >> 2];
$4 = 1;
while (1) {
$6 = $4;
$4 = $4 + 1 | 0;
$5 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
if ($5) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$6 = invoke_iiii(712, $4 | 0, $0 | 0, Math_imul($6, 3) | 1) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2];
if ($1) {
$4 = HEAP32[$3 + 12 >> 2];
$5 = $4 + 4 | 0;
while (1) {
HEAP32[$3 + 12 >> 2] = $5;
HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____addItem_28char_20const__2c_20HashAny_char_20const__2c_20int___29($6, $1, HEAP32[$4 >> 2]);
$2 = HEAP32[$3 + 12 >> 2];
$4 = $2 + 4 | 0;
HEAP32[$3 + 12 >> 2] = $4;
$5 = $2 + 8 | 0;
$1 = HEAP32[$2 >> 2];
if ($1) {
continue;
}
break;
}
}
__stack_pointer = $3 + 16 | 0;
return $6;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($3 | 0);
abort();
}
function AtomicTimedMorph__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 96 | 0;
__stack_pointer = $2;
if ($1) {
$3 = HEAP32[$0 + 24 >> 2];
$3 = InvertibleDynamicStringArray__valueFromIndex_28int_29_20const(HEAP32[18845], $3);
$4 = HEAPF32[$0 + 32 >> 2];
$5 = HEAPF32[$0 + 28 >> 2];
$6 = HEAPF32[$0 + 36 >> 2];
$7 = HEAPU8[$0 + 48 | 0];
$8 = HEAPF32[$0 + 4 >> 2];
$9 = HEAP32[$0 + 40 >> 2];
$10 = HEAPF32[$0 + 8 >> 2];
$11 = HEAPF32[$0 + 12 >> 2];
$12 = HEAP32[$0 + 44 >> 2];
$13 = HEAPU8[$0 + 49 | 0];
HEAPF64[$2 + 80 >> 3] = HEAPF32[$0 + 16 >> 2];
HEAP32[$2 + 72 >> 2] = $12;
HEAPF64[$2 - -64 >> 3] = $11;
HEAPF64[$2 + 56 >> 3] = $10;
HEAP32[$2 + 48 >> 2] = $9;
HEAPF64[$2 + 40 >> 3] = $8;
wasm2js_i32$0 = $2, wasm2js_i32$1 = AnchorChar_28bool_29($7) & 255, HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
HEAPF64[$2 + 24 >> 3] = $6;
HEAPF64[$2 + 16 >> 3] = $5;
wasm2js_i32$0 = $2, wasm2js_i32$1 = AnchorChar_28bool_29($13) & 255, HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
HEAPF64[$2 + 8 >> 3] = $4;
HEAP32[$2 >> 2] = $3;
__small_fprintf($1, 14941, $2);
}
__stack_pointer = $2 + 96 | 0;
}
function FingerBaseJointRotation__FingerBaseJointRotation_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$0 = JointRotation__JointRotation_28Joint__29($0, $1);
HEAP32[$0 >> 2] = 59944;
HEAP32[19359] = 0;
$2 = invoke_ii(69, $0 + 8 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$3 = invoke_ii(69, $0 + 20 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$4 = invoke_ii(69, $0 + 32 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$1 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
HEAP32[19359] = 0;
invoke_vi($1 | 0, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $4 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function ThumbBending__Between_28ThumbBending_20const__2c_20float_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = HEAPF32[$1 >> 2];
$4 = HEAPF32[$0 >> 2];
label$1: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$1;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 >> 2] = $3;
}
$3 = HEAPF32[$1 + 4 >> 2];
$4 = HEAPF32[$0 + 4 >> 2];
label$3: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$3;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 4 >> 2] = $3;
}
$3 = HEAPF32[$1 + 8 >> 2];
$4 = HEAPF32[$0 + 8 >> 2];
label$5: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$5;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 8 >> 2] = $3;
}
$3 = HEAPF32[$1 + 12 >> 2];
$4 = HEAPF32[$0 + 12 >> 2];
label$7: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$7;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 12 >> 2] = $3;
}
$3 = HEAPF32[$1 + 16 >> 2];
$4 = HEAPF32[$0 + 16 >> 2];
label$9: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$9;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 16 >> 2] = $3;
}
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________construct_at_end_28unsigned_20long_2c_20SSMorph__20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$1 = std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_______ConstructTransaction___ConstructTransaction_28SSMorph____2c_20unsigned_20long_29($4, $0 + 8 | 0, $1);
$3 = HEAP32[$1 >> 2];
label$1: {
while (1) {
if (HEAP32[$1 + 4 >> 2] == ($3 | 0)) {
break label$1;
}
$3 = std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________alloc_28_29($0);
$5 = HEAP32[$1 >> 2];
$5 = SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($5);
HEAP32[19359] = 0;
invoke_viii(18, $3 | 0, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
$3 = HEAP32[$1 >> 2] + 4 | 0;
HEAP32[$1 >> 2] = $3;
continue;
}
break;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_______ConstructTransaction____ConstructTransaction_28_29($1);
__resumeException($3 | 0);
abort();
}
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_______ConstructTransaction____ConstructTransaction_28_29($1);
__stack_pointer = $4 + 16 | 0;
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________construct_at_end_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$1 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_______ConstructTransaction___ConstructTransaction_28SSPRSet____2c_20unsigned_20long_29($4, $0 + 8 | 0, $1);
$3 = HEAP32[$1 >> 2];
label$1: {
while (1) {
if (HEAP32[$1 + 4 >> 2] == ($3 | 0)) {
break label$1;
}
$3 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________alloc_28_29($0);
$5 = HEAP32[$1 >> 2];
$5 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($5);
HEAP32[19359] = 0;
invoke_viii(9, $3 | 0, $5 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
$3 = HEAP32[$1 >> 2] + 4 | 0;
HEAP32[$1 >> 2] = $3;
continue;
}
break;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_______ConstructTransaction____ConstructTransaction_28_29($1);
__resumeException($3 | 0);
abort();
}
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_______ConstructTransaction____ConstructTransaction_28_29($1);
__stack_pointer = $4 + 16 | 0;
}
function acosf($0) {
var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = Math_fround(0);
$3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$2 = $3 & 2147483647;
if ($2 >>> 0 >= 1065353216) {
if (($2 | 0) == 1065353216) {
return ($3 | 0) >= 0 ? Math_fround(0) : Math_fround(3.141592502593994);
}
return Math_fround(Math_fround(0) / Math_fround($0 - $0));
}
label$3: {
if ($2 >>> 0 <= 1056964607) {
$1 = Math_fround(1.570796251296997);
if ($2 >>> 0 < 847249409) {
break label$3;
}
return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-8) - Math_fround($0 * R(Math_fround($0 * $0)))) - $0) + Math_fround(1.570796251296997));
}
if (($3 | 0) < 0) {
$0 = Math_fround(Math_fround($0 + Math_fround(1)) * Math_fround(.5));
$1 = sqrtf($0);
$0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1 + Math_fround(Math_fround($1 * R($0)) + Math_fround(-7.549789415861596e-8))));
return Math_fround($0 + $0);
}
$1 = Math_fround(Math_fround(Math_fround(1) - $0) * Math_fround(.5));
$4 = sqrtf($1);
$0 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(2)) & -4096), 
wasm2js_scratch_load_f32());
$0 = Math_fround(Math_fround(Math_fround($4 * R($1)) + Math_fround(Math_fround($1 - Math_fround($0 * $0)) / Math_fround($4 + $0))) + $0);
$1 = Math_fround($0 + $0);
}
return $1;
}
function SiteID__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = HEAPU8[$0 | 0];
label$2: {
if (!$2) {
fputs(6194, $1);
break label$2;
}
$2 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $2);
if ($2) {
fputs($2, $1);
break label$2;
}
HEAP32[$3 >> 2] = HEAPU8[$0 | 0];
fiprintf($1, 10630, $3);
}
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if ($2 & 1015808) {
fputc(45, $1);
printDigits_28_IO_FILE__2c_20short_29($1, (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) >>> 15 & 31);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 & 28672) {
fputc(45, $1);
fputs(HEAP32[(HEAPU16[$0 >> 1] >>> 10 & 28) + 61328 >> 2], $1);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 & 3840) {
fputc(45, $1);
fputs(HEAP32[(((HEAPU8[$0 + 1 | 0] | HEAPU8[$0 + 2 | 0] << 8) & 15) << 2) + 61360 >> 2], $1);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 & 7340032) {
fputc(45, $1);
$2 = $0 + 2 | 0;
fputs(HEAP32[(HEAPU8[$2 | 0] >>> 2 & 28) + 61392 >> 2], $1);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
if ($2 << 8 >> 8 >= 0) {
break label$1;
}
fputs(1489, $1);
}
__stack_pointer = $3 + 16 | 0;
}
function utf8_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0;
$5 = HEAP32[$1 >> 2];
$6 = HEAP32[$3 >> 2];
while (1) {
label$2: {
if (($2 | 0) == ($5 | 0) | ($4 | 0) == ($6 | 0)) {
break label$2;
}
label$3: {
label$4: {
label$5: {
label$6: {
$7 = HEAPU8[$5 | 0];
switch (HEAPU8[($7 + $0 | 0) + 72 | 0] - 5 | 0) {
case 2:
break label$4;
case 1:
break label$5;
case 0:
break label$6;
default:
break label$3;
}
}
HEAP16[$6 >> 1] = HEAPU8[$5 + 1 | 0] & 63 | ($7 & 31) << 6;
$5 = $5 + 2 | 0;
$6 = $6 + 2 | 0;
continue;
}
HEAP16[$6 >> 1] = HEAPU8[$5 + 2 | 0] & 63 | ((HEAPU8[$5 + 1 | 0] & 63) << 6 | $7 << 12);
$5 = $5 + 3 | 0;
$6 = $6 + 2 | 0;
continue;
}
if (($6 + 2 | 0) == ($4 | 0)) {
break label$2;
}
$7 = HEAPU8[$5 + 3 | 0] & 63 | ((HEAPU8[$5 + 1 | 0] & 63) << 12 | ($7 & 7) << 18 | (HEAPU8[$5 + 2 | 0] & 63) << 6);
HEAP16[$6 + 2 >> 1] = $7 & 1023 | 56320;
HEAP16[$6 >> 1] = $7 + 16711680 >>> 10 | 55296;
$5 = $5 + 4 | 0;
$6 = $6 + 4 | 0;
continue;
}
HEAP16[$6 >> 1] = $7 << 24 >> 24;
$6 = $6 + 2 | 0;
$5 = $5 + 1 | 0;
continue;
}
break;
}
HEAP32[$1 >> 2] = $5;
HEAP32[$3 >> 2] = $6;
}
function HanimAvatar__completeQuadSites_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
$6 = __stack_pointer + -64 | 0;
__stack_pointer = $6;
$5 = Vector__Vector_28_29($6 + 48 | 0);
$7 = Vector__Vector_28_29($6 + 32 | 0);
$8 = Vector__Vector_28_29($6 + 16 | 0);
$9 = Vector__Vector_28_29($6);
label$1: {
if (!HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $1, $5)) {
break label$1;
}
if (!HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $2, $7)) {
break label$1;
}
$10 = HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $3, $8);
}
completeQuad_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector__29($5, $7, $8, $9);
$5 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $4);
label$2: {
if (!$5) {
$5 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $1);
if (!$5) {
break label$2;
}
$5 = HEAP32[$5 + 16 >> 2];
if (!$5) {
break label$2;
}
HanimAvatar__AddARPSiteByName_28char_20const__2c_20Joint__29($0, $4, $5);
break label$2;
}
if (!$10) {
break label$2;
}
Site__setLocalPosition_28Vector_20const__29($5, $9);
}
__stack_pointer = $6 - -64 | 0;
}
function GetSAMPADef_28XMLCell__2c_20char_20const__29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$1 = TokeniseSAMPA_28char_20const__29(XMLCell__attrib_string_28char_20const__29($0, 3940));
label$1: {
if ($1) {
if (HEAP32[$1 + 12 >> 2] <= 0) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(35007, 0);
DynamicArrayP_char___freeAll_28_29($1);
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
break label$1;
}
$0 = ProcessSeqXMLMorph_28XMLCell__2c_20bool_29($0, 1);
HEAP32[$2 + 12 >> 2] = $0;
if (!$0) {
DynamicArrayP_char___freeAll_28_29($1);
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
break label$1;
}
while (1) {
if (($3 | 0) < HEAP32[$1 + 12 >> 2]) {
HashAny_char_20const__2c_20AbstractTimedMorph____addItem_28char_20const__2c_20AbstractTimedMorph__29(HEAP32[17652], DynamicArrayP_char___getElement_28int_29_20const($1, $3), $0);
$3 = $3 + 1 | 0;
continue;
}
break;
}
DynamicArray1_AbstractTimedMorph____appendElement_28AbstractTimedMorph__20const__29(HEAP32[17654], $2 + 12 | 0);
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(35007, 0);
}
__stack_pointer = $2 + 16 | 0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____construct_at_end_28unsigned_20long_2c_20SSMorph__20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____ConstructTransaction___ConstructTransaction_28std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___2c_20unsigned_20long_29($4, $0, $1);
$1 = HEAP32[$3 + 4 >> 2];
$6 = HEAP32[$3 + 8 >> 2];
label$1: {
while (1) {
if (($1 | 0) == ($6 | 0)) {
break label$1;
}
$5 = std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0);
$7 = SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($1);
HEAP32[19359] = 0;
invoke_viii(18, $5 | 0, $7 | 0, $2 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$1 = $1 + 4 | 0;
HEAP32[$3 + 4 >> 2] = $1;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____ConstructTransaction____ConstructTransaction_28_29($3);
__resumeException($1 | 0);
abort();
}
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____ConstructTransaction____ConstructTransaction_28_29($3);
__stack_pointer = $4 + 16 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____construct_at_end_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction___ConstructTransaction_28std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___2c_20unsigned_20long_29($4, $0, $1);
$1 = HEAP32[$3 + 4 >> 2];
$6 = HEAP32[$3 + 8 >> 2];
label$1: {
while (1) {
if (($1 | 0) == ($6 | 0)) {
break label$1;
}
$5 = std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0);
$7 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($1);
HEAP32[19359] = 0;
invoke_viii(9, $5 | 0, $7 | 0, $2 | 0);
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
$1 = $1 + 4 | 0;
HEAP32[$3 + 4 >> 2] = $1;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction____ConstructTransaction_28_29($3);
__resumeException($1 | 0);
abort();
}
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction____ConstructTransaction_28_29($3);
__stack_pointer = $4 + 16 | 0;
}
function setElementTypePrefix($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = HEAP32[$0 + 340 >> 2];
$7 = $2 + 60 | 0;
$6 = $2 + 80 | 0;
$4 = HEAP32[$1 >> 2];
while (1) {
label$1: {
$0 = HEAPU8[$4 | 0];
label$4: {
if (($0 | 0) != 58) {
if ($0) {
break label$4;
}
return 1;
}
$3 = HEAP32[$1 >> 2];
while (1) {
label$7: {
$5 = HEAP32[$2 + 88 >> 2];
$0 = HEAP32[$2 + 92 >> 2];
if (($3 | 0) == ($4 | 0)) {
break label$7;
}
if (($0 | 0) == ($5 | 0)) {
if (!poolGrow($6)) {
break label$1;
}
$0 = HEAP32[$2 + 92 >> 2];
}
$5 = HEAPU8[$3 | 0];
HEAP32[$2 + 92 >> 2] = $0 + 1;
HEAP8[$0 | 0] = $5;
$3 = $3 + 1 | 0;
continue;
}
break;
}
if (($0 | 0) == ($5 | 0)) {
if (!poolGrow($6)) {
break label$1;
}
$0 = HEAP32[$2 + 92 >> 2];
}
HEAP32[$2 + 92 >> 2] = $0 + 1;
HEAP8[$0 | 0] = 0;
$0 = lookup($7, HEAP32[$2 + 96 >> 2], 8);
if (!$0) {
break label$1;
}
$3 = HEAP32[$2 + 96 >> 2];
label$10: {
if (($3 | 0) == HEAP32[$0 >> 2]) {
HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 92 >> 2];
break label$10;
}
HEAP32[$2 + 92 >> 2] = $3;
}
HEAP32[$1 + 4 >> 2] = $0;
}
$4 = $4 + 1 | 0;
continue;
}
break;
}
return 0;
}
function defineAttribute($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$7 = HEAP32[$0 + 12 >> 2];
label$1: {
label$2: {
label$3: {
if (!($4 ? 1 : $3)) {
break label$3;
}
$8 = ($7 | 0) > 0 ? $7 : 0;
while (1) {
if (($6 | 0) != ($8 | 0)) {
$9 = Math_imul($6, 12);
$6 = $6 + 1 | 0;
if (HEAP32[HEAP32[$0 + 20 >> 2] + $9 >> 2] != ($1 | 0)) {
continue;
}
break label$2;
}
break;
}
if (HEAPU8[$1 + 9 | 0] | (HEAP32[$0 + 8 >> 2] | !$3)) {
break label$3;
}
HEAP32[$0 + 8 >> 2] = $1;
}
label$6: {
if (HEAP32[$0 + 16 >> 2] != ($7 | 0)) {
$6 = HEAP32[$0 + 20 >> 2];
break label$6;
}
if (!$7) {
HEAP32[$0 + 16 >> 2] = 8;
$6 = FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]](96) | 0;
HEAP32[$0 + 20 >> 2] = $6;
if ($6) {
break label$6;
}
break label$1;
}
$6 = FUNCTION_TABLE[HEAP32[$5 + 16 >> 2]](HEAP32[$0 + 20 >> 2], Math_imul($7, 24)) | 0;
if (!$6) {
break label$1;
}
HEAP32[$0 + 20 >> 2] = $6;
HEAP32[$0 + 16 >> 2] = $7 << 1;
}
$6 = Math_imul(HEAP32[$0 + 12 >> 2], 12) + $6 | 0;
HEAP32[$6 + 8 >> 2] = $4;
HEAP32[$6 >> 2] = $1;
HEAP8[$6 + 4 | 0] = $2;
if (!$2) {
HEAP8[$1 + 8 | 0] = 1;
}
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
}
return 1;
}
return 0;
}
function handle_nested_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___2c_20XMLCell__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
label$1: {
if (!$3) {
break label$1;
}
$6 = HEAP32[$3 + 8 >> 2];
if (!$6) {
break label$1;
}
$4 = HEAP32[$6 + 12 >> 2] << 16;
if (!$4) {
break label$1;
}
if (!strcmp(HEAP32[DynamicArrayP_XMLCell___getElement_28int_29_20const($6, 0) >> 2], 6774)) {
$3 = $4 >> 16;
$3 = ($3 | 0) > 0 ? $3 : 0;
while (1) {
if (($7 | 0) == ($3 | 0)) {
break label$1;
}
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($6, $7);
label$4: {
if (strcmp(HEAP32[$4 >> 2], 6774)) {
LogTime_28_29();
HEAP32[$5 + 4 >> 2] = HEAP32[$4 >> 2];
HEAP32[$5 >> 2] = $0;
eprintf_28char_20const__2c_20____29(45321, $5);
break label$4;
}
handle_nested_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___2c_20XMLCell__29($0, $1, $2, $4);
}
$7 = $7 + 1 | 0;
continue;
}
}
DynamicArrayP_Gesture___appendElement_28Gesture__29($2, handle_sign_manual_28char_20const__2c_20HanimAvatar_20const__2c_20XMLCell__29(copyStringWithSuffix_28char_20const__2c_20int_29($0, HEAP32[$2 + 12 >> 2]), $1, $3));
}
__stack_pointer = $5 + 16 | 0;
}
function OneHAbstractPosture__OneHAbstractPosture_28OneHAbstractPosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$4 = $1;
$3 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
$5 = $3;
$3 = $0;
HEAP32[$3 >> 2] = $5;
HEAP32[$3 + 4 >> 2] = $2;
$2 = HEAPU8[$4 + 15 | 0] | HEAPU8[$4 + 16 | 0] << 8 | (HEAPU8[$4 + 17 | 0] << 16 | HEAPU8[$4 + 18 | 0] << 24);
HEAP8[$3 + 15 | 0] = $2;
HEAP8[$3 + 16 | 0] = $2 >>> 8;
HEAP8[$3 + 17 | 0] = $2 >>> 16;
HEAP8[$3 + 18 | 0] = $2 >>> 24;
$3 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
$5 = $2;
$2 = $0;
HEAP32[$2 + 8 >> 2] = $5;
HEAP32[$2 + 12 >> 2] = $3;
Direction3__Direction3_28Direction3_20const__29($2 + 20 | 0, $4 + 20 | 0);
Direction2__Direction2_28Direction2_20const__29($2 + 32 | 0, $4 + 32 | 0);
$4 = $4 - -64 | 0;
$3 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
$4 = $3;
$3 = $0 - -64 | 0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $2;
$4 = $1;
$2 = HEAP32[$4 + 56 >> 2];
$3 = HEAP32[$4 + 60 >> 2];
$1 = $2;
$2 = $0;
HEAP32[$2 + 56 >> 2] = $1;
HEAP32[$2 + 60 >> 2] = $3;
$2 = HEAP32[$4 + 52 >> 2];
$3 = HEAP32[$4 + 48 >> 2];
$1 = $3;
$3 = $0;
HEAP32[$3 + 48 >> 2] = $1;
HEAP32[$3 + 52 >> 2] = $2;
$3 = HEAP32[$4 + 44 >> 2];
$2 = HEAP32[$4 + 40 >> 2];
$1 = $2;
$2 = $0;
HEAP32[$2 + 40 >> 2] = $1;
HEAP32[$2 + 44 >> 2] = $3;
return $2 | 0;
}
function __stpncpy($0, $1, $2) {
var $3 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
if (($0 ^ $1) & 3) {
break label$4;
}
$3 = ($2 | 0) != 0;
label$5: {
if (!($1 & 3) | !$2) {
break label$5;
}
while (1) {
$3 = HEAPU8[$1 | 0];
HEAP8[$0 | 0] = $3;
if (!$3) {
break label$1;
}
$0 = $0 + 1 | 0;
$2 = $2 - 1 | 0;
$3 = ($2 | 0) != 0;
$1 = $1 + 1 | 0;
if (!($1 & 3)) {
break label$5;
}
if ($2) {
continue;
}
break;
}
}
if (!$3) {
break label$2;
}
if (!HEAPU8[$1 | 0]) {
break label$1;
}
if ($2 >>> 0 < 4) {
break label$4;
}
while (1) {
$3 = HEAP32[$1 >> 2];
if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
break label$3;
}
HEAP32[$0 >> 2] = $3;
$0 = $0 + 4 | 0;
$1 = $1 + 4 | 0;
$2 = $2 - 4 | 0;
if ($2 >>> 0 > 3) {
continue;
}
break;
}
}
if (!$2) {
break label$2;
}
}
while (1) {
$3 = HEAPU8[$1 | 0];
HEAP8[$0 | 0] = $3;
if (!$3) {
break label$1;
}
$0 = $0 + 1 | 0;
$1 = $1 + 1 | 0;
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
$2 = 0;
}
memset($0, 0, $2);
return $0;
}
function fflush($0) {
var $1 = 0, $2 = 0, $3 = 0;
if (!$0) {
if (HEAP32[16518]) {
$1 = fflush(HEAP32[16518]);
}
if (HEAP32[16480]) {
$1 = fflush(HEAP32[16480]) | $1;
}
$0 = HEAP32[__ofl_lock() >> 2];
if ($0) {
while (1) {
$2 = 0;
if (HEAP32[$0 + 76 >> 2] >= 0) {
$2 = __lockfile($0);
}
if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
$1 = fflush($0) | $1;
}
if ($2) {
__unlockfile($0);
}
$0 = HEAP32[$0 + 56 >> 2];
if ($0) {
continue;
}
break;
}
}
__ofl_unlock();
return $1;
}
if (HEAP32[$0 + 76 >> 2] >= 0) {
$2 = __lockfile($0);
}
label$10: {
label$11: {
label$12: {
if (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2]) {
break label$12;
}
FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
if (HEAP32[$0 + 20 >> 2]) {
break label$12;
}
$1 = -1;
if ($2) {
break label$11;
}
break label$10;
}
$1 = HEAP32[$0 + 4 >> 2];
$3 = HEAP32[$0 + 8 >> 2];
if (($1 | 0) != ($3 | 0)) {
$1 = $1 - $3 | 0;
FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
}
$1 = 0;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
if (!$2) {
break label$10;
}
}
__unlockfile($0);
}
return $1;
}
function SiteID__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 6318), 48530);
SiteID__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, 0);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function SiteIDPair__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 6318), 48530);
SiteIDPair__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function ASDdata___ASDdata_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 8 >> 2] = 0;
}
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 + 12 >> 2];
if ($1) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($1));
HEAP32[$0 + 12 >> 2] = 0;
}
$1 = HEAP32[$0 + 16 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray_short_2c_20_28short_29_1____DynamicArray_28_29($1));
HEAP32[$0 + 16 >> 2] = 0;
}
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray1_Vector____DynamicArray1_28_29($1));
HEAP32[$0 + 20 >> 2] = 0;
}
$1 = HEAP32[$0 + 24 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray1_Quaternion____DynamicArray1_28_29($1));
HEAP32[$0 + 24 >> 2] = 0;
}
$1 = HEAP32[$0 + 28 >> 2];
if ($1) {
operator_20delete_28void__29(InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($1));
HEAP32[$0 + 28 >> 2] = 0;
}
$1 = HEAP32[$0 + 32 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray_short_2c_20_28short_29_1____DynamicArray_28_29($1));
HEAP32[$0 + 32 >> 2] = 0;
}
$1 = HEAP32[$0 + 36 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray1_Vector____DynamicArray1_28_29($1));
HEAP32[$0 + 36 >> 2] = 0;
}
return $0;
}
function PostureChangeFlags__mergeFlags_28PostureChangeFlags_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
$2 = $3 & 65534 | (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | $3) & 1;
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & 65533 | ($3 & 2 ? 2 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 2);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & 65531 | ($3 & 4 ? 4 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 4);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & 65527 | ($3 & 8 ? 8 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 8);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & -17 | ($3 & 16 ? 16 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 16);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & -33 | ($3 & 32 ? 32 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 32);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & -65 | ($3 & 64 ? 64 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 64);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = $2 & -129 | ($3 & 128 ? 128 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 128);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$1 = $2 & 65279 | ($3 & 256 ? 256 : (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) & 256);
HEAP8[$0 | 0] = $1;
HEAP8[$0 + 1 | 0] = $1 >>> 8;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function SprintDigits_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20short_29($0, $1) {
var $2 = 0;
if (!$1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 14769);
return;
}
label$2: {
if (($1 | 0) >= 0) {
$1 = $1 & 65535;
while (1) {
if (!$1) {
break label$2;
}
if ($1 & 1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, ($2 << 24) + 822083584 >> 24);
}
$2 = $2 + 1 | 0;
$1 = $1 >>> 1 | 0;
continue;
}
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 17316), $1), 41);
}
}
function SiteID__defaultFrom_28SiteID_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = $0 + 2 | 0;
$2 = HEAPU16[$0 >> 1] | HEAPU8[$2 | 0] << 16;
$3 = $2 & 255;
$4 = $3;
if (!$3) {
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$4 = HEAPU8[$1 | 0];
HEAP16[$0 >> 1] = $4 | $2 & 65280;
}
$4 = isArmHandLocation_28int_29($4);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if (!(!($3 ? $4 : 1) | $2 & 3840)) {
$3 = HEAPU16[$1 >> 1];
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = $3 & 3840 | $2 & -3841;
HEAP16[$0 >> 1] = $2;
}
$3 = isExtremityLocation_28short_29($2 & 255);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if (!(!$3 | $2 & 28672)) {
$3 = HEAPU16[$1 >> 1];
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = $3 & 28672 | $2 & -28673;
HEAP16[$0 >> 1] = $2;
}
$3 = isFingerLocation_28short_29($2 & 255);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if (!(!$3 | $2 & 1015808)) {
$2 = (HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 | 0] << 16) & 1015808 | $2 & 15761407;
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if (!($2 & 7340032)) {
$3 = HEAPU8[$1 + 2 | 0];
HEAP16[$0 >> 1] = $2;
$2 = $3 << 16 & 7340032 | $2 & 9437183;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if ($2 << 8 >> 8 >= 0) {
$1 = HEAPU8[$1 + 2 | 0];
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = ($1 << 16 & 8388608 | $2) >>> 16;
}
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int______HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__2c_20HashAny_char_20const__2c_20int______HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function ExpatWrapper__ExpatWrapper_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
$0 = XMLWrapper__XMLWrapper_28_29($0);
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 >> 2] = 63220;
HEAP32[19359] = 0;
$1 = invoke_ii(721, 12853) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 24 >> 2] = $1;
label$2: {
if (!$1) {
HEAP32[19359] = 0;
invoke_vii(71, 25956, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$1 = GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1);
HEAP32[19359] = 0;
invoke_viii(270, $1 | 0, 59180, 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
break label$2;
}
break label$1;
}
HEAP32[19359] = 0;
invoke_viii(722, $1 | 0, 723, 724);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[19359] = 0;
invoke_vii(725, $1 | 0, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
abort();
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
XMLWrapper___XMLWrapper_28_29($0);
__resumeException($1 | 0);
abort();
}
function SeqMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 60 | 0, $1);
$3 = HEAP16[$0 + 540 >> 1];
$9 = ($3 | 0) > 0 ? $3 : 0;
$5 = $0 + 510 | 0;
$6 = $0 + 508 | 0;
$10 = $0 + 528 | 0;
while (1) {
if (($7 | 0) != ($9 | 0)) {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($10, $7);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $1, $2);
$4 = $3;
PostureChangeFlags__mergeFlags_28PostureChangeFlags_20const__29($6, $3 + 508 | 0);
$4 = $3;
PostureChangeFlags__mergeFlags_28PostureChangeFlags_20const__29($5, $3 + 510 | 0);
$3 = 65534;
$8 = HEAPU16[$4 + 508 >> 1];
label$3: {
if (!($8 & 2)) {
$3 = 65533;
if (!($8 & 1)) {
break label$3;
}
}
HEAP16[$6 >> 1] = HEAPU16[$6 >> 1] & $3;
}
$3 = 65534;
label$5: {
if (!(HEAPU8[$4 + 510 | 0] & 2)) {
$3 = 65533;
if (!(HEAP8[$4 + 508 | 0] & 1)) {
break label$5;
}
}
HEAP16[$5 >> 1] = HEAPU16[$5 >> 1] & $3;
}
$7 = $7 + 1 | 0;
continue;
}
break;
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function DirectedMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 5806), 48530);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 0);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function CircularMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 12599), 5782), 48530);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 0);
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$4 = $1;
$3 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
$5 = $3;
$3 = $0;
HEAP32[$3 >> 2] = $5;
HEAP32[$3 + 4 >> 2] = $2;
$2 = HEAPU8[$4 + 15 | 0] | HEAPU8[$4 + 16 | 0] << 8 | (HEAPU8[$4 + 17 | 0] << 16 | HEAPU8[$4 + 18 | 0] << 24);
HEAP8[$3 + 15 | 0] = $2;
HEAP8[$3 + 16 | 0] = $2 >>> 8;
HEAP8[$3 + 17 | 0] = $2 >>> 16;
HEAP8[$3 + 18 | 0] = $2 >>> 24;
$3 = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$4 + 8 >> 2];
$5 = $2;
$2 = $0;
HEAP32[$2 + 8 >> 2] = $5;
HEAP32[$2 + 12 >> 2] = $3;
Direction3__operator__28Direction3_20const__29($2 + 20 | 0, $4 + 20 | 0);
Direction2__operator__28Direction2_20const__29($2 + 32 | 0, $4 + 32 | 0);
$4 = $4 - -64 | 0;
$3 = HEAP32[$4 >> 2];
$2 = HEAP32[$4 + 4 >> 2];
$4 = $3;
$3 = $0 - -64 | 0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $2;
$4 = $1;
$2 = HEAP32[$4 + 56 >> 2];
$3 = HEAP32[$4 + 60 >> 2];
$1 = $2;
$2 = $0;
HEAP32[$2 + 56 >> 2] = $1;
HEAP32[$2 + 60 >> 2] = $3;
$2 = HEAP32[$4 + 52 >> 2];
$3 = HEAP32[$4 + 48 >> 2];
$1 = $3;
$3 = $0;
HEAP32[$3 + 48 >> 2] = $1;
HEAP32[$3 + 52 >> 2] = $2;
$3 = HEAP32[$4 + 44 >> 2];
$2 = HEAP32[$4 + 40 >> 2];
$1 = $2;
$2 = $0;
HEAP32[$2 + 40 >> 2] = $1;
HEAP32[$2 + 44 >> 2] = $3;
return $2;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray1_DynamicArray1_AtomicNonmanual_____clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39318, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray1_DynamicArray1_AtomicNonmanual_____clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function offset1Target_28Vector_20const__2c_20Vector__2c_20Vector__2c_20OneHDirMoveSpec__29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0);
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
$4 = Vector__Vector_28_29($6 + 32 | 0);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $1, $2);
$5 = Vector__lengthsq_28_29_20const($4);
$7 = Vector__Vector_28_29($6 + 16 | 0);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($7, $4, $0);
$8 = Vector__lengthsq_28_29_20const($7);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($1, $2, $7);
if (!(!($5 > Math_fround(0)) | HEAPF32[$3 + 12 >> 2] == Math_fround(0))) {
$5 = sqrt_28float_29(Math_fround($8 / $5));
$1 = Quaternion__Quaternion_28_29($6);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($1, $4, $7);
Quaternion__rotateVector_28Vector__29_20const($1, $3);
$4 = $3 + 16 | 0;
Quaternion__rotateVector_28Vector__29_20const($1, $4);
Vector__setScale_28float_29($4, $5);
$4 = $3 + 48 | 0;
Quaternion__rotateVector_28Vector__29_20const($1, $4);
Vector__setScale_28float_29($4, $5);
$4 = $3 + 60 | 0;
HEAPF32[$4 >> 2] = $5 * HEAPF32[$3 + 60 >> 2];
$3 = $3 - -64 | 0;
HEAPF32[$3 >> 2] = $5 * HEAPF32[$3 >> 2];
}
__stack_pointer = $6 + 48 | 0;
}
function BasicMovement__setBaseMotionAttributes_28MotionAttributes_20const__29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
$4 = HEAP32[$1 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 20 >> 2] = $4;
MannerFlags__addMannerFlags_28MannerFlags_29($0 + 12 | 0, $2 + 16 | 0);
if (!HEAP32[$0 + 12 >> 2]) {
HEAP32[$0 + 12 >> 2] = HEAP32[HEAP32[18209] + (HEAP32[$0 + 4 >> 2] << 2) >> 2];
}
if (!HEAP32[$0 + 16 >> 2]) {
HEAP32[$0 + 16 >> 2] = 2;
}
HEAP8[$0 + 28 | 0] = HEAPU8[$1 + 20 | 0];
HEAP8[$0 + 29 | 0] = HEAPU8[$1 + 21 | 0];
HEAP8[$0 + 30 | 0] = HEAPU8[$1 + 22 | 0];
HEAP8[$0 + 31 | 0] = HEAPU8[$1 + 23 | 0];
HEAP8[$0 + 32 | 0] = HEAPU8[$1 + 24 | 0];
$3 = HEAPF32[$1 + 208 >> 2];
HEAPF32[$0 + 52 >> 2] = $3;
label$3: {
if (!HEAPU8[67565] | HEAP32[$0 + 4 >> 2] != 6) {
break label$3;
}
$5 = HEAPF32[$0 + 40 >> 2];
HEAPF64[$2 >> 3] = $3;
HEAPF64[$2 + 8 >> 3] = $5;
eprintf_28char_20const__2c_20____29(29549, $2);
if (!(HEAPF32[$0 + 52 >> 2] > Math_fround(0))) {
break label$3;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, HEAP32[16886]);
}
HEAPF32[$0 + 56 >> 2] = HEAPF32[$1 + 212 >> 2];
__stack_pointer = $2 + 32 | 0;
}
function HashAny_char_20const__2c_20AbstractTimedMorph_____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__2c_20AbstractTimedMorph_____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function handleUnknownEncoding($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 1040 | 0;
__stack_pointer = $3;
$4 = 18;
$5 = HEAP32[$0 + 124 >> 2];
label$1: {
if (!$5) {
break label$1;
}
while (1) {
if (($2 | 0) != 256) {
HEAP32[($2 << 2) + $3 >> 2] = -1;
$2 = $2 + 1 | 0;
continue;
}
break;
}
HEAP32[$3 + 1032 >> 2] = 0;
HEAP32[$3 + 1024 >> 2] = 0;
HEAP32[$3 + 1028 >> 2] = 0;
label$4: {
if (!(FUNCTION_TABLE[$5 | 0](HEAP32[$0 + 244 >> 2], $1, $3) | 0)) {
break label$4;
}
$2 = HEAP32[$0 + 12 >> 2];
$2 = FUNCTION_TABLE[$2 | 0](XmlSizeOfUnknownEncoding()) | 0;
HEAP32[$0 + 236 >> 2] = $2;
if (!$2) {
$4 = 1;
$2 = HEAP32[$3 + 1032 >> 2];
if (!$2) {
break label$1;
}
FUNCTION_TABLE[$2 | 0](HEAP32[$3 + 1024 >> 2]);
break label$1;
}
$2 = XmlInitUnknownEncoding($2, $3, HEAP32[$3 + 1028 >> 2], HEAP32[$3 + 1024 >> 2]);
if (!$2) {
break label$4;
}
HEAP32[$0 + 240 >> 2] = HEAP32[$3 + 1024 >> 2];
$4 = HEAP32[$3 + 1032 >> 2];
HEAP32[$0 + 144 >> 2] = $2;
HEAP32[$0 + 248 >> 2] = $4;
$4 = 0;
break label$1;
}
$2 = HEAP32[$3 + 1032 >> 2];
if (!$2) {
break label$1;
}
FUNCTION_TABLE[$2 | 0](HEAP32[$3 + 1024 >> 2]);
}
__stack_pointer = $3 + 1040 | 0;
return $4;
}
function __mo_lookup($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
$5 = HEAP32[$0 >> 2] + 1794895138 | 0;
$4 = swapc(HEAP32[$0 + 8 >> 2], $5);
$3 = swapc(HEAP32[$0 + 12 >> 2], $5);
$6 = swapc(HEAP32[$0 + 16 >> 2], $5);
label$1: {
if ($1 >>> 2 >>> 0 <= $4 >>> 0) {
break label$1;
}
$7 = $1 - ($4 << 2) | 0;
if (($3 | $6) & 3 | ($7 >>> 0 <= $3 >>> 0 | $6 >>> 0 >= $7 >>> 0)) {
break label$1;
}
$11 = $6 >>> 2 | 0;
$12 = $3 >>> 2 | 0;
$7 = 0;
while (1) {
$8 = $4 >>> 1 | 0;
$9 = $8 + $7 | 0;
$10 = $9 << 1;
$3 = ($10 + $12 << 2) + $0 | 0;
$6 = swapc(HEAP32[$3 >> 2], $5);
$3 = swapc(HEAP32[$3 + 4 >> 2], $5);
if ($3 >>> 0 >= $1 >>> 0 | $1 - $3 >>> 0 <= $6 >>> 0 | HEAPU8[($3 + $6 | 0) + $0 | 0]) {
break label$1;
}
$3 = strcmp($2, $0 + $3 | 0);
if (!$3) {
$4 = ($11 + $10 << 2) + $0 | 0;
$3 = swapc(HEAP32[$4 >> 2], $5);
$4 = swapc(HEAP32[$4 + 4 >> 2], $5);
if ($4 >>> 0 >= $1 >>> 0 | $1 - $4 >>> 0 <= $3 >>> 0) {
break label$1;
}
$13 = HEAPU8[($3 + $4 | 0) + $0 | 0] ? 0 : $0 + $4 | 0;
break label$1;
}
if (($4 | 0) == 1) {
break label$1;
}
$3 = ($3 | 0) < 0;
$4 = $3 ? $8 : $4 - $8 | 0;
$7 = $3 ? $7 : $9;
continue;
}
}
return $13;
}
function AvatarTiming__AvatarTiming_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
HEAP32[$0 + 32 >> 2] = 1056964608;
HEAP32[$0 + 36 >> 2] = 1065353216;
HEAP32[$0 + 24 >> 2] = 1056964608;
HEAP32[$0 + 28 >> 2] = 1073741824;
HEAP32[$0 + 16 >> 2] = 1065353216;
HEAP32[$0 + 20 >> 2] = 1061158912;
HEAP32[$0 + 8 >> 2] = 1065353216;
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 1065353216;
PostureChangeTiming__PostureChangeTiming_28_29($0 + 40 | 0);
while (1) {
if (($2 | 0) == 12) {
while (1) {
if (($1 | 0) == 5) {
$1 = 0;
while (1) {
if (($1 | 0) == 4) {
label$7: {
HEAP32[$0 + 132 >> 2] = 0;
$1 = 1;
while (1) {
if (($1 | 0) == 4) {
break label$7;
}
HEAP32[(($1 << 2) + $0 | 0) + 132 >> 2] = 1065353216;
$1 = $1 + 1 | 0;
continue;
}
}
} else {
HEAP32[(($1 << 2) + $0 | 0) + 116 >> 2] = 1065353216;
$1 = $1 + 1 | 0;
continue;
}
break;
}
} else {
HEAP32[(($1 << 2) + $0 | 0) + 96 >> 2] = 1065353216;
$1 = $1 + 1 | 0;
continue;
}
break;
}
} else {
HEAP32[(($2 << 2) + $0 | 0) + 48 >> 2] = 1065353216;
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $0 | 0;
}
function HashAny_char_20const__20const_2c_20AvatarType____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__20const_2c_20AvatarType____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function Vector__altitudeCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
$4 = __stack_pointer - 80 | 0;
__stack_pointer = $4;
Vector__Vector_28Vector_20const__29($4 - -64 | 0, $2);
Vector__setSubtract_28Vector_20const__29($4 - -64 | 0, $1);
Vector__Vector_28Vector_20const__29($4 + 48 | 0, $3);
Vector__setSubtract_28Vector_20const__29($4 + 48 | 0, $2);
Vector__Vector_28Vector_20const__29($4 + 32 | 0, $1);
Vector__setSubtract_28Vector_20const__29($4 + 32 | 0, $3);
$5 = Vector__lengthsq_28_29_20const($4 + 32 | 0);
$6 = Vector__dotProduct_28Vector_20const__29_20const($4 + 48 | 0, $4 + 32 | 0);
Vector__Vector_28_29($4 + 16 | 0);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($4 + 16 | 0, $3, $1, Math_fround(Math_fround(-$6) / $5));
Vector__Vector_28Vector_20const__29($4, $4 + 16 | 0);
Vector__setSubtract_28Vector_20const__29($4, $2);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $2, $4 + 16 | 0, Math_fround(Math_fround(-Vector__dotProduct_28Vector_20const__29_20const($4 - -64 | 0, $4 + 48 | 0)) / Vector__dotProduct_28Vector_20const__29_20const($4, $4 + 48 | 0)));
Vector__checkValidVector_28_29_20const($0);
__stack_pointer = $4 + 80 | 0;
}
function OneHGesture__ConcreteLocateSite_28Vector__2c_20SiteID_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
$5 = Vector__Vector_28_29($3 + 32 | 0);
HEAP32[$3 + 28 >> 2] = 0;
HEAP32[$3 + 24 >> 2] = 0;
$4 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2];
$6 = HEAP32[$2 >> 2];
HEAP32[$3 + 12 >> 2] = $6;
HEAP32[$3 + 16 >> 2] = $6;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($4, 0, $3 + 12 | 0, $5, $3 + 28 | 0, $3 + 24 | 0);
$4 = HEAP32[$3 + 28 >> 2];
label$1: {
if ($4) {
Gesture__transferLocation_28Vector__2c_20Joint__2c_20Joint__2c_20Vector_20const__29(HEAP32[$0 + 72 >> 2], $1, 0, $4, $5);
break label$1;
}
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(18833, 0);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputc_28char_29(10);
eputs_28char_20const__29(19827);
Vector__print_28_IO_FILE__2c_20int_29_20const($5, HEAP32[16886], 3);
eputc_28char_29(10);
if (HEAP32[$3 + 24 >> 2]) {
eputs_28char_20const__29(19186);
Site__print_28_IO_FILE__29_20const(HEAP32[$3 + 24 >> 2], HEAP32[16886]);
eputc_28char_29(10);
break label$1;
}
eputs_28char_20const__29(31575);
}
__stack_pointer = $3 + 48 | 0;
}
function Gesture__InstallAHConst_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = HEAP32[$0 + 40 >> 2];
if ($1) {
$2 = SiteIDPair__defined_28_29_20const($1);
$1 = HEAP32[$0 + 40 >> 2];
label$2: {
if ($2) {
$3 = HEAP32[$1 + 4 >> 2];
$4 = HEAP32[$1 >> 2];
$2 = HEAP32[$0 + 20 >> 2];
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 + 8 >> 2] = $3;
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
$1 = HEAP32[$0 + 40 >> 2];
break label$2;
}
$4 = HEAP32[$1 + 16 >> 2];
$3 = HEAP32[$1 + 12 >> 2];
$2 = HEAP32[$0 + 20 >> 2];
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = $4;
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
$1 = HEAP32[$0 + 40 >> 2] + 24 | 0;
}
$4 = HEAP32[$1 >> 2];
$3 = HEAP32[$1 + 4 >> 2];
$2 = HEAP32[$0 + 24 >> 2];
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 + 8 >> 2] = $3;
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
$1 = HEAP32[$0 + 20 >> 2];
$2 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 16 >> 1] = HEAPU16[$2 + 36 >> 1];
HEAP8[$1 + 18 | 0] = HEAPU8[$2 + 38 | 0];
$1 = HEAP32[$0 + 24 >> 2];
$2 = HEAP32[$0 + 40 >> 2];
HEAP16[$1 + 16 >> 1] = HEAPU16[$2 + 40 >> 1];
HEAP8[$1 + 18 | 0] = HEAPU8[$2 + 42 | 0];
$1 = HEAP32[HEAP32[$0 + 40 >> 2] + 44 >> 2];
HEAPF32[$0 + 16 >> 2] = HEAPF32[HEAP32[18211] + ($1 << 2) >> 2];
}
}
function FingerPlayMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24952, 0);
}
HEAPF32[$0 + 536 >> 2] = HEAPF32[17266];
HEAPF32[$0 + 540 >> 2] = HEAPF32[17267];
$3 = HEAPF32[17268];
HEAPF32[$0 + 544 >> 2] = $3;
HEAPF32[$0 + 40 >> 2] = HEAPF32[$0 + 40 >> 2] * Math_fround($3 * HEAPF32[17269]);
$1 = HEAPU8[$1 + 13 | 0] & 64;
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
wasm2js_i32$0 = $0, wasm2js_i32$1 = FingerplayingDigits_28Handshape__29(HEAP32[TwoHAbstractPosture__right_28bool_29($2, ($1 | 0) != 0) + 56 >> 2]), 
HEAP16[wasm2js_i32$0 + 550 >> 1] = wasm2js_i32$1;
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
wasm2js_i32$0 = $0, wasm2js_i32$1 = FingerplayingDigits_28Handshape__29(HEAP32[TwoHAbstractPosture__left_28bool_29($2, ($1 | 0) != 0) + 56 >> 2]), 
HEAP16[wasm2js_i32$0 + 548 >> 1] = wasm2js_i32$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(30302, 0);
}
}
function HashAny_char_20const__2c_20char_20const_____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__2c_20char_20const_____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray_short_2c_20_28short_29_1___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray_short_2c_20_28short_29_1___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 1);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39197, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray_short_2c_20_28short_29_1___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 1;
HEAP16[$7 + $5 >> 1] = HEAPU16[$6 + $7 >> 1];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
label$1: {
if ($5 & 64) {
$7 = $4;
$8 = $3;
$9 = $5 + -64 | 0;
$6 = $9 & 31;
if (($9 & 63) >>> 0 >= 32) {
$1 = $7 >>> $6 | 0;
} else {
$10 = $7 >>> $6 | 0;
$1 = ((1 << $6) - 1 & $7) << 32 - $6 | $8 >>> $6;
}
$2 = $10;
$3 = 0;
$4 = 0;
break label$1;
}
if (!$5) {
break label$1;
}
$10 = $4;
$7 = $3;
$9 = 64 - $5 | 0;
$6 = $9 & 31;
if (($9 & 63) >>> 0 >= 32) {
$8 = $7 << $6;
$11 = 0;
} else {
$8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
$11 = $7 << $6;
}
$12 = $8;
$8 = $2;
$10 = $1;
$7 = 0;
$9 = $5;
$6 = $9 & 31;
if (($9 & 63) >>> 0 >= 32) {
$9 = $8 >>> $6 | 0;
} else {
$7 = $8 >>> $6 | 0;
$9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
}
$10 = $7;
$8 = $11;
$1 = $8 | $9;
$7 = $12;
$10 = $7 | $10;
$2 = $10;
$10 = $4;
$7 = $3;
$8 = 0;
$9 = $5;
$6 = $9 & 31;
if (($9 & 63) >>> 0 >= 32) {
$3 = $10 >>> $6 | 0;
} else {
$8 = $10 >>> $6 | 0;
$3 = ((1 << $6) - 1 & $10) << 32 - $6 | $7 >>> $6;
}
$4 = $8;
}
$7 = $0;
HEAP32[$7 >> 2] = $1;
$8 = $2;
HEAP32[$7 + 4 >> 2] = $8;
HEAP32[$7 + 8 >> 2] = $3;
$8 = $4;
HEAP32[$7 + 12 >> 2] = $8;
}
function XMLCell__attrib_REALVEC3_28Vector__2c_20char_20const__2c_20Vector_20const__29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$4 = __stack_pointer + -64 | 0;
__stack_pointer = $4;
$0 = XMLCell__attrib_string_28char_20const__29($0, $2);
label$1: {
if (!$0) {
Vector__setFrom_28Vector_20const__29($1, $3);
$3 = 0;
break label$1;
}
wasm2js_i32$0 = $4, wasm2js_f64$0 = +Vector__x_28_29_20const($3), HEAPF64[wasm2js_i32$0 + 56 >> 3] = wasm2js_f64$0;
wasm2js_i32$0 = $4, wasm2js_f64$0 = +Vector__y_28_29_20const($3), HEAPF64[wasm2js_i32$0 + 48 >> 3] = wasm2js_f64$0;
wasm2js_i32$0 = $4, wasm2js_f64$0 = +Vector__z_28_29_20const($3), HEAPF64[wasm2js_i32$0 + 40 >> 3] = wasm2js_f64$0;
HEAP32[$4 + 16 >> 2] = $4 + 56;
HEAP32[$4 + 20 >> 2] = $4 + 48;
HEAP32[$4 + 24 >> 2] = $4 + 40;
$0 = sscanf($0, 7523, $4 + 16 | 0);
$3 = ($0 | 0) == 3;
if (!($3 | !HEAPU8[67600])) {
HEAP32[$4 + 4 >> 2] = $2;
HEAP32[$4 >> 2] = $0;
eprintf_28char_20const__2c_20____29(42321, $4);
}
Vector__setFrom_28float_2c_20float_2c_20float_29($1, Math_fround(HEAPF64[$4 + 56 >> 3]), Math_fround(HEAPF64[$4 + 48 >> 3]), Math_fround(HEAPF64[$4 + 40 >> 3]));
}
__stack_pointer = $4 - -64 | 0;
return $3 | 0;
}
function HashAny_char_20const__2c_20int___vmakeHash_28int_2c_20char_20const__2c_20void__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $2;
$6 = 1;
if ($1) {
$2 = HEAP32[$3 + 12 >> 2];
$4 = 1;
while (1) {
$6 = $4;
$4 = $4 + 1 | 0;
$5 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
if ($5) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$6 = invoke_iiii(38, $4 | 0, $0 | 0, Math_imul($6, 3) | 1) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2];
if ($1) {
$4 = HEAP32[$3 + 12 >> 2];
$5 = $4 + 4 | 0;
while (1) {
HEAP32[$3 + 12 >> 2] = $5;
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29($6, $1, HEAP32[$4 >> 2]);
$2 = HEAP32[$3 + 12 >> 2];
$4 = $2 + 4 | 0;
HEAP32[$3 + 12 >> 2] = $4;
$5 = $2 + 8 | 0;
$1 = HEAP32[$2 >> 2];
if ($1) {
continue;
}
break;
}
}
__stack_pointer = $3 + 16 | 0;
return $6;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($3 | 0);
abort();
}
function HashAny_char_20const__2c_20Gesture_____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__2c_20Gesture_____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function Quaternion__decomposeQuatMY_28Quaternion__2c_20float__2c_20float_29($0, $1, $2, $3) {
var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
if ($3 == Math_fround(0)) {
HEAP32[$2 >> 2] = 0;
return;
}
$4 = Quaternion__y_28_29_20const($0);
$7 = Quaternion__w_28_29_20const($0);
$5 = Math_fround(Math_fround($4 * $4) + Math_fround($7 * $7));
label$2: {
if ($5 <= Math_fround(0)) {
HEAP32[$2 >> 2] = 0;
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(1));
break label$2;
}
$6 = Math_fround(atan2f($4, $7) * $3);
HEAPF32[$2 >> 2] = $6;
label$4: {
if ($3 == Math_fround(1)) {
$5 = Math_fround(Math_sqrt($5));
$3 = Math_fround($7 / $5);
$4 = Math_fround($4 / $5);
break label$4;
}
$3 = cosf($6);
$4 = sinf($6);
}
wasm2js_i32$0 = $2, wasm2js_f32$0 = trimAnglePI_28float_29(Math_fround($6 + $6)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), $4, Math_fround(0), $3);
Quaternion__setPreInvCompose_28Quaternion_20const__29($0, $1);
}
Quaternion__checkValidQuat_28_29_20const($0);
}
function DynamicArray1_AbstractTimedMorph____resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray1_AbstractTimedMorph____clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39318, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray1_AbstractTimedMorph____clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function HashAny_char_20const__2c_20SiteID____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_char_20const__2c_20SiteID____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function HashAny_SiteID_20const_2c_20Site_____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_SiteID_20const_2c_20Site_____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_AbstractTimedMorph___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_AbstractTimedMorph___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_AbstractTimedMorph___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function processInternalEntity($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
label$2: {
$2 = HEAP32[$0 + 288 >> 2];
if ($2) {
HEAP32[$0 + 288 >> 2] = HEAP32[$2 + 8 >> 2];
break label$2;
}
$2 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](24) | 0;
if ($2) {
break label$2;
}
$3 = 1;
break label$1;
}
HEAP32[$1 + 12 >> 2] = 0;
HEAP8[$1 + 32 | 0] = 1;
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 284 >> 2];
HEAP32[$0 + 284 >> 2] = $2;
HEAP32[$2 + 12 >> 2] = $1;
$3 = HEAP32[$0 + 296 >> 2];
HEAP8[$2 + 20 | 0] = 0;
HEAP32[$2 + 16 >> 2] = $3;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
$5 = HEAP32[$1 + 4 >> 2];
$6 = $5 + HEAP32[$1 + 8 >> 2] | 0;
$3 = doContent($0, HEAP32[$0 + 296 >> 2], HEAP32[$0 + 224 >> 2], $5, $6, $4 + 12 | 0, 0);
if ($3) {
break label$1;
}
$3 = HEAP32[$4 + 12 >> 2];
if (!(($6 | 0) == ($3 | 0) | HEAP32[$0 + 464 >> 2] != 3)) {
HEAP32[$1 + 12 >> 2] = $3 - $5;
HEAP32[$0 + 264 >> 2] = 777;
$3 = 0;
break label$1;
}
$3 = 0;
HEAP8[$1 + 32 | 0] = 0;
HEAP32[$0 + 284 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 288 >> 2];
HEAP32[$0 + 288 >> 2] = $2;
}
__stack_pointer = $4 + 16 | 0;
return $3;
}
function ConvertDirectionPair_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0;
$5 = __stack_pointer - 112 | 0;
__stack_pointer = $5;
$6 = Direction3__Direction3_28Direction3_20const__29($5 + 96 | 0, $1);
$4 = HEAPU16[$4 >> 1];
HEAP16[$5 + 14 >> 1] = $4;
HEAP16[$5 + 88 >> 1] = $4;
ConvertDirectionSize_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($0, $6, $2, $5 + 14 | 0, 0);
label$1: {
if (!Direction3__defined_28_29_20const($3)) {
break label$1;
}
$6 = Vector__Vector_28_29($5 + 72 | 0);
$7 = Direction3__Direction3_28Direction3_20const__29($5 + 56 | 0, $1);
HEAP16[$5 + 12 >> 1] = $4;
HEAP16[$5 + 48 >> 1] = $4;
ConvertDirectionSize_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($6, $7, $2, $5 + 12 | 0, 0);
Vector__setMidPoint_28Vector_20const__29($0, $6);
$1 = IsCombinedDirection_28Direction3_2c_20Direction3_29(Direction3__Direction3_28Direction3_20const__29($5 + 32 | 0, $1), Direction3__Direction3_28Direction3_20const__29($5 + 16 | 0, $3));
if (($1 | 0) == -1) {
break label$1;
}
$1 = ($1 << 2) + $0 | 0;
HEAPF32[$1 >> 2] = HEAPF32[$1 >> 2] * Math_fround(.5);
}
__stack_pointer = $5 + 112 | 0;
}
function Quaternion__setSlerp_28Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($0, $1, $2, $3) {
var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$5 = Quaternion__quatCosAngle_28Quaternion_20const__29_20const($1, $2);
$4 = $5 < Math_fround(0) ? Math_fround(-$5) : $5;
label$1: {
if (Math_fround(Math_fround(1) - $4) < Math_fround(9999999747378752e-20)) {
$4 = Math_fround(Math_fround(1) - $3);
break label$1;
}
$4 = acos_28float_29($4);
$6 = sin_28float_29($4);
$7 = sin_28float_29(Math_fround($4 * $3));
$4 = Math_fround(sin((1 - +$3) * +$4) / +$6);
$3 = Math_fround($7 / $6);
}
$3 = $5 < Math_fround(0) ? Math_fround(-$3) : $3;
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(Math_fround($4 * Quaternion__x_28_29_20const($1)) + Math_fround($3 * Quaternion__x_28_29_20const($2))), Math_fround(Math_fround($4 * Quaternion__y_28_29_20const($1)) + Math_fround($3 * Quaternion__y_28_29_20const($2))), Math_fround(Math_fround($4 * Quaternion__z_28_29_20const($1)) + Math_fround($3 * Quaternion__z_28_29_20const($2))), Math_fround(Math_fround($4 * Quaternion__w_28_29_20const($1)) + Math_fround($3 * Quaternion__w_28_29_20const($2))));
Quaternion__checkValidQuat_28_29_20const($0);
}
function Finish_28_29() {
var $0 = 0;
DestroySiGMLHandlers_28_29();
$0 = HEAP32[18908];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[18908] = 0;
}
$0 = HEAP32[18902];
if ($0) {
operator_20delete_28void__29(HanimAnimationRecord___HanimAnimationRecord_28_29($0));
HEAP32[18902] = 0;
}
$0 = HEAP32[18909];
if ($0) {
dlfree($0);
HEAP32[18909] = 0;
}
$0 = HEAP32[18903];
if ($0) {
operator_20delete_28void__29(Getopts___Getopts_28_29($0));
HEAP32[18903] = 0;
}
$0 = HEAP32[17612];
if ($0) {
operator_20delete_28void__29(TwoHConcretePosture___TwoHConcretePosture_28_29($0));
HEAP32[17612] = 0;
}
HEAP32[17611] = 0;
$0 = HEAP32[18905];
label$6: {
if (!$0) {
break label$6;
}
HashAny_char_20const__2c_20Gesture____deleteData_28_29($0);
$0 = HEAP32[18905];
if (!$0) {
break label$6;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20Gesture_____HashAny_28_29($0));
HEAP32[18905] = 0;
}
$0 = HEAP32[18906];
if ($0) {
operator_20delete_28void__29(HanimAvatar___HanimAvatar_28_29($0));
HEAP32[18906] = 0;
}
DeleteTables_28_29();
if (HEAPU8[67564]) {
SHOW_UNIMPLEMENTED_28_IO_FILE__29(HEAP32[16886]);
}
END_UNIMPLEMENTED_28_29();
DeleteVersionInfo_28_29();
}
function SiteIDPair__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = $0 + 4 | 0;
$3 = SiteID__defined_28_29_20const($2);
SiteID__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, 0);
label$1: {
if (!$3) {
break label$1;
}
SiteID__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($2, $1, 1);
if (HEAPF32[$0 + 8 >> 2] == Math_fround(.5)) {
break label$1;
}
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 15098);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28float_29($1, HEAPF32[$0 + 8 >> 2]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 48340);
}
}
function DynamicArray1_JointRotation____resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray1_JointRotation____clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39318, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray1_JointRotation____clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function SSFrame__SetMorph_28SSMorph__2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if ($1) {
$0 = $0 + 16 | 0;
if ((std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0) | 0) <= ($2 | 0)) {
HEAP32[$3 + 12 >> 2] = 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___resize_28unsigned_20long_2c_20SSMorph__20const__29($0, $2 + 1 | 0, $3 + 12 | 0);
}
if (HEAP32[std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($0, $2) >> 2]) {
$4 = HEAP32[std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($0, $2) >> 2];
if ($4) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4);
}
wasm2js_i32$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($0, $2), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
wasm2js_i32$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($0, $2), 
wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
__stack_pointer = $3 + 16 | 0;
}
function ExpatWrapper__ParseString_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$4 = invoke_ii(717, $3 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[$0 + 28 >> 2] = $4;
$3 = XML_Parse(HEAP32[$0 + 24 >> 2], $1, strlen($1), 1);
if (!$3) {
$1 = XML_GetCurrentLineNumber(HEAP32[$0 + 24 >> 2]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = XML_ErrorString(XML_GetErrorCode(HEAP32[$0 + 24 >> 2])), 
HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(25874, $2);
}
$1 = HEAP32[$0 + 28 >> 2];
label$3: {
if (!$1) {
break label$3;
}
DynamicArrayP_XMLCell___deleteAll_28_29($1);
$1 = HEAP32[$0 + 28 >> 2];
if (!$1) {
break label$3;
}
operator_20delete_28void__29(DynamicArrayP_XMLCell____DynamicArrayP_28_29($1));
HEAP32[$0 + 28 >> 2] = 0;
}
__stack_pointer = $2 + 16 | 0;
return ($3 ? 0 : 3) | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function SSFrame__SetPRSet_28SSPRSet__2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if ($1) {
$0 = $0 + 4 | 0;
if ((std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) | 0) <= ($2 | 0)) {
HEAP32[$3 + 12 >> 2] = 0;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___resize_28unsigned_20long_2c_20SSPRSet__20const__29($0, $2 + 1 | 0, $3 + 12 | 0);
}
if (HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0, $2) >> 2]) {
$4 = HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0, $2) >> 2];
if ($4) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4);
}
wasm2js_i32$0 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0, $2), 
wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
wasm2js_i32$0 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0, $2), 
wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
__stack_pointer = $3 + 16 | 0;
}
function Joint__completeInitFrame_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$2 = HEAP32[$0 + 44 >> 2];
$1 = HEAP32[$0 + 40 >> 2];
HEAP32[$0 + 68 >> 2] = $1;
HEAP32[$0 + 72 >> 2] = $2;
HEAP32[$0 + 92 >> 2] = HEAP32[$0 - -64 >> 2];
$1 = HEAP32[$0 + 60 >> 2];
$2 = HEAP32[$0 + 56 >> 2];
HEAP32[$0 + 84 >> 2] = $2;
HEAP32[$0 + 88 >> 2] = $1;
$2 = HEAP32[$0 + 52 >> 2];
$1 = HEAP32[$0 + 48 >> 2];
HEAP32[$0 + 76 >> 2] = $1;
HEAP32[$0 + 80 >> 2] = $2;
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
Transform__setPreCompose_28Transform_20const__29($0 + 68 | 0, $1 + 68 | 0);
}
label$2: {
$1 = HEAP32[$0 + 12 >> 2];
if (!$1) {
break label$2;
}
while (1) {
$2 = $3 << 16 >> 16;
if (($2 | 0) >= HEAP32[$1 + 12 >> 2]) {
break label$2;
}
Joint__completeInitFrame_28_29(DynamicArrayP_Joint___getElement_28int_29_20const($1, $2));
$3 = $3 + 1 | 0;
$1 = HEAP32[$0 + 12 >> 2];
continue;
}
}
label$4: {
$1 = HEAP32[$0 + 16 >> 2];
if (!$1) {
break label$4;
}
$3 = 0;
while (1) {
$2 = $3 << 16 >> 16;
if (($2 | 0) >= HEAP32[$1 + 12 >> 2]) {
break label$4;
}
Site__computeGlobalPosition_28_29(DynamicArrayP_Site___getElement_28int_29_20const($1, $2));
$3 = $3 + 1 | 0;
$1 = HEAP32[$0 + 16 >> 2];
continue;
}
}
}
function DynamicArrayP_BasicMovement___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_BasicMovement___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_BasicMovement___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_char_20const___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_char_20const___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_char_20const___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function TurretJointRotation__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
$3 = __stack_pointer - 128 | 0;
__stack_pointer = $3;
if ($1) {
$9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
$4 = $0 + 8 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 32 >> 2];
HEAP32[$3 + 112 >> 2] = $2;
HEAPF64[$3 + 104 >> 3] = $7;
HEAP32[$3 + 96 >> 2] = $2;
HEAPF64[$3 + 88 >> 3] = $6;
HEAP32[$3 + 80 >> 2] = $2;
HEAPF64[$3 + 120 >> 3] = $8;
HEAPF64[$3 + 72 >> 3] = $5;
HEAP32[$3 + 68 >> 2] = $2;
HEAP32[$3 + 64 >> 2] = $9;
__small_fprintf($1, 8024, $3 - -64 | 0);
$4 = $0 + 20 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 36 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $7;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $6;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $8;
HEAPF64[$3 + 8 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 8091, $3);
}
__stack_pointer = $3 + 128 | 0;
}
function HashAny_int_2c_20int____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($2 | 0)) {
dlfree($1);
} else {
$5 = $2 << 3;
$4 = HEAP32[$5 + $1 >> 2];
if ($4) {
operator_20delete_28void__29(HashChain_int_2c_20int____HashChain_28_29($4));
HEAP32[HEAP32[$0 >> 2] + $5 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $5 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $2 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
label$6: {
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[19359] = 0;
HEAPF64[$3 + 16 >> 3] = $1 ? +($2 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$3 >> 2] = $0;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
invoke_vii(71, 48244, $3 | 0);
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$6;
}
}
__stack_pointer = $3 + 32 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray_int_2c_20_1___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray_int_2c_20_1___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39197, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray_int_2c_20_1___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_OptionSpec___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_OptionSpec___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_OptionSpec___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function HanimAvatar__initialise_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP32[15133];
HEAP32[$0 + 100 >> 2] = 0;
HEAP32[$0 + 76 >> 2] = 0;
HEAP32[$0 + 68 >> 2] = 0;
HEAP32[$0 + 72 >> 2] = 0;
HEAP32[$0 + 64 >> 2] = $1;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(268, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
label$2: {
HEAP32[$0 + 104 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(283, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 108 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(284, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 488 >> 2] = 0;
HEAP32[$0 + 112 >> 2] = $2;
__memcpy($0 + 232 | 0, 68404, 148);
HEAP32[$0 + 96 >> 2] = 69512;
HEAP32[$0 + 92 >> 2] = 69172;
HEAP32[$0 + 88 >> 2] = 69512;
HEAP32[$0 + 84 >> 2] = 69172;
return;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function ArmHandConstellation__ArmHandConstellation_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$0 = SiteIDPair__SiteIDPair_28_29($0);
HEAP32[19359] = 0;
$2 = invoke_ii(344, $0 + 12 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
label$3: {
label$4: {
if (($1 | 0) != 1) {
HEAP32[19359] = 0;
$3 = invoke_ii(344, $0 + 24 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$4;
}
SiteID__SiteID_28_29($0 + 36 | 0);
SiteID__SiteID_28_29($0 + 40 | 0);
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 48 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
HEAP32[$0 + 60 >> 2] = 0;
HEAP8[$0 - -64 | 0] = 0;
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$2;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($3);
}
SiteIDPair___SiteIDPair_28_29($2);
}
SiteIDPair___SiteIDPair_28_29($0);
__resumeException($1 | 0);
abort();
}
function DynamicArray_char_2c_20_28char_290___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray_char_2c_20_28char_290___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39197, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$7 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($7 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray_char_2c_20_28char_290___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
HEAP8[$2 + $5 | 0] = HEAPU8[$2 + $6 | 0];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
label$1: {
if ($5 & 64) {
$7 = $2;
$8 = $1;
$5 = $5 + -64 | 0;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$9 = $8 << $6;
$3 = 0;
} else {
$9 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
$3 = $8 << $6;
}
$4 = $9;
$1 = 0;
$2 = 0;
break label$1;
}
if (!$5) {
break label$1;
}
$9 = $4;
$7 = $3;
$10 = $5;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$8 = $7 << $6;
$3 = 0;
} else {
$8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $9 << $6;
$3 = $7 << $6;
}
$4 = $8;
$8 = $2;
$9 = $1;
$7 = 0;
$5 = 64 - $5 | 0;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$5 = $8 >>> $6 | 0;
} else {
$7 = $8 >>> $6 | 0;
$5 = ((1 << $6) - 1 & $8) << 32 - $6 | $9 >>> $6;
}
$9 = $7;
$8 = $3;
$3 = $8 | $5;
$7 = $4;
$9 = $7 | $9;
$4 = $9;
$9 = $2;
$7 = $1;
$5 = $10;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$8 = $7 << $6;
$1 = 0;
} else {
$8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $9 << $6;
$1 = $7 << $6;
}
$2 = $8;
}
$7 = $0;
HEAP32[$7 >> 2] = $1;
$8 = $2;
HEAP32[$7 + 4 >> 2] = $8;
HEAP32[$7 + 8 >> 2] = $3;
$8 = $4;
HEAP32[$7 + 12 >> 2] = $8;
}
function ThumbBending__setAdd_28ThumbBending_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = Math_fround(0), $3 = Math_fround(0);
$2 = HEAPF32[$1 >> 2];
$3 = HEAPF32[$0 >> 2];
label$1: {
if ($3 != Math_fround(-100)) {
if ($2 == Math_fround(-100)) {
break label$1;
}
$2 = Math_fround($3 + $2);
}
HEAPF32[$0 >> 2] = $2;
}
$2 = HEAPF32[$1 + 4 >> 2];
$3 = HEAPF32[$0 + 4 >> 2];
label$3: {
if ($3 != Math_fround(-100)) {
if ($2 == Math_fround(-100)) {
break label$3;
}
$2 = Math_fround($3 + $2);
}
HEAPF32[$0 + 4 >> 2] = $2;
}
$2 = HEAPF32[$1 + 8 >> 2];
$3 = HEAPF32[$0 + 8 >> 2];
label$5: {
if ($3 != Math_fround(-100)) {
if ($2 == Math_fround(-100)) {
break label$5;
}
$2 = Math_fround($3 + $2);
}
HEAPF32[$0 + 8 >> 2] = $2;
}
$2 = HEAPF32[$1 + 12 >> 2];
$3 = HEAPF32[$0 + 12 >> 2];
label$7: {
if ($3 != Math_fround(-100)) {
if ($2 == Math_fround(-100)) {
break label$7;
}
$2 = Math_fround($3 + $2);
}
HEAPF32[$0 + 12 >> 2] = $2;
}
$2 = HEAPF32[$1 + 16 >> 2];
$3 = HEAPF32[$0 + 16 >> 2];
label$9: {
if ($3 != Math_fround(-100)) {
if ($2 == Math_fround(-100)) {
break label$9;
}
$2 = Math_fround($3 + $2);
}
HEAPF32[$0 + 16 >> 2] = $2;
}
}
function HashAny_int_2c_20int___vmakeHash_28int_2c_20int_2c_20void__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $2;
$6 = 1;
if ($1) {
$2 = HEAP32[$3 + 12 >> 2];
$4 = 1;
while (1) {
$6 = $4;
$4 = $4 + 1 | 0;
$5 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
if ($5) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$6 = invoke_iiii(706, $4 | 0, $0 | 0, Math_imul($6, 3) | 1) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
if (($5 | 0) != 1) {
HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2];
if ($1) {
$4 = HEAP32[$3 + 12 >> 2];
$5 = $4 + 4 | 0;
while (1) {
HEAP32[$3 + 12 >> 2] = $5;
HashAny_int_2c_20int___addItem_28int_2c_20int_29($6, $1, HEAP32[$4 >> 2]);
$2 = HEAP32[$3 + 12 >> 2];
$4 = $2 + 4 | 0;
HEAP32[$3 + 12 >> 2] = $4;
$5 = $2 + 8 | 0;
$1 = HEAP32[$2 >> 2];
if ($1) {
continue;
}
break;
}
}
__stack_pointer = $3 + 16 | 0;
return $6;
}
$3 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($3 | 0);
abort();
}
function DynamicArrayP_XMLCell___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_XMLCell___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_XMLCell___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_Segment___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_Segment___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_Segment___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_Gesture___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_Gesture___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_Gesture___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function build_node($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
$1 = Math_imul($1, 28);
$6 = HEAP32[$0 + 340 >> 2];
$5 = HEAP32[$1 + HEAP32[$6 + 144 >> 2] >> 2];
HEAP32[$2 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = HEAP32[(HEAP32[$6 + 144 >> 2] + $1 | 0) + 4 >> 2];
label$1: {
if (($5 | 0) == 4) {
HEAP32[$2 + 8 >> 2] = HEAP32[$4 >> 2];
$1 = HEAP32[(HEAP32[$6 + 144 >> 2] + $1 | 0) + 8 >> 2];
while (1) {
$5 = HEAPU8[$1 | 0];
$6 = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = $6 + 1;
HEAP8[$6 | 0] = $5;
$5 = HEAPU8[$1 | 0];
$1 = $1 + 1 | 0;
if ($5) {
continue;
}
break;
}
HEAP32[$2 + 12 >> 2] = 0;
$1 = $2 + 16 | 0;
break label$1;
}
$5 = HEAP32[(HEAP32[$6 + 144 >> 2] + $1 | 0) + 20 >> 2];
HEAP32[$2 + 12 >> 2] = $5;
HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + Math_imul($5, 20);
$5 = (HEAP32[$6 + 144 >> 2] + $1 | 0) + 12 | 0;
$1 = 0;
while (1) {
if ($1 >>> 0 < HEAPU32[$2 + 12 >> 2]) {
$5 = HEAP32[$5 >> 2];
build_node($0, $5, HEAP32[$2 + 16 >> 2] + Math_imul($1, 20) | 0, $3, $4);
$1 = $1 + 1 | 0;
$5 = (HEAP32[$6 + 144 >> 2] + Math_imul($5, 28) | 0) + 24 | 0;
continue;
}
break;
}
$1 = $2 + 8 | 0;
}
HEAP32[$1 >> 2] = 0;
}
function DynamicArray0_float___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArray0_float___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39379, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArray0_float___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAPF32[$7 + $5 >> 2] = HEAPF32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_Joint___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_Joint___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_Joint___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function QuaternionController__set_reference_28Quaternion_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$1 = Quaternion__Quaternion_28Quaternion_20const__29($5, $1);
Quaternion__setNonNegativePhase_28_29($1);
label$1: {
if (HEAP32[$0 + 448 >> 2] == 1) {
$3 = HEAP32[$1 >> 2];
$2 = HEAP32[$1 + 4 >> 2];
$4 = $3;
$3 = $0;
HEAP32[$3 + 548 >> 2] = $4;
HEAP32[$3 + 552 >> 2] = $2;
$3 = HEAP32[$1 + 12 >> 2];
$2 = HEAP32[$1 + 8 >> 2];
$4 = $2;
$2 = $0;
HEAP32[$2 + 556 >> 2] = $4;
HEAP32[$2 + 560 >> 2] = $3;
$0 = $2 + 532 | 0;
break label$1;
}
$3 = HEAP32[$1 >> 2];
$2 = HEAP32[$1 + 4 >> 2];
$4 = $3;
$3 = $0;
HEAP32[$3 + 580 >> 2] = $4;
HEAP32[$3 + 584 >> 2] = $2;
$3 = HEAP32[$1 + 12 >> 2];
$2 = HEAP32[$1 + 8 >> 2];
$4 = $2;
$2 = $0;
HEAP32[$2 + 588 >> 2] = $4;
HEAP32[$2 + 592 >> 2] = $3;
$0 = $2 + 548 | 0;
}
$3 = HEAP32[$1 >> 2];
$2 = HEAP32[$1 + 4 >> 2];
$4 = $3;
$3 = $0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $2;
$3 = HEAP32[$1 + 12 >> 2];
$2 = HEAP32[$1 + 8 >> 2];
$1 = $2;
$2 = $0;
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$2 + 12 >> 2] = $3;
__stack_pointer = $5 + 16 | 0;
}
function Joint__addGlobalRotation_28Quaternion_20const__29($0, $1) {
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
if (HEAPU8[67584]) {
HEAP32[$2 + 32 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(16502, $2 + 32 | 0);
Transform__print_28_IO_FILE__2c_20int_29_20const($0 + 68 | 0, HEAP32[16886], 6);
eputc_28char_29(10);
}
$1 = Quaternion__Quaternion_28Quaternion_20const__29($2 + 48 | 0, $1);
$3 = HEAP32[$0 + 8 >> 2];
if ($3) {
Transform__invTransformRotation_28Quaternion__29_20const($3 + 68 | 0, $1);
}
Quaternion__setPreCompose_28Quaternion_20const__29($0 + 52 | 0, $1);
Joint__completeInitFrame_28_29($0);
if (HEAPU8[67584]) {
HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(16414, $2 + 16 | 0);
Transform__print_28_IO_FILE__2c_20int_29_20const($0 + 68 | 0, HEAP32[16886], 6);
eputs_28char_20const__29(20072);
Quaternion__print_28_IO_FILE__2c_20int_29($1, HEAP32[16886], 6);
wasm2js_i32$0 = $2, wasm2js_f64$0 = +Quaternion__getAngle_28_29_20const($1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
eprintf_28char_20const__2c_20____29(7557, $2);
eputc_28char_29(10);
}
__stack_pointer = $2 - -64 | 0;
}
function DynamicArrayP_char___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_char___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_char___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_Site___resize_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (!$1) {
DynamicArrayP_Site___clear_28_29($0);
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2];
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = dlmalloc($1 << 2);
if (!$5) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39257, $4);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
$2 = 0;
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) > ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1;
$3 = $1;
}
$8 = ($3 | 0) > 0 ? $3 : 0;
$6 = HEAP32[$0 >> 2];
while (1) {
if (($2 | 0) == ($8 | 0)) {
if ($6) {
dlfree($6);
$3 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 >> 2] = $5;
DynamicArrayP_Site___clearData_28int_2c_20int_29($0, $3, $1 - $3 | 0);
HEAP32[$0 + 8 >> 2] = $1;
} else {
$7 = $2 << 2;
HEAP32[$7 + $5 >> 2] = HEAP32[$6 + $7 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function ASDdata__readFeature_28XMLCell__2c_20short_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
HEAP16[$4 + 46 >> 1] = $2;
label$1: {
if (!$1) {
break label$1;
}
$5 = XMLCell__attrib_string_28char_20const__29($1, 9332);
$1 = XMLCell__attrib_string_28char_20const__29($1, 5978);
if (!$5) {
LogTime_28_29();
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(44348, $4);
break label$1;
}
if (!$1) {
LogTime_28_29();
HEAP32[$4 + 16 >> 2] = $5;
eprintf_28char_20const__2c_20____29(36986, $4 + 16 | 0);
break label$1;
}
$2 = Vector__Vector_28_29($4 + 32 | 0);
parseVector_28Vector__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($2, $1, $5);
Vector__setScale_28float_29($2, $3);
InvertibleDynamicStringArray__addElement_28char_20const__29(HEAP32[$0 + 28 >> 2], $5);
$1 = InvertibleDynamicStringArray__length_28_29_20const(HEAP32[$0 + 28 >> 2]);
$1 = $1 - 1 | 0;
DynamicArray_short_2c_20_28short_29_1___setElement_28int_2c_20short_20const__29(HEAP32[$0 + 32 >> 2], $1, $4 + 46 | 0);
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 36 >> 2], $1, $2);
}
__stack_pointer = $4 + 48 | 0;
}
function ParTimedMorph__CalcTiming_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
label$1: {
$2 = HEAP32[$0 + 24 >> 2];
if (!HEAP32[$2 + 12 >> 2]) {
break label$1;
}
HEAPF32[$0 + 16 >> 2] = $1;
HEAPF32[$0 + 12 >> 2] = $1;
HEAPF32[$0 + 8 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $1;
while (1) {
if (HEAP32[$2 + 12 >> 2] <= ($5 | 0)) {
break label$1;
}
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $5);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1);
$3 = HEAPF32[$2 + 8 >> 2];
if ($3 > HEAPF32[$0 + 8 >> 2]) {
HEAPF32[$0 + 8 >> 2] = $3;
}
$3 = HEAPF32[$0 + 12 >> 2];
label$4: {
if (!($3 >= Math_fround(0))) {
break label$4;
}
$4 = HEAPF32[$2 + 12 >> 2];
label$5: {
if ($4 < Math_fround(0)) {
HEAPF32[$0 + 12 >> 2] = $4;
$3 = HEAPF32[$2 + 16 >> 2];
break label$5;
}
if ($3 < $4) {
HEAPF32[$0 + 12 >> 2] = $4;
}
$3 = HEAPF32[$2 + 16 >> 2];
if (!($3 > HEAPF32[$0 + 16 >> 2])) {
break label$4;
}
}
HEAPF32[$0 + 16 >> 2] = $3;
}
$5 = $5 + 1 | 0;
$2 = HEAP32[$0 + 24 >> 2];
continue;
}
}
}
function ZigzagInfo__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
label$1: {
if (!$1 | !HEAP32[$0 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23662, $1);
HEAP32[$2 + 48 >> 2] = HEAP32[$0 >> 2];
fiprintf($1, 30758, $2 + 48 | 0);
if (!HEAP32[$0 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22193, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Vector__print_28_IO_FILE__2c_20int_29_20const($0 + 4 | 0, $1, 3);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 16 >> 2];
HEAP32[$2 + 32 >> 2] = 3;
HEAPF64[$2 + 40 >> 3] = $3;
__small_fprintf($1, 29270, $2 + 32 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 20 >> 2];
HEAP32[$2 + 16 >> 2] = 3;
HEAPF64[$2 + 24 >> 3] = $3;
__small_fprintf($1, 29294, $2 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
$3 = HEAPF32[$0 + 24 >> 2];
HEAP32[$2 >> 2] = 3;
HEAPF64[$2 + 8 >> 3] = $3;
__small_fprintf($1, 28941, $2);
}
__stack_pointer = $2 - -64 | 0;
}
function WristMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = Math_fround(0);
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(24916, 0);
}
$3 = HEAPF32[((HEAP32[$0 + 532 >> 2] << 2) + 68592 | 0) + 220 >> 2];
$2 = HEAP32[$0 + 528 >> 2];
$1 = Math_imul($2, 24) + 68592 | 0;
HEAPF32[$0 + 536 >> 2] = $3 * HEAPF32[$1 + 328 >> 2];
HEAPF32[$0 + 540 >> 2] = $3 * HEAPF32[$1 + 332 >> 2];
HEAPF32[$0 + 544 >> 2] = HEAPF32[$1 + 336 >> 2];
HEAPF32[$0 + 40 >> 2] = HEAPF32[$0 + 40 >> 2] * Math_fround(HEAPF32[$1 + 336 >> 2] * HEAPF32[$1 + 340 >> 2]);
Vector__setFrom_28Vector_20const__29($0 + 548 | 0, Math_imul($2, 12) + 70528 | 0);
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = $0 + 508 | 0;
HEAP16[$1 >> 1] = HEAPU16[$0 + 508 >> 1] | 256;
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = $0 + 510 | 0;
HEAP16[$1 >> 1] = HEAPU16[$0 + 510 >> 1] | 256;
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
if (HEAPU8[67589]) {
eprintf_28char_20const__2c_20____29(30286, 0);
}
}
function AnimgenInstance__SetAvatar_28int_2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4, $5) {
var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = AnimgenInstance__getInst_28int_29($0);
label$1: {
if (!$0 | HEAP32[$0 + 40 >> 2] != 1) {
break label$1;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = copyString_28char_20const__29($1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
$1 = operator_20new_5b_5d_28unsigned_20long_29(20);
HEAP32[$1 + 16 >> 2] = 0;
wasm2js_i32$0 = $1, wasm2js_i32$1 = copyString_28char_20const__29($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $1, wasm2js_i32$1 = copyString_28char_20const__29($3), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $1, wasm2js_i32$1 = copyString_28char_20const__29($4), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $1, wasm2js_i32$1 = copyString_28char_20const__29($5), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
HEAP32[$0 + 20 >> 2] = $1;
if (!animgen_lite_initialise($1, HEAP32[$0 + 16 >> 2], HEAP32[$0 >> 2], HEAPU8[$0 + 4 | 0], HEAPU8[$0 + 5 | 0])) {
break label$1;
}
HEAP32[$0 + 40 >> 2] = 2;
$6 = 1;
}
return $6;
}
function AvatarJointRotationIndex__AvatarJointRotationIndex_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$4 = DynamicArray1_JointRotation____DynamicArray1_28_29($0 + 188 | 0);
HEAP32[19359] = 0;
invoke_ii(132, $0 + 204 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
label$2: while (1) {
$1 = 0;
if (($3 | 0) == 2) {
HEAP32[$0 + 184 >> 2] = 0;
return $0;
}
while (1) {
$2 = 0;
if (($1 | 0) != 4) {
HEAP32[(($3 << 4) + $0 | 0) + ($1 << 2) >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
while (1) {
$1 = 0;
if (($2 | 0) == 5) {
$1 = ($3 << 2) + $0 | 0;
HEAP32[$1 + 168 >> 2] = 0;
HEAP32[$1 + 160 >> 2] = 0;
HEAP32[$1 + 152 >> 2] = 0;
$3 = $3 + 1 | 0;
continue label$2;
} else {
while (1) {
if (($1 | 0) != 3) {
HEAP32[(((Math_imul($3, 60) + $0 | 0) + Math_imul($2, 12) | 0) + ($1 << 2) | 0) + 32 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
}
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
DynamicArray1_JointRotation_____DynamicArray1_28_29($4);
__resumeException($1 | 0);
abort();
}
function printFingerbendAttrib_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20FingerbendType_2c_20char_20const__29($0, $1, $2) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262), InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18221], $1)), 48340);
}
function __extendsftf2($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
$9 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
$5 = $9 & 2147483647;
label$1: {
if ($5 - 8388608 >>> 0 <= 2130706431) {
$2 = $5 >>> 7 | 0;
$3 = $5 << 25;
$6 = $3;
$4 = $2 + 1065353216 | 0;
$7 = $4;
break label$1;
}
if ($5 >>> 0 >= 2139095040) {
$2 = $9;
$3 = $2 >>> 7 | 0;
$4 = $2 << 25;
$6 = $4;
$2 = $3 | 2147418112;
$7 = $2;
break label$1;
}
if (!$5) {
$7 = 0;
break label$1;
}
$2 = $5;
$5 = Math_clz32($5);
__ashlti3($8, $2, 0, 0, 0, $5 + 81 | 0);
$3 = $8;
$4 = HEAP32[$3 >> 2];
$10 = $4;
$2 = HEAP32[$3 + 4 >> 2];
$11 = $2;
$4 = HEAP32[$3 + 12 >> 2];
$2 = HEAP32[$3 + 8 >> 2];
$6 = $2;
$2 = $4 ^ 65536;
$7 = $2;
$4 = 16265 - $5 | 0;
$3 = $4 << 16;
$4 = $3;
$2 = $6;
$6 = $2;
$3 = $7;
$4 = $3 | $4;
$7 = $4;
}
$2 = $0;
HEAP32[$2 >> 2] = $10;
$4 = $11;
HEAP32[$2 + 4 >> 2] = $4;
$4 = $2;
HEAP32[$2 + 8 >> 2] = $6;
$3 = $9 & -2147483648;
$2 = $7;
$3 = $3 | $2;
HEAP32[$4 + 12 >> 2] = $3;
__stack_pointer = $8 + 16 | 0;
}
function printThumbbendAttrib_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20ThumbbendType_2c_20char_20const__29($0, $1) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 3667), 15262), InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18222], $1)), 48340);
}
function HashAny_char_20const__2c_20char_20const____print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
if ($1) {
HashAny_char_20const__2c_20char_20const____startIteration_28_29_20const($2 + 24 | 0, $0);
HEAP32[$2 + 20 >> 2] = 0;
HEAP32[$2 + 16 >> 2] = 0;
while (1) {
if (HashAny_char_20const__2c_20char_20const____nextIteration_28char_20const___2c_20char_20const___2c_20HashAny_char_20const__2c_20char_20const____Iterator__29_20const($0, $2 + 20 | 0, $2 + 16 | 0, $2 + 24 | 0)) {
fputc(10, $1);
HEAP32[19359] = 0;
invoke_vi(36, $1 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$2 >> 2] = HEAP32[$2 + 20 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
fiprintf($1, 4322, $2);
continue;
}
break;
}
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($2 + 24 | 0);
}
__stack_pointer = $2 + 32 | 0;
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($2 + 24 | 0);
__resumeException($1 | 0);
abort();
}
function CopyJointRotation_28JointRotation__2c_20JointRotation_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
if (!$0 | !$1) {
break label$1;
}
$3 = HEAP32[HEAP32[$0 + 4 >> 2] + 24 >> 2];
$4 = HEAP32[HEAP32[$1 + 4 >> 2] + 24 >> 2];
if (($3 | 0) != ($4 | 0)) {
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 >> 2] = $3;
eprintf_28char_20const__2c_20____29(48130, $2);
$3 = Quaternion__Quaternion_28_29($2 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $3);
break label$1;
}
label$3: {
switch ($3 - 1 | 0) {
case 4:
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
break label$1;
case 1:
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
break label$1;
case 2:
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
break label$1;
case 3:
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
break label$1;
case 0:
break label$3;
default:
break label$1;
}
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, $1);
}
__stack_pointer = $2 + 32 | 0;
}
function void_20std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____construct_one_at_end_SSPRSet__20const___28SSPRSet__20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction___ConstructTransaction_28std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___2c_20unsigned_20long_29($3, $0, 1);
$4 = std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0);
$0 = HEAP32[$2 + 4 >> 2];
$0 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($0);
HEAP32[19359] = 0;
invoke_viii(9, $4 | 0, $0 | 0, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 4;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction____ConstructTransaction_28_29($2);
__stack_pointer = $3 + 16 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction____ConstructTransaction_28_29($2);
__resumeException($0 | 0);
abort();
}
function handle_gloss_sign_28void__2c_20XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = convertGlossToID_28HashAny_char_20const__2c_20char_20const____29(HEAP32[$1 + 4 >> 2]);
$2 = HEAP32[$0 + 4 >> 2];
label$1: {
label$2: {
if (!$2) {
HEAP32[$0 >> 2] = 0;
break label$2;
}
$2 = HashAny_char_20const__2c_20Gesture____lookupString_28char_20const__29_20const($2, $4);
HEAP32[$0 >> 2] = $2;
if ($2) {
break label$1;
}
}
$2 = FindGestureByName_28char_20const__2c_20ParserData__29($4, $0);
HEAP32[$0 >> 2] = $2;
}
SpliceMorphs_28Gesture__29($2);
ProcessSpeed_28XMLCell__2c_20Gesture__29($1, HEAP32[$0 >> 2]);
label$4: {
if (!HEAPU8[67574]) {
break label$4;
}
HEAP32[$3 + 4 >> 2] = HEAP32[$0 >> 2];
HEAP32[$3 >> 2] = $4;
eprintf_28char_20const__2c_20____29(24464, $3);
if (!HEAPU8[67573]) {
break label$4;
}
$1 = HEAP32[$0 >> 2];
if (!$1) {
eputs_28char_20const__29(14681);
break label$4;
}
Gesture__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
}
dlfree($4);
AddToPlayList_28void__2c_20Gesture__29($0, HEAP32[$0 >> 2]);
__stack_pointer = $3 + 16 | 0;
}
function InitialPostureTime_28BasicMovement_20const__29($0) {
var $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0;
label$1: {
label$2: {
label$3: {
while (1) {
if (!$0) {
return Math_fround(0);
}
label$6: {
switch (HEAP32[$0 + 4 >> 2] - 5 | 0) {
case 1:
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0 + 528 | 0, 0);
continue;
case 2:
break label$3;
case 0:
break label$6;
default:
break label$1;
}
}
break;
}
$4 = $0 + 528 | 0;
while (1) {
if (HEAP32[$0 + 540 >> 2] <= ($3 | 0)) {
break label$2;
}
$2 = InitialPostureTime_28BasicMovement_20const__29(DynamicArrayP_BasicMovement___getElement_28int_29_20const($4, $3));
$1 = $1 == Math_fround(0) ? $2 : $1 > $2 ? $2 > Math_fround(0) ? $2 : $1 : $1;
$3 = $3 + 1 | 0;
continue;
}
}
$1 = InitialPostureTime_28BasicMovement_20const__29(HEAP32[$0 + 528 >> 2]);
$2 = InitialPostureTime_28BasicMovement_20const__29(HEAP32[$0 + 532 >> 2]);
$1 = $1 == Math_fround(0) ? $2 : $1 > $2 ? $2 > Math_fround(0) ? $2 : $1 : $1;
}
return $1;
}
return HEAPF32[$0 + 40 >> 2];
}
function HandJointRotations__transferSiteToWrist_28Vector__2c_20Site__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
$3 = $2 + 12 | 0;
$6 = SiteID__whichDigit_28_29_20const($3);
Vector__setFrom_28Vector_20const__29($1, Vector__Vector_28Vector_20const__29_1($5 + 16 | 0, Site__getGlobalBoneTranslation_28_29($2)));
label$1: {
if (($6 | 0) == -1) {
break label$1;
}
$2 = HEAPU8[$2 + 12 | 0] - 7 | 0;
$4 = $2 & 255;
$3 = $4 << 4;
$4 = $3 & 31;
if (($3 & 63) >>> 0 >= 32) {
$3 = 1 >>> $4 | 0;
} else {
$3 = ((1 << $4) - 1 & 1) << 32 - $4 | -65534 >>> $4;
}
$2 = ($2 & 255) >>> 0 < 4 ? $3 : -1;
$3 = Math_imul($6, 12) + $0 | 0;
while (1) {
if ($2 << 16 >> 16 < 0) {
break label$1;
}
$6 = Vector__Vector_28Vector_20const__29($5 + 16 | 0, $1);
$0 = (($2 & 65535) << 2) + $3 | 0;
JointRotation__rotateVector_28Vector_20const__2c_20Vector__29_20const(HEAP32[$0 >> 2], $6, $1);
Vector__setAdd_28Vector_20const__29($1, Vector__Vector_28Vector_20const__29_1($5, Joint__getGlobalBoneTranslation_28_29(HEAP32[HEAP32[$0 >> 2] + 4 >> 2])));
$2 = $2 - 1 | 0;
continue;
}
}
__stack_pointer = $5 + 32 | 0;
}
function FingerBaseJointRotation__toQuaternion_28Quaternion__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
$4 = HEAPF32[$0 + 68 >> 2];
$3 = Math_fround(HEAPF32[$0 + 44 >> 2] / HEAPF32[17074]);
$6 = midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 48 >> 2], $4, $3);
$7 = midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$0 + 60 >> 2], HEAPF32[$0 + 64 >> 2], $3);
Quaternion__setFrom_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 48 | 0, $0 + 32 | 0, Math_fround($4 * $3), 1));
$5 = $0 + 20 | 0;
Quaternion__setPreCompose_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 32 | 0, $5, $7, 1));
Quaternion__setPreCompose_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 16 | 0, $0 + 8 | 0, HEAPF32[$0 + 44 >> 2], 1));
Quaternion__setPreCompose_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2, $5, $6, 1));
__stack_pointer = $2 - -64 | 0;
}
function little2_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$9 = $2 - 2 | 0;
$7 = 1;
label$1: {
while (1) {
$2 = $1 + 2 | 0;
if (($9 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 2 | 0];
$5 = $4 << 24 >> 24;
label$3: {
label$4: {
label$5: {
$6 = HEAPU8[$1 + 3 | 0];
if ($6) {
$1 = unicode_byte_type($6 << 24 >> 24, $5);
} else {
$1 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = $1 - 9 | 0;
if ($4 >>> 0 > 26) {
break label$5;
}
$1 = $2;
$8 = 1 << $4;
if ($8 & 132483059) {
continue;
}
if (!($8 & 139264)) {
if (($4 | 0) != 12) {
break label$5;
}
if (($5 | 0) != 9 | $6) {
continue;
}
break label$3;
}
if ($6) {
break label$3;
}
if (($5 | 0) >= 0) {
continue;
}
break label$4;
}
if ($6) {
break label$3;
}
}
$1 = $2;
if (($5 | 0) == 36 | ($5 | 0) == 64) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $2;
$7 = 0;
}
return $7 | 0;
}
function big2_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$9 = $2 - 2 | 0;
$7 = 1;
label$1: {
while (1) {
$2 = $1 + 2 | 0;
if (($9 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 3 | 0];
$5 = $4 << 24 >> 24;
label$3: {
label$4: {
label$5: {
$6 = HEAPU8[$1 + 2 | 0];
if ($6) {
$1 = unicode_byte_type($6 << 24 >> 24, $5);
} else {
$1 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
$4 = $1 - 9 | 0;
if ($4 >>> 0 > 26) {
break label$5;
}
$1 = $2;
$8 = 1 << $4;
if ($8 & 132483059) {
continue;
}
if (!($8 & 139264)) {
if (($4 | 0) != 12) {
break label$5;
}
if (($5 | 0) != 9 | $6) {
continue;
}
break label$3;
}
if ($6) {
break label$3;
}
if (($5 | 0) >= 0) {
continue;
}
break label$4;
}
if ($6) {
break label$3;
}
}
$1 = $2;
if (($5 | 0) == 36 | ($5 | 0) == 64) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $2;
$7 = 0;
}
return $7 | 0;
}
function BuildHanimAvatar_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
$1 = operator_20new_28unsigned_20long_29(40);
$0 = HEAP32[HEAP32[18904] + 8 >> 2];
HEAP32[19359] = 0;
$0 = invoke_iiii(760, $1 | 0, $0 | 0, 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
label$2: {
$1 = operator_20new_28unsigned_20long_29(492);
HEAP32[19359] = 0;
$3 = invoke_iii(761, $1 | 0, $0 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
HEAP32[18906] = $3;
operator_20delete_28void__29(ASDdata___ASDdata_28_29($0));
HanimAvatar__normaliseSkeleton_28_29(HEAP32[18906]);
HanimAvatar__setJointArticulations_28_29(HEAP32[18906]);
HanimAvatar__createSiGMLHeadSites_28_29(HEAP32[18906]);
HanimAvatar__createSiGMLTorsoSites_28_29(HEAP32[18906]);
HanimAvatar__createSiGMLArmSites_28_29(HEAP32[18906]);
HanimAvatar__FakeFarSites_28_29(HEAP32[18906]);
HanimAvatar__createBodySegments_28_29(HEAP32[18906]);
HanimAvatar__computeObjectSizes_28_29(HEAP32[18906]);
return;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function QuaternionController__reset_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
$6 = HEAP32[$0 + 448 >> 2];
while (1) {
if (($3 | 0) == 4) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2]]($0 + 16 | 0, $1);
$2 = $0 + 124 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 124 >> 2] + 8 >> 2]]($2, $1);
$2 = $0 + 232 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 232 >> 2] + 8 >> 2]]($2, $1);
$2 = $0 + 340 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 340 >> 2] + 8 >> 2]]($2, $1);
HEAPF32[$0 + 4 >> 2] = $1;
HEAPF32[$0 + 480 >> 2] = $1;
} else {
$2 = Math_imul($3, 108) + $0 | 0;
HEAP32[$2 + 28 >> 2] = 1065353216;
$4 = HEAP32[$0 + 456 >> 2];
$5 = HEAP32[$0 + 452 >> 2];
HEAP32[$2 + 32 >> 2] = $5;
HEAP32[$2 + 36 >> 2] = $4;
$5 = HEAP32[$0 + 464 >> 2];
$4 = HEAP32[$0 + 460 >> 2];
HEAP32[$2 + 40 >> 2] = $4;
HEAP32[$2 + 44 >> 2] = $5;
HEAPF32[$2 + 28 >> 2] = HEAPF32[$0 + 476 >> 2];
HEAPF32[$2 + 52 >> 2] = HEAPF32[$0 + 468 >> 2];
$7 = HEAPF32[$0 + 472 >> 2];
HEAP32[$2 + 76 >> 2] = $6;
HEAPF32[$2 + 60 >> 2] = $7;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function Gesture__installHandStuff_28TwoHandStuff_20const__29($0, $1) {
var $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 + 28 >> 2]) {
break label$1;
}
if (!GestureFlags__haveRight_28_29_20const($0 + 13 | 0)) {
break label$1;
}
$2 = HEAP32[$0 + 28 >> 2];
$3 = $2 + 20 | 0;
if (!Direction3__defined_28_29_20const($3)) {
Direction3__operator__28Direction3_20const__29($3, $1);
}
$3 = $2 + 32 | 0;
if (!Direction2__defined_28_29_20const($3)) {
Direction2__operator__28Direction2_20const__29($3, $1 + 12 | 0);
}
if (HEAP32[$2 + 56 >> 2]) {
break label$1;
}
HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 36 >> 2];
}
label$4: {
if (!HEAP32[$0 + 32 >> 2]) {
break label$4;
}
if (!GestureFlags__haveLeft_28_29_20const($0 + 13 | 0)) {
break label$4;
}
$0 = HEAP32[$0 + 32 >> 2];
$2 = $0 + 20 | 0;
if (!Direction3__defined_28_29_20const($2)) {
Direction3__operator__28Direction3_20const__29($2, $1 + 44 | 0);
}
$2 = $0 + 32 | 0;
if (!Direction2__defined_28_29_20const($2)) {
Direction2__operator__28Direction2_20const__29($2, $1 + 56 | 0);
}
if (HEAP32[$0 + 56 >> 2]) {
break label$4;
}
HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 80 >> 2];
}
}
function ExplicitDurationForNonmanual_28XMLCell__2c_20Gesture__29($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 12 >> 2] = -1082130432;
$3 = Math_fround(-1);
label$1: {
if (!$1 | !HEAP32[$1 + 48 >> 2]) {
break label$1;
}
$1 = XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 12 | 0, 6151);
$3 = HEAPF32[$2 + 12 >> 2];
if (!$1 | !($3 > Math_fround(0))) {
break label$1;
}
HEAP32[$2 + 8 >> 2] = 1065353216;
HEAP32[$2 + 4 >> 2] = 1065353216;
label$2: {
if (!XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 8 | 0, 10481)) {
break label$2;
}
$3 = HEAPF32[$2 + 8 >> 2];
if (!($3 > Math_fround(0)) | $3 == Math_fround(1)) {
break label$2;
}
HEAPF32[$2 + 12 >> 2] = HEAPF32[$2 + 12 >> 2] / $3;
}
label$3: {
if (!XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $2 + 4 | 0, 9533)) {
break label$3;
}
$3 = HEAPF32[$2 + 4 >> 2];
if (!($3 > Math_fround(0)) | $3 == Math_fround(1)) {
break label$3;
}
HEAPF32[$2 + 12 >> 2] = $3 * HEAPF32[$2 + 12 >> 2];
}
$3 = HEAPF32[$2 + 12 >> 2];
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
function operator___28SiGMLHandshape_20const__2c_20SiGMLHandshape_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
if (HEAP32[$0 >> 2] != HEAP32[$1 >> 2] | HEAP32[$0 + 8 >> 2] != HEAP32[$1 + 8 >> 2]) {
break label$1;
}
if (operator___28FingerBending_20const__2c_20FingerBending_20const__29($0 + 12 | 0, $1 + 12 | 0) | HEAP32[$0 + 28 >> 2] != HEAP32[$1 + 28 >> 2]) {
break label$1;
}
if (operator___28FingerBending_20const__2c_20FingerBending_20const__29($0 + 32 | 0, $1 + 32 | 0) | HEAP32[$0 + 48 >> 2] != HEAP32[$1 + 48 >> 2] | (HEAPU16[$0 + 52 >> 1] != HEAPU16[$1 + 52 >> 1] | HEAPU16[$0 + 54 >> 1] != HEAPU16[$1 + 54 >> 1])) {
break label$1;
}
$2 = 1;
while (1) {
if (($2 | 0) != 5) {
$3 = $2 << 2;
if (HEAP32[($3 + $0 | 0) + 60 >> 2] != HEAP32[($1 + $3 | 0) + 60 >> 2]) {
break label$1;
}
$3 = $2 << 4;
$2 = $2 + 1 | 0;
if (!operator___28FingerBending_20const__2c_20FingerBending_20const__29(($0 + $3 | 0) + 80 | 0, ($1 + $3 | 0) + 80 | 0)) {
continue;
}
break label$1;
}
break;
}
$4 = operator___28ThumbBending_20const__2c_20ThumbBending_20const__29($0 + 160 | 0, $1 + 160 | 0) ^ 1;
}
return $4;
}
function __strchrnul($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
$3 = $1 & 255;
if ($3) {
if ($0 & 3) {
while (1) {
$2 = HEAPU8[$0 | 0];
if (!$2 | ($1 & 255) == ($2 | 0)) {
break label$1;
}
$0 = $0 + 1 | 0;
if ($0 & 3) {
continue;
}
break;
}
}
$2 = HEAP32[$0 >> 2];
label$5: {
if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
break label$5;
}
$4 = Math_imul($3, 16843009);
$3 = $4 ^ $2;
if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
break label$5;
}
while (1) {
$2 = HEAP32[$0 + 4 >> 2];
$0 = $0 + 4 | 0;
if ($2 - 16843009 & ($2 ^ -1) & -2139062144) {
break label$5;
}
$3 = $2 ^ $4;
if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
continue;
}
break;
}
}
$2 = $2 & 255;
if (!$2 | ($1 & 255) == ($2 | 0)) {
break label$1;
}
while (1) {
label$8: {
$2 = $0 + 1 | 0;
$3 = HEAPU8[$0 + 1 | 0];
if (!$3) {
break label$8;
}
$0 = $2;
if (($1 & 255) != ($3 | 0)) {
continue;
}
}
break;
}
return $2;
}
return strlen($0) + $0 | 0;
}
return $0;
}
function CalcElbowRotation_28OneHAbstractPosture_20const__2c_20OneHConcretePosture__29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
$2 = __stack_pointer - 80 | 0;
__stack_pointer = $2;
if (HEAPU8[67567]) {
$3 = HEAPF32[$0 - -64 >> 2];
$4 = HEAPF32[$0 + 60 >> 2];
HEAP32[$2 - -64 >> 2] = HEAP32[$0 + 68 >> 2];
HEAPF64[$2 + 48 >> 3] = $4;
HEAPF64[$2 + 56 >> 3] = $3;
eprintf_28char_20const__2c_20____29(27426, $2 + 48 | 0);
$5 = !HEAPU8[67567];
} else {
$5 = 1;
}
$4 = HEAPF32[17157];
$3 = Math_fround($4 * HEAPF32[((HEAP32[$0 + 68 >> 2] << 2) + 68592 | 0) + 252 >> 2]);
$6 = Math_fround($3 * HEAPF32[$0 + 60 >> 2]);
HEAPF32[$1 + 64 >> 2] = $6;
$7 = Math_fround($3 * HEAPF32[$0 - -64 >> 2]);
HEAPF32[$1 + 68 >> 2] = $7;
if (!$5) {
$1 = HEAP32[$0 + 68 >> 2];
$0 = HEAPU8[$0 | 0];
HEAPF64[$2 + 16 >> 3] = $4;
HEAPF64[$2 + 24 >> 3] = $3;
HEAPF64[$2 + 32 >> 3] = $6;
HEAPF64[$2 + 40 >> 3] = $7;
HEAP32[$2 >> 2] = $0 ? 12339 : 11597;
HEAPF64[$2 + 8 >> 3] = HEAPF32[(($1 << 2) + 68592 | 0) + 252 >> 2];
eprintf_28char_20const__2c_20____29(27578, $2);
}
__stack_pointer = $2 + 80 | 0;
}
function MotionAttributes__setZero_28_29($0) {
Mirroring__setZero_28_29($0 + 4 | 0);
HEAP32[$0 >> 2] = 0;
MannerFlags__setZero_28_29($0 + 8 | 0);
HEAP8[$0 + 24 | 0] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
Direction3__setZero_28_29($0 + 56 | 0);
HEAP32[$0 + 76 >> 2] = 0;
HEAP32[$0 + 68 >> 2] = 0;
HEAP32[$0 + 72 >> 2] = 0;
Direction3__setZero_28_29($0 + 80 | 0);
HEAP32[$0 + 92 >> 2] = 0;
Direction3__setZero_28_29($0 + 96 | 0);
HEAP32[$0 + 108 >> 2] = 0;
Direction2__setZero_28_29($0 + 112 | 0);
HEAP32[$0 + 136 >> 2] = 0;
HEAP32[$0 + 128 >> 2] = 0;
HEAP32[$0 + 132 >> 2] = 0;
HEAP32[$0 + 120 >> 2] = 0;
HEAP32[$0 + 124 >> 2] = 0;
Direction2__setZero_28_29($0 + 140 | 0);
HEAP16[$0 + 148 >> 1] = 0;
Direction3__setZero_28_29($0 + 152 | 0);
Direction3__setZero_28_29($0 + 164 | 0);
Direction2__setZero_28_29($0 + 180 | 0);
HEAP16[$0 + 188 >> 1] = 0;
Direction2__setZero_28_29($0 + 192 | 0);
HEAP32[$0 + 208 >> 2] = 0;
HEAP32[$0 + 212 >> 2] = 1065353216;
HEAP32[$0 + 200 >> 2] = 0;
HEAP32[$0 + 204 >> 2] = 0;
}
function unknown_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$9 = __stack_pointer - 16 | 0;
__stack_pointer = $9;
while (1) {
label$2: {
$5 = HEAP32[$1 >> 2];
if (($5 | 0) == ($2 | 0)) {
break label$2;
}
$6 = (HEAPU8[$5 | 0] << 2) + $0 | 0;
$7 = HEAP8[$6 + 884 | 0];
label$3: {
if (!$7) {
$7 = XmlUtf8Encode(FUNCTION_TABLE[HEAP32[$0 + 364 >> 2]](HEAP32[$0 + 368 >> 2], $5) | 0, $9 + 12 | 0);
if (($7 | 0) > ($4 - HEAP32[$3 >> 2] | 0)) {
break label$2;
}
$8 = $9 + 12 | 0;
$6 = HEAP32[$1 >> 2];
$5 = ($6 + HEAPU8[(HEAPU8[$6 | 0] + $0 | 0) + 72 | 0] | 0) - 3 | 0;
break label$3;
}
if (($4 - HEAP32[$3 >> 2] | 0) < ($7 | 0)) {
break label$2;
}
$8 = $6 + 885 | 0;
$5 = $5 + 1 | 0;
}
$6 = $8;
HEAP32[$1 >> 2] = $5;
while (1) {
$5 = HEAPU8[$6 | 0];
$8 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $8 + 1;
HEAP8[$8 | 0] = $5;
$6 = $6 + 1 | 0;
$7 = $7 - 1 | 0;
if ($7) {
continue;
}
break;
}
continue;
}
break;
}
__stack_pointer = $9 + 16 | 0;
}
function ZigzagInfo__zigsize_28float_29_20const($0, $1) {
var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$2 = Math_fround(Math_fround($1 * Math_fround(4)) * HEAPF32[$0 + 24 >> 2]);
label$1: {
if (Math_fround(Math_abs($2)) < Math_fround(2147483648)) {
$4 = ~~$2;
break label$1;
}
$4 = -2147483648;
}
$2 = Math_fround($2 - Math_fround($4 | 0));
$6 = Math_fround(Math_fround(1) - $2);
$5 = ($4 | 0) % 4 | 0;
$4 = $4 & -2147483647;
$0 = HEAP32[$0 >> 2];
label$3: {
if (($0 | 0) == 1) {
$2 = ($4 | 0) == 1 ? $6 : $2;
$2 = ($5 | 0) > 1 ? Math_fround(-$2) : $2;
break label$3;
}
$2 = ($4 | 0) == 1 ? $2 : $6;
$2 = Math_fround($2 * $2);
$2 = Math_fround((($5 | 0) > 1 ? Math_fround($2 + Math_fround(-1)) : Math_fround(Math_fround(1) - $2)) * Math_fround(.800000011920929));
}
if (HEAPU8[67597]) {
HEAPF64[$3 + 24 >> 3] = $2;
HEAP32[$3 + 20 >> 2] = ($5 | 0) > 1 ? 78 : 32;
HEAP32[$3 + 16 >> 2] = ($4 | 0) == 1 ? 70 : 32;
HEAP32[$3 >> 2] = $0;
HEAPF64[$3 + 8 >> 3] = $1;
eprintf_28char_20const__2c_20____29(28043, $3);
}
__stack_pointer = $3 + 32 | 0;
return $2;
}
function XML_ParseBuffer($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
label$1: {
switch (HEAP32[$0 + 464 >> 2] - 2 | 0) {
case 1:
HEAP32[$0 + 268 >> 2] = 33;
return 0;
case 0:
HEAP32[$0 + 268 >> 2] = 36;
return 0;
default:
break label$1;
}
}
$4 = 1;
HEAP32[$0 + 464 >> 2] = 1;
$5 = HEAP32[$0 + 24 >> 2];
HEAP32[$0 + 280 >> 2] = $5;
HEAP8[$0 + 468 | 0] = $2;
$3 = HEAP32[$0 + 28 >> 2] + $1 | 0;
HEAP32[$0 + 28 >> 2] = $3;
HEAP32[$0 + 40 >> 2] = $3;
HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + $1;
$1 = FUNCTION_TABLE[HEAP32[$0 + 264 >> 2]]($0, $5, $3, $0 + 24 | 0) | 0;
HEAP32[$0 + 268 >> 2] = $1;
if ($1) {
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$0 + 264 >> 2] = 772;
return 0;
}
label$5: {
label$6: {
switch (HEAP32[$0 + 464 >> 2]) {
case 0:
case 1:
if (!$2) {
break label$5;
}
HEAP32[$0 + 464 >> 2] = 2;
return 1;
case 3:
break label$6;
default:
break label$5;
}
}
$4 = 2;
}
$1 = HEAP32[$0 + 144 >> 2];
FUNCTION_TABLE[HEAP32[$1 + 48 >> 2]]($1, HEAP32[$0 + 280 >> 2], HEAP32[$0 + 24 >> 2], $0 + 392 | 0);
HEAP32[$0 + 280 >> 2] = HEAP32[$0 + 24 >> 2];
return $4;
}
function ProcessParallelXMLMorph_28XMLCell__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (!$0) {
break label$1;
}
$3 = HEAP32[$0 + 8 >> 2];
if (!$3) {
break label$1;
}
$2 = HEAP32[$3 + 12 >> 2];
if (($2 | 0) <= 0) {
break label$1;
}
if (($2 | 0) == 1) {
return ProcessSingleXMLMorph_28XMLCell__2c_20bool_29(DynamicArrayP_XMLCell___getElement_28int_29_20const($3, 0), $1);
}
$2 = 0;
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$5 = invoke_ii(381, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
while (1) {
$4 = $2 << 16 >> 16;
if (($4 | 0) >= HEAP32[$3 + 12 >> 2]) {
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 52 >> 2]]($5, $0);
break label$1;
} else {
ParTimedMorph__appendElement_28AbstractTimedMorph__29($5, ProcessSingleXMLMorph_28XMLCell__2c_20bool_29(DynamicArrayP_XMLCell___getElement_28int_29_20const($3, $4), $1));
$2 = $2 + 1 | 0;
continue;
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($2 | 0);
abort();
}
return $5;
}
function SprintDigit_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20DigitIndex_29($0, $1) {
if (($1 | 0) == -1) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 14713);
return;
}
if ($1 >>> 0 >= 5) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 17316), $1), 41);
return;
}
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, ($1 << 24) + 822083584 >> 24);
}
function ProcessSeqXMLMorph_28XMLCell__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (!$0) {
break label$1;
}
$3 = HEAP32[$0 + 8 >> 2];
if (!$3) {
break label$1;
}
$2 = HEAP32[$3 + 12 >> 2];
if (($2 | 0) <= 0) {
break label$1;
}
if (($2 | 0) == 1) {
return ProcessSingleXMLMorph_28XMLCell__2c_20bool_29(DynamicArrayP_XMLCell___getElement_28int_29_20const($3, 0), $1);
}
$2 = 0;
$4 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$5 = invoke_ii(436, $4 | 0) | 0;
$6 = HEAP32[19359];
HEAP32[19359] = 0;
if (($6 | 0) != 1) {
while (1) {
$4 = $2 << 16 >> 16;
if (($4 | 0) >= HEAP32[$3 + 12 >> 2]) {
FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 52 >> 2]]($5, $0);
break label$1;
} else {
SeqTimedMorph__appendElement_28AbstractTimedMorph__29($5, ProcessSingleXMLMorph_28XMLCell__2c_20bool_29(DynamicArrayP_XMLCell___getElement_28int_29_20const($3, $4), $1));
$2 = $2 + 1 | 0;
continue;
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($2 | 0);
abort();
}
return $5;
}
function MakeSiteIDPair_28SiteIDPair__2c_20HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
$2 = HEAPU16[$2 >> 1];
HEAP16[$5 + 6 >> 1] = $2;
HEAP16[$5 + 16 >> 1] = $2;
$3 = $3 ^ 1;
SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($5 + 24 | 0, $1, $5 + 6 | 0, 0, $3, $4);
HEAP8[$0 + 2 | 0] = HEAPU8[$5 + 26 | 0];
HEAP16[$0 >> 1] = HEAPU16[$5 + 24 >> 1];
HEAP16[$5 + 8 >> 1] = $2;
HEAP16[$5 + 4 >> 1] = $2;
SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($5 + 24 | 0, $1, $5 + 4 | 0, 1, $3, $4);
HEAP8[$0 + 6 | 0] = HEAPU8[$5 + 26 | 0];
HEAP16[$0 + 4 >> 1] = HEAPU16[$5 + 24 >> 1];
wasm2js_i32$0 = $0, wasm2js_f32$0 = HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float_29($1, 5423, Math_fround(.5)), 
HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
__stack_pointer = $5 + 32 | 0;
}
function Joint__Joint_28char_20const__2c_20int_2c_20Joint__2c_20Segment__2c_20DynamicArrayP_Site___29($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 1;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = $4;
HEAP32[$0 + 16 >> 2] = $5;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
Transform__Transform_28_29($0 + 40 | 0);
Transform__Transform_28_29($0 + 68 | 0);
HEAP32[$0 + 100 >> 2] = 0;
HEAP8[$0 + 96 | 0] = 1;
HEAP32[$0 + 32 >> 2] = 68316;
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
HEAP32[$1 + 8 >> 2] = $0;
}
label$2: {
$2 = HEAP32[$0 + 16 >> 2];
if (!$2) {
break label$2;
}
$1 = 0;
$2 = HEAP32[$2 + 12 >> 2];
$2 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$2;
}
wasm2js_i32$0 = DynamicArrayP_Site___getElement_28int_29_20const(HEAP32[$0 + 16 >> 2], $1), 
wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
$1 = $1 + 1 | 0;
continue;
}
}
return $0 | 0;
}
function SiGMLHandshape__SiGMLHandshape_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP8[$0 + 4 | 0] = 0;
HEAP32[$0 >> 2] = 0;
FingerBending__FingerBending_28_29($0 + 12 | 0);
HEAP32[$0 + 28 >> 2] = 0;
FingerBending__FingerBending_28_29($0 + 32 | 0);
HEAP32[$0 + 56 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
$2 = $0 + 160 | 0;
$1 = $0 + 80 | 0;
while (1) {
$1 = FingerBending__FingerBending_28_29($1) + 16 | 0;
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
ThumbBending__ThumbBending_28_29($2);
HEAP32[$0 + 196 >> 2] = -1;
HEAP32[$0 + 200 >> 2] = -1;
HEAP32[$0 + 188 >> 2] = -1;
HEAP32[$0 + 192 >> 2] = -1;
HEAP32[$0 + 180 >> 2] = -1;
HEAP32[$0 + 184 >> 2] = -1;
HEAP32[$0 + 204 >> 2] = 0;
HEAP32[$0 + 208 >> 2] = 0;
HEAP8[$0 + 209 | 0] = 0;
HEAP8[$0 + 210 | 0] = 0;
HEAP8[$0 + 211 | 0] = 0;
HEAP8[$0 + 212 | 0] = 0;
HEAP8[$0 + 213 | 0] = 0;
HEAP8[$0 + 214 | 0] = 0;
HEAP8[$0 + 215 | 0] = 0;
HEAP8[$0 + 216 | 0] = 0;
$1 = 0;
while (1) {
if (!(($1 | 0) == 5)) {
HEAP32[(($1 << 2) + $0 | 0) + 60 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
return $0 | 0;
}
function HanimAvatar__siteStdDistance_28SiteID_29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
HEAP32[$2 + 24 >> 2] = 0;
$1 = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $1;
HEAP32[$2 + 16 >> 2] = $1;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, 0, $2 + 12 | 0, 0, $2 + 28 | 0, $2 + 24 | 0);
$0 = HEAP32[$2 + 24 >> 2];
label$1: {
if ($0) {
$4 = HEAP32[$0 + 24 >> 2];
if ($4) {
$3 = Vector__length_28_29_20const($4);
if ($3 != Math_fround(0)) {
break label$1;
}
}
$3 = HEAPF32[$0 + 20 >> 2];
if ($3 != Math_fround(0)) {
break label$1;
}
}
$1 = $1 & 255;
$0 = 68592;
label$4: {
if (isHandLocation_28Location_29($1)) {
break label$4;
}
$0 = 68596;
if (isArmLocation_28Location_29($1)) {
break label$4;
}
$0 = 68600;
if (isHeadLocation_28Location_29($1)) {
break label$4;
}
HEAPF64[$2 >> 3] = HEAPF32[17151];
eprintf_28char_20const__2c_20____29(28584, $2);
$0 = 68604;
}
$3 = HEAPF32[$0 >> 2];
}
__stack_pointer = $2 + 32 | 0;
return $3;
}
function AvatarJointRotationIndex__ZeroBodyRotations_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
$1 = 0;
if (($2 | 0) == 2) {
SetJRPZero_28JointRotation__29(HEAP32[$0 + 184 >> 2]);
$2 = $0 + 188 | 0;
} else {
while (1) {
if (($1 | 0) != 4) {
SetJRPZero_28JointRotation__29(HEAP32[(($2 << 4) + $0 | 0) + ($1 << 2) >> 2]);
$1 = $1 + 1 | 0;
continue;
}
break;
}
$1 = ($2 << 2) + $0 | 0;
SetJRPZero_28JointRotation__29(HEAP32[$1 + 152 >> 2]);
SetJRPZero_28JointRotation__29(HEAP32[$1 + 160 >> 2]);
SetJRPZero_28JointRotation__29(HEAP32[$1 + 168 >> 2]);
SetJRPZero_28JointRotation__29(HEAP32[$1 + 176 >> 2]);
$2 = $2 + 1 | 0;
continue;
}
break;
}
while (1) {
if (($1 | 0) < HEAP32[$0 + 200 >> 2]) {
SetJRPZero_28JointRotation__29(DynamicArray1_JointRotation____getElement_28int_29_20const($2, $1));
$1 = $1 + 1 | 0;
continue;
}
break;
}
$2 = $0 + 204 | 0;
$1 = 0;
while (1) {
if (HEAP32[$0 + 216 >> 2] > ($1 | 0)) {
SetJRPZero_28JointRotation__29(DynamicArray1_JointRotation____getElement_28int_29_20const($2, $1));
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function Site__printName_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer + -64 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
$3 = HEAP32[$0 >> 2];
if ($3) {
fputs($3, $1);
break label$1;
}
$3 = HEAP32[$0 + 12 >> 2];
HEAP32[$2 + 56 >> 2] = $3;
$4 = HEAP32[17576];
HEAP32[$2 + 48 >> 2] = $4;
HEAP32[$2 + 44 >> 2] = $3;
HEAP32[$2 + 40 >> 2] = $4;
if (operator___28SiteID_2c_20SiteID_29($2 + 44 | 0, $2 + 40 | 0)) {
$3 = HEAPU8[$0 + 12 | 0];
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $3);
$0 = HEAPU16[$0 + 12 >> 1] | HEAPU8[$0 + 14 | 0] << 16;
HEAP32[$2 + 16 >> 2] = $0 >>> 20 & 7;
HEAP32[$2 >> 2] = $3 ? $3 : 8606;
HEAP32[$2 + 12 >> 2] = $0 >>> 15 & 31;
HEAP32[$2 + 8 >> 2] = $0 >>> 12 & 7;
HEAP32[$2 + 4 >> 2] = $0 >>> 8 & 15;
fiprintf($1, 10650, $2);
break label$1;
}
$0 = HEAP32[$0 + 4 >> 2];
if (($0 | 0) != -1) {
HEAP32[$2 + 32 >> 2] = $0;
fiprintf($1, 10642, $2 + 32 | 0);
break label$1;
}
fwrite(12227, 10, 1, $1);
}
__stack_pointer = $2 - -64 | 0;
}
function parserInit($0, $1) {
var $2 = 0;
HEAP32[$0 + 264 >> 2] = 770;
XmlPrologStateInit($0 + 252 | 0);
if ($1) {
$2 = poolCopyString($0 + 400 | 0, $1);
}
HEAP32[$0 + 344 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = $2;
XmlInitEncoding($0 + 148 | 0, $0 + 144 | 0, 0);
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
memset($0 + 52 | 0, 0, 64);
HEAP32[$0 + 128 >> 2] = 0;
HEAP32[$0 + 132 >> 2] = 0;
HEAP32[$0 + 120 >> 2] = 0;
HEAP32[$0 + 136 >> 2] = 0;
HEAP32[$0 + 140 >> 2] = 0;
HEAP32[$0 + 392 >> 2] = 0;
HEAP32[$0 + 396 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 268 >> 2] = 0;
HEAP32[$0 + 272 >> 2] = 0;
HEAP32[$0 + 276 >> 2] = 0;
HEAP32[$0 + 280 >> 2] = 0;
HEAP32[$0 + 284 >> 2] = 0;
$1 = HEAP32[$0 + 8 >> 2];
HEAP32[$0 + 28 >> 2] = $1;
HEAP32[$0 + 24 >> 2] = $1;
HEAP32[$0 + 116 >> 2] = $0;
memset($0 + 300 | 0, 0, 38);
HEAP32[$0 + 368 >> 2] = 0;
HEAP32[$0 + 356 >> 2] = 0;
HEAP32[$0 + 348 >> 2] = 0;
HEAP32[$0 + 296 >> 2] = 0;
HEAP8[$0 + 292 | 0] = 1;
HEAP32[$0 + 248 >> 2] = 0;
HEAP32[$0 + 460 >> 2] = 0;
HEAP32[$0 + 464 >> 2] = 0;
HEAP32[$0 + 236 >> 2] = 0;
HEAP32[$0 + 240 >> 2] = 0;
}
function FingerBending__Between_28FingerBending_20const__2c_20float_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = HEAPF32[$1 >> 2];
$4 = HEAPF32[$0 >> 2];
label$1: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$1;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 >> 2] = $3;
}
$3 = HEAPF32[$1 + 4 >> 2];
$4 = HEAPF32[$0 + 4 >> 2];
label$3: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$3;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 4 >> 2] = $3;
}
$3 = HEAPF32[$1 + 8 >> 2];
$4 = HEAPF32[$0 + 8 >> 2];
label$5: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$5;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 8 >> 2] = $3;
}
$3 = HEAPF32[$1 + 12 >> 2];
$4 = HEAPF32[$0 + 12 >> 2];
label$7: {
if ($4 != Math_fround(-100)) {
if ($3 == Math_fround(-100)) {
break label$7;
}
$3 = midpoint_28float_2c_20float_2c_20float_29($4, $3, $2);
}
HEAPF32[$0 + 12 >> 2] = $3;
}
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SSPRSet____29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = 0;
std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet________compressed_pair_std__nullptr_t_2c_20std____2__allocator_SSPRSet_____28std__nullptr_t___2c_20std____2__allocator_SSPRSet____29($0 + 12 | 0, $4 + 12 | 0, $3);
if ($1) {
$5 = std____2__allocator_traits_std____2__allocator_SSPRSet___20___allocate_28std____2__allocator_SSPRSet____2c_20unsigned_20long_29(std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________alloc_28_29($0), $1);
}
HEAP32[$0 >> 2] = $5;
$2 = ($2 << 2) + $5 | 0;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $2;
wasm2js_i32$0 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________end_cap_28_29($0), 
wasm2js_i32$1 = ($1 << 2) + $5 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__stack_pointer = $4 + 16 | 0;
return $0;
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_SSMorph____29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = 0;
std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph________compressed_pair_std__nullptr_t_2c_20std____2__allocator_SSMorph_____28std__nullptr_t___2c_20std____2__allocator_SSMorph____29($0 + 12 | 0, $4 + 12 | 0, $3);
if ($1) {
$5 = std____2__allocator_traits_std____2__allocator_SSMorph___20___allocate_28std____2__allocator_SSMorph____2c_20unsigned_20long_29(std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________alloc_28_29($0), $1);
}
HEAP32[$0 >> 2] = $5;
$2 = ($2 << 2) + $5 | 0;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $2;
wasm2js_i32$0 = std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________end_cap_28_29($0), 
wasm2js_i32$1 = ($1 << 2) + $5 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
__stack_pointer = $4 + 16 | 0;
return $0;
}
function animgen_lite_doSignCASARP($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
$7 = HEAP32[18902];
$0 = animgen_acceptSiGML_28char__2c_20bool_20_28__29_28void__2c_20AnimgenStatus_2c_20int_29_2c_20void__2c_20float_29($0, $1, $5, Math_fround(HEAPF32[$7 + 60 >> 2] - HEAPF32[$7 + 56 >> 2]));
label$1: {
if (!$0) {
break label$1;
}
if (!HEAP32[$0 + 12 >> 2] | HEAP32[18884] == 2) {
break label$1;
}
HanimAnimationRecord__animateARP_28DynamicArrayP_Gesture___2c_20void_20_28__29_28void__2c_20char_20const__2c_20int_2c_20int_29_2c_20bool_20_28__29_28void__2c_20SSFrame__29_2c_20void_20_28__29_28void__2c_20PostMortem__29_2c_20void__29(HEAP32[18902], $0, $2, $3, $4, $5);
ProcessPostMortem_28float_2c_20DynamicArrayP_Gesture___2c_20void_20_28__29_28void__2c_20PostMortem__29_2c_20void__29(HEAPF32[HEAP32[18902] + 60 >> 2], $4, $5);
if (HEAPU8[67569]) {
LogTime_28_29();
HEAP32[$6 >> 2] = HEAP32[$0 + 12 >> 2];
eprintf_28char_20const__2c_20____29(35480, $6);
}
$5 = HEAP32[16886];
if (!$5) {
break label$1;
}
fflush($5);
}
__stack_pointer = $6 + 16 | 0;
}
function SplitMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if ($1) {
HEAP32[$3 >> 2] = $0;
fiprintf($1, 24299, $3);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
$2 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $2;
printIndent_28_IO_FILE__2c_20int_29($1, $2 << 16 >> 16);
label$2: {
if (HEAP32[$0 + 528 >> 2]) {
fputs(21946, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$2 = HEAP32[$0 + 528 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 72 >> 2]]($2, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$2;
}
fputs(31763, $1);
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
label$4: {
if (HEAP32[$0 + 532 >> 2]) {
fputs(21965, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
$0 = HEAP32[$0 + 532 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
break label$4;
}
fputs(31787, $1);
}
HEAP16[33801] = HEAPU16[33801] - 1;
}
__stack_pointer = $3 + 16 | 0;
}
function HandJointRotations__transferSiteNormalToWrist_28Vector__2c_20Site__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
label$1: {
label$2: {
if ($2) {
$4 = HEAP32[$2 + 24 >> 2];
if ($4) {
break label$2;
}
}
Vector__setZero_28_29($1);
break label$1;
}
Vector__setFrom_28Vector_20const__29($1, $4);
$7 = 1;
$5 = $2;
$2 = $2 + 12 | 0;
$4 = SiteID__whichDigit_28_29_20const($2);
if (($4 | 0) == -1) {
break label$1;
}
$2 = HEAPU8[$5 + 12 | 0] - 7 | 0;
$3 = $2 & 255;
$5 = $3 << 4;
$3 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$5 = 1 >>> $3 | 0;
} else {
$5 = ((1 << $3) - 1 & 1) << 32 - $3 | -65534 >>> $3;
}
$2 = ($2 & 255) >>> 0 < 4 ? $5 : -1;
$4 = Math_imul($4, 12) + $0 | 0;
while (1) {
if ($2 << 16 >> 16 < 0) {
break label$1;
}
$0 = Vector__Vector_28Vector_20const__29($6, $1);
JointRotation__rotateVector_28Vector_20const__2c_20Vector__29_20const(HEAP32[(($2 & 65535) << 2) + $4 >> 2], $0, $1);
$2 = $2 - 1 | 0;
continue;
}
}
__stack_pointer = $6 + 16 | 0;
return $7;
}
function tanf($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$1 = $2 & 2147483647;
label$1: {
if ($1 >>> 0 <= 1061752794) {
if ($1 >>> 0 < 964689920) {
break label$1;
}
$0 = __tandf(+$0, 0);
break label$1;
}
if ($1 >>> 0 <= 1081824209) {
$3 = +$0;
if ($1 >>> 0 <= 1075235811) {
$0 = __tandf((($2 | 0) < 0 ? 1.5707963267948966 : -1.5707963267948966) + $3, 1);
break label$1;
}
$0 = __tandf((($2 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3, 0);
break label$1;
}
if ($1 >>> 0 <= 1088565717) {
$3 = +$0;
if ($1 >>> 0 <= 1085271519) {
$0 = __tandf((($2 | 0) < 0 ? 4.71238898038469 : -4.71238898038469) + $3, 1);
break label$1;
}
$0 = __tandf((($2 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3, 0);
break label$1;
}
if ($1 >>> 0 >= 2139095040) {
$0 = Math_fround($0 - $0);
break label$1;
}
$1 = __rem_pio2f($0, $4 + 8 | 0);
$0 = __tandf(HEAPF64[$4 + 8 >> 3], $1 & 1);
}
__stack_pointer = $4 + 16 | 0;
return $0;
}
function TorsoCurve__TorsoCurve_28TorsoCurve_20const__2c_20TorsoCurve_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0);
while (1) {
Vector__Vector_28_29(Math_imul($4, 12) + $0 | 0);
$4 = $4 + 1 | 0;
if (($4 | 0) != 5) {
continue;
}
break;
}
CircleInfo__CircleInfo_28_29($0 + 60 | 0);
CircleInfo__CircleInfo_28_29($0 + 76 | 0);
EllipseInfo__EllipseInfo_28_29($0 + 92 | 0);
EllipseInfo__EllipseInfo_28_29($0 + 108 | 0);
$7 = Math_fround(.5);
$5 = Vector__y_28_29_20const(TorsoCurve__centre_28_29_20const($1));
$8 = Vector__y_28_29_20const(TorsoCurve__centre_28_29_20const($2));
if ($5 != $8) {
$7 = Math_fround(Math_fround($3 - $5) / Math_fround($8 - $5));
}
$4 = 0;
while (1) {
if (HEAP16[29594] <= ($4 | 0)) {
TorsoCurve__initialise_28_29($0);
} else {
$6 = Math_imul($4, 12);
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($6 + $0 | 0, $1 + $6 | 0, $2 + $6 | 0, $7);
$4 = $4 + 1 | 0;
continue;
}
break;
}
return $0 | 0;
}
function AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
AddToARPSiteIndex_28char_20const__2c_20Location_2c_20bool_2c_20bool_29($0, $1, $2, 1);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($3 + 40 | 0, $1, 4, 0, 0, 1, 0);
$4 = HEAP32[17502];
$5 = concatStrings($0, 11874);
$2 = HEAP32[$3 + 40 >> 2];
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $2;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($4, $5, $3 + 12 | 0);
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($3 + 24 | 0, $1, 3, 0, 0, 1, 0);
HEAP8[$3 + 42 | 0] = HEAPU8[$3 + 26 | 0];
HEAP16[$3 + 40 >> 1] = HEAPU16[$3 + 24 >> 1];
$1 = HEAP32[17502];
$0 = concatStrings($0, 11246);
$2 = HEAP32[$3 + 40 >> 2];
HEAP32[$3 + 16 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $2;
HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($1, $0, $3 + 8 | 0);
__stack_pointer = $3 + 48 | 0;
}
function __wasm_rotl_i64($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$4 = $2;
$10 = $4 & 63;
$5 = $10;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$4 = 0;
$7 = -1 >>> $6 | 0;
} else {
$4 = -1 >>> $6 | 0;
$7 = (1 << $6) - 1 << 32 - $6 | -1 >>> $6;
}
$8 = $1;
$8 = $4 & $8;
$5 = $0;
$4 = $7 & $5;
$5 = $10;
$6 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$7 = $4 << $6;
$10 = 0;
} else {
$7 = (1 << $6) - 1 & $4 >>> 32 - $6 | $8 << $6;
$10 = $4 << $6;
}
$11 = $7;
$5 = $2;
$6 = 0 - $5 | 0;
$4 = $3;
$9 = $4 + (($5 | 0) != 0) | 0;
$2 = $6 & 63;
$8 = 0;
$3 = $8;
$5 = $2;
$4 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$7 = -1 << $4;
$8 = 0;
} else {
$7 = (1 << $4) - 1 & -1 >>> 32 - $4 | -1 << $4;
$8 = -1 << $4;
}
$9 = $1;
$9 = $9 & $7;
$5 = $0;
$7 = $8 & $5;
$5 = $2;
$4 = $5 & 31;
if (($5 & 63) >>> 0 >= 32) {
$8 = 0;
$5 = $9 >>> $4 | 0;
} else {
$8 = $9 >>> $4 | 0;
$5 = ((1 << $4) - 1 & $9) << 32 - $4 | $7 >>> $4;
}
$7 = $8;
$8 = $11;
$7 = $8 | $7;
i64toi32_i32$HIGH_BITS = $7;
$9 = $10;
$9 = $5 | $9;
return $9;
}
function XMLCell__clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
$1 = HEAP32[$0 + 4 >> 2];
label$2: {
if (!$1) {
break label$2;
}
HashAny_char_20const__2c_20char_20const____freeData_28_29($1);
HashAny_char_20const__2c_20char_20const____freeStrings_28_29(HEAP32[$0 + 4 >> 2]);
$1 = HEAP32[$0 + 4 >> 2];
if (!$1) {
break label$2;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20char_20const_____HashAny_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
$2 = HEAP32[$0 + 8 >> 2];
if ($2) {
$1 = 0;
while (1) {
if (HEAP32[$2 + 12 >> 2] > ($1 | 0)) {
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const($2, $1);
if ($2) {
XMLCell___XMLCell_28_29($2);
operator_20delete_28void__29($2);
}
$1 = $1 + 1 | 0;
$2 = HEAP32[$0 + 8 >> 2];
continue;
}
break;
}
operator_20delete_28void__29(DynamicArrayP_XMLCell____DynamicArrayP_28_29($2));
HEAP32[$0 + 8 >> 2] = 0;
}
$1 = HEAP32[$0 + 12 >> 2];
if ($1) {
operator_20delete_28void__29($1);
HEAP32[$0 + 12 >> 2] = 0;
}
}
function OneArmAnimator___OneArmAnimator_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
while (1) {
if (($1 | 0) == 4) {
$1 = HEAP32[$0 + 12 >> 2];
if ($1) {
operator_20delete_28void__29(HandJointRotations___HandJointRotations_28_29($1));
HEAP32[$0 + 12 >> 2] = 0;
}
$1 = HEAP32[$0 + 976 >> 2];
if ($1) {
operator_20delete_28void__29(HandJointRotations___HandJointRotations_28_29($1));
HEAP32[$0 + 976 >> 2] = 0;
}
$1 = $0 + 3556 | 0;
$2 = $0 + 980 | 0;
while (1) {
$1 = QuaternionController___QuaternionController_28_29($1 - 644 | 0);
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
SHMScalarController___SHMScalarController_28_29($0 + 868 | 0);
QuaternionController___QuaternionController_28_29($0 + 224 | 0);
ControlledByScalar_Vector____ControlledByScalar_28_29($0 + 184 | 0);
VectorController2___VectorController2_28_29($0 + 36 | 0);
return $0;
}
$3 = ($1 << 2) + $0 | 0;
$2 = HEAP32[$3 + 16 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$3 + 16 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
function storeRawNames($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = $0 + 348 | 0;
while (1) {
label$2: {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
$3 = HEAP32[$1 + 4 >> 2];
$2 = HEAP32[$1 + 36 >> 2];
$5 = HEAP32[$1 + 24 >> 2] + 1 | 0;
$4 = $2 + $5 | 0;
if (($3 | 0) == ($4 | 0)) {
break label$2;
}
$6 = HEAP32[$1 + 8 >> 2];
$7 = $5 + $6 | 0;
if (($7 | 0) > (HEAP32[$1 + 40 >> 2] - $2 | 0)) {
$2 = FUNCTION_TABLE[HEAP32[$0 + 16 >> 2]]($2, $7) | 0;
if (!$2) {
return 0;
}
$3 = HEAP32[$1 + 36 >> 2];
if (($3 | 0) == HEAP32[$1 + 12 >> 2]) {
HEAP32[$1 + 12 >> 2] = $2;
}
$4 = HEAP32[$1 + 16 >> 2];
if ($4) {
HEAP32[$1 + 16 >> 2] = ($4 - $3 | 0) + $2;
}
HEAP32[$1 + 36 >> 2] = $2;
HEAP32[$1 + 40 >> 2] = $2 + $7;
$4 = $2 + $5 | 0;
$3 = HEAP32[$1 + 4 >> 2];
$6 = HEAP32[$1 + 8 >> 2];
}
wasm2js_i32$0 = $1, wasm2js_i32$1 = __memcpy($4, $3, $6), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
continue;
}
break;
}
return 1;
}
function SSMorph___20std____2__move_SSMorph___2c_20SSMorph____28SSMorph___2c_20SSMorph___2c_20SSMorph___29($0, $1, $2) {
return SSMorph___20std____2____rewrap_iter_SSMorph____28SSMorph___2c_20SSMorph___29($2, std____2__enable_if_is_same_std____2__remove_const_SSMorph____type_2c_20SSMorph____value_20___20is_trivially_move_assignable_SSMorph____value_2c_20SSMorph_____type_20std____2____move_SSMorph__2c_20SSMorph___28SSMorph___2c_20SSMorph___2c_20SSMorph___29(decltype_28std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28declval_SSMorph____28_29_29_29_20std____2____unwrap_iter_SSMorph___2c_20std____2____unwrap_iter_impl_SSMorph___2c_20true__20__28SSMorph___29($0), decltype_28std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28declval_SSMorph____28_29_29_29_20std____2____unwrap_iter_SSMorph___2c_20std____2____unwrap_iter_impl_SSMorph___2c_20true__20__28SSMorph___29($1), decltype_28std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28declval_SSMorph____28_29_29_29_20std____2____unwrap_iter_SSMorph___2c_20std____2____unwrap_iter_impl_SSMorph___2c_20true__20__28SSMorph___29($2)));
}
function HashAny_char_20const__2c_20SiteID___print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if ($1) {
$3 = SiteID__SiteID_28_29($2 + 24 | 0);
HashAny_char_20const__2c_20SiteID___startIteration_28_29_20const($2 + 16 | 0, $0);
label$2: {
while (1) {
if (!HashAny_char_20const__2c_20SiteID___nextIteration_28char_20const___2c_20SiteID__2c_20HashAny_char_20const__2c_20SiteID___Iterator__29_20const($0, $2 + 28 | 0, $3, $2 + 16 | 0)) {
break label$2;
}
HEAP32[$2 >> 2] = HEAP32[$2 + 28 >> 2];
fiprintf($1, 20257, $2);
HEAP32[19359] = 0;
invoke_vii(276, $3 | 0, $1 | 0);
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
fputc(10, $1);
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
HashAny_char_20const__2c_20SiteID___Iterator___Iterator_28_29($2 + 16 | 0);
__resumeException($1 | 0);
abort();
}
HashAny_char_20const__2c_20SiteID___Iterator___Iterator_28_29($2 + 16 | 0);
}
__stack_pointer = $2 + 32 | 0;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
__cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
return;
}
$4 = HEAP32[$0 + 12 >> 2];
$5 = $0 + 16 | 0;
__cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
$0 = $0 + 24 | 0;
$4 = ($4 << 3) + $5 | 0;
label$2: {
if ($0 >>> 0 >= $4 >>> 0) {
break label$2;
}
while (1) {
__cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
if (HEAPU8[$1 + 54 | 0]) {
break label$2;
}
$0 = $0 + 8 | 0;
if ($4 >>> 0 > $0 >>> 0) {
continue;
}
break;
}
}
}
function SHMScalarController__newTime_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0;
HEAP32[17058] = HEAP32[17058] + 1;
if (HEAP32[$0 + 60 >> 2] == 1) {
HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 76 >> 2];
return;
}
$2 = HEAPF32[$0 + 68 >> 2];
label$2: {
if ($2 == Math_fround(-1)) {
HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 76 >> 2];
break label$2;
}
label$4: {
$2 = Math_fround($1 - $2);
$4 = HEAPF32[$0 + 56 >> 2];
if ($2 <= $4 | $4 == Math_fround(0)) {
break label$4;
}
$6 = +Math_fround($2 / $4) + .99;
label$5: {
if (Math_abs($6) < 2147483648) {
$3 = ~~$6;
break label$5;
}
$3 = -2147483648;
}
if (($3 | 0) <= 1) {
break label$4;
}
$2 = Math_fround($2 / Math_fround($3 | 0));
$5 = 0;
while (1) {
if (($5 | 0) == ($3 | 0)) {
break label$2;
}
SHMScalarController__microUpdate_28float_29($0, $2);
$5 = $5 + 1 | 0;
continue;
}
}
SHMScalarController__microUpdate_28float_29($0, $2);
}
HEAPF32[$0 + 68 >> 2] = $1;
}
function CircularMovement__CircularMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 2, $1);
HEAP32[$0 >> 2] = 61884;
Direction3__Direction3_28_29($0 + 528 | 0);
Direction3__Direction3_28_29($0 + 540 | 0);
HEAP32[$0 + 552 >> 2] = 0;
Direction2__Direction2_28_29($0 + 556 | 0);
HEAP16[$0 + 564 >> 1] = 0;
Direction2__Direction2_28_29($0 + 568 | 0);
Direction2__Direction2_28_29($0 + 576 | 0);
$1 = memset($0 + 616 | 0, 0, 136);
HEAP16[$0 + 606 >> 1] = 0;
HEAP16[$0 + 608 >> 1] = 0;
HEAP16[$0 + 610 >> 1] = 0;
HEAP16[$0 + 612 >> 1] = 0;
HEAP32[$0 + 600 >> 2] = 0;
HEAP32[$0 + 604 >> 2] = 0;
HEAP32[$0 + 592 >> 2] = 0;
HEAP32[$0 + 596 >> 2] = 0;
HEAP32[$0 + 584 >> 2] = 0;
HEAP32[$0 + 588 >> 2] = 0;
HEAP32[19359] = 0;
invoke_ii(465, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 24 >> 2] = 4;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function printFingerbendCode_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20FingerBending_2c_20char_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $2), 15262);
FingerBending__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($1, $0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 48340);
}
function OneHGesture__propagateHandStuff_28OneHandStuff__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = $0 + 20 | 0;
$4 = Direction3__defined_28_29_20const($2);
label$1: {
if ($4) {
Direction3__operator__28Direction3_20const__29($1, $2);
break label$1;
}
Direction3__operator__28Direction3_20const__29($2, $1);
}
$2 = $1 + 12 | 0;
$3 = $0 + 32 | 0;
label$3: {
label$4: {
if (Direction2__defined_28_29_20const($3)) {
Direction2__operator__28Direction2_20const__29($2, $3);
break label$4;
}
Direction2__operator__28Direction2_20const__29($3, $2);
if (!$4) {
break label$3;
}
}
OneHandStuff__calcHandRot_28_29($1);
}
if (!Handshape__defined_28_29_20const(HEAP32[$0 + 56 >> 2])) {
Handshape__setHandshapeFrom_28Handshape_20const__29(HEAP32[$0 + 56 >> 2], HEAP32[$1 + 36 >> 2]);
}
HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 56 >> 2];
Handshape__CalcJointBendCodes_28_29(HEAP32[$0 + 56 >> 2]);
$1 = HEAP32[$0 + 56 >> 2];
$0 = HEAP32[$0 + 72 >> 2];
Handshape__CalcJointRotations_28Gesture_20const__2c_20HanimAvatar_20const__29($1, $0, HEAP32[$0 >> 2]);
}
function SphereInterpolator__setFrom_28float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$7 = __stack_pointer - 80 | 0;
__stack_pointer = $7;
HEAPF32[$7 + 76 >> 2] = $6;
$6 = sinf($1);
$8 = Vector__Vector_28float_2c_20float_2c_20float_29($7 - -64 | 0, Math_fround(0), Math_fround(-cosf($1)), Math_fround(-$6));
$9 = Vector__Vector_28float_2c_20float_2c_20float_29($7 + 48 | 0, Math_fround(0), Math_fround(-cosf($2)), sinf($2));
$10 = Vector__Vector_28float_2c_20float_2c_20float_29($7 + 32 | 0, sinf($3), Math_fround(0), cosf($3));
$3 = cosf($4);
$11 = Vector__Vector_28float_2c_20float_2c_20float_29($7 + 16 | 0, sinf($4), Math_fround(0), Math_fround(-$3));
$4 = cosf($5);
SphereInterpolator__setFrom_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_20const__29($0, $8, $9, $10, $11, Vector__Vector_28float_2c_20float_2c_20float_29($7, sinf($5), Math_fround(-$4), Math_fround(0)), $7 + 76 | 0);
__stack_pointer = $7 + 80 | 0;
}
function SeqMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0;
label$1: {
if (!($2 <= Math_fround(0))) {
$6 = HEAP32[$0 + 540 >> 2];
if ($6) {
break label$1;
}
}
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
return;
}
$7 = $3 ? $2 : Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]) - $2);
$8 = $0 + 528 | 0;
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($8, 0);
$5 = HEAPF32[$4 + 40 >> 2];
$2 = $5;
$0 = 1;
while (1) {
if (!(!($2 <= $7) | ($0 | 0) >= ($6 | 0))) {
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($8, $0);
$5 = HEAPF32[$4 + 40 >> 2];
$2 = Math_fround($2 + $5);
$0 = $0 + 1 | 0;
continue;
}
break;
}
$2 = Math_fround($7 - Math_fround($2 - $5));
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 60 >> 2]]($4, $1, $3 ? $2 : Math_fround($5 - $2), $3);
}
function makeOctagon_28Vector_20const__2c_20Vector__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
if (!HEAPU8[68352]) {
HEAP8[68352] = 1;
wasm2js_i32$0 = 68348, wasm2js_f32$0 = Math_fround(Math_fround(1) / cosf(Math_fround(HEAPF32[17089] * Math_fround(.25)))), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
while (1) {
if (($2 | 0) == 4) {
label$4: {
$3 = Vector__Vector_28_29($4);
Vector__setCentroid_28int_2c_20Vector_20const__29($3, 4, $0);
$2 = 0;
while (1) {
if (($2 | 0) == 4) {
break label$4;
}
$0 = Math_imul($2, 12) + $1 | 0;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $3, $0, HEAPF32[17087]);
$2 = $2 + 1 | 0;
continue;
}
}
} else {
$3 = Math_imul($2, 12);
$2 = $2 + 1 | 0;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($3 + $1 | 0, $0 + $3 | 0, Math_imul($2 & 3, 12) + $0 | 0);
continue;
}
break;
}
__stack_pointer = $4 + 16 | 0;
}
function DirectedMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Direction3__operator__28Direction3_20const__29($0 + 528 | 0, $1 + 80 | 0);
HEAP32[$0 + 540 >> 2] = HEAP32[$1 + 92 >> 2];
Direction3__operator__28Direction3_20const__29($0 + 544 | 0, $1 + 96 | 0);
HEAP32[$0 + 556 >> 2] = HEAP32[$1 + 108 >> 2];
Direction2__operator__28Direction2_20const__29($0 + 560 | 0, $1 + 112 | 0);
HEAP32[$0 + 568 >> 2] = HEAP32[$1 + 120 >> 2];
HEAP32[$0 + 572 >> 2] = HEAP32[$1 + 124 >> 2];
HEAP32[$0 + 576 >> 2] = HEAP32[$1 + 128 >> 2];
HEAP32[$0 + 580 >> 2] = HEAP32[$1 + 132 >> 2];
HEAP32[$0 + 584 >> 2] = HEAP32[$1 + 136 >> 2];
Direction2__operator__28Direction2_20const__29($0 + 588 | 0, $1 + 140 | 0);
HEAP16[$0 + 596 >> 1] = HEAPU16[$1 + 148 >> 1];
$1 = HEAP32[$0 + 568 >> 2] - 1 | 0;
if ($1 >>> 0 <= 3) {
HEAP32[$0 + 24 >> 2] = HEAP32[($1 << 2) + 49528 >> 2];
}
if (HEAP32[$0 + 572 >> 2]) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(37021, 0);
}
HEAP32[$0 + 12 >> 2] = 11;
}
}
function printThumbbendCode_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20ThumbBending_2c_20char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801] + 1 | 0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 12829), 15262);
ThumbBending__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($1, $0);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 48340);
}
function CheckIsHandSite_28SiteID__2c_20bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!SiteID__defined_28_29_20const($0)) {
break label$1;
}
$4 = $1 ? 1 : 2;
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
$5 = $2 >>> 8 & 15;
label$2: {
if ($5) {
if (($4 | 0) == ($5 | 0)) {
break label$2;
}
LogTime_28_29();
HEAP32[$3 >> 2] = $1 ? 2792 : 2846;
eprintf_28char_20const__2c_20____29(19408, $3);
SiteID__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = $2 & -3841 | $4 << 8;
HEAP16[$0 >> 1] = $2;
}
$2 = $2 & 255;
if (!$2) {
break label$1;
}
if (isHandLocation_28short_29($2)) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(19467, 0);
SiteID__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
}
__stack_pointer = $3 + 16 | 0;
}
function Controller__update_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0;
HEAP32[17058] = HEAP32[17058] + 1;
if (HEAP32[$0 + 44 >> 2] == 1) {
HEAPF32[$0 + 68 >> 2] = HEAPF32[$0 + 64 >> 2];
return;
}
$2 = HEAPF32[$0 + 52 >> 2];
label$2: {
if ($2 == Math_fround(-1)) {
HEAPF32[$0 + 68 >> 2] = HEAPF32[$0 + 64 >> 2];
break label$2;
}
label$4: {
$2 = Math_fround($1 - $2);
$4 = HEAPF32[$0 + 40 >> 2];
if ($2 <= $4 | $4 == Math_fround(0)) {
break label$4;
}
$6 = +Math_fround($2 / $4) + .99;
label$5: {
if (Math_abs($6) < 2147483648) {
$3 = ~~$6;
break label$5;
}
$3 = -2147483648;
}
if (($3 | 0) <= 1) {
break label$4;
}
$2 = Math_fround($2 / Math_fround($3 | 0));
$5 = 0;
while (1) {
if (($5 | 0) == ($3 | 0)) {
break label$2;
}
Controller__microUpdate_28float_29($0, $2);
$5 = $5 + 1 | 0;
continue;
}
}
Controller__microUpdate_28float_29($0, $2);
}
HEAPF32[$0 + 52 >> 2] = $1;
}
function element2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 18 | 0) {
default:
if (($1 | 0) != 15) {
break label$3;
}
return 39;
case 2:
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, HEAP32[$4 + 64 >> 2] + $2 | 0, $3, 49947) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 818;
return 43;
case 5:
HEAP32[$0 + 4 >> 2] = 2;
HEAP32[$0 >> 2] = 819;
return 44;
case 12:
HEAP32[$0 >> 2] = 820;
return 53;
case 13:
HEAP32[$0 >> 2] = 820;
return 52;
case 0:
break label$1;
case 1:
case 3:
case 4:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
break label$2;
case 14:
break label$4;
}
}
HEAP32[$0 >> 2] = 820;
return 54;
}
if (($1 | 0) == 41) {
break label$1;
}
}
common($0);
return -1;
}
HEAP32[$0 >> 2] = 820;
return 51;
}
function Getopts__Addopt_28OptionType_2c_20bool_2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
HEAP32[$5 + 12 >> 2] = $4;
$6 = operator_20new_28unsigned_20long_29(20);
HEAP32[19359] = 0;
invoke_iiiii(55, $6 | 0, $1 | 0, $2 | 0, $3 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
DynamicArrayP_OptionSpec___appendElement_28OptionSpec__29(HEAP32[$0 + 8 >> 2], $6);
$6 = HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2] - 1 | 0;
while (1) {
$4 = HEAP32[$5 + 12 >> 2];
HEAP32[$5 + 12 >> 2] = $4 + 4;
$4 = HEAP32[$4 >> 2];
if ($4) {
$4 = copyString_28char_20const__29($4);
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29(HEAP32[$0 >> 2], $4, $6);
DynamicArrayP_char___appendElement_28char__29(HEAP32[$0 + 4 >> 2], $4);
continue;
}
break;
}
__stack_pointer = $5 + 16 | 0;
return;
}
$4 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
__resumeException($4 | 0);
abort();
}
function MotionAttributes__MotionAttributes_28char_20const__2c_20HashAny_char_20const__2c_20char_20const____2c_20bool_29($0, $1, $2, $3) {
var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
Mirroring__Mirroring_28_29($0 + 4 | 0);
MannerFlags__MannerFlags_28_29($0 + 8 | 0);
Direction3__Direction3_28_29($0 + 56 | 0);
Direction3__Direction3_28_29($0 + 80 | 0);
Direction3__Direction3_28_29($0 + 96 | 0);
Direction2__Direction2_28_29($0 + 112 | 0);
Direction2__Direction2_28_29($0 + 140 | 0);
Direction3__Direction3_28_29($0 + 152 | 0);
Direction3__Direction3_28_29($0 + 164 | 0);
Direction2__Direction2_28_29($0 + 180 | 0);
Direction2__Direction2_28_29($0 + 192 | 0);
wasm2js_i32$0 = $4, wasm2js_i32$1 = HEAPU16[Mirroring__Mirroring_28_29($4 + 8 | 0) >> 1], 
HEAP16[wasm2js_i32$0 + 6 >> 1] = wasm2js_i32$1;
MotionAttributes__setFromXMLAttribs_28char_20const__2c_20HashAny_char_20const__2c_20char_20const____2c_20Mirroring_2c_20bool_29($0, $1, $2, $4 + 6 | 0, $3);
__stack_pointer = $4 + 16 | 0;
return $0;
}
function CircularMovement__CircularMovement_28CircularMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 61884;
Direction3__Direction3_28_29($0 + 528 | 0);
Direction3__Direction3_28_29($0 + 540 | 0);
Direction2__Direction2_28_29($0 + 556 | 0);
Direction2__Direction2_28_29($0 + 568 | 0);
Direction2__Direction2_28_29($0 + 576 | 0);
HEAP32[19359] = 0;
$2 = invoke_ii(465, $0 + 616 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($3 | 0) != 1) {
HEAP32[19359] = 0;
invoke_iii(466, $0 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHCircMoveSpec___TwoHCircMoveSpec_28_29($2);
}
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function TwoHAbstractPosture__TwoHAbstractPosture_28Gesture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$0 = OneHAbstractPosture__OneHAbstractPosture_28OneHAbstractPosture_20const__29($0, HEAP32[$1 + 20 >> 2]);
$2 = HEAP32[$1 + 24 >> 2];
HEAP32[19359] = 0;
$3 = invoke_iii(446, $0 + 72 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
$4 = invoke_ii(447, $0 + 144 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
HEAP8[$0 + 52 | 0] = 0;
HEAP8[$0 + 124 | 0] = 0;
$1 = HEAP32[$1 + 40 >> 2];
if ($1) {
HEAP32[$4 >> 2] = HEAP32[$1 + 44 >> 2];
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHAbstractPosture___OneHAbstractPosture_28_29($3);
}
OneHAbstractPosture___OneHAbstractPosture_28_29($0);
__resumeException($1 | 0);
abort();
}
function HashAny_char_20const__2c_20int____HashAny_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if (HEAP32[$0 >> 2]) {
while (1) {
$1 = HEAP32[$0 >> 2];
if (HEAP32[$0 + 4 >> 2] <= ($3 | 0)) {
dlfree($1);
} else {
$4 = $3 << 3;
$5 = HEAP32[$4 + $1 >> 2];
if ($5) {
operator_20delete_28void__29(HashChain_char_20const__2c_20int____HashChain_28_29($5));
HEAP32[HEAP32[$0 >> 2] + $4 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
}
HEAP16[($1 + $4 | 0) + 4 >> 1] = 0;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
$3 = HEAP32[$0 + 8 >> 2];
HEAP32[16921] = $3 + HEAP32[16921];
$1 = HEAP32[$0 + 24 >> 2];
HEAP32[16920] = $1 + HEAP32[16920];
if (HEAPU8[67577]) {
$4 = HEAP32[$0 + 4 >> 2];
HEAPF64[$2 + 16 >> 3] = $1 ? +($3 | 0) * 100 / +($1 | 0) : 0;
HEAP32[$2 + 12 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(48244, $2);
}
__stack_pointer = $2 + 32 | 0;
return $0;
}
function memchr($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = ($2 | 0) != 0;
label$1: {
label$2: {
label$3: {
if (!($0 & 3) | !$2) {
break label$3;
}
$4 = $1 & 255;
while (1) {
if (HEAPU8[$0 | 0] == ($4 | 0)) {
break label$2;
}
$2 = $2 - 1 | 0;
$3 = ($2 | 0) != 0;
$0 = $0 + 1 | 0;
if (!($0 & 3)) {
break label$3;
}
if ($2) {
continue;
}
break;
}
}
if (!$3) {
break label$1;
}
}
label$5: {
if (!(HEAPU8[$0 | 0] == ($1 & 255) | $2 >>> 0 < 4)) {
$4 = Math_imul($1 & 255, 16843009);
while (1) {
$3 = HEAP32[$0 >> 2] ^ $4;
if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
break label$5;
}
$0 = $0 + 4 | 0;
$2 = $2 - 4 | 0;
if ($2 >>> 0 > 3) {
continue;
}
break;
}
}
if (!$2) {
break label$1;
}
}
$3 = $1 & 255;
while (1) {
if (HEAPU8[$0 | 0] == ($3 | 0)) {
return $0;
}
$0 = $0 + 1 | 0;
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
return 0;
}
function TargettedMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
HEAP32[$2 + 32 >> 2] = $0;
fiprintf($1, 24852, $2 + 32 | 0);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 528 >> 2];
fiprintf($1, 24275, $2 + 16 | 0);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29(HEAPU8[$0 + 532 | 0]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
fiprintf($1, 31428, $2);
if (!HEAPU8[$0 + 532 | 0] | !HEAP32[$0 + 528 >> 2]) {
break label$1;
}
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(23436, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
Gesture__print_28_IO_FILE__29_20const(HEAP32[$0 + 528 >> 2], $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
__stack_pointer = $2 + 48 | 0;
}
function normal_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
label$1: {
label$2: {
label$3: {
switch (($2 - $1 | 0) - 2 | 0) {
case 0:
if (HEAPU8[$1 + 1 | 0] != 116) {
break label$2;
}
$1 = HEAPU8[$1 | 0];
return (($1 | 0) == 108 ? 60 : ($1 | 0) == 103 ? 62 : 0) | 0;
case 1:
if (HEAPU8[$1 | 0] != 97 | HEAPU8[$1 + 1 | 0] != 109) {
break label$2;
}
$2 = 38;
if (HEAPU8[$1 + 2 | 0] != 112) {
break label$2;
}
break label$1;
case 2:
break label$3;
default:
break label$2;
}
}
$2 = HEAP8[$1 | 0];
if (($2 | 0) != 97) {
if (($2 | 0) != 113 | HEAPU8[$1 + 1 | 0] != 117 | HEAPU8[$1 + 2 | 0] != 111) {
break label$2;
}
$2 = 34;
if (HEAPU8[$1 + 3 | 0] != 116) {
break label$2;
}
break label$1;
}
if (HEAPU8[$1 + 1 | 0] != 112 | HEAPU8[$1 + 2 | 0] != 111) {
break label$2;
}
$2 = 39;
if (HEAPU8[$1 + 3 | 0] == 115) {
break label$1;
}
}
$2 = 0;
}
return $2 | 0;
}
function Vector__coneAxis_28float__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3, $4, $5) {
var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
Vector__Vector_28Vector_20const__29($6 + 32 | 0, $3);
Vector__setSubtract_28Vector_20const__29($6 + 32 | 0, $2);
Vector__setUnit_28_29($6 + 32 | 0);
Vector__Vector_28Vector_20const__29($6 + 16 | 0, $4);
Vector__setSubtract_28Vector_20const__29($6 + 16 | 0, $2);
Vector__setUnit_28_29($6 + 16 | 0);
Vector__Vector_28Vector_20const__29($6, $5);
Vector__setSubtract_28Vector_20const__29($6, $2);
Vector__setUnit_28_29($6);
Vector__circumCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $6 + 32 | 0, $6 + 16 | 0, $6);
Vector__setUnit_28_29($0);
wasm2js_i32$0 = $1, wasm2js_f32$0 = Vector__angleWith_28Vector_20const__29_20const($0, $6 + 32 | 0), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
Vector__checkValidVector_28_29_20const($0);
__stack_pointer = $6 + 48 | 0;
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
__cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
return;
}
label$2: {
if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
break label$2;
}
if (!(HEAP32[$1 + 16 >> 2] != ($2 | 0) & HEAP32[$1 + 20 >> 2] != ($2 | 0))) {
if (($3 | 0) != 1) {
break label$2;
}
HEAP32[$1 + 32 >> 2] = 1;
return;
}
HEAP32[$1 + 20 >> 2] = $2;
HEAP32[$1 + 32 >> 2] = $3;
HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
HEAP8[$1 + 54 | 0] = 1;
}
HEAP32[$1 + 44 >> 2] = 4;
}
}
function Vector__tripleProduct_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
$3 = Vector__x_28_29_20const($0);
$4 = Vector__y_28_29_20const($1);
$5 = Vector__z_28_29_20const($2);
$6 = Vector__y_28_29_20const($0);
$7 = Vector__z_28_29_20const($1);
$8 = Vector__x_28_29_20const($2);
return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Vector__z_28_29_20const($0) * Vector__x_28_29_20const($1)) * Vector__y_28_29_20const($2)) + Math_fround(Math_fround($5 * Math_fround($3 * $4)) + Math_fround($8 * Math_fround($6 * $7)))) - Math_fround(Math_fround(Vector__x_28_29_20const($0) * Vector__z_28_29_20const($1)) * Vector__y_28_29_20const($2))) - Math_fround(Math_fround(Vector__z_28_29_20const($0) * Vector__y_28_29_20const($1)) * Vector__x_28_29_20const($2))) - Math_fround(Math_fround(Vector__y_28_29_20const($0) * Vector__x_28_29_20const($1)) * Vector__z_28_29_20const($2)));
}
function SeqTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if ($1) {
$7 = HEAPF32[$0 + 4 >> 2];
$8 = HEAPF32[$0 + 8 >> 2];
$9 = HEAPF32[$0 + 12 >> 2];
HEAPF64[$3 + 24 >> 3] = HEAPF32[$0 + 16 >> 2];
HEAPF64[$3 + 16 >> 3] = $9;
HEAPF64[$3 + 8 >> 3] = $8;
HEAPF64[$3 >> 3] = $7;
__small_fprintf($1, 7641, $3);
$6 = $2 + 1 | 0;
while (1) {
$4 = HEAP32[HEAP32[$0 + 24 >> 2] + 12 >> 2];
fputc(10, $1);
if (($4 | 0) <= ($5 | 0)) {
printIndent_28_IO_FILE__2c_20int_29($1, $2);
fputs(14816, $1);
} else {
printIndent_28_IO_FILE__2c_20int_29($1, $6);
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[$0 + 24 >> 2], $5);
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, $1, $6);
$5 = $5 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $3 + 32 | 0;
}
function ParTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if ($1) {
$7 = HEAPF32[$0 + 4 >> 2];
$8 = HEAPF32[$0 + 8 >> 2];
$9 = HEAPF32[$0 + 12 >> 2];
HEAPF64[$3 + 24 >> 3] = HEAPF32[$0 + 16 >> 2];
HEAPF64[$3 + 16 >> 3] = $9;
HEAPF64[$3 + 8 >> 3] = $8;
HEAPF64[$3 >> 3] = $7;
__small_fprintf($1, 7616, $3);
$6 = $2 + 1 | 0;
while (1) {
$4 = HEAP32[HEAP32[$0 + 24 >> 2] + 12 >> 2];
fputc(10, $1);
if (($4 | 0) <= ($5 | 0)) {
printIndent_28_IO_FILE__2c_20int_29($1, $2);
fputs(14811, $1);
} else {
printIndent_28_IO_FILE__2c_20int_29($1, $6);
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const(HEAP32[$0 + 24 >> 2], $5);
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, $1, $6);
$5 = $5 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $3 + 32 | 0;
}
function parseQuaternion_28Quaternion__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
HEAP32[$3 + 56 >> 2] = 0;
HEAP32[$3 + 60 >> 2] = 0;
HEAP32[$3 + 48 >> 2] = 0;
HEAP32[$3 + 52 >> 2] = 0;
HEAP32[$3 + 40 >> 2] = 0;
HEAP32[$3 + 44 >> 2] = 0;
HEAP32[$3 + 32 >> 2] = 0;
HEAP32[$3 + 36 >> 2] = 0;
HEAP32[$3 + 16 >> 2] = $3 + 56;
HEAP32[$3 + 20 >> 2] = $3 + 48;
HEAP32[$3 + 24 >> 2] = $3 + 40;
HEAP32[$3 + 28 >> 2] = $3 + 32;
$1 = sscanf($1, 7519, $3 + 16 | 0);
if (($1 | 0) != 4) {
LogTime_28_29();
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = 2262;
eprintf_28char_20const__2c_20____29(45447, $3);
}
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(HEAPF64[$3 + 56 >> 3]), Math_fround(HEAPF64[$3 + 48 >> 3]), Math_fround(HEAPF64[$3 + 40 >> 3]), Math_fround(HEAPF64[$3 + 32 >> 3]));
Quaternion__normalise_28_29($0);
}
__stack_pointer = $3 - -64 | 0;
}
function Gesture__installPosture_28OneHConcretePosture_20const__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$5 = (HEAP32[HEAP32[$0 >> 2] + 76 >> 2] + ((!(HEAPU8[$0 + 13 | 0] & 64) ^ $2) << 3) | 0) + 10 | 0;
$6 = HEAP32[$0 + 4 >> 2];
while (1) {
if (($3 | 0) == 4) {
$3 = Vector__Vector_28_29($4);
OneHConcretePosture__computeWristLoc_28HanimAvatar_20const__2c_20Vector__29_20const($1, HEAP32[$0 >> 2], $3);
if (HEAPU8[67561]) {
eprintf_28char_20const__2c_20____29(30012, 0);
}
HanimAvatar__computeArmRotations_28JointRotation___2c_20bool_2c_20Vector_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_2c_20float_29_20const(HEAP32[$0 >> 2], $4 + 16 | 0, !(HEAPU8[$0 + 13 | 0] & 64) ^ $2, $3, $1 + 40 | 0, $1 + 76 | 0, Math_fround(0), Math_fround(0));
__stack_pointer = $4 + 32 | 0;
} else {
HEAP32[($4 + 16 | 0) + ($3 << 2) >> 2] = HEAP32[(HEAP16[($3 << 1) + $5 >> 1] << 2) + $6 >> 2];
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function OneHAbstractPosture__reportUndefined_28_IO_FILE__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 80 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = $2 ? 10100 : 10084;
if (!SiteIDPair__defined_28_29_20const($0 + 4 | 0)) {
HEAP32[$3 + 64 >> 2] = $2;
fiprintf($1, 36402, $3 - -64 | 0);
}
if (!SiteID__defined_28_29_20const($0 + 16 | 0)) {
HEAP32[$3 + 48 >> 2] = $2;
fiprintf($1, 36448, $3 + 48 | 0);
}
if (!Direction3__defined_28_29_20const($0 + 20 | 0)) {
HEAP32[$3 + 32 >> 2] = $2;
fiprintf($1, 36227, $3 + 32 | 0);
}
if (!Direction2__defined_28_29_20const($0 + 32 | 0)) {
HEAP32[$3 + 16 >> 2] = $2;
fiprintf($1, 36265, $3 + 16 | 0);
}
$4 = HEAP32[$0 + 56 >> 2];
label$6: {
if (!$4) {
break label$6;
}
if (!Handshape__defined_28_29_20const($4)) {
break label$6;
}
if (HEAP32[HEAP32[$0 + 56 >> 2] + 236 >> 2]) {
break label$1;
}
}
HEAP32[$3 >> 2] = $2;
fiprintf($1, 36470, $3);
}
__stack_pointer = $3 + 80 | 0;
}
function internalEntityProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$7 = __stack_pointer - 16 | 0;
__stack_pointer = $7;
$5 = HEAP32[$0 + 284 >> 2];
label$1: {
if (!$5) {
$4 = 23;
break label$1;
}
$6 = HEAP32[$5 + 12 >> 2];
$4 = HEAP32[$6 + 4 >> 2];
$8 = $4 + HEAP32[$6 + 8 >> 2] | 0;
$4 = doContent($0, HEAP32[$5 + 16 >> 2], HEAP32[$0 + 224 >> 2], HEAP32[$6 + 12 >> 2] + $4 | 0, $8, $7 + 12 | 0, 0);
if ($4) {
break label$1;
}
$4 = HEAP32[$7 + 12 >> 2];
if (!(($8 | 0) == ($4 | 0) | HEAP32[$0 + 464 >> 2] != 3)) {
HEAP32[$6 + 12 >> 2] = $4 - HEAP32[$6 + 4 >> 2];
$4 = 0;
break label$1;
}
HEAP8[$6 + 32 | 0] = 0;
HEAP32[$0 + 284 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 288 >> 2];
HEAP32[$0 + 264 >> 2] = 773;
HEAP32[$0 + 288 >> 2] = $5;
$4 = doContent($0, HEAP32[$0 + 460 >> 2] != 0, HEAP32[$0 + 144 >> 2], $1, $2, $3, !HEAPU8[$0 + 468 | 0]);
}
__stack_pointer = $7 + 16 | 0;
return $4 | 0;
}
function HashAny_char_20const__2c_20SiteID___nextIteration_28char_20const___2c_20SiteID__2c_20HashAny_char_20const__2c_20SiteID___Iterator__29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$5 = HEAP32[$3 >> 2];
label$1: {
if (($5 | 0) >= HEAP32[$0 + 4 >> 2]) {
break label$1;
}
$4 = HEAP32[$3 + 4 >> 2];
while (1) {
label$3: {
label$4: {
label$5: {
if (!$4) {
$5 = $5 + 1 | 0;
HEAP32[$3 >> 2] = $5;
if (HEAP32[$0 + 4 >> 2] <= ($5 | 0)) {
HEAP32[$3 + 4 >> 2] = 0;
break label$4;
}
$4 = HEAP32[$0 >> 2] + ($5 << 3) | 0;
break label$5;
}
$4 = $4 + 8 | 0;
}
$4 = HEAP32[$4 >> 2];
HEAP32[$3 + 4 >> 2] = $4;
if ($4) {
break label$3;
}
}
$4 = 0;
if (HEAP32[$0 + 4 >> 2] > ($5 | 0)) {
continue;
}
break label$1;
}
break;
}
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
$4 = HEAP32[$3 + 4 >> 2];
HEAP16[$2 >> 1] = HEAPU16[$4 + 4 >> 1];
HEAP8[$2 + 2 | 0] = HEAPU8[$4 + 6 | 0];
$4 = 1;
}
return $4;
}
function OneHGesture__ShiftToPalm_28OneHConcretePosture__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
$4 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2];
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($2 + 40 | 0, 1, OneHGesture__isRightHand_28_29_20const($0) ? 1 : 2, 0, 0, 1, 0);
$3 = Vector__Vector_28_29($2 + 24 | 0);
HEAP32[$2 + 20 >> 2] = 0;
$5 = HEAP32[$2 + 40 >> 2];
HEAP32[$2 + 8 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = $5;
HEAP32[$2 + 16 >> 2] = 0;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($4, 0, $2 + 4 | 0, $3, $2 + 20 | 0, $2 + 16 | 0);
Gesture__transferLocation_28Vector__2c_20Joint__2c_20Joint__2c_20Vector_20const__29(HEAP32[$0 + 72 >> 2], $3, HEAP32[(HEAP32[$4 + 72 >> 2] + (OneHGesture__isRightHand_28_29_20const($0) << 4) | 0) + 32 >> 2], HEAP32[$2 + 20 >> 2], $3);
OneHConcretePosture__shiftHandSite_28Vector_20const__29($1, $3);
__stack_pointer = $2 + 48 | 0;
}
function wcrtomb($0, $1, $2) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = 1;
label$1: {
if ($0) {
if ($1 >>> 0 <= 127) {
break label$1;
}
label$3: {
if (!HEAP32[HEAP32[__get_tp() + 88 >> 2] >> 2]) {
if (($1 & -128) == 57216) {
break label$1;
}
break label$3;
}
if ($1 >>> 0 <= 2047) {
HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
HEAP8[$0 | 0] = $1 >>> 6 | 192;
return 2;
}
if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
HEAP8[$0 | 0] = $1 >>> 12 | 224;
HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
return 3;
}
if ($1 - 65536 >>> 0 <= 1048575) {
HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
HEAP8[$0 | 0] = $1 >>> 18 | 240;
HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
return 4;
}
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = -1;
}
return $2;
}
HEAP8[$0 | 0] = $1;
return 1;
}
function SeqTimedMorph__CalcTiming_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2]) {
HEAPF32[$0 + 4 >> 2] = $1;
while (1) {
if (HEAP32[$2 + 12 >> 2] <= ($5 | 0)) {
$6 = HEAPF32[DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, 0) + 8 >> 2];
HEAPF32[$0 + 12 >> 2] = $1;
HEAPF32[$0 + 8 >> 2] = $6;
HEAPF32[$0 + 16 >> 2] = HEAPF32[$3 + 16 >> 2];
} else {
$3 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $5);
label$5: {
if (!$3) {
LogTime_28_29();
HEAP32[$4 >> 2] = $5;
eprintf_28char_20const__2c_20____29(31505, $4);
break label$5;
}
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $1);
$1 = HEAPF32[$3 + 12 >> 2];
}
$5 = $5 + 1 | 0;
$2 = HEAP32[$0 + 24 >> 2];
continue;
}
break;
}
}
__stack_pointer = $4 + 16 | 0;
}
function __stdio_read($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
HEAP32[$4 + 16 >> 2] = $1;
$3 = HEAP32[$0 + 48 >> 2];
HEAP32[$4 + 20 >> 2] = $2 - (($3 | 0) != 0);
$6 = HEAP32[$0 + 44 >> 2];
HEAP32[$4 + 28 >> 2] = $3;
HEAP32[$4 + 24 >> 2] = $6;
$3 = 32;
label$1: {
label$2: {
if (!__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
$3 = HEAP32[$4 + 12 >> 2];
if (($3 | 0) > 0) {
break label$2;
}
$3 = $3 ? 32 : 16;
}
HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $3;
break label$1;
}
$6 = HEAP32[$4 + 20 >> 2];
if ($6 >>> 0 >= $3 >>> 0) {
$5 = $3;
break label$1;
}
$5 = HEAP32[$0 + 44 >> 2];
HEAP32[$0 + 4 >> 2] = $5;
HEAP32[$0 + 8 >> 2] = ($3 - $6 | 0) + $5;
if (HEAP32[$0 + 48 >> 2]) {
HEAP32[$0 + 4 >> 2] = $5 + 1;
HEAP8[($1 + $2 | 0) - 1 | 0] = HEAPU8[$5 | 0];
}
$5 = $2;
}
__stack_pointer = $4 + 32 | 0;
return $5 | 0;
}
function little2_scanCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
label$2: {
$5 = HEAPU8[$1 + 1 | 0];
label$3: {
if (!$5) {
if (($4 | 0) == 120) {
return little2_scanHexCharRef($0, $1 + 2 | 0, $2, $3);
}
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
break label$3;
}
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
}
if (($4 | 0) != 25) {
break label$2;
}
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 2 | 0];
$7 = HEAPU8[$4 + 3 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if (($5 | 0) == 25) {
continue;
}
break;
}
if (($5 | 0) != 18) {
break label$2;
}
HEAP32[$3 >> 2] = $4 + 4;
return 10;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
return $6;
}
function AddMovementsFromXML_28Gesture_20const__2c_20SeqMovement__2c_20DynamicArrayP_XMLCell___2c_20int_2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $1, $2, $3, $4, $5, $6, $7) {
var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
$8 = __stack_pointer - 16 | 0;
__stack_pointer = $8;
label$1: {
if (!$1) {
break label$1;
}
$9 = HEAP32[$2 + 12 >> 2] - $3 | 0;
$11 = ($9 | 0) > 0 ? $9 : 0;
$9 = HEAPU16[$6 >> 1];
$6 = 0;
while (1) {
if (($6 | 0) == ($11 | 0)) {
break label$1;
}
$10 = DynamicArrayP_XMLCell___getElement_28int_29_20const($2, $3 + $6 | 0);
HEAP16[$8 + 8 >> 1] = $9;
HEAP16[$8 + 6 >> 1] = $9;
HEAP32[$8 + 12 >> 2] = 0;
SingleMovementFromXML_28Gesture_20const__2c_20BasicMovement___2c_20XMLCell__2c_20bool_2c_20bool_2c_20Mirroring_2c_20Location_29($0, $8 + 12 | 0, $10, $4, $5, $8 + 6 | 0, $7);
$10 = HEAP32[$8 + 12 >> 2];
if ($10) {
CompoundMovement__addComponent_28BasicMovement__29($1, $10);
}
$6 = $6 + 1 | 0;
continue;
}
}
__stack_pointer = $8 + 16 | 0;
}
function big2_scanCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$6 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
label$2: {
$5 = HEAPU8[$1 | 0];
label$3: {
if (!$5) {
if (($4 | 0) == 120) {
return big2_scanHexCharRef($0, $1 + 2 | 0, $2, $3);
}
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
break label$3;
}
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
}
if (($4 | 0) != 25) {
break label$2;
}
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 3 | 0];
$7 = HEAPU8[$4 + 2 | 0];
if ($7) {
$5 = unicode_byte_type($7 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if (($5 | 0) == 25) {
continue;
}
break;
}
if (($5 | 0) != 18) {
break label$2;
}
HEAP32[$3 >> 2] = $4 + 4;
return 10;
}
HEAP32[$3 >> 2] = $1;
$6 = 0;
}
return $6;
}
function SSFrame__SetBoneRotation_28int_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0, $8 = 0;
label$1: {
label$2: {
if ((SSFrame__GetNumPRSets_28_29_20const($0) | 0) > ($1 | 0)) {
if (HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0 + 4 | 0, $1) >> 2]) {
break label$2;
}
}
$6 = operator_20new_28unsigned_20long_29(40);
HEAP32[19359] = 0;
$7 = invoke_ii(11, $6 | 0) | 0;
$8 = HEAP32[19359];
HEAP32[19359] = 0;
if (($8 | 0) == 1) {
break label$1;
}
SSFrame__SetPRSet_28SSPRSet__2c_20int_29($0, $7, $1);
}
SSPRSet__SetRotation_28float_2c_20float_2c_20float_2c_20float_29(HEAP32[std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0 + 4 | 0, $1) >> 2], $2, $3, $4, $5);
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($6);
__resumeException($0 | 0);
abort();
}
function HashAny_char_20const__2c_20int___makeSet_28char_20const__2c_20____29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 12 >> 2] = $1;
$3 = $0;
$4 = 1;
while (1) {
if ($3) {
$3 = HEAP32[$2 + 12 >> 2];
HEAP32[$2 + 12 >> 2] = $3 + 4;
$4 = $4 + 1 | 0;
$3 = HEAP32[$3 >> 2];
continue;
}
break;
}
$5 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$3 = invoke_iiii(38, $5 | 0, 0, Math_imul($4, 3) | 1) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[$2 + 12 >> 2] = $1;
while (1) {
if ($0) {
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29($3, $0, 1);
$0 = HEAP32[$2 + 12 >> 2];
HEAP32[$2 + 12 >> 2] = $0 + 4;
$0 = HEAP32[$0 >> 2];
continue;
}
break;
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($2 | 0);
abort();
}
function element6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
label$1: {
label$2: {
label$3: {
label$4: {
label$5: {
switch ($1 - 23 | 0) {
default:
$2 = 39;
switch ($1 - 15 | 0) {
case 3:
break label$1;
case 0:
break label$2;
case 1:
case 2:
break label$3;
default:
break label$4;
}
;
case 0:
HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
return 44;
case 7:
HEAP32[$0 >> 2] = 820;
return 53;
case 8:
HEAP32[$0 >> 2] = 820;
return 52;
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
break label$3;
case 9:
break label$5;
}
}
HEAP32[$0 >> 2] = 820;
return 54;
}
if (($1 | 0) == 41) {
break label$1;
}
}
common($0);
$2 = -1;
}
return $2 | 0;
}
HEAP32[$0 >> 2] = 820;
return 51;
}
function CircularMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 92 >> 2];
Direction3__operator__28Direction3_20const__29($0 + 528 | 0, $1 + 152 | 0);
Direction3__operator__28Direction3_20const__29($0 + 540 | 0, $1 + 164 | 0);
Direction2__operator__28Direction2_20const__29($0 + 556 | 0, $1 + 180 | 0);
Direction2__operator__28Direction2_20const__29($0 + 568 | 0, $1 + 192 | 0);
HEAP8[$0 + 564 | 0] = HEAPU8[$1 + 188 | 0];
HEAP8[$0 + 565 | 0] = HEAPU8[$1 + 189 | 0];
HEAP32[$0 + 588 >> 2] = HEAP32[$1 + 32 >> 2];
HEAP32[$0 + 592 >> 2] = HEAP32[$1 + 36 >> 2];
HEAP32[$0 + 584 >> 2] = HEAP32[$1 + 200 >> 2];
Direction2__operator__28Direction2_20const__29($0 + 576 | 0, $1 + 140 | 0);
HEAP32[$0 + 596 >> 2] = HEAP32[$1 + 124 >> 2];
HEAP32[$0 + 600 >> 2] = HEAP32[$1 + 128 >> 2];
HEAP32[$0 + 604 >> 2] = HEAP32[$1 + 132 >> 2];
HEAP32[$0 + 608 >> 2] = HEAP32[$1 + 136 >> 2];
HEAP16[$0 + 612 >> 1] = HEAPU16[$1 + 148 >> 1];
}
function attlist2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 33;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 15 | 0) {
case 3:
$1 = 0;
label$6: {
while (1) {
$5 = HEAP32[$4 + 24 >> 2];
if (($1 | 0) == 8) {
break label$6;
}
if (!(FUNCTION_TABLE[$5 | 0]($4, $2, $3, HEAP32[($1 << 2) + 63488 >> 2]) | 0)) {
$1 = $1 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 >> 2] = 811;
return $1 + 23 | 0;
}
if (!(FUNCTION_TABLE[$5 | 0]($4, $2, $3, 49851) | 0)) {
break label$3;
}
HEAP32[$0 >> 2] = 812;
return 33;
case 0:
break label$2;
case 1:
case 2:
break label$3;
default:
break label$4;
}
}
if (($1 | 0) == 23) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 >> 2] = 813;
return 33;
}
function Getopts___Getopts_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 8 >> 2];
label$1: {
if (!$1) {
break label$1;
}
DynamicArrayP_OptionSpec___deleteAll_28_29($1);
$1 = HEAP32[$0 + 8 >> 2];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(DynamicArrayP_OptionSpec____DynamicArrayP_28_29($1));
HEAP32[$0 + 8 >> 2] = 0;
}
label$2: {
$1 = HEAP32[$0 + 4 >> 2];
label$3: {
if (!$1) {
break label$3;
}
HEAP32[19359] = 0;
invoke_vi(51, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
$1 = HEAP32[$0 + 4 >> 2];
if (!$1) {
break label$3;
}
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 >> 2];
if ($1) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($1));
HEAP32[$0 >> 2] = 0;
}
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function HashAny_char_20const__2c_20char_20const____nextIteration_28char_20const___2c_20char_20const___2c_20HashAny_char_20const__2c_20char_20const____Iterator__29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$5 = HEAP32[$3 >> 2];
label$1: {
if (($5 | 0) >= HEAP32[$0 + 4 >> 2]) {
break label$1;
}
$4 = HEAP32[$3 + 4 >> 2];
while (1) {
label$3: {
label$4: {
label$5: {
if (!$4) {
$5 = $5 + 1 | 0;
HEAP32[$3 >> 2] = $5;
if (HEAP32[$0 + 4 >> 2] <= ($5 | 0)) {
HEAP32[$3 + 4 >> 2] = 0;
break label$4;
}
$4 = HEAP32[$0 >> 2] + ($5 << 3) | 0;
break label$5;
}
$4 = $4 + 8 | 0;
}
$4 = HEAP32[$4 >> 2];
HEAP32[$3 + 4 >> 2] = $4;
if ($4) {
break label$3;
}
}
$4 = 0;
if (HEAP32[$0 + 4 >> 2] > ($5 | 0)) {
continue;
}
break label$1;
}
break;
}
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$2 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2];
$4 = 1;
}
return $4;
}
function SphereInterpolator__interpolate_28Vector_20const__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
label$1: {
if (Vector__isZero_28_29_20const($1)) {
$3 = HEAPF32[$0 + 336 >> 2];
break label$1;
}
$4 = Vector__Vector_28_29($2 + 32 | 0);
SphereInterpolator__interpolate_28Vector_20const__2c_20Vector__29_20const($0, $1, $4);
$0 = Vector__Vector_28float_2c_20float_2c_20float_29($2 + 16 | 0, Math_fround(Vector__x_28_29_20const($1) * Vector__y_28_29_20const($1)), Math_fround(Math_fround(Math_fround(-Vector__x_28_29_20const($1)) * Vector__x_28_29_20const($1)) - Math_fround(Vector__z_28_29_20const($1) * Vector__z_28_29_20const($1))), Math_fround(Vector__z_28_29_20const($1) * Vector__y_28_29_20const($1)));
$1 = Vector__Vector_28Vector_20const__29($2, $1);
Vector__setUnit_28_29($1);
$3 = Vector__angleWith_28Vector_20const__2c_20Vector_20const__29_20const($0, $4, $1);
}
__stack_pointer = $2 + 48 | 0;
return $3;
}
function FingerplayingDigits_28Handshape__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$1 = __stack_pointer - 32 | 0;
__stack_pointer = $1;
HEAP16[$1 + 30 >> 1] = 0;
label$1: {
if (!$0) {
break label$1;
}
$2 = 1;
while (1) {
if (($2 | 0) == 5) {
if (!SiGMLHandshape__thumbIsOpposed_28_29_20const($0)) {
break label$1;
}
SetDigit_28short__2c_20DigitIndex_29($1 + 30 | 0, 0);
break label$1;
}
$3 = ($2 << 4) + $0 | 0;
$4 = HEAP32[$3 + 88 >> 2];
$5 = HEAP32[$3 + 92 >> 2];
HEAP32[$1 + 16 >> 2] = $4;
HEAP32[$1 + 20 >> 2] = $5;
$4 = HEAP32[$3 + 84 >> 2];
$5 = HEAP32[$3 + 80 >> 2];
HEAP32[$1 + 8 >> 2] = $5;
HEAP32[$1 + 12 >> 2] = $4;
$3 = ParticipatesInFingerPlay_28FingerBending_29($1 + 8 | 0);
FingerBending___FingerBending_28_29($1 + 8 | 0);
if ($3) {
SetDigit_28short__2c_20DigitIndex_29($1 + 30 | 0, $2);
}
$2 = $2 + 1 | 0;
continue;
}
}
__stack_pointer = $1 + 32 | 0;
$2 = HEAP16[$1 + 30 >> 1];
return $2;
}
function FaceData__FaceData_28_29($0) {
HEAP32[$0 + 104 >> 2] = 990057071;
HEAP32[$0 + 96 >> 2] = 1066611507;
HEAP32[$0 + 100 >> 2] = 1008981770;
HEAP32[$0 + 88 >> 2] = 1022739087;
HEAP32[$0 + 92 >> 2] = 1065353216;
HEAP32[$0 + 80 >> 2] = 1066192077;
HEAP32[$0 + 84 >> 2] = 1017370378;
HEAP32[$0 + 72 >> 2] = 1073741824;
HEAP32[$0 + 76 >> 2] = 1000593162;
HEAP32[$0 + 64 >> 2] = 1066192077;
HEAP32[$0 + 68 >> 2] = 1056964608;
HEAP32[$0 + 56 >> 2] = 1008981770;
HEAP32[$0 + 60 >> 2] = 1017370378;
HEAP32[$0 + 48 >> 2] = 998445679;
HEAP32[$0 + 52 >> 2] = 1066611507;
HEAP32[$0 + 40 >> 2] = 1003814388;
HEAP32[$0 + 44 >> 2] = 990057071;
HEAP32[$0 + 32 >> 2] = 1000593162;
HEAP32[$0 + 36 >> 2] = 1003814388;
HEAP32[$0 + 24 >> 2] = 1053609165;
HEAP32[$0 + 28 >> 2] = 992204554;
HEAP32[$0 + 16 >> 2] = 1053609165;
HEAP32[$0 + 20 >> 2] = 1054280253;
HEAP32[$0 + 8 >> 2] = 1035489772;
HEAP32[$0 + 12 >> 2] = 1015759766;
HEAP32[$0 >> 2] = 1028443341;
HEAP32[$0 + 4 >> 2] = 1072064102;
return $0;
}
function DeleteNonmanualDefs_28_29() {
var $0 = 0;
$0 = HEAP32[17653];
label$1: {
if (!$0) {
break label$1;
}
DynamicArray1_AbstractTimedMorph____deleteAll_28_29($0);
$0 = HEAP32[17653];
if (!$0) {
break label$1;
}
operator_20delete_28void__29(DynamicArray1_AbstractTimedMorph_____DynamicArray1_28_29($0));
HEAP32[17653] = 0;
}
$0 = HEAP32[17652];
label$2: {
if (!$0) {
break label$2;
}
HashAny_char_20const__2c_20AbstractTimedMorph____freeStrings_28_29($0);
$0 = HEAP32[17652];
if (!$0) {
break label$2;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20AbstractTimedMorph_____HashAny_28_29($0));
HEAP32[17652] = 0;
}
$0 = HEAP32[17654];
label$3: {
if (!$0) {
break label$3;
}
DynamicArray1_AbstractTimedMorph____deleteAll_28_29($0);
$0 = HEAP32[17654];
if (!$0) {
break label$3;
}
operator_20delete_28void__29(DynamicArray1_AbstractTimedMorph_____DynamicArray1_28_29($0));
HEAP32[17654] = 0;
}
DeleteTrailingMorphs_28_29();
}
function TwoArmAnimator__TwoArmAnimator_28TwoHConcretePosture__2c_20HanimAvatar_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
HEAP32[$0 + 12 >> 2] = $2;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
$3 = $0 + 16 | 0;
OneArmAnimator__OneArmAnimator_28OneHConcretePosture__2c_20HanimAvatar_20const__29($3, $1, $2);
HEAP32[19359] = 0;
$4 = $0 + 3572 | 0;
invoke_iiii(87, $4 | 0, $1 + 112 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($2 | 0) != 1) {
HEAP32[19359] = 0;
invoke_ii(88, $0 + 7128 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
return $0 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneArmAnimator___OneArmAnimator_28_29($4);
}
OneArmAnimator___OneArmAnimator_28_29($3);
__resumeException($0 | 0);
abort();
}
function Gesture__InitPosture1_28TwoHConcretePosture__29($0, $1) {
var $2 = 0;
label$1: {
$2 = HEAP32[$0 + 28 >> 2];
label$2: {
if (!$2) {
break label$2;
}
if (SiteID__isArmHandSite_28_29_20const($2 + 4 | 0)) {
$2 = HEAP32[$0 + 32 >> 2];
if ($2) {
OneHGesture__InitConcretePosture1_28OneHConcretePosture__29($2, $1 + 112 | 0);
}
if (!HEAP32[$0 + 28 >> 2]) {
break label$1;
}
Gesture__installPosture_28OneHConcretePosture_20const__2c_20bool_29($0, $1 + 112 | 0, 0);
OneHGesture__InitConcretePosture1_28OneHConcretePosture__29(HEAP32[$0 + 28 >> 2], $1);
return;
}
$2 = HEAP32[$0 + 28 >> 2];
if (!$2) {
break label$2;
}
OneHGesture__InitConcretePosture1_28OneHConcretePosture__29($2, $1);
}
if (!HEAP32[$0 + 32 >> 2]) {
break label$1;
}
Gesture__installPosture_28OneHConcretePosture_20const__2c_20bool_29($0, $1, 1);
OneHGesture__InitConcretePosture1_28OneHConcretePosture__29(HEAP32[$0 + 32 >> 2], $1 + 112 | 0);
}
}
function BasicMovement__UseExplicitDuration_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0;
$1 = __stack_pointer - 48 | 0;
__stack_pointer = $1;
if (HEAPU8[67565]) {
$2 = HEAPF32[$0 + 52 >> 2];
$4 = HEAP32[$0 + 4 >> 2];
HEAPF64[$1 + 32 >> 3] = HEAPF32[$0 + 40 >> 2];
HEAP32[$1 + 16 >> 2] = $4;
HEAPF64[$1 + 24 >> 3] = $2;
eprintf_28char_20const__2c_20____29(29783, $1 + 16 | 0);
}
$2 = HEAPF32[$0 + 56 >> 2];
$3 = HEAPF32[$0 + 52 >> 2];
label$2: {
if ($3 > Math_fround(0)) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, Math_fround($3 * $2), 1);
if (!HEAPU8[67565]) {
break label$2;
}
$2 = HEAPF32[$0 + 52 >> 2];
HEAPF64[$1 + 8 >> 3] = HEAPF32[$0 + 40 >> 2];
HEAPF64[$1 >> 3] = $2;
eprintf_28char_20const__2c_20____29(29729, $1);
break label$2;
}
if ($2 == Math_fround(1)) {
break label$2;
}
BasicMovement__scaleDuration_28float_2c_20bool_29($0, $2, 1);
}
__stack_pointer = $1 + 48 | 0;
}
function Handshape__setHandshapeFrom_28Handshape_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
if ($1) {
$0 = __memcpy($0, $1, 217);
$2 = HEAP32[$0 + 220 >> 2];
if ($2) {
operator_20delete_28void__29(SiGMLHandshape___SiGMLHandshape_28_29($2));
HEAP32[$0 + 220 >> 2] = 0;
}
if (HEAP32[$1 + 220 >> 2]) {
$2 = operator_20new_28unsigned_20long_29(220);
HEAP32[19359] = 0;
$3 = invoke_ii(435, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 220 >> 2] = $3;
__memcpy($3, HEAP32[$1 + 220 >> 2], 217);
HEAPF32[$0 + 224 >> 2] = HEAPF32[$1 + 224 >> 2];
}
HEAP8[$0 + 233 | 0] = HEAPU8[$1 + 233 | 0];
HandJointRotations__setFrom_28HandJointRotations_20const__29(HEAP32[$0 + 236 >> 2], HEAP32[$1 + 236 >> 2]);
}
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($1 | 0);
abort();
}
function FingerPlayMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 1465);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function FakeFar_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20float_2c_20Vector__2c_20Vector__29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
$7 = __stack_pointer - 32 | 0;
__stack_pointer = $7;
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($5, $0, $1, $4);
$8 = Vector__z_28_29_20const($1);
$9 = Vector__z_28_29_20const($0);
$5 = (HEAP16[24300] << 2) + $5 | 0;
HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] + Math_fround(Math_fround($4 + Math_fround(-1)) * Math_fround(Math_fround($8 - $9) * $4));
if (!(!$2 | !$3)) {
$5 = Quaternion__Quaternion_28_29($7 + 16 | 0);
Quaternion__setQuatFrom2Vecs_28Vector_20const__2c_20Vector_20const__29($5, $2, $3);
Quaternion__setScaleRotation_28float_29($5, $4);
Vector__setFrom_28Vector_20const__29($6, Vector__Vector_28Vector_20const__29_1($7, $2));
Quaternion__rotateVector_28Vector__29_20const($5, $6);
}
__stack_pointer = $7 + 32 | 0;
}
function MakeSiteIDPairSub_28SiteIDPair__2c_20SiteID__2c_20XMLCell__2c_20Mirroring_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0;
$6 = __stack_pointer - 32 | 0;
__stack_pointer = $6;
$7 = HEAP32[$2 + 4 >> 2];
$3 = HEAPU16[$3 >> 1];
HEAP16[$6 + 6 >> 1] = $3;
HEAP16[$6 + 24 >> 1] = $3;
MakeSiteIDPair_28SiteIDPair__2c_20HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_29($0, $7, $6 + 6 | 0, $4, $5);
$2 = HEAP32[$2 + 8 >> 2];
if (HEAP32[$2 + 12 >> 2] > 0) {
$2 = HEAP32[DynamicArrayP_XMLCell___getElement_28int_29_20const($2, 0) + 4 >> 2];
HEAP16[$6 + 8 >> 1] = $3;
HEAP16[$6 + 4 >> 1] = $3;
SiteIDFromAttribs_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_2c_20bool_2c_20bool_2c_20bool_29($6 + 16 | 0, $2, $6 + 4 | 0, 0, $4, $5);
HEAP8[$1 + 2 | 0] = HEAPU8[$6 + 18 | 0];
HEAP16[$1 >> 1] = HEAPU16[$6 + 16 >> 1];
ForceHandTouchProximity_28SiteID__29($1);
}
__stack_pointer = $6 + 32 | 0;
}
function TurretJointRotation__TurretJointRotation_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = JointRotation__JointRotation_28Joint__29($0, $1);
HEAP32[$0 >> 2] = 59840;
HEAP32[19359] = 0;
$2 = invoke_ii(69, $0 + 8 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$3 = invoke_ii(69, $0 + 20 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[19359] = 0;
invoke_vi(146, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(146, $3 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function HashAny_char_20const__2c_20int___nextIteration_28char_20const___2c_20int__2c_20HashAny_char_20const__2c_20int___Iterator__29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$5 = HEAP32[$3 >> 2];
label$1: {
if (($5 | 0) >= HEAP32[$0 + 4 >> 2]) {
break label$1;
}
$4 = HEAP32[$3 + 4 >> 2];
while (1) {
label$3: {
label$4: {
label$5: {
if (!$4) {
$5 = $5 + 1 | 0;
HEAP32[$3 >> 2] = $5;
if (HEAP32[$0 + 4 >> 2] <= ($5 | 0)) {
HEAP32[$3 + 4 >> 2] = 0;
break label$4;
}
$4 = HEAP32[$0 >> 2] + ($5 << 3) | 0;
break label$5;
}
$4 = $4 + 8 | 0;
}
$4 = HEAP32[$4 >> 2];
HEAP32[$3 + 4 >> 2] = $4;
if ($4) {
break label$3;
}
}
$4 = 0;
if (HEAP32[$0 + 4 >> 2] > ($5 | 0)) {
continue;
}
break label$1;
}
break;
}
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$2 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2];
$4 = 1;
}
return $4;
}
function WristMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($1, 60), 5758);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $1, 1);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32226);
}
function SiteID__mergeSiteID_28SiteID_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = $0 + 2 | 0;
$2 = HEAPU16[$0 >> 1] | HEAPU8[$3 | 0] << 16;
if (!($2 & 255)) {
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = HEAPU8[$1 | 0] | $2 & 16776960;
HEAP16[$0 >> 1] = $2;
}
if (!($2 & 3840)) {
$3 = HEAPU16[$1 >> 1];
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = $3 & 3840 | $2 & 16773375;
HEAP16[$0 >> 1] = $2;
}
if (!($2 & 28672)) {
$3 = HEAPU16[$1 >> 1];
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$2 = $3 & 28672 | $2 & 16748543;
HEAP16[$0 >> 1] = $2;
}
if (!($2 & 1015808)) {
$2 = (HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 | 0] << 16) & 1015808 | $2 & 15761407;
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if (!($2 & 7340032)) {
$3 = HEAPU8[$1 + 2 | 0];
HEAP16[$0 >> 1] = $2;
$2 = $3 << 16 & 7340032 | $2 & 9437183;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
if ($2 << 8 >> 8 >= 0) {
$1 = HEAPU8[$1 + 2 | 0];
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = ($1 << 16 & 8388608 | $2) >>> 16;
}
}
function DynamicArray1_AtomicNonmanual___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = __stack_pointer - 32 | 0;
__stack_pointer = $6;
$9 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($7 | 0) == ($9 | 0)) {
__stack_pointer = $6 + 32 | 0;
} else {
$2 = AtomicNonmanual__AtomicNonmanual_28_29($6);
$4 = HEAP32[$2 + 4 >> 2];
$3 = HEAP32[$2 >> 2];
$5 = $3;
$8 = HEAP32[$0 >> 2] + Math_imul($1 + $7 | 0, 28) | 0;
$3 = $8;
HEAP32[$3 >> 2] = $5;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
$3 = HEAP32[$2 + 20 >> 2];
$4 = HEAP32[$2 + 16 >> 2];
$5 = $4;
$4 = $8;
HEAP32[$4 + 16 >> 2] = $5;
HEAP32[$4 + 20 >> 2] = $3;
$4 = HEAP32[$2 + 12 >> 2];
$3 = HEAP32[$2 + 8 >> 2];
$5 = $3;
$3 = $8;
HEAP32[$3 + 8 >> 2] = $5;
HEAP32[$3 + 12 >> 2] = $4;
AtomicNonmanual___AtomicNonmanual_28_29($2);
$7 = $7 + 1 | 0;
continue;
}
break;
}
}
function normal_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
label$3: {
label$4: {
switch (HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] - 5 | 0) {
case 0:
$1 = $1 + 2 | 0;
break label$3;
case 1:
$1 = $1 + 3 | 0;
break label$3;
case 2:
$1 = $1 + 4 | 0;
break label$3;
case 4:
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
$4 = $2;
$5 = $1 + 1 | 0;
if (($5 | 0) != ($2 | 0)) {
$4 = HEAPU8[(HEAPU8[$1 + 1 | 0] + $0 | 0) + 72 | 0] == 10 ? $1 + 2 | 0 : $5;
}
HEAP32[$3 + 4 >> 2] = -1;
$1 = $4;
break label$3;
case 5:
HEAP32[$3 + 4 >> 2] = -1;
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
break;
default:
break label$4;
}
}
$1 = $1 + 1 | 0;
}
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
continue;
}
break;
}
}
function StripNulls_28DynamicArrayP_BasicMovement___29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = HEAP32[$0 + 12 >> 2];
$5 = ($1 | 0) > 0 ? $1 : 0;
$1 = 0;
while (1) {
if (($1 | 0) != ($5 | 0)) {
$4 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0, $1);
label$3: {
if (!$4) {
if (!HEAPU8[67590]) {
break label$3;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(42612, 0);
break label$3;
}
if (($1 | 0) > ($2 | 0)) {
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($0, $2, $4);
}
$2 = $2 + 1 | 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
$1 = HEAP32[$0 + 12 >> 2];
if (!(!HEAPU8[67590] | ($2 | 0) == ($1 | 0))) {
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$0 + 12 >> 2] - $2;
eprintf_28char_20const__2c_20____29(34628, $3);
}
HEAP32[$0 + 12 >> 2] = $2;
__stack_pointer = $3 + 16 | 0;
}
function HanimAvatar__SetFacePointTriple_28short_2c_20short_2c_20short_2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3, $4, $5) {
var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, $2, Vector__x_28_29_20const($4), Math_fround(Vector__y_28_29_20const($4) + Vector__y_28_29_20const($5)), Math_fround(Vector__z_28_29_20const($4) + Vector__z_28_29_20const($5)));
$6 = Vector__y_28_29_20const($4);
$7 = Vector__y_28_29_20const($5);
$8 = Vector__z_28_29_20const($4);
$6 = Math_fround(+$7 * .75 + +$6);
$7 = Math_fround(+Vector__z_28_29_20const($5) * .75 + +$8);
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, $1, Math_fround(Vector__x_28_29_20const($4) + Vector__x_28_29_20const($5)), $6, $7);
HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, $3, Math_fround(Vector__x_28_29_20const($4) - Vector__x_28_29_20const($5)), $6, $7);
}
function SetVersionInfo_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4) {
var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
HEAP32[16929] = $1;
HEAP32[16928] = $0;
HEAP32[16930] = $2;
HEAP32[16931] = $3;
HEAP32[16932] = $4;
$4 = strlen($0);
$3 = strlen($1);
$4 = (($4 + $3 | 0) + strlen($2) << 16) + 327680 >> 16;
$3 = dlmalloc($4);
HEAP32[16933] = $3;
HEAP32[$5 >> 2] = $0;
HEAP32[$5 + 4 >> 2] = $1;
HEAP32[$5 + 8 >> 2] = $2;
snprintf($3, $4, 14638, $5);
HEAP8[(HEAP32[16933] + $4 | 0) - 1 | 0] = 0;
wasm2js_i32$0 = 67736, wasm2js_i32$1 = dlmalloc(40), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = $5, wasm2js_i32$1 = __time(0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
$1 = localtime($5 + 12 | 0);
strftime(HEAP32[16934], 40, 11150, $1 | 0) | 0;
HEAP8[HEAP32[16934] + 39 | 0] = 0;
__stack_pointer = $5 + 16 | 0;
}
function TorsoCurve__GetCurvePoint_28bool_2c_20bool_2c_20float_2c_20Vector__29_20const($0, $1, $2, $3, $4) {
label$1: {
if ($1) {
if ($2) {
EllipseInfo__getPoint_28float_2c_20Vector__29_20const($0 + 92 | 0, $3, $4);
$1 = $0 + 128 | 0;
break label$1;
}
CircleInfo__getPoint_28float_2c_20Vector__29_20const($0 + 60 | 0, Math_fround(Math_fround(1) - $3), $4);
$1 = $0 + 128 | 0;
break label$1;
}
if ($2) {
EllipseInfo__getPoint_28float_2c_20Vector__29_20const($0 + 108 | 0, Math_fround(Math_fround(1) - $3), $4);
$1 = $0 + 132 | 0;
break label$1;
}
CircleInfo__getPoint_28float_2c_20Vector__29_20const($0 + 76 | 0, $3, $4);
$1 = $0 + 132 | 0;
}
$2 = (HEAP16[24300] << 2) + $4 | 0;
HEAPF32[$2 >> 2] = HEAPF32[$1 >> 2] + HEAPF32[$2 >> 2];
Vector__set_y_28float_29($4, Vector__y_28_29_20const(TorsoCurve__centre_28_29_20const($0)));
$4 = (HEAP16[24298] << 2) + $4 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$0 + 124 >> 2] + HEAPF32[$4 >> 2];
}
function reportDefault($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $2;
label$1: {
if (!HEAPU8[$1 + 68 | 0]) {
label$3: {
if (HEAP32[$0 + 144 >> 2] == ($1 | 0)) {
$5 = $0 + 272 | 0;
$6 = $0 + 276 | 0;
break label$3;
}
$5 = HEAP32[$0 + 284 >> 2];
$6 = $5 + 4 | 0;
}
while (1) {
HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$1 + 56 >> 2]]($1, $4 + 12 | 0, $3, $4 + 8 | 0, HEAP32[$0 + 48 >> 2]);
HEAP32[$6 >> 2] = HEAP32[$4 + 12 >> 2];
$2 = HEAP32[$0 + 44 >> 2];
FUNCTION_TABLE[HEAP32[$0 + 80 >> 2]](HEAP32[$0 + 4 >> 2], $2, HEAP32[$4 + 8 >> 2] - $2 | 0);
HEAP32[$5 >> 2] = HEAP32[$4 + 12 >> 2];
if (HEAP32[$4 + 12 >> 2] != ($3 | 0)) {
continue;
}
break;
}
break label$1;
}
FUNCTION_TABLE[HEAP32[$0 + 80 >> 2]](HEAP32[$0 + 4 >> 2], $2, $3 - $2 | 0);
}
__stack_pointer = $4 + 16 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_delete_28_29_20const($0) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0), std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) << 2) | 0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_delete_28_29_20const($0) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0), std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0) << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) << 2) | 0);
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___insert_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChain_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__2c_20HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function AvatarJointIndex___AvatarJointIndex_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
label$1: while (1) {
if (($2 | 0) != 2) {
$1 = 0;
HEAP32[(($2 << 2) + $0 | 0) + 12 >> 2] = 0;
while (1) if (($1 | 0) == 4) {
$4 = Math_imul($2, 20) + $0 | 0;
$3 = 0;
label$5: while (1) {
if (($3 | 0) == 5) {
$2 = $2 + 1 | 0;
continue label$1;
}
$1 = 0;
HEAP32[$4 + 188 >> 2] = 0;
while (1) if (($1 | 0) == 3) {
$3 = $3 + 1 | 0;
continue label$5;
} else {
HEAP32[((Math_imul($2, 60) + $0 | 0) + ($1 << 2) | 0) + 100 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
}
} else {
HEAP32[((($2 << 4) + $0 | 0) + ($1 << 2) | 0) + 20 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
DynamicArrayP_Joint____DynamicArrayP_28_29($0 + 252 | 0);
DynamicArrayP_Joint____DynamicArrayP_28_29($0 + 236 | 0);
return $0;
}
function Joint__computeLocalFromGlobalTransforms_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 72 >> 2];
$2 = HEAP32[$0 + 68 >> 2];
HEAP32[$0 + 40 >> 2] = $2;
HEAP32[$0 + 44 >> 2] = $1;
HEAP32[$0 - -64 >> 2] = HEAP32[$0 + 92 >> 2];
$2 = HEAP32[$0 + 88 >> 2];
$1 = HEAP32[$0 + 84 >> 2];
HEAP32[$0 + 56 >> 2] = $1;
HEAP32[$0 + 60 >> 2] = $2;
$1 = HEAP32[$0 + 80 >> 2];
$2 = HEAP32[$0 + 76 >> 2];
HEAP32[$0 + 48 >> 2] = $2;
HEAP32[$0 + 52 >> 2] = $1;
$2 = HEAP32[$0 + 8 >> 2];
if ($2) {
Transform__setComposeInv_28Transform_20const__29($0 + 40 | 0, $2 + 68 | 0);
}
label$2: {
$1 = HEAP32[$0 + 12 >> 2];
if (!$1) {
break label$2;
}
$2 = 0;
$1 = HEAP32[$1 + 12 >> 2];
$1 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($2 | 0) == ($1 | 0)) {
break label$2;
}
Joint__computeLocalFromGlobalTransforms_28_29(DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 12 >> 2], $2));
$2 = $2 + 1 | 0;
continue;
}
}
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
HEAP8[$1 + 53 | 0] = 1;
label$1: {
if (HEAP32[$1 + 4 >> 2] != ($3 | 0)) {
break label$1;
}
HEAP8[$1 + 52 | 0] = 1;
$3 = HEAP32[$1 + 16 >> 2];
label$2: {
if (!$3) {
HEAP32[$1 + 36 >> 2] = 1;
HEAP32[$1 + 24 >> 2] = $4;
HEAP32[$1 + 16 >> 2] = $2;
if (($4 | 0) != 1) {
break label$1;
}
if (HEAP32[$1 + 48 >> 2] == 1) {
break label$2;
}
break label$1;
}
if (($2 | 0) == ($3 | 0)) {
$3 = HEAP32[$1 + 24 >> 2];
if (($3 | 0) == 2) {
HEAP32[$1 + 24 >> 2] = $4;
$3 = $4;
}
if (HEAP32[$1 + 48 >> 2] != 1) {
break label$1;
}
if (($3 | 0) == 1) {
break label$2;
}
break label$1;
}
HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
}
HEAP8[$1 + 54 | 0] = 1;
}
}
function HanimAvatar__locateSiteID_28bool_2c_20SiteIDPair_20const__2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0;
$6 = __stack_pointer - 48 | 0;
__stack_pointer = $6;
$7 = HEAP32[$2 >> 2];
HEAP32[$6 + 4 >> 2] = $7;
HEAP32[$6 + 40 >> 2] = $7;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, $1, $6 + 4 | 0, $3, $4, $5);
label$1: {
if (!SiteID__defined_28_29_20const($2 + 4 | 0)) {
break label$1;
}
$4 = Vector__Vector_28_29($6 + 24 | 0);
HEAP32[$6 + 16 >> 2] = 0;
$5 = HEAP32[$2 >> 2];
HEAP32[$6 >> 2] = $5;
HEAP32[$6 + 8 >> 2] = $5;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, $1, $6, $3 ? $4 : 0, $6 + 20 | 0, $6 + 16 | 0);
if (!$3) {
break label$1;
}
Vector__setMidPoint_28Vector_20const__2c_20float_29($3, $4, HEAPF32[$2 + 8 >> 2]);
}
__stack_pointer = $6 + 48 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___max_size_28_29_20const($0) {
var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
wasm2js_i32$0 = $1, wasm2js_i32$1 = unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___max_size_std____2__allocator_SSPRSet___2c_20void__28std____2__allocator_SSPRSet___20const__29(std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29_20const($0)), 
HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
$0 = std____2__numeric_limits_long___max_28_29();
HEAP32[19359] = 0;
HEAP32[$1 + 8 >> 2] = $0;
$2 = invoke_iii(15, $1 + 12 | 0, $1 + 8 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__stack_pointer = $1 + 16 | 0;
$0 = HEAP32[$2 >> 2];
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___max_size_28_29_20const($0) {
var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
wasm2js_i32$0 = $1, wasm2js_i32$1 = unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSMorph___20___max_size_std____2__allocator_SSMorph___2c_20void__28std____2__allocator_SSMorph___20const__29(std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29_20const($0)), 
HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
$0 = std____2__numeric_limits_long___max_28_29();
HEAP32[19359] = 0;
HEAP32[$1 + 8 >> 2] = $0;
$2 = invoke_iii(15, $1 + 12 | 0, $1 + 8 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__stack_pointer = $1 + 16 | 0;
$0 = HEAP32[$2 >> 2];
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = HEAP32[$1 >> 2];
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 24 >> 2] = $4;
$4 = $0 + 172 | 0;
$0 = HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($4, $3 + 12 | 0);
label$1: {
if ($0) {
$1 = HEAP32[$2 >> 2];
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 16 >> 2] = $1;
HashAny_SiteID_20const_2c_20Site____addItem_28SiteID_2c_20Site__29($4, $3 + 8 | 0, $0);
break label$1;
}
if (!HEAPU8[67570]) {
break label$1;
}
LogTime_28_29();
eprintf_28char_20const__2c_20____29(20931, 0);
SiteID__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eputs_28char_20const__29(20915);
SiteID__print_28_IO_FILE__29_20const($2, HEAP32[16886]);
eputs_28char_20const__29(48530);
}
__stack_pointer = $3 + 32 | 0;
return $0 | 0;
}
function bool_20HA_get_attrib_float_2c_20double__28HashAny_char_20const__2c_20char_20const___20const__2c_20float__2c_20AttribStatus__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
if (!$0) {
HEAP32[$2 >> 2] = 1;
$0 = 0;
break label$1;
}
$0 = HashAttribs_attrib_string_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__29($0, $4);
if (!$0) {
HEAP32[$2 >> 2] = 1;
$0 = 0;
break label$1;
}
HEAP32[$5 + 16 >> 2] = $5 + 24;
$3 = sscanf($0, $3, $5 + 16 | 0);
label$4: {
if (($3 | 0) == 1) {
HEAPF32[$1 >> 2] = HEAPF64[$5 + 24 >> 3];
HEAP32[$2 >> 2] = 0;
break label$4;
}
HEAP32[$2 >> 2] = 2;
LogTime_28_29();
HEAP32[$5 + 4 >> 2] = $0;
HEAP32[$5 >> 2] = $4;
eprintf_28char_20const__2c_20____29(46033, $5);
}
$0 = ($3 | 0) == 1;
}
__stack_pointer = $5 + 32 | 0;
return $0;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function AvatarNameIndex__AvatarNameIndex_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 + 116 >> 2] = 0;
HEAP32[$0 + 120 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 124 >> 2] = 0;
HEAP32[$0 + 128 >> 2] = 0;
HEAP8[$0 + 132 | 0] = 0;
label$1: while (1) {
label$2: {
if (($3 | 0) == 2) {
HEAP32[$0 - -64 >> 2] = 0;
$1 = 0;
break label$2;
}
$1 = 0;
$2 = ($3 << 2) + $0 | 0;
HEAP32[$2 + 108 >> 2] = 0;
HEAP32[$2 + 100 >> 2] = 0;
HEAP32[$2 + 92 >> 2] = 0;
HEAP32[$2 + 48 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
while (1) if (($1 | 0) == 4) {
$3 = $3 + 1 | 0;
continue label$1;
} else {
HEAP32[((($3 << 4) + $0 | 0) + ($1 << 2) | 0) + 16 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
while (1) {
if (($1 | 0) != 4) {
HEAP32[(($1 << 2) + $0 | 0) + 76 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
return $0 | 0;
}
function GetDirMotionPositionSpecifier_28XMLCell__2c_20bool_2c_20ElbowDisplacement__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 224 | 0;
__stack_pointer = $3;
if ($0) {
$4 = MotionAttributes__MotionAttributes_28char_20const__2c_20HashAny_char_20const__2c_20char_20const____2c_20bool_29($3 + 8 | 0, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $1);
$5 = Direction3__isUndef_28_29_20const($4 + 80 | 0);
label$2: {
if ($5) {
$0 = HEAP32[$0 >> 2];
HEAP32[$3 + 4 >> 2] = 6054;
HEAP32[$3 >> 2] = $0;
eprintf_28char_20const__2c_20____29(41317, $3);
break label$2;
}
HEAPF32[$2 >> 2] = Math_fround(Math_fround(HEAPF32[$4 + 80 >> 2] * ($1 ? Math_fround(-1) : Math_fround(1))) + HEAPF32[$4 + 84 >> 2]) * Math_fround(.5);
HEAPF32[$2 + 4 >> 2] = HEAPF32[$4 + 88 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 92 >> 2];
}
$0 = $5 ^ 1;
} else {
$0 = 0;
}
__stack_pointer = $3 + 224 | 0;
return $0;
}
function bool_20HA_get_attrib_int_2c_20long__28HashAny_char_20const__2c_20char_20const___20const__2c_20int__2c_20AttribStatus__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
if (!$0) {
HEAP32[$2 >> 2] = 1;
$0 = 0;
break label$1;
}
$0 = HashAttribs_attrib_string_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__29($0, $4);
if (!$0) {
HEAP32[$2 >> 2] = 1;
$0 = 0;
break label$1;
}
HEAP32[$5 + 16 >> 2] = $5 + 28;
$3 = sscanf($0, $3, $5 + 16 | 0);
label$4: {
if (($3 | 0) == 1) {
HEAP32[$1 >> 2] = HEAP32[$5 + 28 >> 2];
HEAP32[$2 >> 2] = 0;
break label$4;
}
HEAP32[$2 >> 2] = 2;
LogTime_28_29();
HEAP32[$5 + 4 >> 2] = $0;
HEAP32[$5 >> 2] = $4;
eprintf_28char_20const__2c_20____29(46033, $5);
}
$0 = ($3 | 0) == 1;
}
__stack_pointer = $5 + 32 | 0;
return $0;
}
function SplitMovement__SplitMovement_28SplitMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62684;
SplitMovement__operator__28SplitMovement_20const__29($0, $1);
$2 = HEAP32[$1 + 528 >> 2];
$3 = HEAP32[HEAP32[$2 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
$3 = invoke_ii($3 | 0, $2 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 528 >> 2] = $3;
$1 = HEAP32[$1 + 532 >> 2];
$2 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
HEAP32[19359] = 0;
$2 = invoke_ii($2 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 532 >> 2] = $2;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function CreateControllerTable_28_29() {
var $0 = 0, $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 48 | 0;
__stack_pointer = $0;
HEAP32[$0 + 40 >> 2] = 6;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 6559;
HEAP32[$0 + 32 >> 2] = 5;
HEAP32[$0 + 28 >> 2] = 1986;
HEAP32[$0 + 24 >> 2] = 4;
HEAP32[$0 + 20 >> 2] = 9172;
HEAP32[$0 + 16 >> 2] = 3;
HEAP32[$0 + 8 >> 2] = 2;
HEAP32[$0 >> 2] = 1;
HEAP32[$0 + 12 >> 2] = 2161;
HEAP32[$0 + 4 >> 2] = 10759;
wasm2js_i32$0 = 68208, wasm2js_i32$1 = HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29(0, 6689, $0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
wasm2js_i32$0 = 68204, wasm2js_i32$1 = dlmalloc(112), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
while (1) {
if (($1 | 0) == 7) {
__stack_pointer = $0 + 48 | 0;
} else {
HEAP32[HEAP32[17051] + ($1 << 4) >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function GestureFlags__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if ($1) {
$3 = boolchar_28bool_29(HEAP8[$0 | 0] & 1);
$4 = boolchar_28bool_29((HEAPU8[$0 | 0] & 2) >>> 1 | 0);
$5 = boolchar_28bool_29((HEAPU8[$0 | 0] & 4) >>> 2 | 0);
$6 = boolchar_28bool_29((HEAPU8[$0 | 0] & 8) >>> 3 | 0);
$7 = boolchar_28bool_29((HEAPU8[$0 | 0] & 16) >>> 4 | 0);
$8 = boolchar_28bool_29((HEAPU8[$0 | 0] & 32) >>> 5 | 0);
wasm2js_i32$0 = $2, wasm2js_i32$1 = boolchar_28bool_29((HEAPU8[$0 | 0] & 64) >>> 6 | 0), 
HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
HEAP32[$2 + 20 >> 2] = $8;
HEAP32[$2 + 16 >> 2] = $7;
HEAP32[$2 + 12 >> 2] = $6;
HEAP32[$2 + 8 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 >> 2] = $3;
fiprintf($1, 11094, $2);
}
__stack_pointer = $2 + 32 | 0;
}
function getRefDirection_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$3 = Quaternion__dotProduct_28Quaternion_20const__29_20const($1, $2);
Quaternion__setFrom_28Quaternion_20const__29($0, $2);
$1 = Quaternion__Quaternion_28Quaternion_20const__29($5, $1);
Quaternion__setScale_28float_29($1, $3);
Quaternion__setSubtract_28Quaternion_20const__29($0, $1);
$4 = Quaternion__lengthsq_28_29_20const($0);
label$1: {
label$2: {
if (+$4 > 1e-4) {
$3 = Math_fround(acos_28float_29($3) / sqrt_28float_29($4));
break label$2;
}
if (!($3 < Math_fround(0)) | !($4 > Math_fround(0))) {
break label$1;
}
$3 = sqrt_28float_29($4);
$3 = Math_fround(Math_fround(HEAPF32[17057] - $3) / $3);
}
Quaternion__setScale_28float_29($0, $3);
}
__stack_pointer = $5 + 16 | 0;
}
function OneHGesture__CopyOneHGesture_28Gesture__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$3 + 4 >> 2] = $1;
HEAP32[$3 >> 2] = $0;
eprintf_28char_20const__2c_20____29(47079, $3);
}
$2 = operator_20new_28unsigned_20long_29(76);
HEAP32[19359] = 0;
invoke_iiii(358, $2 | 0, 1, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
OneHGesture__operator__28OneHGesture_20const__29($2, $0);
HEAP32[$2 + 72 >> 2] = $1;
wasm2js_i32$0 = $2, wasm2js_i32$1 = Handshape__CopyHandshape_28_29_20const(HEAP32[$2 + 56 >> 2]), 
HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
__stack_pointer = $3 + 16 | 0;
return $2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function HashAny_char_20const__2c_20AbstractTimedMorph____initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function DirectedMovement__operator__28DirectedMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
Direction3__operator__28Direction3_20const__29($0 + 528 | 0, $1 + 528 | 0);
HEAP32[$0 + 540 >> 2] = HEAP32[$1 + 540 >> 2];
Direction3__operator__28Direction3_20const__29($0 + 544 | 0, $1 + 544 | 0);
HEAP32[$0 + 556 >> 2] = HEAP32[$1 + 556 >> 2];
Direction2__operator__28Direction2_20const__29($0 + 560 | 0, $1 + 560 | 0);
HEAP32[$0 + 584 >> 2] = HEAP32[$1 + 584 >> 2];
$2 = HEAP32[$1 + 580 >> 2];
$3 = HEAP32[$1 + 576 >> 2];
HEAP32[$0 + 576 >> 2] = $3;
HEAP32[$0 + 580 >> 2] = $2;
$3 = HEAP32[$1 + 572 >> 2];
$2 = HEAP32[$1 + 568 >> 2];
HEAP32[$0 + 568 >> 2] = $2;
HEAP32[$0 + 572 >> 2] = $3;
Direction2__operator__28Direction2_20const__29($0 + 588 | 0, $1 + 588 | 0);
__memcpy($0 + 596 | 0, $1 + 596 | 0, 148);
return $0 | 0;
}
function HashAny_char_20const__20const_2c_20AvatarType___initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____insert_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChain_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____2c_20HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ((unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) | 0) != -1) {
std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($2, std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_200__28std____2___28anonymous_20namespace_29____fake_bind___29($2 + 8 | 0, $1)), 921);
}
__stack_pointer = $2 + 16 | 0;
}
function HashAny_char_20const__2c_20char_20const____initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function fread($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
if (HEAP32[$3 + 76 >> 2] >= 0) {
$7 = __lockfile($3);
}
$6 = Math_imul($1, $2);
$4 = HEAP32[$3 + 72 >> 2];
HEAP32[$3 + 72 >> 2] = $4 | $4 - 1;
$5 = HEAP32[$3 + 8 >> 2];
$4 = HEAP32[$3 + 4 >> 2];
if (($5 | 0) == ($4 | 0)) {
$4 = $6;
} else {
$5 = $5 - $4 | 0;
$5 = $5 >>> 0 < $6 >>> 0 ? $5 : $6;
__memcpy($0, $4, $5);
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + $5;
$0 = $0 + $5 | 0;
$4 = $6 - $5 | 0;
}
if ($4) {
while (1) {
label$6: {
if (!__toread($3)) {
$5 = FUNCTION_TABLE[HEAP32[$3 + 32 >> 2]]($3, $0, $4) | 0;
if ($5) {
break label$6;
}
}
if ($7) {
__unlockfile($3);
}
return ($6 - $4 >>> 0) / ($1 >>> 0) | 0;
}
$0 = $0 + $5 | 0;
$4 = $4 - $5 | 0;
if ($4) {
continue;
}
break;
}
}
$0 = $1 ? $2 : 0;
if ($7) {
__unlockfile($3);
}
return $0;
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
$4 = 1;
label$1: {
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
break label$1;
}
$4 = 0;
if (!$1) {
break label$1;
}
$1 = __dynamic_cast($1, 58400, 58448, 0);
$4 = 0;
if (!$1) {
break label$1;
}
memset($3 + 8 | 4, 0, 52);
HEAP32[$3 + 56 >> 2] = 1;
HEAP32[$3 + 20 >> 2] = -1;
HEAP32[$3 + 16 >> 2] = $0;
HEAP32[$3 + 8 >> 2] = $1;
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
$4 = HEAP32[$3 + 32 >> 2];
if (($4 | 0) == 1) {
HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
}
$4 = ($4 | 0) == 1;
}
__stack_pointer = $3 - -64 | 0;
return $4 | 0;
}
function HashAny_char_20const__2c_20Gesture____initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function HashAny_char_20const__2c_20SiteID___initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function HashAny_SiteID_20const_2c_20Site____initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____initialise_28int_2c_20DynamicArray1_AtomicNonmanual____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_DynamicArray1_AtomicNonmanual_____clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function __stpcpy($0, $1) {
var $2 = 0;
label$1: {
label$2: {
if (($0 ^ $1) & 3) {
$2 = HEAPU8[$1 | 0];
break label$2;
}
if ($1 & 3) {
while (1) {
$2 = HEAPU8[$1 | 0];
HEAP8[$0 | 0] = $2;
if (!$2) {
break label$1;
}
$0 = $0 + 1 | 0;
$1 = $1 + 1 | 0;
if ($1 & 3) {
continue;
}
break;
}
}
$2 = HEAP32[$1 >> 2];
if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
break label$2;
}
while (1) {
HEAP32[$0 >> 2] = $2;
$2 = HEAP32[$1 + 4 >> 2];
$0 = $0 + 4 | 0;
$1 = $1 + 4 | 0;
if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
continue;
}
break;
}
}
HEAP8[$0 | 0] = $2;
if (!($2 & 255)) {
break label$1;
}
while (1) {
$2 = HEAPU8[$1 + 1 | 0];
HEAP8[$0 + 1 | 0] = $2;
$0 = $0 + 1 | 0;
$1 = $1 + 1 | 0;
if ($2) {
continue;
}
break;
}
}
return $0;
}
function HashAny_char_20const__2c_20int___initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function utf8_isInvalid3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$3 = 1;
$0 = HEAP8[$1 + 2 | 0];
label$1: {
if (($0 | 0) >= 0) {
break label$1;
}
label$2: {
label$3: {
label$4: {
$2 = HEAPU8[$1 | 0];
if (($2 | 0) == 239) {
$4 = 191;
$1 = HEAPU8[$1 + 1 | 0];
if (($1 | 0) != 191) {
break label$4;
}
$1 = 191;
if ($0 >>> 0 <= 4294967229) {
break label$2;
}
break label$1;
}
if ($0 >>> 0 > 4294967231) {
break label$1;
}
$1 = HEAPU8[$1 + 1 | 0];
if (($2 | 0) != 224) {
break label$3;
}
return ($1 - -64 & 255) >>> 0 < 224 | 0;
}
if ($0 >>> 0 > 4294967231) {
break label$1;
}
}
if (!($1 & 128)) {
break label$1;
}
$4 = $1 & 255;
}
$3 = ($2 | 0) == 237 ? ($1 & 255) >>> 0 > 159 : ($4 & 192) == 192;
}
return $3 | 0;
}
function HashAny_int_2c_20int___initialise_28int_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $1;
$2 = dlmalloc($1 << 3);
HEAP32[$0 >> 2] = $2;
label$1: {
if ($2) {
HEAP32[$0 + 4 >> 2] = $1;
$2 = 0;
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = $2 << 3;
HEAP32[$1 + HEAP32[$0 >> 2] >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] + $1 | 0) + 4 >> 1] = 0;
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 8;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39552, $3);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
__stack_pointer = $3 + 16 | 0;
}
function HanimAnimationRecord__printARPHeader_28_29($0) {
var $1 = 0, $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$1 = HEAP32[$0 + 12 >> 2];
label$1: {
if (!$1 | HEAP32[$0 + 20 >> 2] == 5) {
break label$1;
}
$1 = fopen($1, 10856);
HEAP32[$0 + 96 >> 2] = $1;
if (!$1) {
HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
eprintf_28char_20const__2c_20____29(36492, $2);
break label$1;
}
label$3: {
switch (HEAP32[$0 + 20 >> 2] - 1 | 0) {
case 2:
PrintCASXMLHeader_28_IO_FILE__2c_20char_20const__2c_20int_29($1, HEAP32[HEAP32[$0 + 4 >> 2] + 56 >> 2], HEAP32[$0 + 116 >> 2]);
break label$1;
case 1:
HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 116 >> 2];
fiprintf($1, 48516, $2 + 16 | 0);
break label$1;
case 0:
break label$3;
default:
break label$1;
}
}
UNIMPLEMENTED_28char_20const__29(1894);
}
__stack_pointer = $2 + 32 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0), std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + ($1 << 2) | 0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0), std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + ($1 << 2) | 0);
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0), std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + ($1 << 2) | 0, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) + (std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) << 2) | 0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0), std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + ($1 << 2) | 0, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) + (std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0) << 2) | 0);
}
function __fwritex($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = HEAP32[$2 + 16 >> 2];
label$1: {
if (!$3) {
if (__towrite($2)) {
break label$1;
}
$3 = HEAP32[$2 + 16 >> 2];
}
$5 = HEAP32[$2 + 20 >> 2];
if ($3 - $5 >>> 0 < $1 >>> 0) {
return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
}
label$4: {
if (HEAP32[$2 + 80 >> 2] < 0) {
$3 = 0;
break label$4;
}
$4 = $1;
while (1) {
$3 = $4;
if (!$3) {
$3 = 0;
break label$4;
}
$4 = $3 - 1 | 0;
if (HEAPU8[$4 + $0 | 0] != 10) {
continue;
}
break;
}
$4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
if ($4 >>> 0 < $3 >>> 0) {
break label$1;
}
$0 = $0 + $3 | 0;
$1 = $1 - $3 | 0;
$5 = HEAP32[$2 + 20 >> 2];
}
__memcpy($5, $0, $1);
HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
$4 = $1 + $3 | 0;
}
return $4;
}
function sin($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
wasm2js_scratch_store_f64(+$0);
$2 = wasm2js_scratch_load_i32(1) | 0;
wasm2js_scratch_load_i32(0) | 0;
$2 = $2 & 2147483647;
label$1: {
if ($2 >>> 0 <= 1072243195) {
if ($2 >>> 0 < 1045430272) {
break label$1;
}
$0 = __sin($0, 0, 0);
break label$1;
}
if ($2 >>> 0 >= 2146435072) {
$0 = $0 - $0;
break label$1;
}
label$4: {
switch (__rem_pio2($0, $1) & 3) {
case 0:
$0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
break label$1;
case 1:
$0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
break label$1;
case 2:
$0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
break label$1;
default:
break label$4;
}
}
$0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
}
__stack_pointer = $1 + 16 | 0;
return $0;
}
function normalizePublicId($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = $0;
$3 = $1;
while (1) {
$2 = HEAPU8[$3 | 0];
if ($2) {
$3 = $3 + 1 | 0;
label$3: {
label$4: {
label$5: {
label$6: {
$4 = $2 << 24 >> 24;
switch ($4 - 10 | 0) {
case 1:
case 2:
break label$4;
case 0:
case 3:
break label$5;
default:
break label$6;
}
}
if (($4 | 0) != 32) {
break label$4;
}
}
$2 = $0;
if (($0 | 0) == ($1 | 0)) {
break label$3;
}
$2 = 32;
if (HEAPU8[$1 - 1 | 0] != 32) {
break label$4;
}
$2 = $1;
break label$3;
}
HEAP8[$1 | 0] = $2;
$2 = $1 + 1 | 0;
}
$1 = $2;
continue;
}
break;
}
if (($0 | 0) != ($1 | 0)) {
$3 = $1 - 1 | 0;
$0 = HEAPU8[$3 | 0] == 32 ? $3 : $1;
}
HEAP8[$0 | 0] = 0;
}
function checkComponentType_28XMLCell__2c_20int_2c_20SiGML_Element_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = getComponentType_28XMLCell__2c_20int_29($0, $1);
label$1: {
if (!$4) {
break label$1;
}
if (($2 | 0) != ($4 | 0)) {
$0 = HEAP32[$0 >> 2];
$2 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], $2);
wasm2js_i32$0 = $3, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18782], $4), 
HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
HEAP32[$3 + 8 >> 2] = $2;
HEAP32[$3 + 4 >> 2] = $0;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(45184, $3);
break label$1;
}
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$0 + 8 >> 2], $1);
}
__stack_pointer = $3 + 16 | 0;
return $5;
}
function OneHConcretePosture__OneHConcretePosture_28OneHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
HEAP8[$0 | 0] = HEAPU8[$1 | 0];
Vector__Vector_28Vector_20const__29($0 + 4 | 0, $1 + 4 | 0);
Vector__Vector_28Vector_20const__29($0 + 16 | 0, $1 + 16 | 0);
Vector__Vector_28Vector_20const__29($0 + 28 | 0, $1 + 28 | 0);
Quaternion__Quaternion_28Quaternion_20const__29($0 + 40 | 0, $1 + 40 | 0);
HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
$2 = $1 - -64 | 0;
$3 = HEAP32[$2 >> 2];
$2 = HEAP32[$2 + 4 >> 2];
$4 = $3;
$3 = $0 - -64 | 0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $2;
$3 = HEAP32[$1 + 60 >> 2];
$2 = HEAP32[$1 + 56 >> 2];
HEAP32[$0 + 56 >> 2] = $2;
HEAP32[$0 + 60 >> 2] = $3;
OneHConcretePostureModifier__OneHConcretePostureModifier_28OneHConcretePostureModifier_20const__29($0 + 76 | 0, $1 + 76 | 0);
return $0 | 0;
}
function SetDigitPairAttrib_28DigitIndex__2c_20DigitIndex__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
label$1: {
if (!$3) {
break label$1;
}
HEAP32[$4 + 16 >> 2] = $4 + 31;
HEAP32[$4 + 20 >> 2] = $4 + 30;
label$2: {
if ((sscanf($3, 10818, $4 + 16 | 0) | 0) != 2) {
break label$2;
}
$5 = HEAP8[$4 + 31 | 0];
$5 = ($5 - 54 & 255) >>> 0 < 251 ? -1 : $5 - 49 | 0;
if (($5 | 0) == -1) {
break label$2;
}
$6 = HEAP8[$4 + 30 | 0];
$6 = ($6 - 54 & 255) >>> 0 < 251 ? -1 : $6 - 49 | 0;
if (($6 | 0) == -1) {
break label$2;
}
HEAP32[$0 >> 2] = $5;
HEAP32[$1 >> 2] = $6;
break label$1;
}
LogTime_28_29();
HEAP32[$4 + 4 >> 2] = $3;
HEAP32[$4 >> 2] = $2;
eprintf_28char_20const__2c_20____29(43318, $4);
}
__stack_pointer = $4 + 32 | 0;
}
function PostureChangeFlags__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
if ($1) {
$3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
$4 = PostureChangeFlags__holdWrist_28_29_20const($0);
$0 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
HEAP32[$2 + 36 >> 2] = $4 ? 82 : 45;
HEAP32[$2 + 32 >> 2] = $3 & 256 ? 87 : 45;
HEAP32[$2 + 28 >> 2] = $3 & 128 ? 70 : 45;
HEAP32[$2 + 24 >> 2] = $3 & 64 ? 83 : 45;
HEAP32[$2 + 20 >> 2] = $3 & 32 ? 80 : 45;
HEAP32[$2 + 16 >> 2] = $3 & 16 ? 69 : 45;
HEAP32[$2 + 44 >> 2] = $0 & 1024 ? 114 : 45;
HEAP32[$2 + 40 >> 2] = $0 & 512 ? 109 : 45;
HEAP32[$2 + 12 >> 2] = $3 & 8 ? 72 : 45;
HEAP32[$2 + 8 >> 2] = $3 & 4 ? 68 : 45;
HEAP32[$2 + 4 >> 2] = $3 & 2 ? 65 : 45;
HEAP32[$2 >> 2] = $3 & 1 ? 43 : 45;
fiprintf($1, 10781, $2);
}
__stack_pointer = $2 + 48 | 0;
}
function InvertibleDynamicStringArray__InvertibleDynamicStringArray_28short_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
HEAP32[$0 + 12 >> 2] = $1;
HEAP8[$0 + 8 | 0] = $2;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$3 = invoke_iii(41, $1 | 0, 100) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
label$2: {
HEAP32[$0 + 4 >> 2] = $3;
$1 = operator_20new_28unsigned_20long_29(28);
$2 = HEAP32[$0 + 12 >> 2];
HEAP32[19359] = 0;
$3 = invoke_iiii(38, $1 | 0, $2 | 0, 100) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$2;
}
HEAP32[$0 >> 2] = $3;
return $0 | 0;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function vsniprintf($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 160 | 0;
__stack_pointer = $4;
__memcpy($4 + 8 | 0, 55264, 144);
label$1: {
label$2: {
if (($1 | 0) <= 0) {
if ($1) {
break label$2;
}
$1 = 1;
$0 = $4 + 159 | 0;
}
HEAP32[$4 + 52 >> 2] = $0;
HEAP32[$4 + 28 >> 2] = $0;
$5 = -2 - $0 | 0;
$1 = $1 >>> 0 < $5 >>> 0 ? $1 : $5;
HEAP32[$4 + 56 >> 2] = $1;
$0 = $0 + $1 | 0;
HEAP32[$4 + 36 >> 2] = $0;
HEAP32[$4 + 24 >> 2] = $0;
$0 = vfiprintf($4 + 8 | 0, $2, $3);
if (!$1) {
break label$1;
}
$1 = HEAP32[$4 + 28 >> 2];
HEAP8[$1 - (HEAP32[$4 + 24 >> 2] == ($1 | 0)) | 0] = 0;
break label$1;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$0 = -1;
}
__stack_pointer = $4 + 160 | 0;
return $0;
}
function getComponentType_28XMLCell__2c_20int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if ($0) {
$3 = HEAP32[$0 + 8 >> 2];
if ($3) {
break label$2;
}
}
$0 = HEAP32[$0 >> 2];
HEAP32[$2 + 4 >> 2] = $1 + 1;
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(41255, $2);
$0 = 0;
break label$1;
}
$4 = DynamicArrayP_XMLCell___getElement_28int_29_20const($3, $1);
if (!$4) {
$0 = HEAP32[$0 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
HEAP32[$2 + 20 >> 2] = $1 + 1;
HEAP32[$2 + 16 >> 2] = $0;
eprintf_28char_20const__2c_20____29(41457, $2 + 16 | 0);
$0 = 0;
break label$1;
}
$0 = HEAP32[$4 >> 2];
$0 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18782], $0);
}
__stack_pointer = $2 + 32 | 0;
return $0;
}
function little2_scanHexCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
$5 = HEAPU8[$1 + 1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
label$2: {
if (($4 & -2) != 24) {
break label$2;
}
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 2 | 0];
$6 = HEAPU8[$4 + 3 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if ($5 - 24 >>> 0 < 2) {
continue;
}
break;
}
if (($5 | 0) != 18) {
break label$2;
}
$1 = $4 + 4 | 0;
$7 = 10;
}
HEAP32[$3 >> 2] = $1;
return $7;
}
return -1;
}
function AvatarNameIndex__MakeJointName_28SideIndex_2c_20DigitIndex_2c_20KnuckleIndex_29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$5 = HEAP32[(($3 | 0) == 3 ? 128 : 124) + $0 >> 2];
label$1: {
if ($5) {
$1 = HEAP32[(($1 << 2) + $0 | 0) + 48 >> 2];
label$3: {
if (!(!HEAPU8[$0 + 132 | 0] | ($3 | 0) != 3)) {
HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 88 >> 2];
HEAP32[$4 + 20 >> 2] = $2 + 1;
HEAP32[$4 + 16 >> 2] = $1;
snprintf(69872, 100, $5, $4 + 16 | 0);
break label$3;
}
$2 = HEAP32[(($2 << 2) + $0 | 0) + 56 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[(($3 << 2) + $0 | 0) + 76 >> 2];
HEAP32[$4 + 4 >> 2] = $2;
HEAP32[$4 >> 2] = $1;
snprintf(69872, 100, $5, $4);
}
HEAP8[69971] = 0;
break label$1;
}
HEAP8[69872] = 0;
}
__stack_pointer = $4 + 32 | 0;
return 69872;
}
function FingerBaseJointRotation__FingerBaseJointRotation_28FingerBaseJointRotation__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28_29($0);
HEAP32[$0 >> 2] = 59944;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 20 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 32 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
FingerBaseJointRotation__operator__28FingerBaseJointRotation_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function DirectedMovement__DirectedMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 1, $1);
HEAP32[$0 >> 2] = 61788;
Direction3__Direction3_28_29($0 + 528 | 0);
HEAP32[$0 + 540 >> 2] = 0;
Direction3__Direction3_28_29($0 + 544 | 0);
HEAP32[$0 + 556 >> 2] = 0;
Direction2__Direction2_28_29($0 + 560 | 0);
HEAP32[$0 + 584 >> 2] = 0;
HEAP32[$0 + 576 >> 2] = 0;
HEAP32[$0 + 580 >> 2] = 0;
HEAP32[$0 + 568 >> 2] = 0;
HEAP32[$0 + 572 >> 2] = 0;
Direction2__Direction2_28_29($0 + 588 | 0);
HEAP16[$0 + 596 >> 1] = 0;
HEAP32[19359] = 0;
invoke_ii(462, $0 + 600 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function big2_scanHexCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 + 1 | 0];
$5 = HEAPU8[$1 | 0];
if ($5) {
$4 = unicode_byte_type($5 << 24 >> 24, $4 << 24 >> 24);
} else {
$4 = HEAPU8[($0 + $4 | 0) + 72 | 0];
}
label$2: {
if (($4 & -2) != 24) {
break label$2;
}
while (1) {
$4 = $1;
$1 = $4 + 2 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$5 = HEAPU8[$4 + 3 | 0];
$6 = HEAPU8[$4 + 2 | 0];
if ($6) {
$5 = unicode_byte_type($6 << 24 >> 24, $5 << 24 >> 24);
} else {
$5 = HEAPU8[($0 + $5 | 0) + 72 | 0];
}
if ($5 - 24 >>> 0 < 2) {
continue;
}
break;
}
if (($5 | 0) != 18) {
break label$2;
}
$1 = $4 + 4 | 0;
$7 = 10;
}
HEAP32[$3 >> 2] = $1;
return $7;
}
return -1;
}
function Getopts__initialise_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = invoke_iiii(38, $1 | 0, -1, 50) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
label$2: {
HEAP32[$0 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(48, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 4 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(50, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 8 >> 2] = $2;
return;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function ThumbBaseJointRotation__ThumbBaseJointRotation_28ThumbBaseJointRotation__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28_29($0);
HEAP32[$0 >> 2] = 60048;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 20 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 32 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
ThumbBaseJointRotation__operator__28ThumbBaseJointRotation_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function AddToStaticGestureFromXML_28Gesture__2c_20XMLCell__29($0, $1) {
var $2 = 0;
label$1: {
label$2: {
label$3: {
switch (SiGML__convertElement_28char_20const__29(HEAP32[$1 >> 2]) - 9 | 0) {
case 8:
handle_nonmanualconfig_28Gesture__2c_20XMLCell__29($0, $1);
break label$2;
case 0:
handle_handconfig_28Gesture__2c_20XMLCell__29($0, $1);
break label$2;
case 1:
handle_split_handconfig_28Gesture__2c_20XMLCell__29($0, $1);
break label$2;
case 2:
case 3:
case 4:
handle_location_bodyarm_28Gesture__2c_20XMLCell__29($0, $1);
break label$2;
case 6:
handle_split_location_28Gesture__2c_20XMLCell__29($0, $1);
break label$2;
case 7:
break label$3;
default:
break label$1;
}
}
handle_handconstellation_28Gesture__2c_20XMLCell__29($0, $1);
}
$2 = 1;
}
return $2;
}
function OneHDirMoveSpec__currentPosition_28Vector__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$3 = $0 + 16 | 0;
Vector__setFrom_28Vector_20const__29($1, $3);
$5 = Quaternion__Quaternion_28_29($4 + 16 | 0);
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($5, $0, Math_fround(HEAPF32[$0 + 12 >> 2] * $2), 1);
Quaternion__rotateVector_28Vector__29_20const($5, $1);
Vector__setSubtract_28Vector_20const__29($1, $3);
if (HEAPF32[$0 + 40 >> 2] > Math_fround(0)) {
$3 = $0 + 28 | 0;
$2 = Vector__dotProduct_28Vector_20const__29_20const($1, $3);
$6 = HEAPF32[$0 + 40 >> 2];
$0 = Vector__Vector_28Vector_20const__29($4, $3);
Vector__setScale_28float_29($0, Math_fround($2 * $6));
Vector__setAdd_28Vector_20const__29($1, $0);
}
__stack_pointer = $4 + 32 | 0;
}
function DynamicArray1_AbstractTimedMorph____initialise_28int_2c_20AbstractTimedMorph___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_AbstractTimedMorph____clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function OptionSpec__printValue_28_IO_FILE__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = HEAP32[$0 + 16 >> 2];
if (($2 | 0) <= 0) {
break label$1;
}
if (($2 | 0) != 1) {
HEAP32[$3 + 16 >> 2] = $2;
fiprintf($1, 12658, $3 + 16 | 0);
}
label$3: {
$4 = HEAP32[$0 + 12 >> 2];
if (!$4) {
break label$3;
}
$2 = 0;
while (1) {
if (HEAP32[$4 + 12 >> 2] <= ($2 | 0)) {
break label$3;
}
wasm2js_i32$0 = $3, wasm2js_i32$1 = DynamicArrayP_char_20const___getElement_28int_29_20const($4, $2), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
fiprintf($1, 4327, $3);
$2 = $2 + 1 | 0;
$4 = HEAP32[$0 + 12 >> 2];
continue;
}
}
fputc(10, $1);
}
__stack_pointer = $3 + 32 | 0;
}
function DynamicArrayP_AbstractTimedMorph___initialise_28int_2c_20AbstractTimedMorph___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_AbstractTimedMorph___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArray1_AtomicNonmanual___initialise_28int_2c_20AtomicNonmanual__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc(Math_imul($1, 28));
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_AtomicNonmanual___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DoFingerplay_28HandJointRotations__2c_20FingerplayType_2c_20float_2c_20float_2c_20float_2c_20short_29($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0);
label$1: {
if (!$1) {
break label$1;
}
$1 = ($1 | 0) != 2;
$7 = Math_fround(Math_fround($3 - $4) * Math_fround(.5));
$8 = Math_fround(Math_fround($3 + $4) * Math_fround(.5));
$3 = Math_fround($2 + Math_fround(HEAPF32[17053] / Math_fround(-5)));
while (1) {
if (($1 | 0) == 5) {
break label$1;
}
if (HasDigit_28short_2c_20short_29($5, $1 << 16 >> 16)) {
$6 = HEAP32[Math_imul($1, 12) + $0 >> 2];
$4 = sin_28float_29($3);
$2 = HEAPF32[17053];
FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 36 >> 2]]($6, Math_fround(Math_fround($4 * $7) + $8));
$3 = Math_fround($3 + Math_fround($2 / Math_fround(5)));
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function ExpatWrapper___ExpatWrapper_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 63220;
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
XMLCell___XMLCell_28_29($1);
operator_20delete_28void__29($1);
HEAP32[$0 + 20 >> 2] = 0;
}
$1 = HEAP32[$0 + 28 >> 2];
label$2: {
if (!$1) {
break label$2;
}
DynamicArrayP_XMLCell___deleteAll_28_29($1);
$1 = HEAP32[$0 + 28 >> 2];
if (!$1) {
break label$2;
}
operator_20delete_28void__29(DynamicArrayP_XMLCell____DynamicArrayP_28_29($1));
HEAP32[$0 + 28 >> 2] = 0;
}
label$3: {
$1 = HEAP32[$0 + 24 >> 2];
if ($1) {
HEAP32[19359] = 0;
invoke_vi(727, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$3;
}
}
return XMLWrapper___XMLWrapper_28_29($0) | 0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray_short_2c_20_28short_29_1___initialise_28int_2c_20short__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 1);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray_short_2c_20_28short_29_1___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(38986, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function printSiGMLNoMotion_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0) {
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, 60), 5797), 32226);
}
function parseVector_28Vector__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
HEAP32[$3 + 56 >> 2] = 0;
HEAP32[$3 + 60 >> 2] = 0;
HEAP32[$3 + 48 >> 2] = 0;
HEAP32[$3 + 52 >> 2] = 0;
HEAP32[$3 + 40 >> 2] = 0;
HEAP32[$3 + 44 >> 2] = 0;
HEAP32[$3 + 16 >> 2] = $3 + 56;
HEAP32[$3 + 20 >> 2] = $3 + 48;
HEAP32[$3 + 24 >> 2] = $3 + 40;
$1 = sscanf($1, 7523, $3 + 16 | 0);
if (($1 | 0) != 3) {
LogTime_28_29();
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = 2262;
eprintf_28char_20const__2c_20____29(45520, $3);
}
Vector__setFrom_28float_2c_20float_2c_20float_29($0, Math_fround(HEAPF64[$3 + 56 >> 3]), Math_fround(HEAPF64[$3 + 48 >> 3]), Math_fround(HEAPF64[$3 + 40 >> 3]));
}
__stack_pointer = $3 - -64 | 0;
}
function element1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 39;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 15 | 0) {
case 3:
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49937) | 0) {
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 42;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49943) | 0)) {
break label$3;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 41;
case 0:
break label$2;
case 1:
case 2:
break label$3;
default:
break label$4;
}
}
if (($1 | 0) == 23) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 + 4 >> 2] = 1;
HEAP32[$0 >> 2] = 803;
return 44;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____recommend_28unsigned_20long_29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 12 >> 2] = $1;
$3 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___max_size_28_29_20const($0);
if ($3 >>> 0 >= $1 >>> 0) {
$0 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0);
if ($0 >>> 0 < $3 >>> 1 >>> 0) {
HEAP32[$2 + 8 >> 2] = $0 << 1;
$3 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____throw_length_error_28_29_20const($0);
abort();
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____recommend_28unsigned_20long_29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 12 >> 2] = $1;
$3 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___max_size_28_29_20const($0);
if ($3 >>> 0 >= $1 >>> 0) {
$0 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0);
if ($0 >>> 0 < $3 >>> 1 >>> 0) {
HEAP32[$2 + 8 >> 2] = $0 << 1;
$3 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____throw_length_error_28_29_20const($0);
abort();
}
function normal_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$7 = $2 - 1 | 0;
$5 = 1;
label$1: {
while (1) {
$1 = $1 + 1 | 0;
if (($7 | 0) == ($1 | 0)) {
break label$1;
}
$2 = HEAPU8[$1 | 0];
$4 = $2 << 24 >> 24;
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0] - 9 | 0;
label$3: {
label$4: {
if ($2 >>> 0 > 26) {
break label$4;
}
$6 = 1 << $2;
if ($6 & 132483059) {
continue;
}
if (!($6 & 139264)) {
if (($2 | 0) != 12) {
break label$4;
}
if (($4 | 0) != 9) {
continue;
}
break label$3;
}
if (($4 | 0) >= 0) {
continue;
}
}
if (($4 | 0) == 36 | ($4 | 0) == 64) {
continue;
}
}
break;
}
HEAP32[$3 >> 2] = $1;
$5 = 0;
}
return $5 | 0;
}
function DynamicArray1_JointRotation____initialise_28int_2c_20JointRotation___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_JointRotation____clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function prolog0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 11 | 0) {
case 4:
HEAP32[$0 >> 2] = 779;
return 0;
case 1:
HEAP32[$0 >> 2] = 779;
return 1;
case 0:
HEAP32[$0 >> 2] = 779;
return 55;
case 2:
HEAP32[$0 >> 2] = 779;
return 56;
case 5:
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49806) | 0)) {
break label$3;
}
HEAP32[$0 >> 2] = 780;
return 3;
case 3:
break label$2;
default:
break label$4;
}
}
if (($1 | 0) == 29) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 >> 2] = 781;
return 2;
}
function InitialiseRepetitionSpecs_28_29() {
var $0 = 0, $1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$0 = HEAP32[17100];
$0 = XMLCell__element_28char_20const__29($0, 3676);
wasm2js_i32$0 = 61316, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 5609, Math_fround(1)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 70068, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 8496, Math_fround(.4000000059604645)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = 70072, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, 8515, Math_fround(-.10000000149011612)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
while (1) {
if (($1 | 0) != 9) {
RepSpec__initialise_28_29(Math_imul($1, 24) + 70080 | 0);
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_BasicMovement___initialise_28int_2c_20BasicMovement___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_BasicMovement___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DirectedMovement__DirectedMovement_28DirectedMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 61788;
Direction3__Direction3_28_29($0 + 528 | 0);
Direction3__Direction3_28_29($0 + 544 | 0);
Direction2__Direction2_28_29($0 + 560 | 0);
Direction2__Direction2_28_29($0 + 588 | 0);
HEAP32[19359] = 0;
invoke_ii(462, $0 + 600 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_iii(463, $0 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function DynamicArray_char_2c_20_28char_290___initialise_28int_2c_20char__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray_char_2c_20_28char_290___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(38986, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArrayP_char_20const___initialise_28int_2c_20char_20const___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_char_20const___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function TwoHAbstractPosture__TwoHAbstractPosture_28TwoHAbstractPosture_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$0 = OneHAbstractPosture__OneHAbstractPosture_28OneHAbstractPosture_20const__29($0, $1);
HEAP32[19359] = 0;
$2 = invoke_iii(446, $0 + 72 | 0, $1 + 72 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($3 | 0) != 1) {
HEAP32[19359] = 0;
invoke_iii(496, $0 + 144 | 0, $1 + 144 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$2;
}
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHAbstractPosture___OneHAbstractPosture_28_29($2);
}
OneHAbstractPosture___OneHAbstractPosture_28_29($0);
__resumeException($1 | 0);
abort();
}
function AnimgenInstance__Allocate_28int_2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
label$1: {
label$2: {
if (!AnimgenInstance__validInst_28int_29($0)) {
break label$2;
}
if (AnimgenInstance__getInst_28int_29($0)) {
break label$2;
}
$4 = operator_20new_28unsigned_20long_29(44);
HEAP32[19359] = 0;
invoke_iii(740, $4 | 0, $0 | 0) | 0;
$5 = HEAP32[19359];
HEAP32[19359] = 0;
$6 = 1;
if (($5 | 0) == 1) {
break label$1;
}
$1 = copyString_28char_20const__29($1);
HEAP32[$4 + 40 >> 2] = 1;
HEAP8[$4 + 5 | 0] = $3;
HEAP8[$4 + 4 | 0] = $2;
HEAP32[$4 >> 2] = $1;
HEAP32[($0 << 2) + 75492 >> 2] = $4;
}
return $6;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($0 | 0);
abort();
}
function DynamicArrayP_OptionSpec___initialise_28int_2c_20OptionSpec___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_OptionSpec___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function Direction2__EllipseDirection_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
if ($1) {
while (1) {
$3 = HEAP8[$1 | 0];
if ($3) {
label$4: {
label$5: {
switch ($3 - 114 | 0) {
default:
label$8: {
switch ($3 - 104 | 0) {
case 0:
case 4:
break label$8;
default:
break label$4;
}
}
$2 = $2 + 1 | 0;
break label$4;
case 0:
$2 = $2 - 1 | 0;
break label$4;
case 1:
case 2:
break label$4;
case 3:
case 4:
break label$5;
}
}
$4 = $4 + 1 | 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
HEAPF32[$0 + 4 >> 2] = $4 | 0;
HEAPF32[$0 >> 2] = $2 | 0;
return;
}
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
}
function DynamicArray1_Quaternion___initialise_28int_2c_20Quaternion__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 4);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_Quaternion___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function CreateSiGMLHandlers_28_29() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
$0 = __stack_pointer - 32 | 0;
__stack_pointer = $0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = invoke_iiii(392, $1 | 0, 0, 2) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[17618] = $2;
HEAP32[$0 + 16 >> 2] = 393;
HEAP32[$0 + 20 >> 2] = 4;
HEAP32[$0 + 24 >> 2] = 394;
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 6;
HEAP32[$0 + 12 >> 2] = 3;
HEAP32[$0 >> 2] = 395;
HEAP32[$0 + 8 >> 2] = 396;
HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___addManyToHashX_28SiGML_Element_2c_20____29($2, 5, $0);
__stack_pointer = $0 + 32 | 0;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function DynamicArray1_Vector___initialise_28int_2c_20Vector__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc(Math_imul($1, 12));
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray1_Vector___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39091, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function handle_handconfig_28Gesture__2c_20XMLCell__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = HEAPU8[$0 + 13 | 0];
if ($3 & 4) {
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__29(HEAP32[$0 + 20 >> 2], HEAP32[$1 + 4 >> 2]);
$3 = HEAPU8[$0 + 13 | 0];
}
label$2: {
if (!($3 & 8)) {
break label$2;
}
$1 = HEAP32[$1 + 4 >> 2];
$4 = HEAP32[$0 + 24 >> 2];
if ($3 & 1) {
$0 = HEAPU16[$0 + 14 >> 1];
HEAP16[$2 + 6 >> 1] = $0;
HEAP16[$2 + 8 >> 1] = $0;
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_29($4, $1, $2 + 6 | 0);
break label$2;
}
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__29($4, $1);
}
__stack_pointer = $2 + 16 | 0;
}
function HashChain_char_20const__2c_20AbstractTimedMorph____insert_28HashChainItem_char_20const__2c_20AbstractTimedMorph___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20AbstractTimedMorph____HashChain_28HashChainItem_char_20const__2c_20AbstractTimedMorph___2c_20HashChain_char_20const__2c_20AbstractTimedMorph____29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function latin1_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0;
$0 = HEAP32[$1 >> 2];
while (1) {
label$2: {
if (($2 | 0) == ($0 | 0)) {
break label$2;
}
$5 = HEAP32[$3 >> 2];
$6 = HEAP8[$0 | 0];
if (($6 | 0) < 0) {
if (($4 - $5 | 0) < 2) {
break label$2;
}
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = ($6 & 192) >>> 6 | 192;
$0 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $0 + 1;
HEAP8[$0 | 0] = $6 & 63 | 128;
$0 = HEAP32[$1 >> 2] + 1 | 0;
HEAP32[$1 >> 2] = $0;
continue;
}
if (($4 | 0) == ($5 | 0)) {
break label$2;
}
HEAP32[$1 >> 2] = $0 + 1;
$0 = HEAPU8[$0 | 0];
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $0;
$0 = HEAP32[$1 >> 2];
continue;
}
break;
}
}
function HanimAvatar__computeObjectSizes_28_29($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0;
label$1: {
$1 = HEAP32[$0 + 104 >> 2];
if (!$1) {
break label$1;
}
while (1) {
if (HEAP32[$1 + 12 >> 2] <= ($3 | 0)) {
break label$1;
}
$1 = DynamicArrayP_Joint___getElement_28int_29_20const($1, $3);
if (HEAPF32[$1 + 28 >> 2] == Math_fround(0)) {
$4 = $1 + 68 | 0;
$2 = sqrt_28float_29(minREAL_28float_2c_20float_29(minDstSqJoints_28float_2c_20Vector__2c_20DynamicArrayP_Joint___29($4, HEAP32[$1 + 12 >> 2]), minDstSqSites_28float_2c_20Vector__2c_20DynamicArrayP_Site___29($4, HEAP32[$1 + 16 >> 2])));
$2 = Math_fround($2 * Math_fround(.30000001192092896));
HEAPF32[$1 + 28 >> 2] = $2 == Math_fround(0) ? HEAPF32[15132] : $2;
}
$3 = $3 + 1 | 0;
$1 = HEAP32[$0 + 104 >> 2];
continue;
}
}
}
function DynamicArray_int_2c_20_1___initialise_28int_2c_20int__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray_int_2c_20_1___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(38986, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function QuaternionController__get_perception_28Quaternion__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = Quaternion__Quaternion_28_29($3);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($2, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] + 32 >> 2]]($0 + 16 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 124 >> 2] + 32 >> 2]]($0 + 124 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 232 >> 2] + 32 >> 2]]($0 + 232 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 340 >> 2] + 32 >> 2]]($0 + 340 | 0)));
Quaternion__setPositivePhase_28_29($2);
Quaternion__normalise_28_29($2);
Quaternion__setFrom_28Quaternion_20const__29($1, $2);
Quaternion__setFrom_28Quaternion_20const__29($1, $0 + 532 | 0);
__stack_pointer = $3 + 16 | 0;
}
function DynamicArrayP_XMLCell___initialise_28int_2c_20XMLCell___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_XMLCell___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArrayP_Segment___initialise_28int_2c_20Segment___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_Segment___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArrayP_Gesture___initialise_28int_2c_20Gesture___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_Gesture___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function OneHGesture__ConcreteLocateSite_28Vector__2c_20SiteIDPair_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
$4 = HEAP32[$2 >> 2];
HEAP32[$3 + 12 >> 2] = $4;
HEAP32[$3 + 40 >> 2] = $4;
OneHGesture__ConcreteLocateSite_28Vector__2c_20SiteID_29($0, $1, $3 + 12 | 0);
label$1: {
if (!SiteID__defined_28_29_20const($0 + 8 | 0)) {
break label$1;
}
$4 = Vector__Vector_28_29($3 + 24 | 0);
$5 = HEAP32[$2 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = $5;
HEAP32[$3 + 16 >> 2] = $5;
OneHGesture__ConcreteLocateSite_28Vector__2c_20SiteID_29($0, $4, $3 + 8 | 0);
if (Vector__isZero_28_29_20const($4)) {
break label$1;
}
Vector__setMidPoint_28Vector_20const__2c_20float_29($1, $4, HEAPF32[$2 + 8 >> 2]);
}
__stack_pointer = $3 + 48 | 0;
}
function HashChain_char_20const__20const_2c_20AvatarType___insert_28HashChainItem_char_20const__20const_2c_20AvatarType__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__20const_2c_20AvatarType___HashChain_28HashChainItem_char_20const__20const_2c_20AvatarType__2c_20HashChain_char_20const__20const_2c_20AvatarType___29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function Quaternion__setFromVecAngle_28float_2c_20float_2c_20float_2c_20float_2c_20bool_29($0, $1, $2, $3, $4, $5) {
var $6 = Math_fround(0), $7 = Math_fround(0);
$4 = Math_fround(trimAnglePI_28float_29($4) * Math_fround(.5));
$6 = cos_28float_29($4);
$4 = sin_28float_29($4);
label$1: {
if ($5) {
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround($4 * $1), Math_fround($4 * $2), Math_fround($4 * $3), $6);
break label$1;
}
$7 = Vector__alength_28float_2c_20float_2c_20float_29($1, $2, $3);
if ($7 <= Math_fround(0)) {
Quaternion__setZero_28_29($0);
break label$1;
}
$4 = Math_fround($4 / $7);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Math_fround($4 * $1), Math_fround($4 * $2), Math_fround($4 * $3), $6);
}
Quaternion__checkValidQuat_28_29_20const($0);
}
function OneHConcretePosture__shiftHandSite_28Vector_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = Vector__Vector_28_29($3);
$2 = $0 + 16 | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $2, $1);
Quaternion__rotateVector_28Vector__29_20const($0 + 40 | 0, $4);
Vector__setSubtract_28Vector_20const__29($0 + 4 | 0, $4);
$0 = $0 + 28 | 0;
Vector__setFrom_28Vector_20const__29($0, $2);
Vector__setFrom_28Vector_20const__29($2, $1);
if (HEAPU8[67572]) {
eprintf_28char_20const__2c_20____29(20041, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 3);
eprintf_28char_20const__2c_20____29(20139, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($2, HEAP32[16886], 3);
eputc_28char_29(10);
}
__stack_pointer = $3 + 16 | 0;
}
function fstatat($0, $1, $2, $3) {
var $4 = 0;
label$1: {
label$2: {
label$3: {
if (!(($3 | 0) != 4096 | ($0 | 0) < 0)) {
if (HEAPU8[$1 | 0]) {
break label$3;
}
$0 = __syscall_fstat64($0 | 0, $2 | 0) | 0;
break label$1;
}
label$5: {
if (($0 | 0) != -100) {
$4 = HEAPU8[$1 | 0];
if (!$3 & ($4 | 0) == 47) {
break label$5;
}
if (($3 | 0) != 256 | ($4 | 0) != 47) {
break label$3;
}
break label$2;
}
if (($3 | 0) == 256) {
break label$2;
}
if ($3) {
break label$3;
}
}
$0 = __syscall_stat64($1 | 0, $2 | 0) | 0;
break label$1;
}
$0 = __syscall_newfstatat($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0;
break label$1;
}
$0 = __syscall_lstat64($1 | 0, $2 | 0) | 0;
}
return __syscall_ret($0);
}
function DynamicArrayP_Joint___initialise_28int_2c_20Joint___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_Joint___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArray0_float___initialise_28int_2c_20float__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArray0_float___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39144, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function HashAny_SiteID_20const_2c_20Site____lookupInCell_28int_2c_20SiteID_29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
$2 = HEAP32[$2 >> 2];
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
HEAP32[$3 + 24 >> 2] = $2;
$4 = HEAP32[$1 >> 2];
HEAP32[$3 + 16 >> 2] = $4;
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $4;
if (!KeyOps_SiteID_20const___eqkey_28SiteID_2c_20SiteID_29($3 + 12 | 0, $3 + 8 | 0)) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
__stack_pointer = $3 + 32 | 0;
$1 = HEAP32[$1 >> 2];
return $1;
}
function Controller__Controller_28ControllerParams_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$2 = $1;
$3 = HEAP32[$2 >> 2];
$1 = HEAP32[$2 + 4 >> 2];
HEAP32[$0 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = $1;
$3 = HEAP32[$2 + 12 >> 2];
$1 = HEAP32[$2 + 8 >> 2];
$2 = $1;
$1 = $0;
HEAP32[$1 + 8 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $3;
HEAP32[$1 + 56 >> 2] = -1082130432;
HEAP32[$1 + 48 >> 2] = 0;
HEAP32[$1 + 52 >> 2] = -1082130432;
HEAP32[$1 + 44 >> 2] = 3;
HEAP32[$1 + 36 >> 2] = 1065353216;
HEAP32[$1 + 40 >> 2] = 1017370378;
HEAP32[$1 + 28 >> 2] = 1097859072;
HEAP32[$1 + 32 >> 2] = 1184645120;
HEAP32[$1 + 20 >> 2] = 1082130432;
HEAP32[$1 + 24 >> 2] = 1181376512;
HEAP8[$1 + 16 | 0] = 0;
memset($1 + 60 | 0, 0, 36);
HEAP32[$1 + 96 >> 2] = 1065353216;
HEAP32[$1 + 100 >> 2] = 1065353216;
return $1 | 0;
}
function DynamicArrayP_char___initialise_28int_2c_20char___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_char___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function DynamicArrayP_Site___initialise_28int_2c_20Site___29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 10;
label$1: {
label$2: {
if (!$1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
break label$2;
}
HEAP32[$0 + 8 >> 2] = $1;
if (!$2) {
$2 = dlmalloc($1 << 2);
HEAP32[$0 >> 2] = $2;
if (!$2) {
break label$1;
}
DynamicArrayP_Site___clearData_28int_2c_20int_29($0, 0, $1);
break label$2;
}
HEAP32[$0 >> 2] = $2;
}
__stack_pointer = $3 + 16 | 0;
return;
}
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(39038, $3);
HEAP32[$0 + 8 >> 2] = 0;
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $2 + 8 | 0, $2);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
__stack_pointer = $2 + 16 | 0;
return $0;
}
function HashAny_char_20const__2c_20ThumbBending___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2, $3) {
var $4 = 0;
label$1: {
label$2: {
$2 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
if (HEAP16[$2 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$2 = HEAP32[$2 >> 2];
if (!$2) {
break label$2;
}
$4 = $2 + 4 | 0;
if (KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($3, HEAP32[$2 >> 2])) {
break label$1;
}
$2 = $2 + 24 | 0;
continue;
}
}
$4 = $1 + 20 | 0;
}
$2 = $4;
$3 = HEAP32[$2 >> 2];
$1 = HEAP32[$2 + 4 >> 2];
$4 = $3;
$3 = $0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $1;
HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
$3 = HEAP32[$2 + 12 >> 2];
$1 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = $3;
}
function TwoHConcretePostureChange__setConstellationFlags_28SET_OF_HANDS_2c_20Gesture__29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$4 = HEAPU8[$2 + 13 | 0] & 64;
$2 = HEAP32[$2 + 40 >> 2];
$5 = HEAPU8[$2 + 61 | 0];
$6 = HEAPU8[$2 + 60 | 0];
if (HaveRightHand_28SET_OF_HANDS_29($1)) {
$3 = HEAPU16[$0 + 448 >> 1] & -3 | (($4 ? $6 : $5) ? 2 : 0);
HEAP16[$0 + 448 >> 1] = $3;
$3 = $3 & -9 | HEAPU8[$2 + 62 | 0] << 3 & 248;
HEAP16[$0 + 448 >> 1] = $3;
HEAP16[$0 + 448 >> 1] = $3 & 65531 | HEAPU8[$2 + 62 | 0] << 2 & 252;
}
if (HaveLeftHand_28SET_OF_HANDS_29($1)) {
$1 = HEAPU16[$0 + 450 >> 1] & -3 | (($4 ? $5 : $6) ? 2 : 0);
HEAP16[$0 + 450 >> 1] = $1;
$1 = $1 & -9 | HEAPU8[$2 + 62 | 0] << 3 & 248;
HEAP16[$0 + 450 >> 1] = $1;
HEAP16[$0 + 450 >> 1] = $1 & 65531 | HEAPU8[$2 + 62 | 0] << 2 & 252;
}
}
function XMLCell__element_28char_20const__2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = HEAP32[$0 + 8 >> 2];
label$1: {
if (!$3) {
break label$1;
}
$3 = HEAP32[$3 + 12 >> 2];
$7 = ($3 | 0) > 0 ? $3 : 0;
$3 = 0;
while (1) {
if (($3 | 0) != ($7 | 0)) {
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$0 + 8 >> 2], $3);
if (!strcmp($1, HEAP32[$5 >> 2])) {
if (($2 | 0) == ($6 | 0)) {
break label$1;
}
$6 = $6 + 1 | 0;
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
$5 = 0;
if (!HEAPU8[67581]) {
break label$1;
}
HEAP32[$4 + 4 >> 2] = $2;
HEAP32[$4 >> 2] = $1;
eprintf_28char_20const__2c_20____29(40730, $4);
}
__stack_pointer = $4 + 16 | 0;
return $5;
}
function SpecialHandshapes__SpecialHandshapes_28_29($0) {
$0 = $0 | 0;
$0 = FingerBending__FingerBending_28_29($0);
FingerBending__FingerBending_28_29($0 + 16 | 0);
ThumbBending__ThumbBending_28_29($0 + 32 | 0);
FingerBending__FingerBending_28_29($0 + 52 | 0);
FingerBending__FingerBending_28_29($0 + 68 | 0);
ThumbBending__ThumbBending_28_29($0 + 84 | 0);
FingerBending__FingerBending_28_29($0 + 104 | 0);
ThumbBending__ThumbBending_28_29($0 + 120 | 0);
FingerBending__FingerBending_28_29($0 + 140 | 0);
ThumbBending__ThumbBending_28_29($0 + 156 | 0);
FingerBending__FingerBending_28_29($0 + 176 | 0);
ThumbBending__ThumbBending_28_29($0 + 192 | 0);
FingerBending__FingerBending_28_29($0 + 212 | 0);
ThumbBending__ThumbBending_28_29($0 + 228 | 0);
FingerBending__FingerBending_28_29($0 + 248 | 0);
return $0 | 0;
}
function ConvertAxisPair_28Vector__2c_20Direction3_2c_20Direction3_2c_20Mirroring_29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 80 | 0;
__stack_pointer = $4;
$3 = HEAPU16[$3 >> 1];
HEAP16[$4 + 14 >> 1] = $3;
HEAP16[$4 + 56 >> 1] = $3;
Direction3__makeMirrorAxis_28Mirroring_29_20const($4 - -64 | 0, $1, $4 + 14 | 0);
SiGML__convertDirectionVec_28Vector__2c_20Direction3_29($0, $4 - -64 | 0);
if (Direction3__defined_28_29_20const($2)) {
$1 = Vector__Vector_28_29($4 + 40 | 0);
HEAP16[$4 + 12 >> 1] = $3;
HEAP16[$4 + 16 >> 1] = $3;
Direction3__makeMirrorAxis_28Mirroring_29_20const($4 + 24 | 0, $2, $4 + 12 | 0);
SiGML__convertDirectionVec_28Vector__2c_20Direction3_29($1, $4 + 24 | 0);
Vector__setMidPoint_28Vector_20const__29($0, $1);
Vector__setUnit_28_29($0);
}
__stack_pointer = $4 + 80 | 0;
}
function HingeJointRotation__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
$4 = $0 + 8 | 0;
$6 = Vector__x_28_29_20const($4);
$7 = Vector__y_28_29_20const($4);
$8 = Vector__z_28_29_20const($4);
$9 = HEAPF32[$0 + 20 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $8;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $7;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $9;
HEAPF64[$3 + 8 >> 3] = $6;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = $5;
__small_fprintf($1, 8058, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function __cxx_global_var_init_52() {
var $0 = 0;
$0 = __stack_pointer - 80 | 0;
__stack_pointer = $0;
TorsoCurve__TorsoCurve_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29(67768, Vector__Vector_28float_2c_20float_2c_20float_29($0 - -64 | 0, Math_fround(2), Math_fround(0), Math_fround(0)), Vector__Vector_28float_2c_20float_2c_20float_29($0 + 48 | 0, Math_fround(1.5), Math_fround(0), Math_fround(.75)), Vector__Vector_28float_2c_20float_2c_20float_29($0 + 32 | 0, Math_fround(0), Math_fround(0), Math_fround(1)), Vector__Vector_28float_2c_20float_2c_20float_29($0 + 16 | 0, Math_fround(-1.5), Math_fround(0), Math_fround(.75)), Vector__Vector_28float_2c_20float_2c_20float_29($0, Math_fround(-2), Math_fround(0), Math_fround(0)));
__stack_pointer = $0 + 80 | 0;
}
function StringToAnchoring_28char_20const__2c_20bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if (!$0) {
break label$2;
}
$3 = 1;
if ((strlen($0) | 0) == 1) {
$4 = HEAP8[$0 | 0];
if (($4 | 0) == 120) {
break label$1;
}
if (($4 | 0) == 101) {
$3 = 0;
break label$1;
}
if (!HEAPU8[67600]) {
break label$2;
}
LogTime_28_29();
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(45969, $2);
break label$2;
}
if (!HEAPU8[67600]) {
break label$2;
}
LogTime_28_29();
HEAP32[$2 + 16 >> 2] = $0;
eprintf_28char_20const__2c_20____29(45969, $2 + 16 | 0);
}
$3 = $1;
}
__stack_pointer = $2 + 32 | 0;
return $3 | 0;
}
function SeqTimedMorph__SeqTimedMorph_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = AbstractTimedMorph__AbstractTimedMorph_28TimedMorphType_29($0, 3);
HEAP32[$1 >> 2] = 62948;
HEAP32[19359] = 0;
$2 = invoke_ii(64, 16) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($0 | 0) != 1) {
HEAP32[19359] = 0;
$3 = invoke_ii(382, $2 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
HEAP32[$1 + 24 >> 2] = $3;
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
}
AbstractTimedMorph___AbstractTimedMorph_28_29($1);
__resumeException($0 | 0);
abort();
}
function ParTimedMorph__ParTimedMorph_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = AbstractTimedMorph__AbstractTimedMorph_28TimedMorphType_29($0, 2);
HEAP32[$1 >> 2] = 62872;
HEAP32[19359] = 0;
$2 = invoke_ii(64, 16) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
label$2: {
if (($0 | 0) != 1) {
HEAP32[19359] = 0;
$3 = invoke_ii(382, $2 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$2;
}
HEAP32[$1 + 24 >> 2] = $3;
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
break label$1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
}
AbstractTimedMorph___AbstractTimedMorph_28_29($1);
__resumeException($0 | 0);
abort();
}
function SiGMLConstellation__SiGMLConstellation_28SiGMLConstellation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = __memcpy($0, $1, 52);
HEAP32[19359] = 0;
invoke_iii(74, $0 + 52 | 0, $1 + 52 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
$2 = HEAP32[$1 + 68 >> 2];
$3 = HEAP32[$1 + 64 >> 2];
HEAP32[$0 + 64 >> 2] = $3;
HEAP32[$0 + 68 >> 2] = $2;
HEAP32[$0 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
$3 = HEAP32[$1 + 76 >> 2];
$2 = HEAP32[$1 + 72 >> 2];
HEAP32[$0 + 72 >> 2] = $2;
HEAP32[$0 + 76 >> 2] = $3;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($0 + 28 | 0);
SiteIDPair___SiteIDPair_28_29($0 + 16 | 0);
SiteIDPair___SiteIDPair_28_29($0);
__resumeException($1 | 0);
abort();
}
function SpecialHandshapes___SpecialHandshapes_28_29($0) {
FingerBending___FingerBending_28_29($0 + 248 | 0);
ThumbBending___ThumbBending_28_29($0 + 228 | 0);
FingerBending___FingerBending_28_29($0 + 212 | 0);
ThumbBending___ThumbBending_28_29($0 + 192 | 0);
FingerBending___FingerBending_28_29($0 + 176 | 0);
ThumbBending___ThumbBending_28_29($0 + 156 | 0);
FingerBending___FingerBending_28_29($0 + 140 | 0);
ThumbBending___ThumbBending_28_29($0 + 120 | 0);
FingerBending___FingerBending_28_29($0 + 104 | 0);
ThumbBending___ThumbBending_28_29($0 + 84 | 0);
FingerBending___FingerBending_28_29($0 + 68 | 0);
FingerBending___FingerBending_28_29($0 + 52 | 0);
ThumbBending___ThumbBending_28_29($0 + 32 | 0);
FingerBending___FingerBending_28_29($0 + 16 | 0);
return FingerBending___FingerBending_28_29($0);
}
function ProcessSingleXMLMorph_28XMLCell__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = HEAP32[$0 >> 2];
label$1: {
if (!strcmp(7184, $2)) {
$0 = ProcessAtomicXMLMorph_28XMLCell__2c_20bool_29($0, $1);
break label$1;
}
label$3: {
if (strcmp(7139, $2)) {
if (strcmp(7170, $2)) {
break label$3;
}
}
$0 = ProcessParallelXMLMorph_28XMLCell__2c_20bool_29($0, $1);
break label$1;
}
label$5: {
if (strcmp(7148, $2)) {
if (strcmp(7180, $2)) {
break label$5;
}
}
$0 = ProcessSeqXMLMorph_28XMLCell__2c_20bool_29($0, $1);
break label$1;
}
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(38344, $3);
$0 = 0;
}
__stack_pointer = $3 + 16 | 0;
return $0;
}
function SiGMLConstellation__AnalyseSplitLocation_28XMLCell__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$1 = HEAP32[$1 + 8 >> 2];
$5 = DynamicArrayP_XMLCell___getElement_28int_29_20const($1, 0);
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const($1, 1);
$4 = HEAPU16[35148];
HEAP16[$3 + 24 >> 1] = $4;
HEAP16[$3 + 14 >> 1] = $4;
MakeSiteIDPairSub_28SiteIDPair__2c_20SiteID__2c_20XMLCell__2c_20Mirroring_2c_20bool_2c_20bool_29($0 + 16 | 0, $0 + 40 | 0, $5, $3 + 14 | 0, 1, $2);
$4 = HEAPU16[35148];
HEAP16[$3 + 16 >> 1] = $4;
HEAP16[$3 + 12 >> 1] = $4;
MakeSiteIDPairSub_28SiteIDPair__2c_20SiteID__2c_20XMLCell__2c_20Mirroring_2c_20bool_2c_20bool_29($0 + 28 | 0, $0 + 44 | 0, $1, $3 + 12 | 0, 0, $2);
__stack_pointer = $3 + 32 | 0;
}
function InitHanimAnimator_28_29() {
var $0 = 0, $1 = 0, $2 = 0;
$1 = operator_20new_28unsigned_20long_29(352);
HEAP32[19359] = 0;
$0 = invoke_ii(764, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[18902] = $0;
HEAP32[$0 >> 2] = 0;
$1 = HEAP32[18906];
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HanimAnimationRecord__startAnimation_28_29($0);
$0 = HEAP32[18902];
HEAP32[$0 + 20 >> 2] = 5;
HanimAnimationRecord__openOutput_28_29($0);
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function HashChain_char_20const__2c_20char_20const____insert_28HashChainItem_char_20const__2c_20char_20const___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20char_20const____HashChain_28HashChainItem_char_20const__2c_20char_20const___2c_20HashChain_char_20const__2c_20char_20const____29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function Expat_end_28void__2c_20char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
label$1: {
label$2: {
$1 = DynamicArrayP_XMLCell___popElement_28_29(HEAP32[$0 + 28 >> 2]);
if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
break label$2;
}
$2 = HEAP32[$0 + 12 >> 2];
if (!$2) {
break label$2;
}
FUNCTION_TABLE[$2 | 0](XMLWrapper__GetUserData_28_29($0), $1);
$2 = 0;
HEAP32[$0 + 8 >> 2] = 0;
if (!$1) {
break label$1;
}
XMLCell___XMLCell_28_29($1);
operator_20delete_28void__29($1);
break label$1;
}
$2 = $1;
}
$1 = HEAP32[$0 + 28 >> 2];
if (!HEAP32[$1 + 12 >> 2]) {
HEAP32[$0 + 20 >> 2] = $2;
return;
}
if ($2) {
DynamicArrayP_XMLCell___appendElement_28XMLCell__29(HEAP32[DynamicArrayP_XMLCell___topElement_28_29($1) + 8 >> 2], $2);
}
}
function QuaternionController__get_reference_28Quaternion__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = Quaternion__Quaternion_28_29($2);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($3, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 16 >> 2] + 20 >> 2]]($0 + 16 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 124 >> 2] + 20 >> 2]]($0 + 124 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 232 >> 2] + 20 >> 2]]($0 + 232 | 0)), Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 340 >> 2] + 20 >> 2]]($0 + 340 | 0)));
Quaternion__setPositivePhase_28_29($3);
Quaternion__setFrom_28Quaternion_20const__29($1, $3);
Quaternion__setFrom_28Quaternion_20const__29($1, $0 + 548 | 0);
__stack_pointer = $2 + 16 | 0;
}
function BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$6 = BasicMovement__GetTrajectoryFraction_28float_2c_20bool_29($0, $2, $3);
if (HEAPU8[67558]) {
$5 = HEAP32[$0 + 4 >> 2];
$7 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[17651], $5);
HEAPF64[$4 + 8 >> 3] = $2;
HEAP32[$4 + 4 >> 2] = $7;
HEAP32[$4 >> 2] = $5;
eprintf_28char_20const__2c_20____29(29447, $4);
}
TwoHConcretePostureChange__interpolate_28TwoHConcretePosture__2c_20float_2c_20SET_OF_HANDS_2c_20bool_29_20const($0 + 60 | 0, $1, $6, HEAP32[$0 + 8 >> 2], $3);
__stack_pointer = $4 + 16 | 0;
}
function entity7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 11;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 15 | 0) {
case 3:
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49814) | 0) {
HEAP32[$0 >> 2] = 806;
return 11;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49821) | 0)) {
break label$3;
}
HEAP32[$0 >> 2] = 807;
return 11;
case 0:
break label$2;
case 1:
case 2:
break label$3;
default:
break label$4;
}
}
if (($1 | 0) == 27) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 + 8 >> 2] = 11;
HEAP32[$0 >> 2] = 801;
return 12;
}
function entity2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 11;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 15 | 0) {
case 3:
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49814) | 0) {
HEAP32[$0 >> 2] = 799;
return 11;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49821) | 0)) {
break label$3;
}
HEAP32[$0 >> 2] = 800;
return 11;
case 0:
break label$2;
case 1:
case 2:
break label$3;
default:
break label$4;
}
}
if (($1 | 0) == 27) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 + 8 >> 2] = 11;
HEAP32[$0 >> 2] = 801;
return 12;
}
function TorsoCurve__GetCurvePoint_28float_2c_20Vector__29_20const($0, $1, $2) {
$1 = Math_fround(trimREAL_28float_2c_20float_2c_20float_29(Math_fround(0), $1, Math_fround(1)) * Math_fround(4));
if ($1 <= Math_fround(1)) {
TorsoCurve__GetCurvePoint_28bool_2c_20bool_2c_20float_2c_20Vector__29_20const($0, 0, 0, $1, $2);
return;
}
if ($1 <= Math_fround(2)) {
TorsoCurve__GetCurvePoint_28bool_2c_20bool_2c_20float_2c_20Vector__29_20const($0, 0, 1, Math_fround($1 + Math_fround(-1)), $2);
return;
}
if ($1 <= Math_fround(3)) {
TorsoCurve__GetCurvePoint_28bool_2c_20bool_2c_20float_2c_20Vector__29_20const($0, 1, 1, Math_fround($1 + Math_fround(-2)), $2);
return;
}
TorsoCurve__GetCurvePoint_28bool_2c_20bool_2c_20float_2c_20Vector__29_20const($0, 1, 0, Math_fround($1 + Math_fround(-3)), $2);
}
function makeContact_28SiteIDPair_2c_20SiteID_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
label$1: {
if (!SiteID__defined_28_29_20const($0)) {
break label$1;
}
if (isArmHandLocation_28int_29(HEAPU8[$0 | 0])) {
$0 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
if ($0 & 6291456) {
break label$1;
}
$2 = 9;
if (softLocation_28Location_29($0 & 255)) {
break label$1;
}
return (softLocation_28Location_29(HEAPU8[$1 | 0]) ? 9 : 10) | 0;
}
if (!SiteID__defined_28_29_20const($1)) {
break label$1;
}
$1 = HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 | 0] << 16;
if (HEAPU8[$0 + 6 | 0] << 16 & 6291456 | ($1 & 6291456 | (HEAPU8[$0 + 2 | 0] << 16 & 7340032) != 1048576)) {
break label$1;
}
$2 = softLocation_28Location_29($1 & 255) ? 9 : 10;
}
return $2 | 0;
}
function ControlledByScalar_Vector___set_reference_28Vector_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = Math_fround(0);
label$1: {
if (Vector__equal_28Vector_20const__29_20const($1, $0)) {
break label$1;
}
$2 = Vector__distanceSq_28Vector_20const__29_20const($1, $0);
Vector__setFrom_28Vector_20const__29($0, $1);
if (HEAPF32[12151] < $2) {
Vector__setFrom_28Vector_20const__29($0 + 24 | 0, $0 + 12 | 0);
$1 = HEAP32[$0 + 36 >> 2];
if (!$1) {
break label$1;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, Math_fround(1));
$0 = HEAP32[$0 + 36 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, Math_fround(0));
return;
}
Vector__setFrom_28Vector_20const__29($0 + 12 | 0, $1);
Vector__setFrom_28Vector_20const__29($0 + 24 | 0, $1);
}
}
function attlist8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 33;
if (($1 | 0) != 15) {
label$2: {
if (($1 | 0) != 27) {
if (($1 | 0) != 20) {
break label$2;
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, HEAP32[$4 + 64 >> 2] + $2 | 0, $3, 49914) | 0) {
HEAP32[$0 >> 2] = 795;
return 35;
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, HEAP32[$4 + 64 >> 2] + $2 | 0, $3, 49922) | 0) {
HEAP32[$0 >> 2] = 795;
return 36;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, HEAP32[$4 + 64 >> 2] + $2 | 0, $3, 49931) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 814;
return 33;
}
HEAP32[$0 >> 2] = 795;
return 37;
}
common($0);
$5 = -1;
}
return $5 | 0;
}
function TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
label$1: {
if (!$1) {
break label$1;
}
label$2: {
if (!HaveRightHand_28SET_OF_HANDS_29($2)) {
break label$2;
}
$3 = $0 + 224 | 0;
if (OneHConcretePosture__totallyDefined_28_29_20const($3)) {
break label$2;
}
fputs(21046, $1);
OneHConcretePosture__printUndefined_28_IO_FILE__29_20const($3, $1);
fputc(10, $1);
}
if (!HaveLeftHand_28SET_OF_HANDS_29($2)) {
break label$1;
}
$2 = $0 + 336 | 0;
if (OneHConcretePosture__totallyDefined_28_29_20const($2)) {
break label$1;
}
fputs(21063, $1);
OneHConcretePosture__printUndefined_28_IO_FILE__29_20const($2, $1);
fputc(10, $1);
}
}
function SeqTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = Math_fround(0);
while (1) {
label$2: {
$4 = HEAP32[$0 + 24 >> 2];
label$3: {
if (HEAP32[$4 + 12 >> 2] <= ($5 | 0)) {
break label$3;
}
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($4, $5);
if (HEAPF32[$4 + 4 >> 2] >= $1) {
break label$3;
}
$6 = HEAPF32[$4 + 16 >> 2];
if (!($6 < Math_fround(0))) {
break label$2;
}
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1, $2, $3);
}
return;
}
if (!($1 >= $6)) {
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1, $2, $3);
}
$5 = $5 + 1 | 0;
continue;
}
}
function InvertibleDynamicStringArray___InvertibleDynamicStringArray_28_29($0) {
var $1 = 0;
label$1: {
label$2: {
if (!HEAPU8[$0 + 8 | 0]) {
break label$2;
}
$1 = HEAP32[$0 >> 2];
if (!$1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(42, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
}
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 >> 2];
if ($1) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($1));
HEAP32[$0 >> 2] = 0;
}
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function HashAny_char_20const__2c_20FingerBending___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2, $3) {
var $4 = 0;
label$1: {
label$2: {
$2 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
if (HEAP16[$2 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$2 = HEAP32[$2 >> 2];
if (!$2) {
break label$2;
}
$4 = $2 + 4 | 0;
if (KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($3, HEAP32[$2 >> 2])) {
break label$1;
}
$2 = $2 + 20 | 0;
continue;
}
}
$4 = $1 + 20 | 0;
}
$2 = $4;
$3 = HEAP32[$2 >> 2];
$1 = HEAP32[$2 + 4 >> 2];
$4 = $3;
$3 = $0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = $1;
$3 = HEAP32[$2 + 12 >> 2];
$1 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = $3;
}
function reportProcessingInstruction($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (!HEAP32[$0 + 64 >> 2]) {
$5 = 1;
if (!HEAP32[$0 + 80 >> 2]) {
break label$1;
}
reportDefault($0, $1, $2, $3);
return 1;
}
$2 = (HEAP32[$1 + 64 >> 2] << 1) + $2 | 0;
$6 = $2 + (FUNCTION_TABLE[HEAP32[$1 + 28 >> 2]]($1, $2) | 0) | 0;
$4 = $0 + 400 | 0;
$2 = poolStoreString($4, $1, $2, $6);
if (!$2) {
break label$1;
}
HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 412 >> 2];
$1 = poolStoreString($4, $1, FUNCTION_TABLE[HEAP32[$1 + 32 >> 2]]($1, $6) | 0, $3 - (HEAP32[$1 + 64 >> 2] << 1) | 0);
if (!$1) {
break label$1;
}
normalizeLines($1);
FUNCTION_TABLE[HEAP32[$0 + 64 >> 2]](HEAP32[$0 + 4 >> 2], $2, $1);
poolClear($4);
$5 = 1;
}
return $5;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
}
return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, $0);
HEAP32[19359] = 0;
$3 = invoke_ii(33, $2 + 8 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($0 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
$1 = invoke_iii(34, $3 | 0, $1 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) == 1) {
break label$1;
}
std____2__locale___locale_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
return $1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std____2__locale___locale_28_29($2 + 8 | 0);
__resumeException($0 | 0);
abort();
}
function TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = HEAP32[$1 + 24 >> 2];
$3 = HEAP32[$1 + 20 >> 2];
HEAP32[$0 + 40 >> 2] = $3;
HEAP32[$0 + 44 >> 2] = $2;
$3 = HEAP32[$1 + 32 >> 2];
$2 = HEAP32[$1 + 28 >> 2];
HEAP32[$0 + 48 >> 2] = $2;
HEAP32[$0 + 52 >> 2] = $3;
$2 = HEAP32[$1 + 76 >> 2];
$3 = HEAP32[$1 + 72 >> 2];
HEAP32[$0 + 160 >> 2] = $3;
HEAP32[$0 + 164 >> 2] = $2;
$3 = $1 - -64 | 0;
$2 = HEAP32[$3 >> 2];
$3 = HEAP32[$3 + 4 >> 2];
HEAP32[$0 + 152 >> 2] = $2;
HEAP32[$0 + 156 >> 2] = $3;
$2 = HEAP32[$1 + 36 >> 2];
if ($2) {
$4 = HEAP32[$2 + 236 >> 2];
}
HEAP32[$0 + 56 >> 2] = $4;
$1 = HEAP32[$1 + 80 >> 2];
if ($1) {
$5 = HEAP32[$1 + 236 >> 2];
}
HEAP32[$0 + 168 >> 2] = $5;
}
function HashChain_char_20const__2c_20Gesture____insert_28HashChainItem_char_20const__2c_20Gesture___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20Gesture____HashChain_28HashChainItem_char_20const__2c_20Gesture___2c_20HashChain_char_20const__2c_20Gesture____29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________destruct_at_end_28SSPRSet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
var $2 = 0, $3 = 0;
label$1: {
while (1) {
if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
break label$1;
}
$3 = std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________alloc_28_29($0);
$2 = HEAP32[$0 + 8 >> 2] - 4 | 0;
HEAP32[$0 + 8 >> 2] = $2;
$2 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($2);
HEAP32[19359] = 0;
invoke_vii(12, $3 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________destruct_at_end_28SSMorph___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
var $2 = 0, $3 = 0;
label$1: {
while (1) {
if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
break label$1;
}
$3 = std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________alloc_28_29($0);
$2 = HEAP32[$0 + 8 >> 2] - 4 | 0;
HEAP32[$0 + 8 >> 2] = $2;
$2 = SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($2);
HEAP32[19359] = 0;
invoke_vii(14, $3 | 0, $2 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
}
function MakeTrailingMorph_28AtomicTimedMorph_20const__29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!(!HEAPU8[$0 + 49 | 0] | (!$0 | !HEAPU8[$0 + 48 | 0]))) {
$2 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
$1 = invoke_ii(437, $2 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
AtomicTimedMorph__operator__28AtomicTimedMorph_20const__29($1, $0);
HEAP16[$1 + 48 >> 1] = 1;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAPF32[$1 + 16 >> 2] = HEAPF32[$0 + 16 >> 2] - HEAPF32[$0 + 12 >> 2];
}
return $1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function operator___28SiteIDPair_2c_20SiteIDPair_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
$3 = HEAP32[$0 >> 2];
HEAP32[$2 + 40 >> 2] = $3;
$4 = HEAP32[$1 >> 2];
HEAP32[$2 + 32 >> 2] = $4;
HEAP32[$2 + 12 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = $4;
$3 = 0;
label$1: {
if (!operator___28SiteID_2c_20SiteID_29_1($2 + 12 | 0, $2 + 8 | 0)) {
break label$1;
}
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[$2 + 24 >> 2] = $4;
$5 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 16 >> 2] = $5;
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 >> 2] = $5;
if (!operator___28SiteID_2c_20SiteID_29_1($2 + 4 | 0, $2)) {
break label$1;
}
$3 = HEAPF32[$0 + 8 >> 2] == HEAPF32[$1 + 8 >> 2];
}
__stack_pointer = $2 + 48 | 0;
return $3;
}
function doctype1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 3;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 25) {
break label$2;
}
HEAP32[$0 >> 2] = 783;
return 7;
case 2:
HEAP32[$0 >> 2] = 784;
return 8;
case 0:
break label$1;
case 1:
break label$2;
case 3:
break label$3;
}
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49814) | 0) {
HEAP32[$0 >> 2] = 785;
return 3;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49821) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 786;
return 3;
}
common($0);
$5 = -1;
}
return $5 | 0;
}
function PostureChangeFlags__setHandFlags_28OneHAbstractPosture_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = Direction3__defined_28_29_20const($1 + 20 | 0);
$2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 65519 | ($2 ? 16 : 0);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
$2 = Direction2__defined_28_29_20const($1 + 32 | 0);
$2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & -33 | ($2 ? 32 : 0);
HEAP8[$0 | 0] = $2;
HEAP8[$0 + 1 | 0] = $2 >>> 8;
label$1: {
if (!HEAPU8[$1 + 52 | 0]) {
break label$1;
}
$1 = HEAP32[$1 + 56 >> 2];
if (!$1) {
break label$1;
}
$3 = Handshape__defined_28_29_20const($1) ? 64 : 0;
$2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
}
$1 = $2 & 65087 | $3;
HEAP8[$0 | 0] = $1;
HEAP8[$0 + 1 | 0] = $1 >>> 8;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $0;
}
function HashChain_char_20const__2c_20SiteID___insert_28HashChainItem_char_20const__2c_20SiteID__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20SiteID___HashChain_28HashChainItem_char_20const__2c_20SiteID__2c_20HashChain_char_20const__2c_20SiteID___29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function HashChain_SiteID_20const_2c_20Site____insert_28HashChainItem_SiteID_20const_2c_20Site___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_SiteID_20const_2c_20Site____HashChain_28HashChainItem_SiteID_20const_2c_20Site___2c_20HashChain_SiteID_20const_2c_20Site____29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function remfloat_28float_2c_20float_29($0, $1) {
var $2 = 0, $3 = Math_fround(0);
if ($1 != Math_fround(0)) {
$2 = $1 < Math_fround(0);
$0 = $2 ? Math_fround(-$0) : $0;
$1 = $2 ? Math_fround(-$1) : $1;
$3 = Math_fround($0 / $1);
if ($0 < Math_fround(0)) {
$0 = Math_fround($1 + $0);
$3 = Math_fround(-$3);
label$3: {
if (Math_fround(Math_abs($3)) < Math_fround(2147483648)) {
$2 = ~~$3;
break label$3;
}
$2 = -2147483648;
}
$0 = Math_fround(Math_fround(Math_fround($2 | 0) * $1) + $0);
return $0 == $1 ? Math_fround(0) : $0;
}
if (Math_fround(Math_abs($3)) < Math_fround(2147483648)) {
$2 = ~~$3;
} else {
$2 = -2147483648;
}
$0 = Math_fround($0 - Math_fround(Math_fround($2 | 0) * $1));
}
return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 4 >> 2] = $1;
HEAP8[$0 | 0] = 0;
if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0)) {
if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0)) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] - 12 >> 2] + $1 | 0));
}
HEAP8[$0 | 0] = 1;
}
return $0 | 0;
}
function TwoHConcretePosture__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
if ($1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(21004, $1);
$2 = HEAPU16[33801] + 1 | 0;
HEAP16[33801] = $2;
printIndent_28_IO_FILE__2c_20int_29($1, $2 << 16 >> 16);
fputs(22050, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22183, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHConcretePosture__print_28_IO_FILE__29_20const($0 + 112 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
}
}
function SeqTimedMorph__newCopy_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$3 = invoke_ii(436, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
while (1) {
$1 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
return $3 | 0;
} else {
$1 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($1, $2);
SeqTimedMorph__appendElement_28AbstractTimedMorph__29($3, FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0);
$2 = $2 + 1 | 0;
continue;
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($2 | 0);
abort();
}
function ParTimedMorph__newCopy_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$3 = invoke_ii(381, $1 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
while (1) {
$1 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
return $3 | 0;
} else {
$1 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($1, $2);
ParTimedMorph__appendElement_28AbstractTimedMorph__29($3, FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0);
$2 = $2 + 1 | 0;
continue;
}
}
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($2 | 0);
abort();
}
function OneHConcretePosture__printUndefined_28_IO_FILE__29_20const($0, $1) {
var $2 = 0;
label$1: {
if (!$1) {
break label$1;
}
$2 = Vector__isZero_28_29_20const($0 + 4 | 0);
if ($2) {
fputs(6287, $1);
}
if (Vector__isZero_28_29_20const($0 + 16 | 0)) {
if ($2) {
fputs(21354, $1);
}
fputs(6306, $1);
$2 = 0;
} else {
$2 = $2 ^ 1;
}
label$6: {
label$7: {
if (Quaternion__isZero_28_29_20const($0 + 40 | 0)) {
if (!$2) {
fputs(21354, $1);
}
fputs(6117, $1);
if (!HEAP32[$0 + 56 >> 2]) {
break label$7;
}
break label$1;
}
if (HEAP32[$0 + 56 >> 2]) {
break label$1;
}
if ($2) {
break label$6;
}
}
fputs(21354, $1);
}
fputs(9095, $1);
}
}
function asinf($0) {
var $1 = 0, $2 = 0, $3 = 0;
$3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
$2 = $3 & 2147483647;
if ($2 >>> 0 >= 1065353216) {
if (($2 | 0) == 1065353216) {
return Math_fround(+$0 * 1.5707963267948966 + 7.52316384526264e-37);
}
return Math_fround(Math_fround(0) / Math_fround($0 - $0));
}
label$3: {
if ($2 >>> 0 <= 1056964607) {
if ($2 - 8388608 >>> 0 < 956301312) {
break label$3;
}
return Math_fround(Math_fround($0 * R_1(Math_fround($0 * $0))) + $0);
}
$0 = Math_fround(Math_fround(Math_fround(1) - fabsf($0)) * Math_fround(.5));
$1 = sqrt(+$0);
$1 = $1 + $1 * +R_1($0);
$0 = Math_fround(1.5707963267948966 - ($1 + $1));
$0 = ($3 | 0) < 0 ? Math_fround(-$0) : $0;
}
return $0;
}
function Quaternion__toVRML_28VRMLRotation__29_20const($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0);
$2 = Vector__alength_28float_2c_20float_2c_20float_29(Quaternion__x_28_29_20const($0), Quaternion__y_28_29_20const($0), Quaternion__z_28_29_20const($0));
if ($2 <= Math_fround(0)) {
VRMLRotation__setFrom_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(0), Math_fround(0), Math_fround(1), Math_fround(0));
return;
}
$3 = atan2_28float_2c_20float_29($2, Quaternion__w_28_29_20const($0));
VRMLRotation__setFrom_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(Quaternion__x_28_29_20const($0) / $2), Math_fround(Quaternion__y_28_29_20const($0) / $2), Math_fround(Quaternion__z_28_29_20const($0) / $2), Math_fround($3 + $3));
}
function HingeJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$4 = $0 + 8 | 0;
$5 = Vector__x_28_29_20const($4);
$6 = Vector__y_28_29_20const($4);
$7 = Vector__z_28_29_20const($4);
$8 = HEAPF32[$0 + 20 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $7;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $6;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $8;
HEAPF64[$3 + 8 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 8004, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function dtdDestroy($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$5 = $0 + 20 | 0;
hashTableIterInit($3 + 8 | 0, $5);
while (1) {
$4 = hashTableIterNext($3 + 8 | 0);
if ($4) {
if (!HEAP32[$4 + 16 >> 2]) {
continue;
}
FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](HEAP32[$4 + 20 >> 2]);
continue;
}
break;
}
hashTableDestroy($0);
hashTableDestroy($5);
hashTableDestroy($0 + 40 | 0);
hashTableDestroy($0 + 60 | 0);
poolDestroy($0 + 80 | 0);
poolDestroy($0 + 104 | 0);
if ($1) {
FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](HEAP32[$0 + 164 >> 2]);
FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](HEAP32[$0 + 144 >> 2]);
}
FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0);
__stack_pointer = $3 + 16 | 0;
}
function HashChain_char_20const__2c_20int___insert_28HashChainItem_char_20const__2c_20int__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_char_20const__2c_20int___HashChain_28HashChainItem_char_20const__2c_20int__2c_20HashChain_char_20const__2c_20int___29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_char_20const__2c_20int____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
return std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29(std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0)) | 0;
}
function sn_write($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = HEAP32[$0 + 84 >> 2];
$5 = HEAP32[$3 + 4 >> 2];
$6 = HEAP32[$0 + 28 >> 2];
$4 = HEAP32[$0 + 20 >> 2] - $6 | 0;
$4 = $4 >>> 0 > $5 >>> 0 ? $5 : $4;
if ($4) {
__memcpy(HEAP32[$3 >> 2], $6, $4);
HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + $4;
$5 = HEAP32[$3 + 4 >> 2] - $4 | 0;
HEAP32[$3 + 4 >> 2] = $5;
}
$4 = HEAP32[$3 >> 2];
$5 = $2 >>> 0 > $5 >>> 0 ? $5 : $2;
if ($5) {
__memcpy($4, $1, $5);
$4 = HEAP32[$3 >> 2] + $5 | 0;
HEAP32[$3 >> 2] = $4;
HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - $5;
}
HEAP8[$4 | 0] = 0;
$3 = HEAP32[$0 + 44 >> 2];
HEAP32[$0 + 28 >> 2] = $3;
HEAP32[$0 + 20 >> 2] = $3;
return $2 | 0;
}
function FaceAnimator__FaceAnimator_28HanimAvatar_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
HEAP32[$0 + 44 >> 2] = $1;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
$1 = 0;
label$1: {
while (1) {
if (($1 | 0) == 8) {
break label$1;
}
$2 = operator_20new_28unsigned_20long_29(108);
HEAP32[19359] = 0;
$3 = invoke_ii(63, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[(($1 << 2) + $0 | 0) + 12 >> 2] = $3;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($1 | 0);
abort();
}
return $0 | 0;
}
function __cxx_global_var_init_3_6() {
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70080, 1, 0, 0, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70104, 2, 0, 1, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70128, 3, 0, 1, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70152, 2, 0, 0, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70176, 1, 1, 0, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70200, 2, 0, 1, 1);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70224, 3, 0, 1, 1);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70248, 3, 0, 1, 0);
RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29(70272, 1, 0, 0, 0);
}
function Joint__getGlobalBoneTranslation_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
$1 = HEAP32[$0 + 100 >> 2];
label$2: {
if ($1) {
break label$2;
}
$2 = operator_20new_28unsigned_20long_29(12);
HEAP32[19359] = 0;
$1 = invoke_iii(74, $2 | 0, $0 + 68 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 100 >> 2] = $1;
$2 = HEAP32[$0 + 8 >> 2];
if (!$2) {
break label$2;
}
Vector__setSubtract_28Vector_20const__29($1, $2 + 68 | 0);
$1 = HEAP32[$0 + 100 >> 2];
}
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function XMLCell__XMLCell_28char__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = invoke_iiii(280, $1 | 0, 0, 19) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
label$2: {
HEAP32[$0 + 4 >> 2] = $2;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_ii(717, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$2;
}
HEAP32[$0 + 8 >> 2] = $2;
return $0 | 0;
}
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function Joint___Joint_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
$1 = HEAP32[$0 + 12 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_Joint____DynamicArrayP_28_29($1));
HEAP32[$0 + 12 >> 2] = 0;
}
$1 = HEAP32[$0 + 16 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_Site____DynamicArrayP_28_29($1));
HEAP32[$0 + 16 >> 2] = 0;
}
$1 = HEAP32[$0 + 100 >> 2];
if ($1) {
operator_20delete_28void__29($1);
HEAP32[$0 + 100 >> 2] = 0;
}
$1 = HEAP32[$0 + 36 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 36 >> 2] = 0;
}
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return $0;
}
function TwoHAbstractPosture__isTotallyDefined_28SET_OF_HANDS_29_20const($0, $1) {
var $2 = 0;
label$1: {
label$2: {
if (HaveDomHand_28SET_OF_HANDS_29($1)) {
if (!OneHAbstractPosture__isTotallyDefined_28_29_20const($0)) {
break label$2;
}
}
$2 = 1;
if (!HaveNondomHand_28SET_OF_HANDS_29($1)) {
break label$1;
}
if (OneHAbstractPosture__isTotallyDefined_28_29_20const($0 + 72 | 0)) {
break label$1;
}
}
$2 = 0;
if (!ConstellationInfo__isTotallyDefined_28_29_20const($0 + 144 | 0)) {
break label$1;
}
if (!OneHAbstractPosture__isAlmostTotallyDefined_28_29_20const($0)) {
break label$1;
}
$2 = OneHAbstractPosture__isAlmostTotallyDefined_28_29_20const($0 + 72 | 0);
}
return $2;
}
function Getopts__printValue_28_IO_FILE__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = HEAP32[$0 + 4 >> 2];
if (!$2) {
break label$1;
}
while (1) {
if (HEAP32[$2 + 12 >> 2] <= ($4 | 0)) {
break label$1;
}
$5 = DynamicArrayP_char___getElement_28int_29_20const($2, $4);
$2 = Getopts__OptionInfo_28char_20const__29($0, $5);
if (!(!$2 | HEAP32[$2 + 16 >> 2] <= 0)) {
HEAP32[$3 >> 2] = $5;
fiprintf($1, 20752, $3);
OptionSpec__printValue_28_IO_FILE__29($2, $1);
}
$4 = $4 + 1 | 0;
$2 = HEAP32[$0 + 4 >> 2];
continue;
}
}
__stack_pointer = $3 + 16 | 0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $1, $2) {
return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29(std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0), $2);
}
function WristMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 5896, HEAP32[$0 + 528 >> 2], HEAP32[18789]);
printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($1, $2, 8422, HEAP32[$0 + 532 >> 2], HEAP32[18787]);
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____destruct_at_end_28SSPRSet___29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = HEAP32[$0 + 4 >> 2];
label$1: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$3 = std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0);
$2 = $2 - 4 | 0;
$4 = SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($2);
HEAP32[19359] = 0;
invoke_vii(12, $3 | 0, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
HEAP32[$0 + 4 >> 2] = $1;
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = HEAP32[$0 + 4 >> 2];
label$1: {
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$3 = std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0);
$2 = $2 - 4 | 0;
$4 = SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($2);
HEAP32[19359] = 0;
invoke_vii(14, $3 | 0, $4 | 0);
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
continue;
}
break;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
HEAP32[$0 + 4 >> 2] = $1;
}
function prolog1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 11 | 0) {
case 0:
return 55;
case 2:
return 56;
case 5:
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, (HEAP32[$4 + 64 >> 2] << 1) + $2 | 0, $3, 49806) | 0)) {
break label$3;
}
HEAP32[$0 >> 2] = 780;
return 3;
case 3:
case 4:
break label$2;
case 1:
break label$3;
default:
break label$4;
}
}
if (($1 | 0) == 29) {
break label$1;
}
}
common($0);
$5 = -1;
}
return $5 | 0;
}
HEAP32[$0 >> 2] = 781;
return 2;
}
function little2_checkPiTarget($0, $1, $2) {
var $3 = 0, $4 = 0;
HEAP32[$2 >> 2] = 11;
$3 = 1;
label$1: {
if (HEAPU8[$0 + 1 | 0] | ($1 - $0 | 0) != 6) {
break label$1;
}
$1 = HEAP8[$0 | 0];
if (($1 | 0) == 120) {
$1 = 0;
} else {
if (($1 | 0) != 88) {
break label$1;
}
$1 = 1;
}
if (HEAPU8[$0 + 3 | 0]) {
break label$1;
}
$4 = HEAP8[$0 + 2 | 0];
if (($4 | 0) != 109) {
if (($4 | 0) != 77) {
break label$1;
}
$1 = 1;
}
if (HEAPU8[$0 + 5 | 0]) {
break label$1;
}
$0 = HEAP8[$0 + 4 | 0];
if (($0 | 0) != 108) {
if (($0 | 0) != 76) {
break label$1;
}
return 0;
}
$3 = 0;
if ($1) {
break label$1;
}
HEAP32[$2 >> 2] = 12;
$3 = 1;
}
return $3;
}
function TorsoDecollider__TorsoDecollider_28short_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$0 = Decollider__Decollider_28_29($0);
HEAP16[$0 + 4 >> 1] = $1;
HEAP32[$0 >> 2] = 59200;
HEAP32[19359] = 0;
$2 = invoke_ii(1, (($1 & 1073741823) != ($1 | 0) ? -1 : $1 << 2) | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 8 >> 2] = $2;
$2 = (($1 | 0) > 0 ? $1 : 0) & 65535;
$1 = 0;
while (1) if (($1 | 0) == ($2 | 0)) {
return $0 | 0;
} else {
HEAP32[HEAP32[$0 + 8 >> 2] + ($1 << 2) >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
Decollider___Decollider_28_29($0);
__resumeException($1 | 0);
abort();
}
function ReadXMLStrings_28DynamicArrayP_char_20const__20const__29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
if (!$0) {
break label$1;
}
$1 = HEAP32[$0 + 12 >> 2];
if (!$1) {
break label$1;
}
while (1) {
$4 = $3 << 16 >> 16;
if (($4 | 0) >= ($1 | 0)) {
break label$1;
}
$1 = ReadXMLString_28char__29(DynamicArrayP_char_20const___getElement_28int_29_20const($0, $4));
label$4: {
if (!$1) {
break label$4;
}
if (!$2) {
$2 = $1;
break label$4;
}
XMLCell__mergeXMLCell_28XMLCell_20const__29($2, $1);
XMLCell___XMLCell_28_29($1);
operator_20delete_28void__29($1);
}
$3 = $3 + 1 | 0;
$1 = HEAP32[$0 + 12 >> 2];
continue;
}
}
return $2;
}
function HanimAvatar__SetFacePointPair_28short_2c_20short_2c_20Vector_20const__2c_20float_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$6 = Vector__Vector_28Vector_20const__29($5, $3);
$7 = $6 + (HEAP16[24298] << 2) | 0;
HEAPF32[$7 >> 2] = HEAPF32[$7 >> 2] + $4;
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 488 >> 2], $1, $6);
wasm2js_i32$0 = $7, wasm2js_f32$0 = Math_fround(Vector__x_28_29_20const($3) - $4), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 488 >> 2], $2, $6);
__stack_pointer = $5 + 16 | 0;
}
function DynamicArray1_AtomicNonmanual___setElement_28int_2c_20AtomicNonmanual_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
if (($1 | 0) >= 0) {
DynamicArray1_AtomicNonmanual___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
$3 = $2;
$2 = HEAP32[$3 >> 2];
$4 = HEAP32[$3 + 4 >> 2];
$1 = HEAP32[$0 >> 2] + Math_imul($1, 28) | 0;
HEAP32[$1 >> 2] = $2;
HEAP32[$1 + 4 >> 2] = $4;
HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
$2 = HEAP32[$3 + 20 >> 2];
$4 = HEAP32[$3 + 16 >> 2];
HEAP32[$1 + 16 >> 2] = $4;
HEAP32[$1 + 20 >> 2] = $2;
$4 = HEAP32[$3 + 12 >> 2];
$2 = HEAP32[$3 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $4;
}
}
function HandJointRotations__HandJointRotations_28HandJointRotations_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
HEAP8[$0 + 60 | 0] = 0;
label$1: while (1) {
label$2: {
$2 = 0;
if (($3 | 0) == 5) {
break label$2;
}
while (1) if (($2 | 0) == 3) {
$3 = $3 + 1 | 0;
continue label$1;
} else {
$4 = $2 << 2;
$5 = Math_imul($3, 12);
wasm2js_i32$0 = $4 + ($5 + $0 | 0) | 0, wasm2js_i32$1 = NewCopyJointRotation_28JointRotation_20const__29(HEAP32[($1 + $5 | 0) + $4 >> 2]), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
HEAP8[$0 + 60 | 0] = 1;
return $0 | 0;
}
function big2_checkPiTarget($0, $1, $2) {
var $3 = 0, $4 = 0;
HEAP32[$2 >> 2] = 11;
$3 = 1;
label$1: {
if (HEAPU8[$0 | 0] | ($1 - $0 | 0) != 6) {
break label$1;
}
$1 = HEAP8[$0 + 1 | 0];
if (($1 | 0) == 120) {
$1 = 0;
} else {
if (($1 | 0) != 88) {
break label$1;
}
$1 = 1;
}
if (HEAPU8[$0 + 2 | 0]) {
break label$1;
}
$4 = HEAP8[$0 + 3 | 0];
if (($4 | 0) != 109) {
if (($4 | 0) != 77) {
break label$1;
}
$1 = 1;
}
if (HEAPU8[$0 + 4 | 0]) {
break label$1;
}
$0 = HEAP8[$0 + 5 | 0];
if (($0 | 0) != 108) {
if (($0 | 0) != 76) {
break label$1;
}
return 0;
}
$3 = 0;
if ($1) {
break label$1;
}
HEAP32[$2 >> 2] = 12;
$3 = 1;
}
return $3;
}
function checkPosNum_28char_20const__2c_20char__2c_20float__29($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = 0;
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
label$1: {
label$2: {
if (!$1) {
HEAP32[$3 >> 2] = $0;
eprintf_28char_20const__2c_20____29(41200, $3);
break label$2;
}
HEAP32[$3 + 32 >> 2] = $3 + 44;
$5 = 1;
if ((sscanf($1, 8149, $3 + 32 | 0) | 0) == 1) {
$4 = HEAPF32[$3 + 44 >> 2];
if ($4 >= Math_fround(0)) {
break label$1;
}
}
HEAP32[$3 + 20 >> 2] = $1;
HEAP32[$3 + 16 >> 2] = $0;
eprintf_28char_20const__2c_20____29(46152, $3 + 16 | 0);
}
$5 = 0;
$4 = Math_fround(0);
}
HEAPF32[$2 >> 2] = $4;
__stack_pointer = $3 + 48 | 0;
return $5;
}
function __overflow($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP8[$3 + 15 | 0] = $1;
$2 = HEAP32[$0 + 16 >> 2];
label$1: {
if (!$2) {
$2 = -1;
if (__towrite($0)) {
break label$1;
}
$2 = HEAP32[$0 + 16 >> 2];
}
label$3: {
$4 = HEAP32[$0 + 20 >> 2];
if (($4 | 0) == ($2 | 0)) {
break label$3;
}
$2 = $1 & 255;
if (($2 | 0) == HEAP32[$0 + 80 >> 2]) {
break label$3;
}
HEAP32[$0 + 20 >> 2] = $4 + 1;
HEAP8[$4 | 0] = $1;
break label$1;
}
$2 = -1;
if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $3 + 15 | 0, 1) | 0) != 1) {
break label$1;
}
$2 = HEAPU8[$3 + 15 | 0];
}
__stack_pointer = $3 + 16 | 0;
return $2;
}
function HanimAvatar__setSiteNormal_28Site__2c_20Vector_20const__2c_20float_29($0, $1, $2, $3) {
var $4 = 0;
if (!(!$1 | !($3 > Math_fround(0)))) {
$0 = HEAP32[$1 + 24 >> 2];
label$2: {
if (!$0) {
$0 = operator_20new_28unsigned_20long_29(12);
HEAP32[19359] = 0;
$2 = invoke_iii(74, $0 | 0, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[$1 + 24 >> 2] = $2;
break label$2;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
__resumeException($1 | 0);
abort();
}
Vector__setFrom_28Vector_20const__29($0, $2);
$2 = HEAP32[$1 + 24 >> 2];
}
Vector__setLength_28float_29($2, $3);
}
}
function TurretJointRotation__TurretJointRotation_28TurretJointRotation__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28_29($0);
HEAP32[$0 >> 2] = 59840;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($2 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_ii(69, $0 + 20 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) == 1) {
break label$1;
}
TurretJointRotation__operator__28TurretJointRotation_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___addManyToHashX_28SiGML_Element_2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
while (1) {
label$2: {
if (!$1) {
break label$2;
}
$2 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $2 + 4;
$2 = HEAP32[$2 >> 2];
if (!$2) {
break label$2;
}
HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___addItem_28SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($0, $1, $2);
$1 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $1 + 4;
$1 = HEAP32[$1 >> 2];
continue;
}
break;
}
__stack_pointer = $3 + 16 | 0;
}
function SHMScalarController__SHMScalarController_28_29($0) {
$0 = $0 | 0;
$0 = GeneralController_float_2c_20float___GeneralController_28_29($0);
HEAP32[$0 >> 2] = 59256;
ControllerParams__ControllerParams_28float_2c_20float_2c_20float_2c_20float_29($0 + 16 | 0, Math_fround(10), Math_fround(.05000000074505806), Math_fround(7), Math_fround(0));
HEAP32[$0 + 64 >> 2] = 0;
HEAP32[$0 + 68 >> 2] = -1082130432;
HEAP32[$0 + 60 >> 2] = 3;
HEAP32[$0 + 52 >> 2] = 1065353216;
HEAP32[$0 + 56 >> 2] = 1017370378;
HEAP32[$0 + 44 >> 2] = 1097859072;
HEAP32[$0 + 48 >> 2] = 1184645120;
HEAP32[$0 + 36 >> 2] = 1082130432;
HEAP32[$0 + 40 >> 2] = 1181376512;
HEAP8[$0 + 32 | 0] = 0;
memset($0 + 72 | 0, 0, 36);
return $0 | 0;
}
function DynamicArray_short_2c_20_28short_29_1___appendElementsX_28int_2c_20____29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$4 = HEAP32[$0 + 12 >> 2] + $1 | 0;
DynamicArray_short_2c_20_28short_29_1___ensureSize_28int_29($0, $4);
if (HEAP32[$0 + 8 >> 2] >= ($4 | 0)) {
$2 = 0;
$5 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($2 | 0) == ($5 | 0)) {
HEAP32[$0 + 12 >> 2] = $4;
} else {
$1 = HEAP32[$3 + 12 >> 2];
HEAP32[$3 + 12 >> 2] = $1 + 4;
HEAP16[HEAP32[$0 >> 2] + (HEAP32[$0 + 12 >> 2] + $2 << 1) >> 1] = HEAP32[$1 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
__stack_pointer = $3 + 16 | 0;
}
function MannerFlags__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
var $3 = 0;
UNIMPLEMENTED_28char_20const__29(3356);
label$1: {
if (HEAPU8[$0 + 8 | 0]) {
$3 = 2006;
break label$1;
}
$3 = 2031;
label$3: {
switch (HEAP32[$0 + 4 >> 2] - 1 | 0) {
case 2:
$3 = 1734;
break label$1;
case 0:
break label$1;
default:
break label$3;
}
}
$0 = HEAP32[$0 >> 2];
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18786], $0);
}
printAttribValue_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20char_20const__29($1, $2, 4623, $3);
}
function MakeEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5) {
var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
$8 = Math_fround($1 * $3);
$6 = Math_fround($0 - $2);
$7 = Math_fround(Math_fround($8 - $6) - $6);
label$1: {
if ($7 <= Math_fround(0)) {
HEAPF32[$4 >> 2] = $0;
$0 = Math_fround($6 / sqr_28float_29($1));
break label$1;
}
$6 = Math_fround(Math_fround(Math_fround($8 * $2) - Math_fround(Math_fround($0 + $2) * $6)) / $7);
HEAPF32[$4 >> 2] = $6;
$0 = Math_fround(Math_fround($0 - $6) * sqrt_28float_29(Math_fround($1 / Math_fround(Math_fround($2 - $6) * $3))));
}
HEAPF32[$5 >> 2] = $0;
return !($7 <= Math_fround(0));
}
function AbstractTimedMorph__rescale_28XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_f32$2 = Math_fround(0);
wasm2js_i32$1 = $0, wasm2js_f32$0 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 6151, Math_fround(-1)), 
wasm2js_f32$1 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 10481, Math_fround(1)), 
wasm2js_f32$2 = XMLCell__attrib_REAL_28char_20const__2c_20float_29($1, 9533, Math_fround(1)), 
wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 48 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, Math_fround(wasm2js_f32$0), Math_fround(wasm2js_f32$1), Math_fround(wasm2js_f32$2));
}
function SeqTimedMorph__scaleDuration_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
$4 = Math_fround($1 + Math_fround(-1));
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] <= ($3 | 0)) {
AbstractTimedMorph__scaleDuration_28float_29($0, $1);
} else {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
$5 = HEAPF32[$2 + 4 >> 2];
$6 = HEAPF32[$0 + 4 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $1);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2, Math_fround($4 * Math_fround($5 - $6)));
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function HanimAvatar__SetFaceSitePair_28SiteID_2c_20short_2c_20short_2c_20Vector_20const__29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 48 | 0;
__stack_pointer = $5;
SiteID__makeSide_28AbsoluteBodySide_29_20const($5 + 40 | 0, $1, 2);
HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 40 >> 2];
HanimAvatar__SetFaceSite_28SiteID_2c_20short_2c_20Vector_20const__29($0, $5 + 12 | 0, $2, $4);
$4 = Vector__Vector_28Vector_20const__29($5 + 24 | 0, $4);
Vector__flip_x_28_29($4);
SiteID__makeSide_28AbsoluteBodySide_29_20const($5 + 16 | 0, $1, 1);
HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 16 >> 2];
HanimAvatar__SetFaceSite_28SiteID_2c_20short_2c_20Vector_20const__29($0, $5 + 8 | 0, $3, $4);
__stack_pointer = $5 + 48 | 0;
}
function DynamicArray1_Quaternion___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
$8 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($6 | 0) == ($8 | 0)) {
__stack_pointer = $5 + 16 | 0;
} else {
$2 = Quaternion__Quaternion_28_29($5);
$3 = HEAP32[$2 + 4 >> 2];
$4 = HEAP32[$2 >> 2];
$9 = $4;
$7 = HEAP32[$0 >> 2] + ($1 + $6 << 4) | 0;
$4 = $7;
HEAP32[$4 >> 2] = $9;
HEAP32[$4 + 4 >> 2] = $3;
$4 = HEAP32[$2 + 12 >> 2];
$3 = HEAP32[$2 + 8 >> 2];
$2 = $3;
$3 = $7;
HEAP32[$3 + 8 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $4;
$6 = $6 + 1 | 0;
continue;
}
break;
}
}
function ThumbBending__print_28_IO_FILE__29_20const($0, $1) {
if ($1) {
if (!ThumbBending__defined_28_29_20const($0)) {
fputs(14697, $1);
return;
}
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 11020, HEAPF32[$0 >> 2]);
fputc(44, $1);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 4258, HEAPF32[$0 + 4 >> 2]);
fputc(44, $1);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 6844, HEAPF32[$0 + 8 >> 2]);
fputc(44, $1);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 12756, HEAPF32[$0 + 12 >> 2]);
fputc(44, $1);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 12711, HEAPF32[$0 + 16 >> 2]);
}
}
function DirectedMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0 + 508 | 0, wasm2js_i32$1 = HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 508 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
wasm2js_i32$0 = $0 + 510 | 0, wasm2js_i32$1 = HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 510 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 60 | 0, $1);
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function ThumbBaseJointRotation__toQuaternion_28Quaternion__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
Quaternion__setFrom_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 32 | 0, $0 + 32 | 0, HEAPF32[$0 + 52 >> 2], 1));
Quaternion__setPreCompose_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2 + 16 | 0, $0 + 20 | 0, HEAPF32[$0 + 48 >> 2], 1));
Quaternion__setPreCompose_28Quaternion_20const__29($1, Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($2, $0 + 8 | 0, HEAPF32[$0 + 44 >> 2], 1));
__stack_pointer = $2 + 48 | 0;
}
function std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_200__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
return std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
}
function BasicMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0 + 508 | 0, wasm2js_i32$1 = HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 508 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
wasm2js_i32$0 = $0 + 510 | 0, wasm2js_i32$1 = HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2]) | HEAPU16[$0 + 510 >> 1] & 65534, 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 60 | 0, $1);
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function __floatsitf($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!$1) {
break label$1;
}
$2 = $1 >> 31;
$2 = ($2 ^ $1) - $2 | 0;
$4 = $2;
$2 = Math_clz32($2);
__ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
$2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
$4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
$2 = $5 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
$5 = $2;
$2 = $4;
$6 = 0 | $2;
$4 = $1 & -2147483648 | $5;
$5 = HEAP32[$3 >> 2];
$2 = HEAP32[$3 + 4 >> 2];
}
HEAP32[$0 >> 2] = $5;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = $6;
$2 = $4;
HEAP32[$0 + 12 >> 2] = $2;
__stack_pointer = $3 + 16 | 0;
}
function Handshape__CalcJointBendCodes_28_29($0) {
var $1 = 0, $2 = 0;
if (!HEAPU8[$0 + 233 | 0]) {
SiGMLHandshape__CalcJointBendCodes_28_29($0);
$1 = HEAP32[$0 + 220 >> 2];
if ($1) {
SiGMLHandshape__CalcJointBendCodes_28_29($1);
$1 = 1;
while (1) {
if (($1 | 0) == 5) {
ThumbBending__Between_28ThumbBending_20const__2c_20float_29($0 + 160 | 0, HEAP32[$0 + 220 >> 2] + 160 | 0, HEAPF32[$0 + 224 >> 2]);
} else {
$2 = $1 << 4;
FingerBending__Between_28FingerBending_20const__2c_20float_29(($2 + $0 | 0) + 80 | 0, (HEAP32[$0 + 220 >> 2] + $2 | 0) + 80 | 0, HEAPF32[$0 + 224 >> 2]);
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
HEAP8[$0 + 233 | 0] = 1;
}
}
function DynamicArray_char_2c_20_28char_290___useSubset_28int_2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
label$1: {
if (($2 | 0) <= 0) {
break label$1;
}
$3 = HEAP32[$0 + 12 >> 2];
if (($3 | 0) <= ($1 | 0)) {
break label$1;
}
$2 = $1 + $2 | 0;
if (($2 | 0) <= 0) {
break label$1;
}
$3 = ($2 | 0) < ($3 | 0) ? $2 : $3;
$4 = ($1 | 0) > 0 ? $1 : 0;
$5 = $3 - $4 | 0;
label$2: {
if (($1 | 0) <= 0) {
break label$2;
}
$1 = $4;
while (1) {
if (($1 | 0) >= ($3 | 0)) {
break label$2;
}
$2 = HEAP32[$0 >> 2];
HEAP8[$2 + ($1 - $4 | 0) | 0] = HEAPU8[$1 + $2 | 0];
$1 = $1 + 1 | 0;
continue;
}
}
HEAP32[$0 + 12 >> 2] = $5;
}
}
function CircularMovement__operator__28CircularMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
Direction3__operator__28Direction3_20const__29($0 + 528 | 0, $1 + 528 | 0);
Direction3__operator__28Direction3_20const__29($0 + 540 | 0, $1 + 540 | 0);
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 552 >> 2];
Direction2__operator__28Direction2_20const__29($0 + 556 | 0, $1 + 556 | 0);
HEAP16[$0 + 564 >> 1] = HEAPU16[$1 + 564 >> 1];
Direction2__operator__28Direction2_20const__29($0 + 568 | 0, $1 + 568 | 0);
Direction2__operator__28Direction2_20const__29($0 + 576 | 0, $1 + 576 | 0);
__memcpy($0 + 584 | 0, $1 + 584 | 0, 168);
return $0 | 0;
}
function normal_scanCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$5 = -1;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
$4 = HEAPU8[$1 | 0];
if (($4 | 0) == 120) {
return normal_scanHexCharRef($0, $1 + 1 | 0, $2, $3);
}
label$3: {
if (HEAPU8[($0 + $4 | 0) + 72 | 0] != 25) {
break label$3;
}
while (1) {
$4 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$6 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
if (($6 | 0) == 25) {
continue;
}
break;
}
if (($6 | 0) != 18) {
break label$3;
}
HEAP32[$3 >> 2] = $4 + 2;
return 10;
}
HEAP32[$3 >> 2] = $1;
$5 = 0;
}
return $5;
}
function IntersectLineEllipse_28float_2c_20float_2c_20float_2c_20float_2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5) {
var $6 = Math_fround(0);
$0 = sqr_28float_29(Math_fround($2 / $0));
$6 = sqr_28float_29($1);
$1 = Math_fround($0 * $3);
$6 = Math_fround($0 + Math_fround(Math_fround(1) / $6));
$0 = Math_fround(sqr_28float_29($1) - Math_fround($6 * Math_fround(Math_fround($1 * $3) + Math_fround(-1))));
label$1: {
if ($0 >= Math_fround(0)) {
$1 = Math_fround(Math_fround($1 + Math_fround(Math_sqrt($0))) / $6);
HEAPF32[$5 >> 2] = $1;
HEAPF32[$4 >> 2] = Math_fround($1 - $3) * $2;
break label$1;
}
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
}
return $0 >= Math_fround(0);
}
function realAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$0) {
break label$1;
}
$0 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, $1);
if (!$0) {
break label$1;
}
HEAP32[$3 + 16 >> 2] = $3 + 24;
$4 = sscanf($0, 7531, $3 + 16 | 0);
label$2: {
if (($4 | 0) == 1) {
HEAPF32[$2 >> 2] = HEAPF64[$3 + 24 >> 3];
break label$2;
}
HEAP32[$3 >> 2] = $0;
eprintf_28char_20const__2c_20____29(46203, $3);
}
$4 = ($4 | 0) == 1;
}
__stack_pointer = $3 + 32 | 0;
return $4;
}
function VRMLRotation__print_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$4 = VRMLRotation__x_28_29_20const($0);
$5 = VRMLRotation__y_28_29_20const($0);
$6 = VRMLRotation__z_28_29_20const($0);
$7 = VRMLRotation__a_28_29_20const($0);
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $6;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $7;
HEAPF64[$3 + 8 >> 3] = $4;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 8004, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function Vector__circumCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 48 | 0;
__stack_pointer = $4;
Vector__Vector_28Vector_20const__29($4 + 32 | 0, $1);
Vector__setMidPoint_28Vector_20const__29($4 + 32 | 0, $2);
Vector__Vector_28Vector_20const__29($4 + 16 | 0, $2);
Vector__setMidPoint_28Vector_20const__29($4 + 16 | 0, $3);
Vector__Vector_28Vector_20const__29($4, $3);
Vector__setMidPoint_28Vector_20const__29($4, $1);
Vector__altitudeCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $4 + 16 | 0, $4, $4 + 32 | 0);
Vector__checkValidVector_28_29_20const($0);
__stack_pointer = $4 + 48 | 0;
}
function TokenStream__initialise_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP8[$0 + 8 | 0] = 0;
HEAP8[$0 + 37 | 0] = 1;
HEAP8[$0 + 38 | 0] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP8[$0 + 36 | 0] = 0;
$1 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_iii(45, $1 | 0, 1e3) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
HEAP32[$0 + 28 >> 2] = -1;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = $2;
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function HandJointRotations__HandJointRotations_28bool_2c_20Gesture_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
HEAP8[$0 + 60 | 0] = 0;
$6 = (HEAP32[HEAP32[$2 >> 2] + 72 >> 2] + Math_imul($1, 60) | 0) + 52 | 0;
label$1: while (1) {
label$2: {
$1 = 0;
if (($3 | 0) == 5) {
break label$2;
}
while (1) if (($1 | 0) == 3) {
$3 = $3 + 1 | 0;
continue label$1;
} else {
$4 = $1 << 2;
$5 = Math_imul($3, 12);
HEAP32[$4 + ($5 + $0 | 0) >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + (HEAP32[HEAP32[($6 + $5 | 0) + $4 >> 2] + 4 >> 2] << 2) >> 2];
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
return $0 | 0;
}
function addToARPFrame_28SSFrame__2c_20JointRotation__2c_20bool_2c_20short__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
$5 = Quaternion__Quaternion_28_29($4 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5);
$6 = Quaternion__Quaternion_28_29($4);
Joint__transformHanimToJointFrame_28Quaternion__2c_20Quaternion_20const__29(HEAP32[$1 + 4 >> 2], $6, $5);
label$1: {
if ($2) {
$1 = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
break label$1;
}
$1 = HEAPU16[$3 >> 1];
HEAP16[$3 >> 1] = $1 + 1;
}
setARPBoneRot_28SSFrame__2c_20int_2c_20Quaternion_20const__29($0, $1 << 16 >> 16, $6);
__stack_pointer = $4 + 32 | 0;
}
function vsnprintf($0, $1, $2, $3) {
var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$4 = __stack_pointer - 160 | 0;
__stack_pointer = $4;
$5 = -1;
HEAP32[$4 + 148 >> 2] = $1 ? $1 - 1 | 0 : 0;
$0 = $1 ? $0 : $4 + 158 | 0;
HEAP32[$4 + 144 >> 2] = $0;
$4 = memset($4, 0, 144);
HEAP32[$4 + 76 >> 2] = -1;
HEAP32[$4 + 36 >> 2] = 899;
HEAP32[$4 + 80 >> 2] = -1;
HEAP32[$4 + 44 >> 2] = $4 + 159;
HEAP32[$4 + 84 >> 2] = $4 + 144;
label$1: {
if (($1 | 0) < 0) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$1;
}
HEAP8[$0 | 0] = 0;
$5 = vfprintf($4, $2, $3);
}
__stack_pointer = $4 + 160 | 0;
return $5;
}
function fopen($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if (!strchr(11024, HEAP8[$1 | 0])) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
break label$2;
}
$4 = __fmodeflags($1);
HEAP32[$2 >> 2] = 438;
HEAP32[$2 + 4 >> 2] = 0;
$0 = __syscall_ret(__syscall_openat(-100, $0 | 0, $4 | 32768, $2 | 0) | 0);
if (($0 | 0) < 0) {
break label$1;
}
$3 = __fdopen($0, $1);
if ($3) {
break label$1;
}
__wasi_fd_close($0 | 0) | 0;
}
$3 = 0;
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
function element3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 39;
label$1: {
label$2: {
label$3: {
label$4: {
switch ($1 - 21 | 0) {
default:
if (($1 | 0) == 15) {
break label$2;
}
if (($1 | 0) != 36) {
break label$3;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 46;
case 3:
break label$1;
case 1:
case 2:
break label$3;
case 0:
break label$4;
}
}
HEAP32[$0 >> 2] = 821;
return 39;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 45;
}
function fmt_u($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (!$1) {
$5 = $0;
$3 = $1;
$6 = $3;
break label$1;
}
while (1) {
$3 = $1;
$5 = __wasm_i64_udiv($0, $3, 10, 0);
$3 = i64toi32_i32$HIGH_BITS;
$6 = $3;
$4 = __wasm_i64_mul($5, $3, 10, 0);
$3 = $1;
$2 = $2 - 1 | 0;
HEAP8[$2 | 0] = $0 - $4 | 48;
$4 = $3 >>> 0 > 9;
$0 = $5;
$3 = $6;
$1 = $3;
if ($4) {
continue;
}
break;
}
}
$4 = $5;
if ($4) {
while (1) {
$2 = $2 - 1 | 0;
$0 = ($4 >>> 0) / 10 | 0;
HEAP8[$2 | 0] = $4 - Math_imul($0, 10) | 48;
$1 = $4 >>> 0 > 9;
$4 = $0;
if ($1) {
continue;
}
break;
}
}
return $2;
}
function Quaternion__print_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$4 = Quaternion__x_28_29_20const($0);
$5 = Quaternion__y_28_29_20const($0);
$6 = Quaternion__z_28_29_20const($0);
$7 = Quaternion__w_28_29_20const($0);
HEAP32[$3 + 48 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $6;
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $7;
HEAPF64[$3 + 8 >> 3] = $4;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 8004, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function HashChain_int_2c_20int___insert_28HashChainItem_int_2c_20int__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = operator_20new_28unsigned_20long_29(12);
$4 = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HashChain_int_2c_20int___HashChain_28HashChainItem_int_2c_20int__2c_20HashChain_int_2c_20int___29($3, $2 + 8 | 0, HEAP32[$0 + 8 >> 2]), 
HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
HashChainItem_int_2c_20int____HashChainItem_28_29($2 + 8 | 0);
__stack_pointer = $2 + 16 | 0;
}
function Direction3__Between_28Direction3_2c_20Direction3_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0);
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$5 = Math_fround(Math_fround(1) - $3);
$2 = Direction3__Direction3_28float_2c_20float_2c_20float_29($4, Math_fround(Math_fround(HEAPF32[$1 >> 2] * $5) + Math_fround(HEAPF32[$2 >> 2] * $3)), Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $5) + Math_fround(HEAPF32[$2 + 4 >> 2] * $3)), Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $5) + Math_fround(HEAPF32[$2 + 8 >> 2] * $3)));
Direction3__Direction3_28Direction3_20const__29($0, Direction3__defined_28_29_20const($2) ? $2 : $1);
__stack_pointer = $4 + 16 | 0;
}
function unknown_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, $6 = 0;
while (1) {
$5 = HEAP32[$1 >> 2];
if (!(($5 | 0) == ($2 | 0) | HEAP32[$3 >> 2] == ($4 | 0))) {
$6 = HEAPU16[((HEAPU8[$5 | 0] << 1) + $0 | 0) + 372 >> 1];
label$3: {
if (!$6) {
$6 = FUNCTION_TABLE[HEAP32[$0 + 364 >> 2]](HEAP32[$0 + 368 >> 2], $5) | 0;
$5 = HEAP32[$1 >> 2];
$5 = ($5 + HEAPU8[(HEAPU8[$5 | 0] + $0 | 0) + 72 | 0] | 0) - 3 | 0;
break label$3;
}
$5 = $5 + 1 | 0;
}
HEAP32[$1 >> 2] = $5;
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 2;
HEAP16[$5 >> 1] = $6;
continue;
}
break;
}
}
function std____2___28anonymous_20namespace_29__do_strerror_r_28int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 1040 | 0;
__stack_pointer = $2;
$4 = __errno_location();
$5 = HEAP32[$4 >> 2];
$3 = std____2___28anonymous_20namespace_29__handle_strerror_r_return_28int_2c_20char__29(strerror_r($1, $2 + 16 | 0, 1024), $2 + 16 | 0);
if (!HEAPU8[$3 | 0]) {
HEAP32[$2 >> 2] = $1;
snprintf($2 + 16 | 0, 1024, 10718, $2);
$3 = $2 + 16 | 0;
}
HEAP32[$4 >> 2] = $5;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, $3);
__stack_pointer = $2 + 1040 | 0;
}
function printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer + -64 | 0;
__stack_pointer = $5;
if ($0) {
HEAP32[$5 + 60 >> 2] = $3;
HEAP32[$5 + 56 >> 2] = $3;
HEAP32[$5 + 44 >> 2] = $4;
HEAP32[$5 + 40 >> 2] = $3;
HEAPF64[$5 + 32 >> 3] = $2;
HEAPF64[$5 + 48 >> 3] = Math_fround($2 / Math_fround(5));
HEAP32[$5 + 24 >> 2] = $4;
HEAP32[$5 + 20 >> 2] = $3;
HEAP32[$5 + 16 >> 2] = $3;
__small_fprintf($0, 16766, $5 + 16 | 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, $0, $4);
HEAP32[$5 >> 2] = $3;
fiprintf($0, 24235, $5);
}
__stack_pointer = $5 - -64 | 0;
}
function IFS_spec___IFS_spec_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray1_Vector____DynamicArray1_28_29($1));
HEAP32[$0 >> 2] = 0;
}
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray_short_2c_20_28short_29_1____DynamicArray_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArray_short_2c_20_28short_29_1____DynamicArray_28_29($1));
HEAP32[$0 + 8 >> 2] = 0;
}
$1 = HEAP32[$0 + 12 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
HEAP32[$0 + 12 >> 2] = 0;
}
return $0;
}
function TokenStream__requireChar_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = HEAP32[$0 + 16 >> 2];
$3 = HEAP32[$1 + 12 >> 2];
if (($3 | 0) <= HEAP32[$0 + 24 >> 2]) {
$2 = $0 + 24 | 0;
$4 = HEAP32[$0 + 28 >> 2];
label$2: {
if (($4 | 0) >= 0) {
DynamicArray_char_2c_20_28char_290___useSubset_28int_2c_20int_29($1, $4, $3);
$1 = $0 + 28 | 0;
HEAP32[$2 >> 2] = HEAP32[$2 >> 2] - HEAP32[$1 >> 2];
break label$2;
}
HEAP32[$1 + 12 >> 2] = 0;
$1 = $2;
}
HEAP32[$1 >> 2] = 0;
$1 = HEAP32[$0 + 16 >> 2];
if (HEAP32[$1 + 12 >> 2] >= HEAP32[$1 + 8 >> 2]) {
TokenStream__expandBuffer_28_29($0);
}
TokenStream__fillBuffer_28_29($0);
}
}
function void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0) {
decltype_28static_cast_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29(std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29(HEAP32[$0 >> 2]));
}
function std____2__locale__id____get_28_29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 32 | 0;
__stack_pointer = $1;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 920;
$2 = HEAP32[$1 + 12 >> 2];
HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 4 >> 2] = $2;
void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($1 + 16 | 0, $1, $0));
__stack_pointer = $1 + 32 | 0;
$0 = HEAP32[$0 + 4 >> 2];
return $0 - 1 | 0;
}
function makeFullFilename_28char_20const__2c_20char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
if (!$1) {
return 0;
}
label$2: {
if (!$0) {
break label$2;
}
if (isAbsoluteFileName_28char_20const__29($1)) {
break label$2;
}
$2 = strlen($0);
if (!$2) {
break label$2;
}
$4 = $2 + 1 | 0;
$5 = strlen($1) + $4 | 0;
$3 = HEAPU8[($0 + $2 | 0) - 1 | 0];
$0 = strcpy(dlmalloc($5 + (($3 | 0) != 47 & ($3 | 0) != 92) | 0), $0);
label$3: {
if (!(($3 | 0) == 47 | ($3 | 0) == 92)) {
HEAP8[$0 + $2 | 0] = 47;
break label$3;
}
$4 = $2;
}
strcpy($0 + $4 | 0, $1);
return $0;
}
return copyString_28char_20const__29($1);
}
function TwoHConcretePostureChange__TwoHConcretePostureChange_28_29($0) {
var $1 = 0;
$0 = TwoHConcretePosture__TwoHConcretePosture_28_29($0);
HEAP32[19359] = 0;
invoke_ii(88, $0 + 224 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
PostureChangeFlags__PostureChangeFlags_28_29($0 + 448 | 0);
PostureChangeFlags__PostureChangeFlags_28_29($0 + 450 | 0);
PostureChangeTiming__PostureChangeTiming_28_29($0 + 452 | 0);
PostureChangeTiming__PostureChangeTiming_28_29($0 + 460 | 0);
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
TwoHConcretePosture___TwoHConcretePosture_28_29($0);
__resumeException($1 | 0);
abort();
}
function HandJointRotations__setFrom_28Gesture_20const__2c_20SideIndex_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$6 = (HEAP32[HEAP32[$1 >> 2] + 72 >> 2] + Math_imul($2, 60) | 0) + 52 | 0;
label$1: while (1) {
label$2: {
$2 = 0;
if (($3 | 0) == 5) {
break label$2;
}
while (1) if (($2 | 0) == 3) {
$3 = $3 + 1 | 0;
continue label$1;
} else {
$4 = $2 << 2;
$5 = Math_imul($3, 12);
CopyJointRotation_28JointRotation__2c_20JointRotation_20const__29(HEAP32[$4 + ($5 + $0 | 0) >> 2], HEAP32[HEAP32[$1 + 4 >> 2] + (HEAP32[HEAP32[($6 + $5 | 0) + $4 >> 2] + 4 >> 2] << 2) >> 2]);
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
__cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
return;
}
$0 = HEAP32[$0 + 8 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function cdataSectionProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $1;
$1 = doCdataSection($0, HEAP32[$0 + 144 >> 2], $4 + 12 | 0, $2, $3, !HEAPU8[$0 + 468 | 0]);
label$1: {
if ($1) {
break label$1;
}
$1 = HEAP32[$4 + 12 >> 2];
if (!$1) {
$1 = 0;
break label$1;
}
if (HEAP32[$0 + 460 >> 2]) {
HEAP32[$0 + 264 >> 2] = 776;
$1 = externalEntityContentProcessor($0, $1, $2, $3);
break label$1;
}
HEAP32[$0 + 264 >> 2] = 773;
$1 = contentProcessor($0, $1, $2, $3);
}
__stack_pointer = $4 + 16 | 0;
return $1 | 0;
}
function XmlUtf8Encode($0, $1) {
var $2 = 0;
label$1: {
if (($0 | 0) < 0) {
break label$1;
}
if ($0 >>> 0 <= 127) {
HEAP8[$1 | 0] = $0;
return 1;
}
if ($0 >>> 0 <= 2047) {
HEAP8[$1 + 1 | 0] = $0 & 63 | 128;
HEAP8[$1 | 0] = $0 >>> 6 | 192;
return 2;
}
if ($0 >>> 0 <= 65535) {
HEAP8[$1 + 2 | 0] = $0 & 63 | 128;
HEAP8[$1 | 0] = $0 >>> 12 | 224;
HEAP8[$1 + 1 | 0] = $0 >>> 6 & 63 | 128;
return 3;
}
if ($0 >>> 0 > 1114111) {
break label$1;
}
HEAP8[$1 + 3 | 0] = $0 & 63 | 128;
HEAP8[$1 | 0] = $0 >>> 18 | 240;
HEAP8[$1 + 2 | 0] = $0 >>> 6 & 63 | 128;
HEAP8[$1 + 1 | 0] = $0 >>> 12 & 63 | 128;
$2 = 4;
}
return $2;
}
function DynamicArrayP_char_20const___setElements_28int_2c_20char_20const__2c_20____29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (($1 | 0) < 0) {
break label$1;
}
DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29($0, $1, $2);
HEAP32[$4 + 12 >> 2] = $3;
while (1) {
$1 = HEAP32[$4 + 12 >> 2];
HEAP32[$4 + 12 >> 2] = $1 + 4;
$2 = HEAP32[$1 >> 2];
if (($2 | 0) < 0) {
break label$1;
}
HEAP32[$4 + 12 >> 2] = $1 + 8;
DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29($0, $2, HEAP32[$1 + 4 >> 2]);
continue;
}
}
__stack_pointer = $4 + 16 | 0;
}
function OptionSpec___OptionSpec_28_29($0) {
var $1 = 0;
label$1: {
$1 = HEAP32[$0 + 12 >> 2];
label$2: {
if (!$1) {
break label$2;
}
HEAP32[19359] = 0;
invoke_vi(49, $1 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$1 = HEAP32[$0 + 12 >> 2];
if (!$1) {
break label$2;
}
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($1));
HEAP32[$0 + 12 >> 2] = 0;
}
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 8 >> 2] = 0;
}
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2____throw_failure_28char_20const__29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = __cxa_allocate_exception(16) | 0;
$1 = std____2__error_code__error_code_std____2__io_errc__28std____2__io_errc_2c_20std____2__enable_if_is_error_code_enum_std____2__io_errc___value_2c_20void___type__29($1 + 8 | 0, 1, 0);
HEAP32[19359] = 0;
invoke_iiii(909, $2 | 0, $0 | 0, $1 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__cxa_throw($2 | 0, 56048, 910);
abort();
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
__cxa_free_exception($2 | 0);
__resumeException($0 | 0);
abort();
}
function HingeJointRotation__HingeJointRotation_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28Joint__29($0, $1);
HEAP32[$0 >> 2] = 59736;
HEAP32[19359] = 0;
$2 = invoke_ii(69, $0 + 8 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[19359] = 0;
invoke_vi(146, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function std__runtime_error__runtime_error_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = std__exception__exception_28_29($0);
HEAP32[$0 >> 2] = 58900;
$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($1);
HEAP32[19359] = 0;
invoke_iii(927, $0 + 4 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std__exception___exception_28_29($0);
__resumeException($1 | 0);
abort();
}
function HanimAvatar__siteStdDistance_28SiteIDPair_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0), $4 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$4 = HEAP32[$1 >> 2];
HEAP32[$2 + 12 >> 2] = $4;
HEAP32[$2 + 24 >> 2] = $4;
$3 = HanimAvatar__siteStdDistance_28SiteID_29_20const($0, $2 + 12 | 0);
if (SiteID__defined_28_29_20const($1 + 4 | 0)) {
$1 = HEAP32[$1 >> 2];
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$2 + 16 >> 2] = $1;
$3 = Math_fround(Math_fround($3 + HanimAvatar__siteStdDistance_28SiteID_29_20const($0, $2 + 8 | 0)) * Math_fround(.5));
}
__stack_pointer = $2 + 32 | 0;
return Math_fround($3);
}
function DynamicArray1_AtomicNonmanual___getElement_28int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
if (!(HEAP32[$1 + 12 >> 2] > ($2 | 0) & ($2 | 0) >= 0)) {
AtomicNonmanual__AtomicNonmanual_28_29($0);
return;
}
$2 = HEAP32[$1 >> 2] + Math_imul($2, 28) | 0;
$1 = HEAP32[$2 >> 2];
$3 = HEAP32[$2 + 4 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
$1 = HEAP32[$2 + 20 >> 2];
$3 = HEAP32[$2 + 16 >> 2];
HEAP32[$0 + 16 >> 2] = $3;
HEAP32[$0 + 20 >> 2] = $1;
$3 = HEAP32[$2 + 12 >> 2];
$1 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = $3;
}
function findEncoding($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 160 | 0;
__stack_pointer = $3;
HEAP32[$3 + 156 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $3 + 16;
FUNCTION_TABLE[HEAP32[$0 + 56 >> 2]]($0, $3 + 156 | 0, $2, $3 + 12 | 0, $3 + 143 | 0);
$1 = 0;
label$1: {
if (HEAP32[$3 + 156 >> 2] != ($2 | 0)) {
break label$1;
}
HEAP8[HEAP32[$3 + 12 >> 2]] = 0;
if (streqci($3 + 16 | 0, 51792)) {
$1 = $0;
if (HEAP32[$0 + 64 >> 2] == 2) {
break label$1;
}
}
$0 = getEncodingIndex($3 + 16 | 0);
$1 = 0;
if (($0 | 0) == -1) {
break label$1;
}
$1 = HEAP32[($0 << 2) + 64288 >> 2];
}
__stack_pointer = $3 + 160 | 0;
return $1;
}
function FingerPlayMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(552);
HEAP32[19359] = 0;
invoke_iii(471, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24535, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function DefaultSiGMLTopLevelHandler_28void__2c_20XMLCell__29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if (!(!$0 | !$1)) {
$2 = HEAP32[$1 >> 2];
$2 = SiGML__convertElement_28char_20const__29($2);
$2 = HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___lookupString_28SiGML_Element_29_20const(HEAP32[17618], $2);
label$2: {
if ($2) {
FUNCTION_TABLE[$2 | 0]($0, $1);
break label$2;
}
LogTime_28_29();
HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
eprintf_28char_20const__2c_20____29(38810, $3);
UnimplSiGML_28_29();
}
UpdatePostMortem_28_29();
}
__stack_pointer = $3 + 16 | 0;
}
function TargettedMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(536);
HEAP32[19359] = 0;
invoke_iii(478, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24741, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function DirectedMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(744);
HEAP32[19359] = 0;
invoke_iii(464, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24785, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function CircularMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(752);
HEAP32[19359] = 0;
invoke_iii(468, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24661, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function SSFrame__AddPRSet_28char__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0;
$9 = operator_20new_28unsigned_20long_29(40);
HEAP32[19359] = 0;
$10 = invoke_iiifffffff(10, $9 | 0, $1 | 0, Math_fround($2), Math_fround($3), Math_fround($4), Math_fround($5), Math_fround($6), Math_fround($7), Math_fround($8)) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
SSFrame__AddPRSet_28SSPRSet__29($0, $10);
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($9);
__resumeException($0 | 0);
abort();
}
function InvertibleDynamicStringArray__NewInvertibleArrayH_28int_2c_20char_20const__2c_20____29($0, $1, $2) {
var $3 = 0, $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
invoke_iiii(44, $3 | 0, $0 << 16 >> 16, 1) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
HEAP32[$4 + 12 >> 2] = $2;
InvertibleDynamicStringArray__vAddToArrayH_28char_20const__2c_20void__29($3, $1, $2);
__stack_pointer = $4 + 16 | 0;
return $3;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function RepeatMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(704);
HEAP32[19359] = 0;
invoke_iii(474, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24620, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function WristMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(560);
HEAP32[19359] = 0;
invoke_iii(470, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24580, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
Vector__setFrom_28float_2c_20float_2c_20float_29($0, Math_fround(Math_fround(Vector__y_28_29_20const($1) * Vector__z_28_29_20const($2)) - Math_fround(Vector__z_28_29_20const($1) * Vector__y_28_29_20const($2))), Math_fround(Math_fround(Vector__z_28_29_20const($1) * Vector__x_28_29_20const($2)) - Math_fround(Vector__x_28_29_20const($1) * Vector__z_28_29_20const($2))), Math_fround(Math_fround(Vector__x_28_29_20const($1) * Vector__y_28_29_20const($2)) - Math_fround(Vector__y_28_29_20const($1) * Vector__x_28_29_20const($2))));
Vector__checkValidVector_28_29_20const($0);
}
function ForceHandTouchProximity_28SiteID__29($0) {
var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (SiteID__defined_28_29_20const($0)) {
if (!(!HEAPU8[67600] | !(HEAPU8[$0 + 2 | 0] << 16 & 6291456))) {
LogTime_28_29();
wasm2js_i32$0 = $1, wasm2js_i32$1 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18218], HEAPU8[$0 + 2 | 0] >>> 4 & 7), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(41544, $1);
}
HEAP8[$0 + 2 | 0] = ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) & 9437183 | 1048576) >>> 16;
}
__stack_pointer = $1 + 16 | 0;
}
function SiGMLHandshape__IsIndexCrossOverThumb_28_29($0) {
var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
$1 = 1;
label$1: {
if (wasm2js_i32$0 = IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29(HEAP32[$0 + 180 >> 2], HEAP32[$0 + 184 >> 2], 0, 1), 
wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[$0 + 204 >> 2] == 8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
break label$1;
}
$1 = 0;
if (!IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29(HEAP32[$0 + 188 >> 2], HEAP32[$0 + 192 >> 2], 0, 1)) {
break label$1;
}
$1 = HEAP32[$0 + 208 >> 2] == 8;
}
return $1;
}
function NoMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = operator_20new_28unsigned_20long_29(528);
HEAP32[19359] = 0;
invoke_iii(469, $2 | 0, $0 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 + 4 >> 2] = $2;
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(24704, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function poolAppend($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $2;
label$1: {
label$2: {
if (!HEAP32[$0 + 12 >> 2]) {
if (!poolGrow($0)) {
break label$2;
}
}
$2 = $0 + 12 | 0;
while (1) {
label$5: {
FUNCTION_TABLE[HEAP32[$1 + 56 >> 2]]($1, $4 + 12 | 0, $3, $2, HEAP32[$0 + 8 >> 2]);
if (HEAP32[$4 + 12 >> 2] == ($3 | 0)) {
break label$5;
}
if (poolGrow($0)) {
continue;
}
break label$2;
}
break;
}
$0 = HEAP32[$0 + 16 >> 2];
break label$1;
}
$0 = 0;
}
__stack_pointer = $4 + 16 | 0;
return $0;
}
function SSPRSet__SSPRSet_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 >> 2] = 59160;
$1 = HEAPU8[24156] | HEAPU8[24157] << 8 | (HEAPU8[24158] << 16 | HEAPU8[24159] << 24);
HEAP8[$0 + 4 | 0] = $1;
HEAP8[$0 + 5 | 0] = $1 >>> 8;
HEAP8[$0 + 6 | 0] = $1 >>> 16;
HEAP8[$0 + 7 | 0] = $1 >>> 24;
HEAP8[$0 + 8 | 0] = HEAPU8[24160];
while (1) {
if (($2 | 0) == 4) {
while (1) {
if (($3 | 0) != 3) {
HEAP32[(($3 << 2) + $0 | 0) + 28 >> 2] = 0;
$3 = $3 + 1 | 0;
continue;
}
break;
}
} else {
HEAP32[(($2 << 2) + $0 | 0) + 12 >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $0 | 0;
}
function Quaternion__print_28_IO_FILE__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
$4 = HEAPF32[$0 >> 2];
$5 = HEAPF32[$0 + 4 >> 2];
$6 = HEAPF32[$0 + 8 >> 2];
$7 = HEAPF32[$0 + 12 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $7;
HEAPF64[$3 + 40 >> 3] = $6;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 8003, $3);
__stack_pointer = $3 - -64 | 0;
}
function std____terminate_28void_20_28__29_28_29_29($0) {
HEAP32[19359] = 0;
invoke_v($0 | 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($0 | 0) != 1) {
HEAP32[19359] = 0;
invoke_vii(934, 10324, 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$1;
}
}
$0 = __cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
__cxa_begin_catch($0 | 0) | 0;
HEAP32[19359] = 0;
invoke_vii(934, 5708, 0);
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
break label$1;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
}
abort();
}
function scalbn($0, $1) {
label$1: {
if (($1 | 0) >= 1024) {
$0 = $0 * 8.98846567431158e307;
if ($1 >>> 0 < 2047) {
$1 = $1 - 1023 | 0;
break label$1;
}
$0 = $0 * 8.98846567431158e307;
$1 = (($1 | 0) < 3069 ? $1 : 3069) - 2046 | 0;
break label$1;
}
if (($1 | 0) > -1023) {
break label$1;
}
$0 = $0 * 2.004168360008973e-292;
if ($1 >>> 0 > 4294965304) {
$1 = $1 + 969 | 0;
break label$1;
}
$0 = $0 * 2.004168360008973e-292;
$1 = (($1 | 0) > -2960 ? $1 : -2960) + 1938 | 0;
}
wasm2js_scratch_store_i32(0, 0);
wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
return $0 * +wasm2js_scratch_load_f64();
}
function EllipseInfo__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$4 = HEAPF32[$0 >> 2];
$5 = HEAPF32[$0 + 4 >> 2];
$6 = HEAPF32[$0 + 8 >> 2];
$7 = HEAPF32[$0 + 12 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $7;
HEAPF64[$3 + 40 >> 3] = $6;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 14866, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function CircleInfo__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$3 = __stack_pointer + -64 | 0;
__stack_pointer = $3;
if ($1) {
$4 = HEAPF32[$0 >> 2];
$5 = HEAPF32[$0 + 4 >> 2];
$6 = HEAPF32[$0 + 8 >> 2];
$7 = HEAPF32[$0 + 12 >> 2];
HEAP32[$3 + 48 >> 2] = $2;
HEAP32[$3 + 32 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 56 >> 3] = $7;
HEAPF64[$3 + 40 >> 3] = $6;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 >> 2] = $2;
HEAPF64[$3 + 8 >> 3] = $4;
__small_fprintf($1, 14905, $3);
}
__stack_pointer = $3 - -64 | 0;
}
function Gesture__CloneGesture_28short_29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = newGestureName_28char_20const__2c_20int_29(HEAP32[$0 + 8 >> 2], $1);
$1 = operator_20new_28unsigned_20long_29(52);
$3 = HEAP32[$0 >> 2];
$4 = HEAPU8[$0 + 13 | 0];
HEAP32[19359] = 0;
invoke_iiiii(360, $1 | 0, $2 | 0, $3 | 0, ($4 & 64) >>> 6 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP8[$1 + 13 | 0] = HEAPU8[$0 + 13 | 0];
HEAP8[$1 + 14 | 0] = HEAPU8[$0 + 14 | 0];
return $1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function utf8_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = HEAP32[$3 >> 2];
$4 = $4 - $5 | 0;
$0 = HEAP32[$1 >> 2];
label$1: {
if (($4 | 0) >= ($2 - $0 | 0)) {
break label$1;
}
$4 = $4 + $0 | 0;
while (1) {
$2 = $4;
if ($0 >>> 0 >= $4 >>> 0) {
break label$1;
}
$4 = $2 - 1 | 0;
if ((HEAPU8[$4 | 0] & 192) == 128) {
continue;
}
break;
}
}
while (1) {
if (($2 | 0) != ($0 | 0)) {
HEAP8[$5 | 0] = HEAPU8[$0 | 0];
$5 = $5 + 1 | 0;
$0 = $0 + 1 | 0;
continue;
}
break;
}
HEAP32[$1 >> 2] = $2;
HEAP32[$3 >> 2] = $5;
}
function __cxx_global_var_init_8_3() {
var $0 = 0, $1 = 0, $2 = 0;
$0 = 70752;
label$1: {
while (1) {
HEAP32[19359] = 0;
$2 = invoke_ii(701, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
$0 = $2 + 160 | 0;
if (($0 | 0) != 72832) {
continue;
}
break;
}
__cxa_atexit(702, 0, 1024);
return;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
if (($0 | 0) != 70752) {
while (1) {
$0 = CannedHandshape___CannedHandshape_28_29($0 - 160 | 0);
if (($0 | 0) != 70752) {
continue;
}
break;
}
}
__resumeException($1 | 0);
abort();
}
function ConvertDirectionSize_28Vector__2c_20Direction3_2c_20MoveSize_2c_20Mirroring_2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
if ($4) {
Direction3__Direction3_28Direction3_20const__29($5 + 16 | 0, $1);
break label$1;
}
$4 = HEAPU16[$3 >> 1];
HEAP16[$5 + 6 >> 1] = $4;
HEAP16[$5 + 8 >> 1] = $4;
Direction3__makeMirror_28Mirroring_29_20const($5 + 16 | 0, $1, $5 + 6 | 0);
}
SiGML__convertDirectionVec_28Vector__2c_20Direction3_29($0, $5 + 16 | 0);
Vector__setScale_28float_29($0, HEAPF32[(($2 << 2) + 68592 | 0) + 40 >> 2]);
__stack_pointer = $5 + 32 | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP8[$2 + 15 | 0] = $1;
$0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $2 + 15 | 0, 1);
__stack_pointer = $2 + 16 | 0;
return $0;
}
function little2_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$4 = $1;
while (1) {
$2 = HEAPU8[$4 | 0];
$3 = HEAPU8[$4 + 1 | 0];
if ($3) {
$2 = unicode_byte_type($3 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
$3 = 2;
label$4: {
if (1 << $2 & 792723456 ? $2 >>> 0 <= 29 : 0) {
break label$4;
}
label$5: {
switch ($2 - 5 | 0) {
case 2:
$3 = 4;
break label$4;
default:
return $4 - $1 | 0;
case 0:
break label$4;
case 1:
break label$5;
}
}
$3 = 3;
}
$4 = $4 + $3 | 0;
continue;
}
}
function fclose($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
if (HEAP32[$0 + 76 >> 2] < 0) {
$1 = 0;
} else {
$1 = __lockfile($0);
}
$4 = fflush($0);
$5 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
$1 = !$1;
if (!$1) {
__unlockfile($0);
}
if (!(HEAP8[$0 | 0] & 1)) {
dummy($0);
$1 = __ofl_lock();
$2 = HEAP32[$0 + 52 >> 2];
if ($2) {
HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
}
$3 = HEAP32[$0 + 56 >> 2];
if ($3) {
HEAP32[$3 + 52 >> 2] = $2;
}
if (HEAP32[$1 >> 2] == ($0 | 0)) {
HEAP32[$1 >> 2] = $3;
}
__ofl_unlock();
dlfree(HEAP32[$0 + 96 >> 2]);
dlfree($0);
}
return $4 | $5;
}
function DynamicArrayP_BasicMovement___appendElements_28DynamicArrayP_BasicMovement___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
label$1: {
if (!$1) {
break label$1;
}
$3 = HEAP32[$1 + 12 >> 2] + HEAP32[$0 + 12 >> 2] | 0;
DynamicArrayP_BasicMovement___ensureSize_28int_29($0, $3);
if (HEAP32[$0 + 8 >> 2] < ($3 | 0)) {
break label$1;
}
while (1) {
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
HEAP32[$0 + 12 >> 2] = $3;
} else {
HEAP32[HEAP32[$0 >> 2] + (HEAP32[$0 + 12 >> 2] + $2 << 2) >> 2] = HEAP32[HEAP32[$1 >> 2] + ($2 << 2) >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
}
function WristMovement__operator__28WristMovement_20const__29($0, $1) {
var $2 = 0, $3 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 552 >> 2];
$3 = HEAP32[$2 + 556 >> 2];
HEAP32[$0 + 552 >> 2] = $1;
HEAP32[$0 + 556 >> 2] = $3;
$1 = HEAP32[$2 + 548 >> 2];
$3 = HEAP32[$2 + 544 >> 2];
HEAP32[$0 + 544 >> 2] = $3;
HEAP32[$0 + 548 >> 2] = $1;
$3 = HEAP32[$2 + 540 >> 2];
$1 = HEAP32[$2 + 536 >> 2];
HEAP32[$0 + 536 >> 2] = $1;
HEAP32[$0 + 540 >> 2] = $3;
$1 = HEAP32[$2 + 532 >> 2];
$3 = HEAP32[$2 + 528 >> 2];
HEAP32[$0 + 528 >> 2] = $3;
HEAP32[$0 + 532 >> 2] = $1;
return $0;
}
function Site__getGlobalBoneTranslation_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
$1 = HEAP32[$0 + 52 >> 2];
if (!$1) {
$1 = operator_20new_28unsigned_20long_29(12);
HEAP32[19359] = 0;
$2 = invoke_iii(74, $1 | 0, $0 + 40 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 52 >> 2] = $2;
Vector__setSubtract_28Vector_20const__29($2, HEAP32[$0 + 16 >> 2] + 68 | 0);
$1 = HEAP32[$0 + 52 >> 2];
}
return $1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function QuatJointRotation__QuatJointRotation_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28Joint__29($0, $1);
HEAP32[$0 >> 2] = 60152;
HEAP32[19359] = 0;
$2 = invoke_ii(86, $0 + 8 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
label$1: {
if (($1 | 0) == 1) {
break label$1;
}
HEAP32[19359] = 0;
invoke_vi(147, $2 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) == 1) {
break label$1;
}
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function big2_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$4 = $1;
while (1) {
$2 = HEAPU8[$4 + 1 | 0];
$3 = HEAPU8[$4 | 0];
if ($3) {
$2 = unicode_byte_type($3 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
$3 = 2;
label$4: {
if (1 << $2 & 792723456 ? $2 >>> 0 <= 29 : 0) {
break label$4;
}
label$5: {
switch ($2 - 5 | 0) {
case 2:
$3 = 4;
break label$4;
default:
return $4 - $1 | 0;
case 0:
break label$4;
case 1:
break label$5;
}
}
$3 = 3;
}
$4 = $4 + $3 | 0;
continue;
}
}
function big2_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$0 = HEAP32[$1 >> 2];
if (($2 - $0 | 0) > ($4 - HEAP32[$3 >> 2] | 0)) {
$5 = $2 - 2 | 0;
$2 = (HEAPU8[$5 | 0] & 248) == 216 ? $5 : $2;
}
while (1) {
label$3: {
if (($2 | 0) == ($0 | 0)) {
break label$3;
}
$5 = HEAP32[$3 >> 2];
if (($5 | 0) == ($4 | 0)) {
break label$3;
}
$0 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
HEAP32[$3 >> 2] = $5 + 2;
HEAP16[$5 >> 1] = $0 << 8 | $0 >>> 8;
$0 = HEAP32[$1 >> 2] + 2 | 0;
HEAP32[$1 >> 2] = $0;
continue;
}
break;
}
}
function SSPRSet__SSPRSet_28char__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = Math_fround($5);
$6 = Math_fround($6);
$7 = Math_fround($7);
$8 = Math_fround($8);
HEAP8[$0 + 8 | 0] = 0;
HEAP32[$0 >> 2] = 59160;
strncpy($0 + 4 | 0, $1, 4);
HEAPF32[$0 + 36 >> 2] = $8;
HEAPF32[$0 + 32 >> 2] = $7;
HEAPF32[$0 + 28 >> 2] = $6;
HEAPF32[$0 + 24 >> 2] = $5;
HEAPF32[$0 + 20 >> 2] = $4;
HEAPF32[$0 + 16 >> 2] = $3;
HEAPF32[$0 + 12 >> 2] = $2;
return $0 | 0;
}
function __floatunsitf($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
$3 = 0;
break label$1;
}
$4 = $1;
$1 = Math_clz32($1);
__ashlti3($2, $4, 0, 0, 0, $1 + 81 | 0);
$1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + (16414 - $1 << 16) | 0;
$5 = 0 + HEAP32[$2 + 8 >> 2] | 0;
$1 = $3 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
$4 = $1;
$6 = HEAP32[$2 + 4 >> 2];
$1 = HEAP32[$2 >> 2];
$3 = $1;
}
$1 = $0;
HEAP32[$1 >> 2] = $3;
HEAP32[$1 + 4 >> 2] = $6;
HEAP32[$0 + 8 >> 2] = $5;
HEAP32[$1 + 12 >> 2] = $4;
__stack_pointer = $2 + 16 | 0;
}
function Quaternion__quatCosAngle_28Quaternion_20const__29_20const($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
$2 = Quaternion__x_28_29_20const($0);
$3 = Quaternion__x_28_29_20const($1);
$4 = Quaternion__y_28_29_20const($0);
$5 = Quaternion__y_28_29_20const($1);
$6 = Quaternion__z_28_29_20const($0);
$7 = Quaternion__z_28_29_20const($1);
return Math_fround(Math_fround(Quaternion__w_28_29_20const($0) * Quaternion__w_28_29_20const($1)) + Math_fround(Math_fround($6 * $7) + Math_fround(Math_fround($2 * $3) + Math_fround($4 * $5))));
}
function XMLWrapper__ParseFile_28char_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
label$2: {
if ($1) {
$3 = fopen($1, 5108);
if ($3) {
break label$2;
}
}
$0 = 1;
if (!HEAPU8[67571]) {
break label$1;
}
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36635, $2);
break label$1;
}
if (HEAPU8[67571]) {
HEAP32[$2 + 16 >> 2] = $1;
eprintf_28char_20const__2c_20____29(36743, $2 + 16 | 0);
}
$0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3) | 0;
}
__stack_pointer = $2 + 32 | 0;
return $0;
}
function TurretJointRotation__operator__28TurretJointRotation_20const__29($0, $1) {
var $2 = 0, $3 = 0;
JointRotation__operator__28JointRotation_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 32 >> 2];
$3 = HEAP32[$2 + 36 >> 2];
HEAP32[$0 + 32 >> 2] = $1;
HEAP32[$0 + 36 >> 2] = $3;
$1 = HEAP32[$2 + 28 >> 2];
$3 = HEAP32[$2 + 24 >> 2];
HEAP32[$0 + 24 >> 2] = $3;
HEAP32[$0 + 28 >> 2] = $1;
$3 = HEAP32[$2 + 20 >> 2];
$1 = HEAP32[$2 + 16 >> 2];
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 20 >> 2] = $3;
$1 = HEAP32[$2 + 12 >> 2];
$3 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $1;
return $0;
}
function Trajectory__lookupByFraction_28float_29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = HEAP32[15355];
$1 = Math_fround(Math_fround($2 | 0) * $1);
label$1: {
if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
$3 = ~~$1;
break label$1;
}
$3 = -2147483648;
}
if (($3 | 0) < 0) {
return HEAPF32[HEAP32[$0 + 28 >> 2] >> 2];
}
$2 = $2 - 1 | 0;
if (($3 | 0) >= ($2 | 0)) {
return HEAPF32[HEAP32[$0 + 28 >> 2] + ($2 << 2) >> 2];
}
$0 = HEAP32[$0 + 28 >> 2] + ($3 << 2) | 0;
return midpoint_28float_2c_20float_2c_20float_29(HEAPF32[$0 >> 2], HEAPF32[$0 + 4 >> 2], Math_fround($1 - Math_fround($3 | 0)));
}
function TargettedMovement__TargettedMovement_28TargettedMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62364;
TargettedMovement__operator__28TargettedMovement_20const__29($0, $1);
$1 = HEAP32[$1 + 528 >> 2];
HEAP32[19359] = 0;
$2 = invoke_ii(477, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 528 >> 2] = $2;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function ArmHandConstellation__ArmHandConstellation_28ArmHandConstellation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = __memcpy($0, $1, 48);
HEAP32[19359] = 0;
invoke_iii(74, $0 + 48 | 0, $1 + 48 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HEAP32[$0 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
HEAP8[$0 - -64 | 0] = HEAPU8[$1 - -64 | 0];
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
SiteIDPair___SiteIDPair_28_29($0 + 24 | 0);
SiteIDPair___SiteIDPair_28_29($0 + 12 | 0);
SiteIDPair___SiteIDPair_28_29($0);
__resumeException($1 | 0);
abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1));
}
function SiGMLConstellation__defined_28_29_20const($0) {
var $1 = 0;
$1 = 1;
label$1: {
if (SiteIDPair__defined_28_29_20const($0)) {
break label$1;
}
if (SiteIDPair__defined_28_29_20const($0 + 16 | 0)) {
break label$1;
}
if (SiteIDPair__defined_28_29_20const($0 + 28 | 0) | HEAP32[$0 + 48 >> 2]) {
break label$1;
}
if (!Vector__isZero_28_29_20const($0 + 52 | 0)) {
break label$1;
}
if (SiteID__defined_28_29_20const($0 - -64 | 0)) {
break label$1;
}
if (SiteID__defined_28_29_20const($0 + 68 | 0)) {
break label$1;
}
$1 = SiteIDPair__defined_28_29_20const($0 + 72 | 0);
}
return $1;
}
function SeqMovement__SeqMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = CompoundMovement__CompoundMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 6, $1);
HEAP16[$0 + 556 >> 1] = 0;
HEAP32[$0 + 548 >> 2] = 0;
HEAP32[$0 + 552 >> 2] = 0;
HEAP16[$0 + 544 >> 1] = 0;
HEAP32[$0 >> 2] = 62588;
HEAP32[19359] = 0;
invoke_iif(379, $0 + 560 | 0, Math_fround(Math_fround(0))) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
CompoundMovement___CompoundMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function Quaternion__isBadQuat_28_29_20const($0) {
var $1 = 0;
$1 = 1;
label$1: {
if (isnan_28float_29(HEAPF32[$0 >> 2])) {
break label$1;
}
if (isnan_28float_29(HEAPF32[$0 + 4 >> 2])) {
break label$1;
}
if (isnan_28float_29(HEAPF32[$0 + 8 >> 2])) {
break label$1;
}
if (isnan_28float_29(HEAPF32[$0 + 12 >> 2])) {
break label$1;
}
if (isinf_28float_29(HEAPF32[$0 >> 2])) {
break label$1;
}
if (isinf_28float_29(HEAPF32[$0 + 4 >> 2])) {
break label$1;
}
if (isinf_28float_29(HEAPF32[$0 + 8 >> 2])) {
break label$1;
}
$1 = isinf_28float_29(HEAPF32[$0 + 12 >> 2]);
}
return $1;
}
function DynamicArrayP_char___setElements_28int_2c_20char__2c_20____29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
label$1: {
if (($1 | 0) < 0) {
break label$1;
}
DynamicArrayP_char___setElement_28int_2c_20char__29($0, $1, $2);
HEAP32[$4 + 12 >> 2] = $3;
while (1) {
$1 = HEAP32[$4 + 12 >> 2];
HEAP32[$4 + 12 >> 2] = $1 + 4;
$2 = HEAP32[$1 >> 2];
if (($2 | 0) < 0) {
break label$1;
}
HEAP32[$4 + 12 >> 2] = $1 + 8;
DynamicArrayP_char___setElement_28int_2c_20char__29($0, $2, HEAP32[$1 + 4 >> 2]);
continue;
}
}
__stack_pointer = $4 + 16 | 0;
}
function BasicMovement__MergeDurationProperties_28BasicMovement_20const__29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($1 + 52 | 0, $0 + 52 | 0) >> 2], 
HEAPF32[wasm2js_i32$0 + 52 >> 2] = wasm2js_f32$0;
wasm2js_i32$0 = $0, wasm2js_f32$0 = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($1 + 40 | 0, $0 + 40 | 0) >> 2], 
HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
HEAPF32[$0 + 56 >> 2] = HEAPF32[$1 + 56 >> 2] * HEAPF32[$0 + 56 >> 2];
}
function MirrorDirMove_28OneHDirMoveSpec_20const__2c_20OneHDirMoveSpec__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$1 = __memcpy($1, $0, 72);
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 6 >> 1] = $2;
HEAP16[$3 + 24 >> 1] = $2;
MirrorAxisVec_28Mirroring_2c_20Vector__29($3 + 6 | 0, $1);
HEAP16[$3 + 4 >> 1] = $2;
HEAP16[$3 + 16 >> 1] = $2;
MirrorDirectionVec_28Mirroring_2c_20Vector__29($3 + 4 | 0, $1 + 16 | 0);
HEAP16[$3 + 2 >> 1] = $2;
HEAP16[$3 + 8 >> 1] = $2;
MirrorDirectionVec_28Mirroring_2c_20Vector__29($3 + 2 | 0, $1 + 48 | 0);
__stack_pointer = $3 + 32 | 0;
}
function copyStringWithSuffix_28char_20const__2c_20char_20const__29($0, $1) {
var $2 = 0;
if (!$0) {
return 0;
}
label$2: {
if (!$1) {
break label$2;
}
$2 = findSuffix_28char_20const__29($0);
if (HEAPU8[$2 | 0]) {
if (strcmp($2, $1)) {
break label$2;
}
$2 = $2 - $0 | 0;
$0 = strncpy(dlmalloc((strlen($1) + $2 | 0) + 1 | 0), $0, $2);
strcpy($0 + $2 | 0, $1);
return $0;
}
$2 = $2 - $0 | 0;
$0 = strncpy(dlmalloc((strlen($1) + $2 | 0) + 2 | 0), $0, $2);
$2 = $0 + $2 | 0;
HEAP8[$2 | 0] = 46;
strcpy($2 + 1 | 0, $1);
return $0;
}
return copyString_28char_20const__29($0);
}
function InvertibleStringArray__NewInvertibleArrayH_28char_20const__2c_20____29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
invoke_ii(39, $2 | 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) != 1) {
HEAP32[$3 + 12 >> 2] = $1;
InvertibleStringArray__vSetAsArrayH_28char_20const__2c_20void__29($2, $0, $1);
__stack_pointer = $3 + 16 | 0;
return $2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($2);
__resumeException($0 | 0);
abort();
}
function InvertibleStringArray__NewInvertibleArrayA_28short_2c_20short_2c_20____29($0, $1, $2) {
var $3 = 0, $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
invoke_iii(37, $3 | 0, $0 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
HEAP32[$4 + 12 >> 2] = $2;
InvertibleStringArray__vSetAsArrayA_28short_2c_20void__29($3, $1, $2);
__stack_pointer = $4 + 16 | 0;
return $3;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function CopyNonmanualMovementArray_28NonmanualMovement___29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(47106, $1);
}
$3 = operator_20new_5b_5d_28unsigned_20long_29(32);
while (1) {
if (($2 | 0) != 8) {
$4 = $2 << 2;
$5 = HEAP32[$4 + $0 >> 2];
if ($5) {
NonmanualMovement__CopyNonmanualMovement_28_29_20const($5);
}
HEAP32[$3 + $4 >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
__stack_pointer = $1 + 16 | 0;
return $3;
}
function HashAny_char_20const__2c_20Gesture____deleteData_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
$3 = HEAP32[$1 + 4 >> 2];
$4 = HEAP32[$0 + 20 >> 2];
if (($3 | 0) != ($4 | 0)) {
if ($3) {
operator_20delete_28void__29(Gesture___Gesture_28_29($3));
$4 = HEAP32[$0 + 20 >> 2];
}
HEAP32[$1 + 4 >> 2] = $4;
}
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function XMLCellIterator__next_28_29($0) {
var $1 = 0, $2 = 0;
label$1: {
$1 = HEAP32[$0 + 4 >> 2];
if (!$1) {
break label$1;
}
$2 = HEAP32[$0 >> 2];
while (1) {
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
break label$1;
}
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const($1, $2);
$2 = HEAP32[$0 >> 2] + 1 | 0;
HEAP32[$0 >> 2] = $2;
if (strcmp(HEAP32[$0 + 8 >> 2], HEAP32[$1 >> 2])) {
$1 = HEAP32[$0 + 4 >> 2];
continue;
}
break;
}
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
return 1;
}
HEAP32[$0 + 16 >> 2] = 0;
return 0;
}
function frexp($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
wasm2js_scratch_store_f64(+$0);
$2 = wasm2js_scratch_load_i32(1) | 0;
$3 = wasm2js_scratch_load_i32(0) | 0;
$4 = $2;
$2 = $2 >>> 20 & 2047;
if (($2 | 0) != 2047) {
if (!$2) {
if ($0 == 0) {
$2 = 0;
} else {
$0 = frexp($0 * 0x10000000000000000, $1);
$2 = HEAP32[$1 >> 2] + -64 | 0;
}
HEAP32[$1 >> 2] = $2;
return $0;
}
HEAP32[$1 >> 2] = $2 - 1022;
$2 = $3;
wasm2js_scratch_store_i32(0, $2 | 0);
$2 = $4 & -2146435073 | 1071644672;
wasm2js_scratch_store_i32(1, $2 | 0);
$0 = +wasm2js_scratch_load_f64();
}
return $0;
}
function AtomicTimedMorph__CalcTiming_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0);
if ($1 < Math_fround(0)) {
HEAP32[$0 + 12 >> 2] = -1082130432;
HEAP32[$0 + 16 >> 2] = -1082130432;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return;
}
$2 = HEAPF32[$0 + 4 >> 2];
HEAPF32[$0 + 4 >> 2] = $1;
$1 = Math_fround($1 - $2);
HEAPF32[$0 + 8 >> 2] = $1 + HEAPF32[$0 + 8 >> 2];
$2 = HEAPF32[$0 + 12 >> 2];
if ($2 >= Math_fround(0)) {
HEAPF32[$0 + 12 >> 2] = $1 + $2;
}
$2 = HEAPF32[$0 + 16 >> 2];
if ($2 >= Math_fround(0)) {
HEAPF32[$0 + 16 >> 2] = $1 + $2;
}
}
function locking_putc($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = HEAP32[$1 + 76 >> 2];
HEAP32[$1 + 76 >> 2] = $2 ? $2 : 1073741823;
if ($2) {
__lockfile($1);
}
$2 = $1 + 76 | 0;
label$2: {
label$3: {
$3 = $0 & 255;
if (($3 | 0) == HEAP32[$1 + 80 >> 2]) {
break label$3;
}
$4 = HEAP32[$1 + 20 >> 2];
if (($4 | 0) == HEAP32[$1 + 16 >> 2]) {
break label$3;
}
HEAP32[$1 + 20 >> 2] = $4 + 1;
HEAP8[$4 | 0] = $0;
break label$2;
}
$3 = __overflow($1, $3);
}
$1 = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = 0;
if ($1 & 1073741824) {
emscripten_futex_wake($2, 1);
}
return $3;
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____vector_base_28_29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$0 = std____2____vector_base_common_true_____vector_base_common_28_29($0);
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[19359] = 0;
HEAP32[$1 + 12 >> 2] = 0;
invoke_iiii(2, $0 + 8 | 0, $1 + 12 | 0, $1 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
__stack_pointer = $1 + 16 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____vector_base_28_29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$0 = std____2____vector_base_common_true_____vector_base_common_28_29($0);
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[19359] = 0;
HEAP32[$1 + 12 >> 2] = 0;
invoke_iiii(3, $0 + 8 | 0, $1 + 12 | 0, $1 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
__stack_pointer = $1 + 16 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function normal_checkPiTarget($0, $1, $2) {
var $3 = 0, $4 = 0;
HEAP32[$2 >> 2] = 11;
$3 = 1;
label$1: {
if (($1 - $0 | 0) != 3) {
break label$1;
}
$1 = HEAP8[$0 | 0];
if (($1 | 0) == 120) {
$4 = 0;
} else {
if (($1 | 0) != 88) {
break label$1;
}
$4 = 1;
}
$1 = HEAP8[$0 + 1 | 0];
if (($1 | 0) != 109) {
if (($1 | 0) != 77) {
break label$1;
}
$4 = 1;
}
$0 = HEAP8[$0 + 2 | 0];
if (($0 | 0) != 108) {
if (($0 | 0) != 76) {
break label$1;
}
return 0;
}
$3 = 0;
if ($4) {
break label$1;
}
HEAP32[$2 >> 2] = 12;
$3 = 1;
}
return $3;
}
function OneHandStuff__setHandOrientation_28Direction3_2c_20Direction2_29($0, $1, $2) {
var $3 = 0;
$3 = Direction3__defined_28_29_20const($1);
if ($3) {
Direction3__operator__28Direction3_20const__29($0, $1);
}
label$2: {
label$3: {
if (Direction2__defined_28_29_20const($2)) {
Direction2__operator__28Direction2_20const__29($0 + 12 | 0, $2);
break label$3;
}
if (!$3) {
break label$2;
}
}
if (!Direction3__defined_28_29_20const($0)) {
break label$2;
}
if (!Direction2__defined_28_29_20const($0 + 12 | 0)) {
break label$2;
}
OneHandStuff__calcHandRot_28_29($0);
}
}
function little2_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$0 = HEAP32[$1 >> 2];
$2 = ($2 - $0 | 0) > ($4 - HEAP32[$3 >> 2] | 0) ? ((HEAPU8[$2 - 1 | 0] & 248) == 216 ? -2 : 0) + $2 | 0 : $2;
while (1) {
label$3: {
if (($2 | 0) == ($0 | 0)) {
break label$3;
}
$5 = HEAP32[$3 >> 2];
if (($5 | 0) == ($4 | 0)) {
break label$3;
}
$0 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
HEAP32[$3 >> 2] = $5 + 2;
HEAP16[$5 >> 1] = $0;
$0 = HEAP32[$1 >> 2] + 2 | 0;
HEAP32[$1 >> 2] = $0;
continue;
}
break;
}
}
function RepeatMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
$4 = HEAPF32[$0 + 44 >> 2];
$5 = HEAPF32[$0 + 40 >> 2];
BasicMovement__setDuration_28float_2c_20bool_29($0, $1, $2);
$1 = Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]) / Math_fround($5 - $4));
$3 = HEAP32[$0 + 696 >> 2];
if ($3) {
BasicMovement__scaleDuration_28float_2c_20bool_29($3, $1, $2);
}
$0 = HEAP32[$0 + 700 >> 2];
if ($0) {
BasicMovement__scaleDuration_28float_2c_20bool_29($0, $1, $2);
}
}
function FingerBaseJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
$3 = indentString_28int_29($3);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 8 | 0, $2, $3, $4);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 20 | 0, $2, $3, $4);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 32 | 0, $2, $3, $4);
dlfree($3);
}
function ThumbBaseJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
$3 = indentString_28int_29($3);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 8 | 0, $2, $3, $4);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 20 | 0, $2, $3, $4);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 32 | 0, $2, $3, $4);
dlfree($3);
}
function SiGMLHandshape__defined_28_29_20const($0) {
var $1 = 0;
$1 = 1;
label$1: {
if (HEAP32[$0 >> 2]) {
break label$1;
}
if (FingerBending__defined_28_29_20const($0 + 12 | 0)) {
break label$1;
}
if (ThumbBending__defined_28_29_20const($0 + 160 | 0)) {
break label$1;
}
if (FingerBending__defined_28_29_20const($0 + 96 | 0)) {
break label$1;
}
if (FingerBending__defined_28_29_20const($0 + 112 | 0)) {
break label$1;
}
if (FingerBending__defined_28_29_20const($0 + 128 | 0)) {
break label$1;
}
$1 = FingerBending__defined_28_29_20const($0 + 144 | 0);
}
return $1;
}
function Segment___Segment_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 16 >> 2];
if ($1) {
operator_20delete_28void__29(IFS_spec___IFS_spec_28_29($1));
HEAP32[$0 + 16 >> 2] = 0;
}
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = -1;
$1 = HEAP32[17086] - 1 | 0;
HEAP32[17086] = $1;
label$3: {
if ($1) {
break label$3;
}
$1 = HEAP32[17085];
if (!$1) {
break label$3;
}
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($1));
HEAP32[17085] = 0;
}
return $0;
}
function dtdCreate($0) {
var $1 = 0;
$1 = FUNCTION_TABLE[HEAP32[$0 >> 2]](168) | 0;
if ($1) {
poolInit($1 + 80 | 0, $0);
poolInit($1 + 104 | 0, $0);
hashTableInit($1, $0);
hashTableInit($1 + 20 | 0, $0);
hashTableInit($1 + 40 | 0, $0);
hashTableInit($1 + 60 | 0, $0);
HEAP8[$1 + 140 | 0] = 0;
HEAP32[$1 + 132 >> 2] = 0;
HEAP32[$1 + 136 >> 2] = 0;
HEAP32[$1 + 144 >> 2] = 0;
HEAP32[$1 + 148 >> 2] = 0;
HEAP32[$1 + 152 >> 2] = 0;
HEAP32[$1 + 156 >> 2] = 0;
HEAP32[$1 + 160 >> 2] = 0;
HEAP32[$1 + 164 >> 2] = 0;
HEAP8[$1 + 130 | 0] = 0;
HEAP16[$1 + 128 >> 1] = 1;
}
return $1;
}
function StringToMorphTimeType_28char__2c_20MorphTime__2c_20float__29($0, $1, $2) {
var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if (!$0) {
HEAP32[$1 >> 2] = 2;
HEAP32[$2 >> 2] = 0;
return;
}
label$2: {
if ((strlen($0) | 0) != 1) {
break label$2;
}
$3 = HEAPU8[$0 | 0];
if (($3 - 58 & 255) >>> 0 > 245) {
break label$2;
}
wasm2js_i32$0 = $1, wasm2js_i32$1 = CharToMorphTimeType_28char_29($3 << 24 >> 24), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
HEAP32[$2 >> 2] = 0;
return;
}
HEAP32[$1 >> 2] = 0;
checkPosNum_28char_20const__2c_20char__2c_20float__29(6137, $0, $2);
}
function HanimAvatar__SetFaceSite_28SiteID_2c_20short_2c_20Vector_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0);
$4 = __stack_pointer - 32 | 0;
__stack_pointer = $4;
HEAP32[$4 + 24 >> 2] = HEAP32[$1 >> 2];
$1 = HEAP32[HEAP32[$0 + 72 >> 2] + 8 >> 2];
DynamicArray1_Vector___getElement_28int_29_20const($4 + 8 | 0, HEAP32[$0 + 488 >> 2], $2);
$5 = HEAPF32[$0 + 380 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 24 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $4 + 4 | 0, $1, $4 + 8 | 0, $5, $3);
__stack_pointer = $4 + 32 | 0;
}
function notation1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 17;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
case 0:
break label$1;
case 3:
break label$3;
default:
break label$2;
}
}
if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49814) | 0) {
HEAP32[$0 >> 2] = 804;
return 17;
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49821) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 805;
return 17;
}
common($0);
$5 = -1;
}
return $5 | 0;
}
function Quaternion__lengthsq_28_29_20const($0) {
var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
$1 = Quaternion__x_28_29_20const($0);
$2 = Quaternion__x_28_29_20const($0);
$3 = Quaternion__y_28_29_20const($0);
$4 = Quaternion__y_28_29_20const($0);
$5 = Quaternion__z_28_29_20const($0);
$6 = Quaternion__z_28_29_20const($0);
return Math_fround(Math_fround(Quaternion__w_28_29_20const($0) * Quaternion__w_28_29_20const($0)) + Math_fround(Math_fround($5 * $6) + Math_fround(Math_fround($1 * $2) + Math_fround($3 * $4))));
}
function HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
var $7 = 0;
$7 = __stack_pointer - 32 | 0;
__stack_pointer = $7;
$1 = HEAP32[$1 >> 2];
HEAP32[$7 + 12 >> 2] = $1;
HEAP32[$7 + 24 >> 2] = $1;
$2 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_29($0, $7 + 12 | 0, $2, $3, $4);
HEAP32[$7 + 8 >> 2] = $1;
HEAP32[$7 + 16 >> 2] = $1;
HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__2c_20float_29($0, $7 + 8 | 0, $5, $6);
__stack_pointer = $7 + 32 | 0;
return $2;
}
function normal_scanHexCharRef($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = 0;
label$1: {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
label$2: {
if ((HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0] & 254) != 24) {
break label$2;
}
while (1) {
$5 = $1;
$1 = $1 + 1 | 0;
if (($2 | 0) == ($1 | 0)) {
break label$1;
}
$4 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
if ($4 - 24 >>> 0 < 2) {
continue;
}
break;
}
if (($4 | 0) != 18) {
break label$2;
}
$1 = $5 + 2 | 0;
$6 = 10;
}
HEAP32[$3 >> 2] = $1;
return $6;
}
return -1;
}
function dlrealloc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if (!$0) {
return dlmalloc($1) | 0;
}
if ($1 >>> 0 >= 4294967232) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
return 0;
}
$2 = try_realloc_chunk($0 - 8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
if ($2) {
return $2 + 8 | 0;
}
$2 = dlmalloc($1);
if (!$2) {
return 0;
}
$3 = HEAP32[$0 - 4 >> 2];
$3 = ($3 & 3 ? -4 : -8) + ($3 & -8) | 0;
__memcpy($2, $0, $1 >>> 0 > $3 >>> 0 ? $3 : $1);
dlfree($0);
return $2 | 0;
}
function VectorController2__set_reference_28Vector_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = $0 + 16 | 0;
Vector__setFrom_28Vector_20const__29($3, $1);
$1 = Vector__Vector_28Vector_20const__29($2, $3);
Vector__setSubtract_28Vector_20const__29($1, $0 + 28 | 0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Math_max(Vector__length_28_29_20const($1), Math_fround(9999999747378752e-20))), 
HEAPF32[wasm2js_i32$0 + 8 >> 2] = wasm2js_f32$0;
__stack_pointer = $2 + 16 | 0;
}
function Joint__addChildJoint_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
$2 = HEAP32[$0 + 12 >> 2];
if (!$2) {
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_iii(139, $3 | 0, 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 12 >> 2] = $2;
}
DynamicArrayP_Joint___appendElement_28Joint__29($2, $1);
return;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($2 | 0);
abort();
}
function DynamicArray1_Vector___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$6 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($5 | 0) == ($6 | 0)) {
__stack_pointer = $4 + 16 | 0;
} else {
$2 = Vector__Vector_28_29($4);
$3 = HEAP32[$2 >> 2];
$7 = HEAP32[$2 + 4 >> 2];
$8 = $3;
$3 = HEAP32[$0 >> 2] + Math_imul($1 + $5 | 0, 12) | 0;
HEAP32[$3 >> 2] = $8;
HEAP32[$3 + 4 >> 2] = $7;
HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$5 = $5 + 1 | 0;
continue;
}
break;
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
HEAP32[19359] = 0;
$0 = invoke_iiii(391, $0 | 0, $1 + 8 | 0, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
__stack_pointer = $1 + 16 | 0;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function ParMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = HEAP16[$0 + 540 >> 1];
$5 = ($3 | 0) > 0 ? $3 : 0;
$6 = $0 + 528 | 0;
while (1) {
if (($4 | 0) == ($5 | 0)) {
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
} else {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($6, $4);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $1, $2);
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
function HanimAnimationRecord__reset_28float_29($0, $1) {
var $2 = 0, $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAPF64[$3 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47377, $3);
HEAPF32[$0 + 56 >> 2] = $1;
$2 = HEAP32[$0 + 100 >> 2];
if ($2) {
TwoArmAnimator__reset_28TwoHConcretePosture__2c_20float_29($2, HEAP32[17612], $1);
}
$2 = HEAP32[$0 + 104 >> 2];
if ($2) {
FaceAnimator__reset_28float_29($2, HEAPF32[$0 + 56 >> 2]);
}
HEAP32[$0 + 116 >> 2] = 0;
HEAP32[$0 + 108 >> 2] = 0;
HEAPF32[$0 + 60 >> 2] = HEAPF32[$0 + 56 >> 2];
__stack_pointer = $3 + 16 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___resize_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1, $2) {
var $3 = 0;
$3 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0);
if ($3 >>> 0 < $1 >>> 0) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____append_28unsigned_20long_2c_20SSPRSet__20const__29($0, $1 - $3 | 0, $2);
return;
}
if ($1 >>> 0 < $3 >>> 0) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____destruct_at_end_28SSPRSet___29($0, HEAP32[$0 >> 2] + ($1 << 2) | 0);
}
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___resize_28unsigned_20long_2c_20SSMorph__20const__29($0, $1, $2) {
var $3 = 0;
$3 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0);
if ($3 >>> 0 < $1 >>> 0) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____append_28unsigned_20long_2c_20SSMorph__20const__29($0, $1 - $3 | 0, $2);
return;
}
if ($1 >>> 0 < $3 >>> 0) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, HEAP32[$0 >> 2] + ($1 << 2) | 0);
}
}
function ThumbBaseJointRotation__interpolate_28ThumbBaseJointRotation_20const__2c_20ThumbBaseJointRotation_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $4 = Math_fround(0);
$4 = Math_fround(Math_fround(1) - $3);
HEAPF32[$0 + 44 >> 2] = Math_fround(HEAPF32[$1 + 44 >> 2] * $4) + Math_fround(HEAPF32[$2 + 44 >> 2] * $3);
HEAPF32[$0 + 48 >> 2] = Math_fround(HEAPF32[$1 + 48 >> 2] * $4) + Math_fround(HEAPF32[$2 + 48 >> 2] * $3);
HEAPF32[$0 + 52 >> 2] = Math_fround(HEAPF32[$1 + 52 >> 2] * $4) + Math_fround(HEAPF32[$2 + 52 >> 2] * $3);
}
function BasicMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = HEAPF32[$0 + 40 >> 2];
label$1: {
if ($2) {
if ($3 == Math_fround(0)) {
HEAP32[$0 + 44 >> 2] = 0;
break label$1;
}
HEAPF32[$0 + 44 >> 2] = Math_fround($1 / $3) * HEAPF32[$0 + 44 >> 2];
break label$1;
}
$4 = HEAPF32[$0 + 44 >> 2];
if (Math_fround($3 - $4) > $1) {
HEAP32[$0 + 44 >> 2] = 0;
break label$1;
}
HEAPF32[$0 + 44 >> 2] = $4 + Math_fround($1 - $3);
}
HEAPF32[$0 + 40 >> 2] = $1;
}
function MakeDigits_28char_20const__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$0) {
break label$1;
}
$1 = HEAPU8[$0 | 0];
if (!$1) {
break label$1;
}
while (1) {
if (!$1) {
$4 = $3;
break label$1;
}
if (($1 - 49 & 255) >>> 0 < 5) {
$3 = 1 << $1 - 49 | $3;
$1 = HEAPU8[$0 + 1 | 0];
$0 = $0 + 1 | 0;
continue;
}
break;
}
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(45916, $2);
}
__stack_pointer = $2 + 16 | 0;
return $4 << 16 >> 16;
}
function FixOneWrist_28OneHConcretePosture_20const__2c_20OneHConcretePosture__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 48 | 0;
__stack_pointer = $2;
$3 = Vector__Vector_28_29($2 + 32 | 0);
OneHConcretePosture__computeWristLoc_28Vector__29_20const($0, $3);
$0 = Vector__Vector_28_29($2 + 16 | 0);
OneHConcretePosture__computeWristLoc_28Vector__29_20const($1, $0);
$4 = Vector__Vector_28_29($2);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($4, $3, $0);
OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($1, $4);
__stack_pointer = $2 + 48 | 0;
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20______vector_base_28_29($0) {
if (HEAP32[$0 >> 2]) {
std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___clear_28_29($0);
std____2__allocator_traits_std____2__allocator_SSPRSet___20___deallocate_28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20unsigned_20long_29(std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0));
}
return $0;
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20______vector_base_28_29($0) {
if (HEAP32[$0 >> 2]) {
std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___clear_28_29($0);
std____2__allocator_traits_std____2__allocator_SSMorph___20___deallocate_28std____2__allocator_SSMorph____2c_20SSMorph___2c_20unsigned_20long_29(std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0));
}
return $0;
}
function Joint__addSite_28Site__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
$2 = HEAP32[$0 + 16 >> 2];
if (!$2) {
$3 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$2 = invoke_iii(140, $3 | 0, 0) | 0;
$4 = HEAP32[19359];
HEAP32[19359] = 0;
if (($4 | 0) == 1) {
break label$1;
}
HEAP32[$0 + 16 >> 2] = $2;
}
DynamicArrayP_Site___appendElement_28Site__29($2, $1);
return;
}
$2 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($2 | 0);
abort();
}
function Direction2__Between_28Direction2_2c_20Direction2_2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0);
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$5 = Math_fround(Math_fround(1) - $3);
$2 = Direction2__Direction2_28float_2c_20float_29($4 + 8 | 0, Math_fround(Math_fround(HEAPF32[$1 >> 2] * $5) + Math_fround(HEAPF32[$2 >> 2] * $3)), Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $5) + Math_fround(HEAPF32[$2 + 4 >> 2] * $3)));
Direction2__Direction2_28Direction2_20const__29($0, Direction2__defined_28_29_20const($2) ? $2 : $1);
__stack_pointer = $4 + 16 | 0;
}
function normalizeLines($0) {
var $1 = 0, $2 = 0;
while (1) {
label$2: {
$1 = HEAPU8[$0 | 0];
if ($1) {
if (($1 | 0) != 13) {
break label$2;
}
$2 = $0;
while (1) {
label$5: {
if (($1 | 0) == 13) {
HEAP8[$2 | 0] = 10;
$0 = HEAPU8[$0 + 1 | 0] == 10 ? $0 + 2 | 0 : $0 + 1 | 0;
break label$5;
}
HEAP8[$2 | 0] = $1;
$0 = $0 + 1 | 0;
}
$2 = $2 + 1 | 0;
$1 = HEAPU8[$0 | 0];
if ($1) {
continue;
}
break;
}
HEAP8[$2 | 0] = 0;
}
return;
}
$0 = $0 + 1 | 0;
continue;
}
}
function Vector__angleWith_28Vector_20const__2c_20Vector_20const__29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0);
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Vector__dotProduct_28Vector_20const__29_20const($0, $1);
Vector__Vector_28_29($3 + 16 | 0);
Vector__Vector_28Vector_20const__29_1($3, $0);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($3 + 16 | 0, $3, $1);
$4 = atan2_28float_2c_20float_29(Vector__tripleProduct_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2), $4);
__stack_pointer = $3 + 32 | 0;
return $4;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___lookupInCell_28int_2c_20SiGML_Element_29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_SiGML_Element___eqkey_28SiGML_Element_2c_20SiGML_Element_29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = strlen($1);
$3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = $2;
wasm2js_i32$0 = $0, wasm2js_i32$1 = __memcpy(std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($3), $1, $2 + 1 | 0), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
return $0 | 0;
}
function Trajectory__Trajectory_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$0 = TrajectoryParams__TrajectoryParams_28ControllerParams_20const__2c_20float_2c_20float_2c_20float_29($0, ControllerParams__ControllerParams_28float_2c_20float_2c_20float_2c_20float_29($1, Math_fround(1 / +HEAP32[15355]), Math_fround(0), Math_fround(0), Math_fround(0)), Math_fround(.0010000000474974513), Math_fround(.9900000095367432), Math_fround(0));
HEAP32[$0 + 28 >> 2] = 0;
Trajectory__allocateData_28_29($0);
__stack_pointer = $1 + 16 | 0;
return $0 | 0;
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_________split_buffer_28_29($0) {
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______clear_28_29($0);
if (HEAP32[$0 >> 2]) {
std____2__allocator_traits_std____2__allocator_SSPRSet___20___deallocate_28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20unsigned_20long_29(std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________alloc_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______capacity_28_29_20const($0));
}
return $0;
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_________split_buffer_28_29($0) {
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______clear_28_29($0);
if (HEAP32[$0 >> 2]) {
std____2__allocator_traits_std____2__allocator_SSMorph___20___deallocate_28std____2__allocator_SSMorph____2c_20SSMorph___2c_20unsigned_20long_29(std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________alloc_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______capacity_28_29_20const($0));
}
return $0;
}
function WristMovement__WristMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 3, $1);
HEAP32[$0 + 544 >> 2] = 0;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 + 540 >> 2] = 0;
HEAP32[$0 + 528 >> 2] = 0;
HEAP32[$0 >> 2] = 62076;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 548 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function GetSmMdLg_28XMLCell__2c_20float__29($0, $1) {
label$1: {
if (!$1) {
break label$1;
}
InitSmMdLg_28float__29($1);
if (!$0) {
break label$1;
}
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1 + 4 | 0, 6657);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1 + 8 | 0, 6661);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1 + 16 | 0, 7485);
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1 + 12 | 0, 6521);
HEAPF32[$1 >> 2] = HEAPF32[$1 + 12 >> 2];
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1, 7538);
}
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet________compressed_pair_std__nullptr_t_2c_20std____2__allocator_SSPRSet_____28std__nullptr_t___2c_20std____2__allocator_SSPRSet____29($0, $1, $2) {
$0 = std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
std____2____compressed_pair_elem_std____2__allocator_SSPRSet____2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SSPRSet____2c_20void__28std____2__allocator_SSPRSet____29($0 + 4 | 0, $2);
return $0;
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph________compressed_pair_std__nullptr_t_2c_20std____2__allocator_SSMorph_____28std__nullptr_t___2c_20std____2__allocator_SSMorph____29($0, $1, $2) {
$0 = std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
std____2____compressed_pair_elem_std____2__allocator_SSMorph____2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SSMorph____2c_20void__28std____2__allocator_SSMorph____29($0 + 4 | 0, $2);
return $0;
}
function HashAny_char_20const__2c_20SiteID___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2, $3) {
var $4 = 0;
label$1: {
label$2: {
$2 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
if (HEAP16[$2 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$2 = HEAP32[$2 >> 2];
if (!$2) {
break label$2;
}
$4 = $2 + 4 | 0;
if (KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($3, HEAP32[$2 >> 2])) {
break label$1;
}
$2 = $2 + 8 | 0;
continue;
}
}
$4 = $1 + 20 | 0;
}
$2 = $4;
HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
}
function HanimAnimationRecord__openOutput_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$1 = 1;
$3 = HEAP32[$0 + 12 >> 2];
label$1: {
if (!$3) {
break label$1;
}
$4 = HEAP32[$0 + 20 >> 2];
if (($4 | 0) == 5) {
break label$1;
}
$1 = fopen($3, ($4 | 0) == 1 ? 10856 : 1780);
HEAP32[$0 + 96 >> 2] = $1;
if (!$1) {
HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
eprintf_28char_20const__2c_20____29(13547, $2);
$1 = HEAP32[$0 + 96 >> 2];
}
$1 = ($1 | 0) != 0;
}
__stack_pointer = $2 + 16 | 0;
return $1;
}
function QuaternionController__set_perception_28Quaternion_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$1 = Quaternion__Quaternion_28Quaternion_20const__29($2, $1);
Quaternion__setNonNegativePhase_28_29($1);
if (HEAP32[$0 + 448 >> 2] != 1) {
$3 = HEAP32[$1 + 4 >> 2];
$4 = HEAP32[$1 >> 2];
HEAP32[$0 + 532 >> 2] = $4;
HEAP32[$0 + 536 >> 2] = $3;
$4 = HEAP32[$1 + 12 >> 2];
$3 = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 540 >> 2] = $3;
HEAP32[$0 + 544 >> 2] = $4;
}
__stack_pointer = $2 + 16 | 0;
}
function ParMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
BasicMovement__setDuration_28float_2c_20bool_29($0, $1, $2);
$4 = $0 + 528 | 0;
$1 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
$5 = HEAP16[$0 + 540 >> 1];
$0 = 0;
while (1) {
$3 = $0 << 16 >> 16;
if (($5 | 0) > ($3 | 0)) {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($4, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 64 >> 2]]($3, $1, $2);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function HashAny_SiteID_20const_2c_20Site____addItem_28SiteID_2c_20Site__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$1 = HEAP32[$1 >> 2];
HEAP32[$3 + 24 >> 2] = $1;
$4 = HEAP32[$0 + 4 >> 2];
HEAP32[$3 + 12 >> 2] = $1;
$4 = KeyOps_SiteID_20const___hashFunction_28SiteID_2c_20int_29($3 + 12 | 0, $4);
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 16 >> 2] = $1;
HashAny_SiteID_20const_2c_20Site____insertString_28int_2c_20SiteID_2c_20Site__29($0, $4, $3 + 8 | 0, $2);
__stack_pointer = $3 + 32 | 0;
}
function MakeCircle_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5, $6) {
var $7 = Math_fround(0);
$7 = Math_fround(Math_fround(Math_fround($0 + $1) - Math_fround(Math_fround($2 * $2) / Math_fround($0 - $1))) * Math_fround(.5));
HEAPF32[$3 >> 2] = $7;
HEAPF32[$4 >> 2] = $0 - $7;
HEAPF32[$6 >> 2] = Math_fround($1 - HEAPF32[$3 >> 2]) / $2;
$2 = atan2_28float_2c_20float_29($2, Math_fround($1 - HEAPF32[$3 >> 2]));
HEAPF32[$5 >> 2] = $2;
if (HEAPF32[$4 >> 2] < Math_fround(0)) {
HEAPF32[$5 >> 2] = HEAPF32[16976] - $2;
}
}
function strlen($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = $0;
label$1: {
if ($1 & 3) {
while (1) {
if (!HEAPU8[$1 | 0]) {
break label$1;
}
$1 = $1 + 1 | 0;
if ($1 & 3) {
continue;
}
break;
}
}
while (1) {
$2 = $1;
$1 = $1 + 4 | 0;
$3 = HEAP32[$2 >> 2];
if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
continue;
}
break;
}
if (!($3 & 255)) {
return $2 - $0 | 0;
}
while (1) {
$3 = HEAPU8[$2 + 1 | 0];
$1 = $2 + 1 | 0;
$2 = $1;
if ($3) {
continue;
}
break;
}
}
return $1 - $0 | 0;
}
function TwoHConcretePostureChange__fixWrists_28_29($0) {
if (PostureChangeFlags__holdWrist_28_29_20const($0 + 448 | 0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(35617, 0);
}
FixOneWrist_28OneHConcretePosture_20const__2c_20OneHConcretePosture__29($0, $0 + 224 | 0);
}
if (PostureChangeFlags__holdWrist_28_29_20const($0 + 450 | 0)) {
if (HEAPU8[67570]) {
LogTime_28_29();
eprintf_28char_20const__2c_20____29(35685, 0);
}
FixOneWrist_28OneHConcretePosture_20const__2c_20OneHConcretePosture__29($0 + 112 | 0, $0 + 336 | 0);
}
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____destruct_at_end_28SSPRSet___29($0, $1) {
var $2 = 0;
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____invalidate_iterators_past_28SSPRSet___29($0, $1);
$2 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0);
std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____destruct_at_end_28SSPRSet___29($0, $1);
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, $1) {
var $2 = 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_iterators_past_28SSMorph___29($0, $1);
$2 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0);
std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, $1);
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $1) {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
}
function OneHConcretePosture__CalcHandSiteChange_28OneHConcretePosture_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = $1 + 40 | 0;
$1 = Vector__Vector_28Vector_20const__29($3 + 16 | 0, $1 + 16 | 0);
Quaternion__rotateVector_28Vector__29_20const($4, $1);
$4 = $0 + 40 | 0;
$0 = Vector__Vector_28Vector_20const__29($3, $0 + 16 | 0);
Quaternion__rotateVector_28Vector__29_20const($4, $0);
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($2, $0, $1);
__stack_pointer = $3 + 32 | 0;
}
function HandJointRotations___HandJointRotations_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
label$1: {
if (!HEAPU8[$0 + 60 | 0]) {
break label$1;
}
label$2: while (1) {
$1 = 0;
if (($2 | 0) == 5) {
break label$1;
}
while (1) {
if (($1 | 0) == 3) {
$2 = $2 + 1 | 0;
continue label$2;
}
$4 = (Math_imul($2, 12) + $0 | 0) + ($1 << 2) | 0;
$3 = HEAP32[$4 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 4 >> 2]]($3);
HEAP32[$4 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
return $0;
}
function HashAny_char_20const__2c_20AbstractTimedMorph____lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function AtomicTimedMorph__operator__28AtomicTimedMorph_20const__29($0, $1) {
var $2 = 0, $3 = 0;
AbstractTimedMorph__operator__28AbstractTimedMorph_20const__29($0, $1);
HEAP16[$0 + 48 >> 1] = HEAPU16[$1 + 48 >> 1];
$2 = $1;
$1 = HEAP32[$2 + 40 >> 2];
$3 = HEAP32[$2 + 44 >> 2];
HEAP32[$0 + 40 >> 2] = $1;
HEAP32[$0 + 44 >> 2] = $3;
$1 = HEAP32[$2 + 36 >> 2];
$3 = HEAP32[$2 + 32 >> 2];
HEAP32[$0 + 32 >> 2] = $3;
HEAP32[$0 + 36 >> 2] = $1;
$3 = HEAP32[$2 + 28 >> 2];
$1 = HEAP32[$2 + 24 >> 2];
HEAP32[$0 + 24 >> 2] = $1;
HEAP32[$0 + 28 >> 2] = $3;
return $0;
}
function operator___28Handshape_20const__2c_20Handshape_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = 0;
label$1: {
if (!operator___28SiGMLHandshape_20const__2c_20SiGMLHandshape_20const__29($0, $1)) {
break label$1;
}
$3 = HEAP32[$0 + 220 >> 2];
$4 = HEAP32[$1 + 220 >> 2];
$2 = 1;
if (!($3 | $4)) {
break label$1;
}
$2 = 0;
if ((!$4 | 0) == (($3 | 0) != 0 | 0)) {
break label$1;
}
$2 = operator___28SiGMLHandshape_20const__2c_20SiGMLHandshape_20const__29($3, $4) & HEAPF32[$0 + 224 >> 2] == HEAPF32[$1 + 224 >> 2];
}
return $2;
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
__cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
return;
}
$0 = HEAP32[$0 + 8 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function HashAny_char_20const__2c_20char_20const____lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function fputc($0, $1) {
var $2 = 0, $3 = 0;
label$1: {
$2 = HEAP32[$1 + 76 >> 2];
if (($2 | 0) >= 0) {
if (!$2) {
break label$1;
}
if (HEAP32[__get_tp() + 16 >> 2] != ($2 & -1073741825)) {
break label$1;
}
}
label$3: {
$2 = $0 & 255;
if (($2 | 0) == HEAP32[$1 + 80 >> 2]) {
break label$3;
}
$3 = HEAP32[$1 + 20 >> 2];
if (($3 | 0) == HEAP32[$1 + 16 >> 2]) {
break label$3;
}
HEAP32[$1 + 20 >> 2] = $3 + 1;
HEAP8[$3 | 0] = $0;
return $2;
}
return __overflow($1, $2);
}
return locking_putc($0, $1);
}
function SiGML__convertBodySide_28char_20const__2c_20Mirroring_2c_20bool_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$0 = SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29(HEAP32[18214], $0);
if ($0) {
$0 = AbsoluteSide_28RelativeBodySide_2c_20bool_29($0, $2);
$1 = HEAPU16[$1 >> 1];
HEAP16[$3 + 6 >> 1] = $1;
HEAP16[$3 + 8 >> 1] = $1;
$0 = MirrorBodySide_28AbsoluteBodySide_2c_20Mirroring_29($0, $3 + 6 | 0);
} else {
$0 = 0;
}
__stack_pointer = $3 + 16 | 0;
return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $1) {
return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}
function HandJointRotations__setFrom_28HandJointRotations_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
label$1: while (1) {
label$2: {
$2 = 0;
if (($3 | 0) == 5) {
break label$2;
}
while (1) if (($2 | 0) == 3) {
$3 = $3 + 1 | 0;
continue label$1;
} else {
$4 = $2 << 2;
$5 = Math_imul($3, 12);
CopyJointRotation_28JointRotation__2c_20JointRotation_20const__29(HEAP32[$4 + ($5 + $0 | 0) >> 2], HEAP32[($1 + $5 | 0) + $4 >> 2]);
$2 = $2 + 1 | 0;
continue;
}
}
break;
}
}
function HashAny_char_20const__2c_20Gesture____lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___push_back_28SSPRSet__20const__29($0, $1) {
if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29($0) >> 2]) {
void_20std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____construct_one_at_end_SSPRSet__20const___28SSPRSet__20const__29($0, $1);
return;
}
void_20std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____push_back_slow_path_SSPRSet__20const___28SSPRSet__20const__29($0, $1);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0);
}
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0);
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29(std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1)) | 0;
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29(std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1)) | 0;
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
__cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
}
}
function std____2__ios_base__failure__failure_28char_20const__2c_20std____2__error_code_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = HEAP32[$2 + 4 >> 2];
$2 = HEAP32[$2 >> 2];
HEAP32[$3 >> 2] = $2;
HEAP32[$3 + 4 >> 2] = $4;
HEAP32[$3 + 8 >> 2] = $2;
HEAP32[$3 + 12 >> 2] = $4;
$0 = std____2__system_error__system_error_28std____2__error_code_2c_20char_20const__29($0, $3, $1);
HEAP32[$0 >> 2] = 56008;
__stack_pointer = $3 + 16 | 0;
return $0 | 0;
}
function HashAny_char_20const__2c_20int___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function copyString_28char_20const__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
label$1: {
if ($0) {
$2 = strlen($0) + 1 | 0;
$3 = dlmalloc($2);
if (!$3) {
break label$1;
}
$0 = strncpy($3, $0, $2);
} else {
$0 = 0;
}
__stack_pointer = $1 + 16 | 0;
return $0 | 0;
}
HEAP32[$1 >> 2] = $2;
eprintf_28char_20const__2c_20____29(39440, $1);
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 1) | 0, 59180, 0);
abort();
}
function totalTime_28DynamicArrayP_Gesture__20const__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = Math_fround(0);
label$1: {
if (!$0) {
break label$1;
}
$1 = HEAP32[$0 + 12 >> 2];
if (($1 | 0) <= 0) {
break label$1;
}
while (1) {
if (($1 | 0) <= ($2 | 0)) {
break label$1;
}
$1 = HEAP32[DynamicArrayP_Gesture___getElement_28int_29_20const($0, $2) + 44 >> 2];
$3 = Math_fround($3 + HEAPF32[($1 ? $1 + 40 | 0 : 68404) >> 2]);
$2 = $2 + 1 | 0;
$1 = HEAP32[$0 + 12 >> 2];
continue;
}
}
return Math_fround($3);
}
function Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
$3 = __stack_pointer - 48 | 0;
__stack_pointer = $3;
if ($1) {
$4 = Vector__x_28_29_20const($0);
$5 = Vector__y_28_29_20const($0);
$6 = Vector__z_28_29_20const($0);
HEAP32[$3 + 32 >> 2] = $2;
HEAPF64[$3 + 24 >> 3] = $5;
HEAP32[$3 + 16 >> 2] = $2;
HEAPF64[$3 + 40 >> 3] = $6;
HEAPF64[$3 + 8 >> 3] = $4;
HEAP32[$3 >> 2] = $2;
__small_fprintf($1, 8009, $3);
}
__stack_pointer = $3 + 48 | 0;
}
function WristMovement__WristMovement_28WristMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62076;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 548 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
WristMovement__operator__28WristMovement_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $1, $0);
__stack_pointer = $2 + 16 | 0;
return $3 ? $1 : $0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $0, $1);
__stack_pointer = $2 + 16 | 0;
return $3 ? $1 : $0;
}
function HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$1 = HEAP32[$1 >> 2];
HEAP32[$2 + 24 >> 2] = $1;
$3 = HEAP32[$0 + 4 >> 2];
HEAP32[$2 + 12 >> 2] = $1;
$3 = KeyOps_SiteID_20const___hashFunction_28SiteID_2c_20int_29($2 + 12 | 0, $3);
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$2 + 16 >> 2] = $1;
$1 = HashAny_SiteID_20const_2c_20Site____lookupInCell_28int_2c_20SiteID_29_20const($0, $3, $2 + 8 | 0);
__stack_pointer = $2 + 32 | 0;
return $1;
}
function FingerBending__print_28_IO_FILE__29_20const($0, $1) {
if ($1) {
if (!FingerBending__defined_28_29_20const($0)) {
fputs(14697, $1);
return;
}
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 12815, HEAPF32[$0 >> 2]);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 12755, HEAPF32[$0 + 4 >> 2]);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 12710, HEAPF32[$0 + 8 >> 2]);
printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($1, 6843, HEAPF32[$0 + 12 >> 2]);
}
}
function RepeatMovement__operator__28RepeatMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
$2 = HEAP32[$1 + 540 >> 2];
$3 = HEAP32[$1 + 536 >> 2];
HEAP32[$0 + 536 >> 2] = $3;
HEAP32[$0 + 540 >> 2] = $2;
$3 = HEAP32[$1 + 532 >> 2];
$2 = HEAP32[$1 + 528 >> 2];
HEAP32[$0 + 528 >> 2] = $2;
HEAP32[$0 + 532 >> 2] = $3;
Direction3__operator__28Direction3_20const__29($0 + 544 | 0, $1 + 544 | 0);
__memcpy($0 + 556 | 0, $1 + 556 | 0, 148);
return $0 | 0;
}
function GestureParser__readXMLString_28char_20const__2c_20ParserData__2c_20Gesture___29($0, $1, $2) {
var $3 = 0;
$1 = SiGMLParser_28ParserData_20const__29($1);
$3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $0) | 0;
$0 = XMLWrapper__GetUserData_28_29($1);
label$1: {
label$2: {
if ($2) {
HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
break label$2;
}
if (!$0) {
break label$1;
}
}
operator_20delete_28void__29(ParserData___ParserData_28_29($0));
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
return $3;
}
function OneHAbstractPosture__defaultFrom_28OneHAbstractPosture_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = $0 + 4 | 0;
if (SiteIDPair__isUndef_28_29_20const($2)) {
$3 = HEAP32[$1 + 8 >> 2];
HEAP32[$2 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
}
$2 = $0 + 16 | 0;
if (SiteID__isUndef_28_29_20const($2)) {
HEAP16[$2 >> 1] = HEAPU16[$1 + 16 >> 1];
HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 18 | 0];
}
OneHAbstractPosture__defaultHandstuffFrom_28OneHAbstractPosture_20const__29($0, $1);
}
function SetUnusedHand_28Gesture__2c_20bool_29($0, $1) {
var $2 = 0, $3 = 0;
$2 = HEAP32[17611];
if ($2) {
$3 = HEAP32[($1 ? 20 : 24) + $0 >> 2];
$2 = HEAP32[(!(HEAPU8[$0 + 13 | 0] & 64) ^ $1 ? 20 : 24) + $2 >> 2];
HandJointRotations__setFrom_28HandJointRotations_20const__29(HEAP32[HEAP32[$3 + 56 >> 2] + 236 >> 2], HEAP32[HEAP32[$2 + 56 >> 2] + 236 >> 2]);
OneHAbstractPosture__defaultFrom_28OneHAbstractPosture_20const__29($3, $2);
SiGMLConstellation__SetUnusedHand_28OneHAbstractPosture__2c_20bool_29(HEAP32[$0 + 36 >> 2], $2, $1);
}
}
function DynamicArray1_Quaternion___setElement_28int_2c_20Quaternion_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
if (($1 | 0) >= 0) {
DynamicArray1_Quaternion___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
$3 = $2;
$2 = HEAP32[$3 >> 2];
$4 = HEAP32[$3 + 4 >> 2];
$1 = HEAP32[$0 >> 2] + ($1 << 4) | 0;
HEAP32[$1 >> 2] = $2;
HEAP32[$1 + 4 >> 2] = $4;
$2 = HEAP32[$3 + 12 >> 2];
$4 = HEAP32[$3 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = $4;
HEAP32[$1 + 12 >> 2] = $2;
}
}
function storeAttributeValue($0, $1, $2, $3, $4, $5) {
$0 = appendAttributeValue($0, $1, $2, $3, $4, $5);
if (!$0) {
$1 = HEAP32[$5 + 12 >> 2];
label$2: {
if (($1 | 0) == HEAP32[$5 + 16 >> 2] | $2) {
break label$2;
}
$2 = $1 - 1 | 0;
if (HEAPU8[$2 | 0] != 32) {
break label$2;
}
HEAP32[$5 + 12 >> 2] = $2;
$1 = $2;
}
if (HEAP32[$5 + 8 >> 2] == ($1 | 0)) {
if (!poolGrow($5)) {
return 1;
}
$1 = HEAP32[$5 + 12 >> 2];
}
HEAP32[$5 + 12 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 0;
$0 = 0;
}
return $0;
}
function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
var $9 = 0, $10 = 0, $11 = 0;
$10 = __stack_pointer - 16 | 0;
__stack_pointer = $10;
$11 = $8 ^ -2147483648;
$9 = $4;
$8 = $6;
$4 = $11;
__addtf3($10, $1, $2, $3, $9, $5, $8, $7, $4);
$9 = $10;
$4 = HEAP32[$9 >> 2];
$1 = $4;
$8 = HEAP32[$9 + 4 >> 2];
$2 = $8;
$4 = HEAP32[$9 + 12 >> 2];
$8 = HEAP32[$9 + 8 >> 2];
$3 = $8;
$8 = $0;
HEAP32[$8 + 8 >> 2] = $3;
HEAP32[$8 + 12 >> 2] = $4;
HEAP32[$8 >> 2] = $1;
$4 = $2;
HEAP32[$8 + 4 >> 2] = $4;
__stack_pointer = $9 + 16 | 0;
}
function entity5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
$5 = 11;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
case 2:
HEAP32[$0 >> 2] = 783;
return 15;
case 0:
break label$1;
case 3:
break label$3;
default:
break label$2;
}
}
if (!(FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]]($4, $2, $3, 49860) | 0)) {
break label$2;
}
HEAP32[$0 >> 2] = 810;
return 11;
}
common($0);
$5 = -1;
}
return $5 | 0;
}
function SiteID__defaultProximity_28Proximity_29($0, $1) {
var $2 = 0, $3 = 0;
$2 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
$3 = $2 & 255;
if (!(!$3 | $2 & 7340032)) {
label$2: {
if (!$1) {
$1 = isSigningSpaceLocation_28Location_29($3);
$2 = (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) & -7340033;
$3 = $2 | 3145728;
if ($1) {
break label$2;
}
$3 = $2 | 1048576;
break label$2;
}
$3 = $2 & 9437183 | $1 << 20 & 7340032;
}
$2 = $3;
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
}
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
}
function HingeJointRotation__HingeJointRotation_28HingeJointRotation__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28_29($0);
HEAP32[$0 >> 2] = 59736;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
HingeJointRotation__operator__28HingeJointRotation_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function handle_split_handconfig_28Gesture__2c_20XMLCell__29($0, $1) {
var $2 = 0;
$2 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$1 + 8 >> 2], 0);
if ($2) {
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__29(HEAP32[$0 + 20 >> 2], HEAP32[$2 + 4 >> 2]);
}
$1 = DynamicArrayP_XMLCell___getElement_28int_29_20const(HEAP32[$1 + 8 >> 2], 1);
if ($1) {
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__29(HEAP32[$0 + 24 >> 2], HEAP32[$1 + 4 >> 2]);
}
}
function ThumbBending__ModifyByFingerBending_28FingerBending_20const__29($0, $1) {
eprintf_28char_20const__2c_20____29(21741, 0);
FingerBending__print_28_IO_FILE__29_20const($1, HEAP32[16886]);
eprintf_28char_20const__2c_20____29(24153, 0);
ThumbBending__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
HEAPF32[$0 + 12 >> 2] = HEAPF32[$1 + 4 >> 2];
HEAPF32[$0 + 16 >> 2] = HEAPF32[$1 + 8 >> 2];
eputs_28char_20const__29(24156);
ThumbBending__print_28_IO_FILE__29_20const($0, HEAP32[16886]);
eputc_28char_29(10);
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
$0 = HEAP32[$1 + 16 >> 2];
if (!$0) {
HEAP32[$1 + 36 >> 2] = 1;
HEAP32[$1 + 24 >> 2] = $3;
HEAP32[$1 + 16 >> 2] = $2;
return;
}
label$2: {
if (($2 | 0) == ($0 | 0)) {
if (HEAP32[$1 + 24 >> 2] != 2) {
break label$2;
}
HEAP32[$1 + 24 >> 2] = $3;
return;
}
HEAP8[$1 + 54 | 0] = 1;
HEAP32[$1 + 24 >> 2] = 2;
HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
}
}
function MannerFlags__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ($1) {
$3 = HEAP32[$0 >> 2];
$3 = InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18786], $3);
$4 = HEAP32[$0 + 4 >> 2];
$5 = HEAPU8[$0 + 8 | 0];
HEAP32[$2 + 4 >> 2] = HEAP32[$0 >> 2];
HEAP32[$2 >> 2] = $3;
HEAP32[$2 + 12 >> 2] = $5 ? 11491 : 48531;
HEAP32[$2 + 8 >> 2] = HEAP8[$4 + 49112 | 0];
fiprintf($1, 4283, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function TurretJointRotation__toQuaternion_28Quaternion__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($1, $0 + 8 | 0, HEAPF32[$0 + 32 >> 2], 1);
$3 = Quaternion__Quaternion_28_29($2);
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($3, $0 + 20 | 0, HEAPF32[$0 + 36 >> 2], 1);
Quaternion__setCompose_28Quaternion_20const__29($1, $3);
__stack_pointer = $2 + 16 | 0;
}
function TokenStream__open_28_29($0) {
var $1 = 0, $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
TokenStream__close_28_29($0);
$1 = HEAP32[$0 >> 2];
label$1: {
if (!$1) {
$1 = HEAP32[$0 + 4 >> 2];
break label$1;
}
$1 = fopen($1, 5108);
HEAP32[$0 + 4 >> 2] = $1;
}
label$3: {
if (!$1) {
HEAP8[$0 + 8 | 0] = 1;
break label$3;
}
if (!HEAPU8[67571]) {
break label$3;
}
HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
eprintf_28char_20const__2c_20____29(36782, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function QuatJointRotation__QuatJointRotation_28QuatJointRotation__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = JointRotation__JointRotation_28_29($0);
HEAP32[$0 >> 2] = 60152;
HEAP32[19359] = 0;
invoke_ii(86, $0 + 8 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
QuatJointRotation__operator__28QuatJointRotation_20const__29($0, $1);
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
JointRotation___JointRotation_28_29($0);
__resumeException($1 | 0);
abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) {
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
}
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
}
function OneHAbstractPosture__isAlmostTotallyDefined_28_29_20const($0) {
var $1 = 0, $2 = 0;
label$1: {
if (!SiteID__defined_28_29_20const($0 + 16 | 0)) {
break label$1;
}
if (!Direction3__defined_28_29_20const($0 + 20 | 0)) {
break label$1;
}
if (!Direction2__defined_28_29_20const($0 + 32 | 0)) {
break label$1;
}
$1 = HEAP32[$0 + 56 >> 2];
if (!$1) {
break label$1;
}
if (!Handshape__defined_28_29_20const($1)) {
break label$1;
}
$2 = HEAP32[HEAP32[$0 + 56 >> 2] + 236 >> 2] != 0;
}
return $2;
}
function NonmanualMovement__setAvatarDependentValues_28_29($0) {
var $1 = 0, $2 = Math_fround(0);
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 20 >> 2] = 0;
}
$1 = SNMtoATM_28DynamicArray1_DynamicArray1_AtomicNonmanual_____29(HEAP32[$0 + 4 >> 2]);
HEAP32[$0 + 20 >> 2] = $1;
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, Math_fround(0));
$2 = HEAPF32[HEAP32[$0 + 20 >> 2] + 16 >> 2];
} else {
$2 = Math_fround(0);
}
HEAPF32[$0 + 24 >> 2] = $2;
}
function Gesture__transferLocation_28Vector__2c_20Joint__2c_20Joint__2c_20Vector_20const__29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
$5 = __stack_pointer - 32 | 0;
__stack_pointer = $5;
label$1: {
if (($2 | 0) == ($3 | 0)) {
Vector__setFrom_28Vector_20const__29($1, $4);
break label$1;
}
$6 = Transform__Transform_28_29($5);
Gesture__transfer_28Transform__2c_20Joint__2c_20Joint__29($0, $6, $2, $3);
Transform__transformVector_28Vector_20const__2c_20Vector__29_20const($6, $4, $1);
}
__stack_pointer = $5 + 32 | 0;
}
function GestureParser__readXMLFile_28char_20const__2c_20ParserData__2c_20Gesture___29($0, $1, $2) {
var $3 = 0;
$1 = SiGMLParser_28ParserData_20const__29($1);
$3 = XMLWrapper__ParseFile_28char_20const__29($1, $0);
$0 = XMLWrapper__GetUserData_28_29($1);
label$1: {
label$2: {
if ($2) {
HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
break label$2;
}
if (!$0) {
break label$1;
}
}
operator_20delete_28void__29(ParserData___ParserData_28_29($0));
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
return $3;
}
function ConstellationInfo__ConstellationInfo_28ConstellationInfo_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
Direction3__Direction3_28Direction3_20const__29($0 + 4 | 0, $1 + 4 | 0);
$2 = HEAPU8[$1 + 19 | 0] | HEAPU8[$1 + 20 | 0] << 8 | (HEAPU8[$1 + 21 | 0] << 16 | HEAPU8[$1 + 22 | 0] << 24);
HEAP8[$0 + 19 | 0] = $2;
HEAP8[$0 + 20 | 0] = $2 >>> 8;
HEAP8[$0 + 21 | 0] = $2 >>> 16;
HEAP8[$0 + 22 | 0] = $2 >>> 24;
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
return $0 | 0;
}
function CharToMorphTimeType_28char_29($0) {
var $1 = 0, $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (($0 | 0) != 45) {
$1 = 1;
if (($0 | 0) == 102) {
break label$1;
}
label$3: {
if (($0 | 0) != 115) {
if (($0 | 0) != 109) {
break label$3;
}
$1 = 2;
break label$1;
}
$1 = 3;
break label$1;
}
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(30957, $2);
}
$1 = 0;
}
__stack_pointer = $2 + 16 | 0;
$0 = $1;
return $0;
}
function TrajectoryParams__print_28_IO_FILE__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if ($1) {
fputs(16733, $1);
fputs(20089, $1);
ControllerParams__print_28_IO_FILE__29_20const($0, $1);
$3 = HEAPF32[$0 + 16 >> 2];
$4 = HEAPF32[$0 + 20 >> 2];
HEAPF64[$2 + 16 >> 3] = HEAPF32[$0 + 24 >> 2];
HEAPF64[$2 + 8 >> 3] = $4;
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 7591, $2);
}
__stack_pointer = $2 + 32 | 0;
}
function Gesture__propagateHandStuff_28TwoHandStuff__29($0, $1) {
label$1: {
if (!HEAP32[$0 + 28 >> 2]) {
break label$1;
}
if (!GestureFlags__haveRight_28_29_20const($0 + 13 | 0)) {
break label$1;
}
OneHGesture__propagateHandStuff_28OneHandStuff__29(HEAP32[$0 + 28 >> 2], $1);
}
label$2: {
if (!HEAP32[$0 + 32 >> 2]) {
break label$2;
}
if (!GestureFlags__haveLeft_28_29_20const($0 + 13 | 0)) {
break label$2;
}
OneHGesture__propagateHandStuff_28OneHandStuff__29(HEAP32[$0 + 32 >> 2], $1 + 44 | 0);
}
}
function FingerPlayMovement__operator__28FingerPlayMovement_20const__29($0, $1) {
var $2 = 0, $3 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 544 >> 2];
$3 = HEAP32[$2 + 548 >> 2];
HEAP32[$0 + 544 >> 2] = $1;
HEAP32[$0 + 548 >> 2] = $3;
$1 = HEAP32[$2 + 540 >> 2];
$3 = HEAP32[$2 + 536 >> 2];
HEAP32[$0 + 536 >> 2] = $3;
HEAP32[$0 + 540 >> 2] = $1;
$3 = HEAP32[$2 + 532 >> 2];
$1 = HEAP32[$2 + 528 >> 2];
HEAP32[$0 + 528 >> 2] = $1;
HEAP32[$0 + 532 >> 2] = $3;
return $0;
}
function strncmp($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
if (!$2) {
return 0;
}
$3 = HEAPU8[$0 | 0];
label$2: {
if (!$3) {
break label$2;
}
while (1) {
label$4: {
$4 = HEAPU8[$1 | 0];
if (!$4) {
break label$4;
}
$2 = $2 - 1 | 0;
if (!$2 | ($3 | 0) != ($4 | 0)) {
break label$4;
}
$1 = $1 + 1 | 0;
$3 = HEAPU8[$0 + 1 | 0];
$0 = $0 + 1 | 0;
if ($3) {
continue;
}
break label$2;
}
break;
}
$5 = $3;
}
return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}
function Handshape__DefaultHandSite_28_29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = HEAPU8[$1 + 232 | 0];
$4 = HEAP32[$1 >> 2];
$2 = HEAP32[HEAP32[18210] + ($4 << 2) >> 2];
HEAP32[$0 >> 2] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
$3 = $2 & -3841 | ($3 ? 256 : 512);
HEAP16[$0 >> 1] = $3;
if (($2 & 255) != 1) {
$2 = HEAPU16[$1 + 52 >> 1];
if (!$2) {
$2 = HEAPU16[(Math_imul($4, 160) + 70752 | 0) + 152 >> 1];
}
$2 = $3 & 15758335 | ($2 & 31) << 15;
HEAP16[$0 >> 1] = $2;
HEAP8[$0 + 2 | 0] = $2 >>> 16;
}
}
function Quaternion__invRotateVector_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28Quaternion_20const__29($3 + 16 | 0, $0);
Quaternion__setInverse_28_29($4);
Quaternion__Quaternion_28Vector_20const__29($3, $1);
Quaternion__setCompose_28Quaternion_20const__29($3, $0);
Quaternion__setPreCompose_28Quaternion_20const__29($3, $4);
Quaternion__toVector_28Vector__29_20const($3, $2);
__stack_pointer = $3 + 32 | 0;
}
function FaceAnimator__newTime_28float_2c_20float_2c_20float__2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
label$1: {
if (!$3) {
break label$1;
}
ZeroMorphSet_28float__29($3);
if (!HEAP32[$0 + 8 >> 2]) {
break label$1;
}
while (1) {
if (($5 | 0) == 8) {
break label$1;
}
$6 = HEAP32[HEAP32[$0 + 8 >> 2] + ($5 << 2) >> 2];
if ($6) {
NonmanualMovement__getCurrentFacePosture_28float_2c_20float_2c_20float__2c_20bool_29($6, $1, $2, $3, $4);
}
$5 = $5 + 1 | 0;
continue;
}
}
}
function printDigits_28_IO_FILE__2c_20short_29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$0) {
break label$1;
}
if (!$1) {
fputs(14769, $0);
break label$1;
}
if (($1 | 0) >= 0) {
while (1) {
if (($1 | 0) <= 0) {
break label$1;
}
if ($1 & 1) {
fputc($3 + 49 | 0, $0);
}
$3 = $3 + 1 | 0;
$1 = $1 >>> 1 | 0;
continue;
}
}
HEAP32[$2 >> 2] = $1;
fiprintf($0, 14800, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function normal_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0;
$2 = $1;
while (1) {
$4 = HEAPU8[(HEAPU8[$2 | 0] + $0 | 0) + 72 | 0];
label$2: {
if (!($4 >>> 0 > 29 | !(1 << $4 & 792723456))) {
$3 = 1;
break label$2;
}
$3 = 2;
label$4: {
switch ($4 - 5 | 0) {
case 2:
$3 = 4;
break label$2;
default:
return $2 - $1 | 0;
case 0:
break label$2;
case 1:
break label$4;
}
}
$3 = 3;
}
$2 = $2 + $3 | 0;
continue;
}
}
function Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28Quaternion_20const__29($3 + 16 | 0, $0);
Quaternion__setInverse_28_29($4);
Quaternion__Quaternion_28Vector_20const__29($3, $1);
Quaternion__setCompose_28Quaternion_20const__29($3, $4);
Quaternion__setPreCompose_28Quaternion_20const__29($3, $0);
Quaternion__toVector_28Vector__29_20const($3, $2);
__stack_pointer = $3 + 32 | 0;
}
function Direction3__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
if (Direction3__isUndef_28_29_20const($0)) {
fputs(7538, $1);
break label$1;
}
$3 = HEAPF32[$0 >> 2];
$4 = HEAPF32[$0 + 4 >> 2];
HEAPF64[$2 + 16 >> 3] = HEAPF32[$0 + 8 >> 2];
HEAPF64[$2 + 8 >> 3] = $4;
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 7900, $2);
}
__stack_pointer = $2 + 32 | 0;
}
function AbstractTimedMorph__scaleDuration_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0), $3 = Math_fround(0);
$2 = HEAPF32[$0 + 4 >> 2];
HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(HEAPF32[$0 + 8 >> 2] - $2) * $1) + $2;
$3 = HEAPF32[$0 + 12 >> 2];
if ($3 != Math_fround(-1)) {
HEAPF32[$0 + 12 >> 2] = Math_fround(Math_fround($3 - $2) * $1) + $2;
}
$3 = HEAPF32[$0 + 16 >> 2];
if ($3 != Math_fround(-1)) {
HEAPF32[$0 + 16 >> 2] = Math_fround(Math_fround($3 - $2) * $1) + $2;
}
}
function notation4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 17;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 27) {
break label$2;
}
HEAP32[$0 + 8 >> 2] = 17;
HEAP32[$0 >> 2] = 801;
return 19;
case 0:
break label$1;
case 1:
break label$2;
case 2:
break label$3;
}
}
HEAP32[$0 >> 2] = 783;
return 20;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function TwoHConcretePostureChange__CalcHandSiteChange_28Vector__2c_20Vector__29_20const($0, $1, $2) {
label$1: {
if (HEAPU8[$0 + 448 | 0] & 8) {
OneHConcretePosture__CalcHandSiteChange_28OneHConcretePosture_20const__2c_20Vector__29_20const($0 + 224 | 0, $0, $1);
break label$1;
}
Vector__setZero_28_29($1);
}
if (HEAPU8[$0 + 450 | 0] & 8) {
OneHConcretePosture__CalcHandSiteChange_28OneHConcretePosture_20const__2c_20Vector__29_20const($0 + 336 | 0, $0 + 112 | 0, $2);
return;
}
Vector__setZero_28_29($2);
}
function TorsoDecollider___TorsoDecollider_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
HEAP32[$0 >> 2] = 59200;
while (1) {
$1 = HEAP32[$0 + 8 >> 2];
if (HEAP16[$0 + 4 >> 1] <= ($2 | 0)) {
if ($1) {
operator_20delete_5b_5d_28void__29($1);
HEAP32[$0 + 8 >> 2] = 0;
}
return Decollider___Decollider_28_29($0) | 0;
}
$3 = $2 << 2;
$1 = HEAP32[$3 + $1 >> 2];
if ($1) {
operator_20delete_28void__29($1);
HEAP32[HEAP32[$0 + 8 >> 2] + $3 >> 2] = 0;
}
$2 = $2 + 1 | 0;
continue;
}
}
function SetLocationAttrib_28Location__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
label$1: {
if (!$2) {
break label$1;
}
$4 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18213], $2);
if (!$4) {
LogTime_28_29();
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 >> 2] = $1;
eprintf_28char_20const__2c_20____29(43282, $3);
break label$1;
}
HEAP32[$0 >> 2] = $4;
}
__stack_pointer = $3 + 16 | 0;
}
function HanimAvatar__SetFaceSite_28Location_2c_20Vector_20const__2c_20Vector_20const__29($0, $1, $2, $3) {
var $4 = 0, $5 = Math_fround(0);
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
MakeSiteID_28Location_29($4 + 8 | 0, $1);
$5 = HEAPF32[$0 + 380 >> 2];
$1 = HEAP32[HEAP32[$0 + 72 >> 2] + 8 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $4 + 4 | 0, $1, $2, $5, $3);
__stack_pointer = $4 + 16 | 0;
}
function BasicMovement__GetTrajectoryFraction_28float_2c_20bool_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = Math_fround(1);
$4 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
if (!($4 <= Math_fround(0))) {
$3 = trimREAL_28float_2c_20float_2c_20float_29(Math_fround(0), Math_fround($1 / $4), Math_fround(1));
}
$0 = HEAP32[$0 + 12 >> 2];
$3 = Trajectory__lookupByFraction_28float_29_20const(HEAP32[($0 << 2) + 70368 >> 2], $3);
return $2 ? $3 : Math_fround(Math_fround(1) - $3);
}
function getElementType($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = HEAP32[$0 + 340 >> 2];
$1 = poolStoreString($4 + 80 | 0, $1, $2, $3);
label$1: {
if (!$1) {
break label$1;
}
$2 = lookup($4 + 20 | 0, $1, 24);
if (!$2) {
break label$1;
}
label$2: {
if (HEAP32[$2 >> 2] != ($1 | 0)) {
HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 96 >> 2];
break label$2;
}
HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2];
if (!setElementTypePrefix($0, $2)) {
break label$1;
}
}
$5 = $2;
}
return $5;
}
function utf8_isInvalid4($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = 1;
$0 = HEAPU8[$1 + 3 | 0];
label$1: {
if (!($0 & 128) | ($0 & 192) == 192) {
break label$1;
}
$0 = HEAPU8[$1 + 2 | 0];
if (!($0 & 128) | ($0 & 192) == 192) {
break label$1;
}
$0 = HEAPU8[$1 + 1 | 0];
$1 = HEAPU8[$1 | 0];
if (($1 | 0) == 240) {
return ($0 - -64 & 255) >>> 0 < 208 | 0;
}
if (!($0 & 128)) {
break label$1;
}
$2 = ($1 | 0) == 244 ? $0 >>> 0 > 143 : ($0 & 192) == 192;
}
return $2 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___clear_28_29($0) {
var $1 = 0;
$1 = std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0);
std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___clear_28_29($0);
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____invalidate_all_iterators_28_29($0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___clear_28_29($0) {
var $1 = 0;
$1 = std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0);
std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___clear_28_29($0);
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_all_iterators_28_29($0);
}
function TwoHCircMoveSpec__print_28_IO_FILE__29_20const($0, $1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22050, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHCircMoveSpec__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22183, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHCircMoveSpec__print_28_IO_FILE__29_20const($0 + 68 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
function OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_2c_20bool_29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
HEAPF32[$5 + 12 >> 2] = $3;
HEAPF32[$5 + 8 >> 2] = $3;
HEAPF32[$5 + 4 >> 2] = $3;
HEAPF32[$5 >> 2] = $3;
OneHConcretePosture__setInterpolate_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__2c_20float_20const__2c_20bool_29($0, $1, $2, $5, $4);
__stack_pointer = $5 + 16 | 0;
}
function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
var $1 = 0;
label$1: {
if (!std____2____libcpp_refstring____uses_refcount_28_29_20const($0)) {
break label$1;
}
$1 = std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29(HEAP32[$0 >> 2]);
if ((int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29_1($1 + 8 | 0) | 0) >= 0) {
break label$1;
}
operator_20delete_28void__29($1);
}
return $0;
}
function __shlim($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$3 = $0;
HEAP32[$3 + 112 >> 2] = $1;
HEAP32[$3 + 116 >> 2] = $2;
$6 = HEAP32[$3 + 4 >> 2];
$3 = HEAP32[$3 + 44 >> 2] - $6 | 0;
$4 = $3 >> 31;
$7 = $3;
$3 = $0;
HEAP32[$3 + 120 >> 2] = $7;
HEAP32[$3 + 124 >> 2] = $4;
$5 = HEAP32[$3 + 8 >> 2];
$3 = $5 - $6 | 0;
$4 = $3 >> 31;
$7 = $3;
$3 = $2;
$5 = !($1 | $3) | (($3 | 0) >= ($4 | 0) & $1 >>> 0 >= $7 >>> 0 | ($3 | 0) > ($4 | 0)) ? $5 : $1 + $6 | 0;
HEAP32[$0 + 104 >> 2] = $5;
}
function SiGMLHandshape__IsPinchNo2_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 >> 2];
label$1: {
label$2: {
if (($1 & -2) == 8) {
$1 = HEAPU16[$0 + 52 >> 1];
if (!$1) {
return 0;
}
if (!HasDigit_28short_2c_20short_29($1 << 16 >> 16, 1)) {
break label$2;
}
$1 = HEAP32[$0 >> 2];
}
if (($1 | 0) != 7) {
break label$1;
}
if (!HasDigit_28short_2c_20short_29(HEAP16[$0 + 54 >> 1], 1)) {
break label$1;
}
}
$2 = HEAP32[$0 + 8 >> 2] != 2;
}
return $2;
}
function SeqMovement__SeqMovement_28SeqMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = CompoundMovement__CompoundMovement_28CompoundMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62588;
HEAP32[19359] = 0;
invoke_iif(379, $0 + 560 | 0, Math_fround(Math_fround(0))) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
CompoundMovement___CompoundMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function TwoHDirMoveSpec__print_28_IO_FILE__29_20const($0, $1) {
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22050, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHDirMoveSpec__print_28_IO_FILE__29_20const($0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
printIndent_28_IO_FILE__2c_20int_29($1, HEAP16[33801]);
fputs(22183, $1);
HEAP16[33801] = HEAPU16[33801] + 1;
OneHDirMoveSpec__print_28_IO_FILE__29_20const($0 + 72 | 0, $1);
HEAP16[33801] = HEAPU16[33801] - 1;
fputc(10, $1);
}
function __toread($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 72 >> 2];
HEAP32[$0 + 72 >> 2] = $1 | $1 - 1;
if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
}
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
$1 = HEAP32[$0 >> 2];
if ($1 & 4) {
HEAP32[$0 >> 2] = $1 | 32;
return -1;
}
$2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $2;
return $1 << 27 >> 31;
}
function Vector__angleWith_28Vector_20const__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$3 = Vector__dotProduct_28Vector_20const__29_20const($0, $1);
Vector__Vector_28_29($2 + 16 | 0);
Vector__Vector_28Vector_20const__29_1($2, $0);
Vector__setCrossProduct_28Vector_20const__2c_20Vector_20const__29($2 + 16 | 0, $2, $1);
$3 = atan2_28float_2c_20float_29(Vector__length_28_29_20const($2 + 16 | 0), $3);
__stack_pointer = $2 + 32 | 0;
return $3;
}
function UpdateMaxDuration_28BasicMovement__2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3) {
var $4 = Math_fround(0);
$4 = HEAPF32[$0 + 40 >> 2];
if ($4 > HEAPF32[$1 >> 2]) {
HEAPF32[$1 >> 2] = $4;
}
label$2: {
if (HEAP32[$0 + 4 >> 2] == 10) {
break label$2;
}
$4 = HEAPF32[$0 + 40 >> 2];
if ($4 > HEAPF32[$2 >> 2]) {
HEAPF32[$2 >> 2] = $4;
$4 = HEAPF32[$0 + 40 >> 2];
}
if (!(HEAPF32[$3 >> 2] < $4) | HEAP32[$0 + 12 >> 2] == 1) {
break label$2;
}
HEAPF32[$3 >> 2] = $4;
}
}
function OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 4 | 0, $1 + 4 | 0);
Vector__setFrom_28Vector_20const__29($0 + 16 | 0, $1 + 16 | 0);
Vector__setFrom_28Vector_20const__29($0 + 28 | 0, $1 + 28 | 0);
HEAPF32[$0 + 64 >> 2] = HEAPF32[$1 + 64 >> 2];
HEAPF32[$0 + 68 >> 2] = HEAPF32[$1 + 68 >> 2];
__memcpy($0 + 76 | 0, $1 + 76 | 0, 36);
Quaternion__setFrom_28Quaternion_20const__29($0 + 40 | 0, $1 + 40 | 0);
}
function streqci($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
label$1: {
while (1) {
label$3: {
$3 = HEAPU8[$1 | 0];
$2 = HEAPU8[$0 | 0];
$4 = 1;
$1 = $1 + 1 | 0;
$0 = $0 + 1 | 0;
$2 = (($2 - 97 & 255) >>> 0 < 26 ? $2 - 32 | 0 : $2) & 255;
switch ((((($3 - 97 & 255) >>> 0 < 26 ? $3 - 32 | 0 : $3) & 255) == ($2 | 0) ? !$2 << 1 : 1) - 1 | 0) {
case 1:
break label$1;
case 0:
break label$3;
default:
continue;
}
}
break;
}
$4 = 0;
}
return $4;
}
function boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__29($0, $1, $2) {
var $3 = 0;
label$1: {
if (!$0) {
break label$1;
}
$0 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, $1);
if (!$0) {
break label$1;
}
$3 = 1;
$1 = 1;
label$2: {
if (!strcmp($0, 8491)) {
break label$2;
}
$1 = 0;
if (!strcmp($0, 8921)) {
break label$2;
}
return 0;
}
HEAP8[$2 | 0] = $1;
}
return $3;
}
function ParMovement__ParMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = CompoundMovement__CompoundMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 5, $1);
HEAP32[$0 >> 2] = 62460;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 544 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 + 4 >> 2] = 5;
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
CompoundMovement___CompoundMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function Segment__Segment_28char_20const__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 1;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
Vector__Vector_28float_2c_20float_2c_20float_29($0 + 32 | 0, Math_fround(0), Math_fround(0), Math_fround(0));
HEAP32[$0 + 44 >> 2] = 68316;
HEAP32[17086] = HEAP32[17086] + 1;
return $0 | 0;
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$5 = HEAP32[$0 + 4 >> 2];
$4 = 0;
label$1: {
if (!$2) {
break label$1;
}
$4 = $5 >> 8;
if (!($5 & 1)) {
break label$1;
}
$4 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $4);
}
$0 = HEAP32[$0 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2 + $4 | 0, $5 & 2 ? $3 : 2);
}
function CompletePosture_28Gesture__29($0) {
var $1 = 0, $2 = 0;
label$1: {
$2 = HEAP32[17611];
if (!$2) {
break label$1;
}
$1 = HEAPU8[$0 + 13 | 0];
if ($1 & 4) {
OneHAbstractPosture__defaultHandstuffFrom_28OneHAbstractPosture_20const__29(HEAP32[$0 + 20 >> 2], HEAP32[$2 + 20 >> 2]);
$1 = HEAPU8[$0 + 13 | 0];
}
if (!($1 & 8)) {
break label$1;
}
OneHAbstractPosture__defaultHandstuffFrom_28OneHAbstractPosture_20const__29(HEAP32[$0 + 24 >> 2], HEAP32[HEAP32[17611] + 24 >> 2]);
}
}
function SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
$3 = InvertibleStringArray__indexFromValue_28char_20const__29_20const($0, $1);
if (($3 | 0) != -1) {
break label$1;
}
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(46073, $2);
$3 = 0;
}
__stack_pointer = $2 + 16 | 0;
return $3 | 0;
}
function GetCircularOffset_28Vector__2c_20OneHCircMoveSpec_20const__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Vector__Vector_28Vector_20const__29($3 + 16 | 0, $1 + 12 | 0);
Vector__setScale_28float_29($4, sin_28float_29($2));
$1 = Vector__Vector_28Vector_20const__29($3, $1 + 24 | 0);
Vector__setScale_28float_29($1, cos_28float_29($2));
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($0, $4, $1);
__stack_pointer = $3 + 32 | 0;
}
function OptionSpec__OptionSpec_28OptionType_2c_20bool_2c_20char_20const__29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0, $6 = 0;
$5 = ($1 | 0) == 2 | ($1 | 0) == 5;
$6 = ($1 & -2) == 4;
label$1: {
if ($1 >>> 0 <= 3) {
$4 = 1;
if (($1 | 0) != 1) {
break label$1;
}
}
$4 = ($1 | 0) == 5;
}
OptionSpec__initialise_28bool_2c_20bool_2c_20bool_2c_20bool_2c_20bool_2c_20char_20const__29($0, $5, $2, $6, $4, ($1 | 0) == 6, $3);
return $0 | 0;
}
function HashAny_int_2c_20int___lookupInCell_28int_2c_20int_29_20const($0, $1, $2) {
label$1: {
label$2: {
$1 = HEAP32[$0 >> 2] + ($1 << 3) | 0;
if (HEAP16[$1 + 4 >> 1] <= 0) {
break label$2;
}
while (1) {
$1 = HEAP32[$1 >> 2];
if (!$1) {
break label$2;
}
if (!KeyOps_int___eqkey_28int_2c_20int_29($2, HEAP32[$1 >> 2])) {
$1 = $1 + 8 | 0;
continue;
}
break;
}
$1 = $1 + 4 | 0;
break label$1;
}
$1 = $0 + 20 | 0;
}
return HEAP32[$1 >> 2];
}
function SiGMLHandshape__IsPinchBentThumbToMiddle_28_29($0) {
var $1 = 0, $2 = 0;
label$1: {
if ((HEAP32[$0 >> 2] & -2) != 8) {
break label$1;
}
$1 = HEAPU16[$0 + 52 >> 1];
if (!$1) {
break label$1;
}
if (HasDigit_28short_2c_20short_29($1 << 16 >> 16, 1)) {
break label$1;
}
if (!IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29(HEAP32[$0 + 180 >> 2], HEAP32[$0 + 184 >> 2], 0, 2)) {
break label$1;
}
$2 = HEAP32[$0 + 8 >> 2] == 2;
}
return $2;
}
function HashAny_char_20const__2c_20char_20const____freeData_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
$3 = HEAP32[$1 + 4 >> 2];
if (($3 | 0) != HEAP32[$0 + 20 >> 2]) {
dlfree($3);
HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 20 >> 2];
}
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__29($0, $1) {
var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAPU16[Mirroring__Mirroring_28_29($2 + 8 | 0) >> 1], 
HEAP16[wasm2js_i32$0 + 6 >> 1] = wasm2js_i32$1;
OneHGesture__SetFromHandConfig_28HashAny_char_20const__2c_20char_20const___20const__2c_20Mirroring_29($0, $1, $2 + 6 | 0);
__stack_pointer = $2 + 16 | 0;
}
function Quaternion__invRotateVector_28Vector__29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$3 = Quaternion__Quaternion_28Quaternion_20const__29($2 + 16 | 0, $0);
Quaternion__setInverse_28_29($3);
Quaternion__Quaternion_28Vector_20const__29($2, $1);
Quaternion__setCompose_28Quaternion_20const__29($2, $0);
Quaternion__setPreCompose_28Quaternion_20const__29($2, $3);
Quaternion__toVector_28Vector__29_20const($2, $1);
__stack_pointer = $2 + 32 | 0;
}
function OneHConcretePosture__OneHConcretePosture_28bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP8[$0 | 0] = $1;
Vector__Vector_28_29($0 + 4 | 0);
Vector__Vector_28_29($0 + 16 | 0);
Vector__Vector_28_29($0 + 28 | 0);
Quaternion__Quaternion_28_29($0 + 40 | 0);
HEAP32[$0 + 68 >> 2] = 0;
HEAP32[$0 + 72 >> 2] = 0;
HEAP32[$0 + 60 >> 2] = 1065353216;
HEAP32[$0 + 64 >> 2] = 0;
HEAP32[$0 + 56 >> 2] = 0;
OneHConcretePostureModifier__OneHConcretePostureModifier_28_29($0 + 76 | 0);
return $0 | 0;
}
function NonmanualMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
$3 = HEAP32[$0 + 20 >> 2];
label$1: {
if (!$3) {
break label$1;
}
$4 = HEAPF32[$3 + 16 >> 2];
label$2: {
if ($2) {
$5 = Math_fround(Math_fround($4 * $1) / HEAPF32[$0 + 24 >> 2]);
break label$2;
}
$5 = $1;
if (!($1 <= $4)) {
break label$1;
}
}
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $5);
}
HEAPF32[$0 + 24 >> 2] = $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($1);
return $0;
}
function MakeAtomicTimedMorph_28int_2c_20float_2c_20float_2c_20float_2c_20char_20const__29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
invoke_iiifffi(455, $5 | 0, $0 | 0, Math_fround($1), Math_fround($2), Math_fround($3), $4 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $5;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($5);
__resumeException($0 | 0);
abort();
}
function Quaternion__rotateVector_28Vector__29_20const($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$3 = Quaternion__Quaternion_28Quaternion_20const__29($2 + 16 | 0, $0);
Quaternion__setInverse_28_29($3);
Quaternion__Quaternion_28Vector_20const__29($2, $1);
Quaternion__setCompose_28Quaternion_20const__29($2, $3);
Quaternion__setPreCompose_28Quaternion_20const__29($2, $0);
Quaternion__toVector_28Vector__29_20const($2, $1);
__stack_pointer = $2 + 32 | 0;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$2 = $1 << 2;
$3 = HEAP32[$2 + HEAP32[$0 >> 2] >> 2];
if ($3) {
operator_20delete_28void__29(DynamicArray1_AtomicNonmanual____DynamicArray1_28_29($3));
HEAP32[HEAP32[$0 >> 2] + $2 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) | 0;
}
function SSFrame__SetMorph_28unsigned_20int_2c_20char__2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = operator_20new_28unsigned_20long_29(16);
HEAP32[19359] = 0;
$5 = invoke_iiif(8, $4 | 0, $2 | 0, Math_fround($3)) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
SSFrame__SetMorph_28SSMorph__2c_20int_29($0, $5, $1);
return;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($4);
__resumeException($0 | 0);
abort();
}
function std____2__error_code__error_code_std____2__io_errc__28std____2__io_errc_2c_20std____2__enable_if_is_error_code_enum_std____2__io_errc___value_2c_20void___type__29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
std____2__make_error_code_28std____2__io_errc_29($3 + 8 | 0, $1);
$4 = HEAP32[$3 + 12 >> 2];
$1 = HEAP32[$3 + 8 >> 2];
$2 = $1;
$1 = $0;
HEAP32[$1 >> 2] = $2;
HEAP32[$1 + 4 >> 2] = $4;
__stack_pointer = $3 + 16 | 0;
return $1;
}
function FingerBaseJointRotation__interpolate_28FingerBaseJointRotation_20const__2c_20FingerBaseJointRotation_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $4 = Math_fround(0);
$4 = Math_fround(Math_fround(1) - $3);
HEAPF32[$0 + 44 >> 2] = Math_fround(HEAPF32[$1 + 44 >> 2] * $4) + Math_fround(HEAPF32[$2 + 44 >> 2] * $3);
HEAPF32[$0 + 48 >> 2] = Math_fround(HEAPF32[$1 + 48 >> 2] * $4) + Math_fround(HEAPF32[$2 + 48 >> 2] * $3);
}
function SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
$3 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const($0, $1);
if (($3 | 0) != -1) {
break label$1;
}
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(46073, $2);
$3 = 0;
}
__stack_pointer = $2 + 16 | 0;
return $3;
}
function animgen_lite_terminate() {
var $0 = 0, $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
LogTime_28_29();
wasm2js_i32$0 = $0, wasm2js_i32$1 = VersionString_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
eprintf_28char_20const__2c_20____29(43818, $0);
Finish_28_29();
$1 = HEAP32[16886];
if (!(!$1 | HEAP32[13692] == ($1 | 0))) {
fflush($1);
fclose(HEAP32[16886]);
}
HEAP32[18904] = 0;
__stack_pointer = $0 + 16 | 0;
}
function ConstellationInfo__operator__28ConstellationInfo_20const__29($0, $1) {
var $2 = 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
Direction3__operator__28Direction3_20const__29($0 + 4 | 0, $1 + 4 | 0);
$2 = HEAPU8[$1 + 19 | 0] | HEAPU8[$1 + 20 | 0] << 8 | (HEAPU8[$1 + 21 | 0] << 16 | HEAPU8[$1 + 22 | 0] << 24);
HEAP8[$0 + 19 | 0] = $2;
HEAP8[$0 + 20 | 0] = $2 >>> 8;
HEAP8[$0 + 21 | 0] = $2 >>> 16;
HEAP8[$0 + 22 | 0] = $2 >>> 24;
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
return $0;
}
function ASDdata__readFromFile_28char_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = ReadXMLFile_28char_20const__29($1);
if (!$3) {
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(37980, $2);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 11) | 0, 60484, 0);
abort();
}
ASDdata__buildFromXMLCell_28XMLCell__2c_20char_20const__29($0, $3, $1);
__stack_pointer = $2 + 16 | 0;
}
function minDstSqSites_28float_2c_20Vector__2c_20DynamicArrayP_Site___29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
label$1: {
if (!$1) {
break label$1;
}
while (1) {
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
break label$1;
}
$4 = Vector__distanceSq_28Vector_20const__29_20const($0, Site__getGlobalPosition_28_29(DynamicArrayP_Site___getElement_28int_29_20const($1, $2)));
$3 = $3 > $4 ? $4 : $3;
$2 = $2 + 1 | 0;
continue;
}
}
return $3;
}
function HashAny_char_20const__2c_20SiteID___addItem_28char_20const__2c_20SiteID_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]);
$2 = HEAP32[$2 >> 2];
HEAP32[$3 + 4 >> 2] = $2;
HEAP32[$3 + 8 >> 2] = $2;
HashAny_char_20const__2c_20SiteID___insertString_28int_2c_20char_20const__2c_20SiteID_29($0, $4, $1, $3 + 4 | 0);
__stack_pointer = $3 + 16 | 0;
}
function doctype4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 3;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 25) {
break label$2;
}
HEAP32[$0 >> 2] = 783;
return 7;
case 0:
break label$1;
case 1:
break label$2;
case 2:
break label$3;
}
}
HEAP32[$0 >> 2] = 784;
return 8;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function ControllerParams__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if ($1) {
$3 = HEAPF32[$0 >> 2];
$4 = HEAPF32[$0 + 4 >> 2];
$5 = HEAPF32[$0 + 8 >> 2];
HEAPF64[$2 + 24 >> 3] = HEAPF32[$0 + 12 >> 2];
HEAPF64[$2 + 16 >> 3] = $5;
HEAPF64[$2 + 8 >> 3] = $4;
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 14721, $2);
}
__stack_pointer = $2 + 32 | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
var $2 = 0;
$2 = HEAP32[HEAP32[$1 >> 2] - 12 >> 2];
HEAP32[19359] = 0;
$2 = invoke_ii(31, $1 + $2 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
HEAP32[$0 >> 2] = $2;
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function sbrk($0) {
var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$1 = HEAP32[16519];
$2 = $0 + 3 & -4;
$0 = $1 + $2 | 0;
label$1: {
if ($0 >>> 0 <= $1 >>> 0 ? $2 : 0) {
break label$1;
}
if (emscripten_get_heap_size() >>> 0 < $0 >>> 0) {
if (!(emscripten_resize_heap($0 | 0) | 0)) {
break label$1;
}
}
HEAP32[16519] = $0;
return $1;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
return -1;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = $2 >>> 16 | 0;
$5 = $0 >>> 16 | 0;
$3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
$2 = $2 & 65535;
$0 = $0 & 65535;
$1 = Math_imul($2, $0);
$2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
$3 = $3 + ($2 >>> 16 | 0) | 0;
$2 = Math_imul($0, $4) + ($2 & 65535) | 0;
i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
return $1 & 65535 | $2 << 16;
}
function NoMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($1, HEAP16[33801]);
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($1, 32217);
}
function reportComment($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
label$1: {
if (!HEAP32[$0 + 68 >> 2]) {
if (!HEAP32[$0 + 80 >> 2]) {
break label$1;
}
reportDefault($0, $1, $2, $3);
return 1;
}
$4 = $0 + 400 | 0;
$5 = HEAP32[$1 + 64 >> 2];
$1 = poolStoreString($4, $1, ($5 << 2) + $2 | 0, Math_imul($5, -3) + $3 | 0);
if (!$1) {
return 0;
}
normalizeLines($1);
FUNCTION_TABLE[HEAP32[$0 + 68 >> 2]](HEAP32[$0 + 4 >> 2], $1);
poolClear($4);
}
return 1;
}
function TurretJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
$3 = indentString_28int_29($3);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 8 | 0, $2, $3, $4);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $0 + 20 | 0, $2, $3, $4);
dlfree($3);
}
function TokenStream__TokeniseString_28char_20const__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
if (!$0) {
return 0;
}
$1 = operator_20new_28unsigned_20long_29(40);
HEAP32[19359] = 0;
invoke_ii(47, $1 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
TokenStream__setBuffer_28char_20const__29($1, $0);
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function ParMovement__ParMovement_28ParMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = CompoundMovement__CompoundMovement_28CompoundMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62460;
HEAP32[19359] = 0;
invoke_ii(69, $0 + 544 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
CompoundMovement___CompoundMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function attlist3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 41) {
break label$2;
}
break;
case 0:
break label$1;
case 1:
case 2:
break label$2;
case 3:
case 4:
break label$3;
}
}
HEAP32[$0 >> 2] = 816;
return 31;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function SeqTimedMorph___SeqTimedMorph_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 62948;
$1 = HEAP32[$0 + 24 >> 2];
label$1: {
if (!$1) {
break label$1;
}
DynamicArrayP_AbstractTimedMorph___deleteAll_28_29($1);
$1 = HEAP32[$0 + 24 >> 2];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(DynamicArrayP_AbstractTimedMorph____DynamicArrayP_28_29($1));
HEAP32[$0 + 24 >> 2] = 0;
}
return AbstractTimedMorph___AbstractTimedMorph_28_29($0) | 0;
}
function ParTimedMorph___ParTimedMorph_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 62872;
$1 = HEAP32[$0 + 24 >> 2];
label$1: {
if (!$1) {
break label$1;
}
DynamicArrayP_AbstractTimedMorph___deleteAll_28_29($1);
$1 = HEAP32[$0 + 24 >> 2];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(DynamicArrayP_AbstractTimedMorph____DynamicArrayP_28_29($1));
HEAP32[$0 + 24 >> 2] = 0;
}
return AbstractTimedMorph___AbstractTimedMorph_28_29($0) | 0;
}
function Vector__isBadVector_28_29_20const($0) {
var $1 = 0;
$1 = 1;
label$1: {
if (isnan_28float_29(HEAPF32[$0 >> 2])) {
break label$1;
}
if (isnan_28float_29(HEAPF32[$0 + 4 >> 2])) {
break label$1;
}
if (isnan_28float_29(HEAPF32[$0 + 8 >> 2])) {
break label$1;
}
if (isinf_28float_29(HEAPF32[$0 >> 2])) {
break label$1;
}
if (isinf_28float_29(HEAPF32[$0 + 4 >> 2])) {
break label$1;
}
$1 = isinf_28float_29(HEAPF32[$0 + 8 >> 2]);
}
return $1;
}
function AnimgenInstance__GenerateFrames_28int_2c_20char_20const__29($0, $1) {
var $2 = 0;
$0 = AnimgenInstance__getInst_28int_29($0);
if (!(!$0 | HEAP32[$0 + 40 >> 2] != 3)) {
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 40 >> 2] = 4;
HEAP8[$0 + 28 | 0] = 1;
$1 = copyString_28char_20const__29($1);
animgen_lite_doSignCASARP($1, 741, 742, 743, 744, $0);
HEAP32[$0 + 40 >> 2] = 3;
if ($1) {
operator_20delete_28void__29($1);
}
$2 = !HEAP32[$0 + 32 >> 2];
}
return $2;
}
function TwoHConcretePosture__TwoHConcretePosture_28TwoHConcretePosture_20const__29($0, $1) {
$0 = OneHConcretePosture__OneHConcretePosture_28OneHConcretePosture_20const__29($0, $1);
HEAP32[19359] = 0;
invoke_iii(500, $0 + 112 | 0, $1 + 112 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHConcretePosture___OneHConcretePosture_28_29($0);
__resumeException($1 | 0);
abort();
}
function TurretJointRotation__interpolate_28TurretJointRotation_20const__2c_20TurretJointRotation_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $4 = Math_fround(0);
$4 = Math_fround(Math_fround(1) - $3);
HEAPF32[$0 + 32 >> 2] = Math_fround(HEAPF32[$1 + 32 >> 2] * $4) + Math_fround(HEAPF32[$2 + 32 >> 2] * $3);
HEAPF32[$0 + 36 >> 2] = Math_fround(HEAPF32[$1 + 36 >> 2] * $4) + Math_fround(HEAPF32[$2 + 36 >> 2] * $3);
}
function Direction3__makeMirrorAxis_28Mirroring_29_20const($0, $1, $2) {
$0 = Direction3__Direction3_28Direction3_20const__29_1($0, $1);
$1 = HEAPU8[$2 | 0];
if ($1 & 2) {
HEAPF32[$0 + 4 >> 2] = -HEAPF32[$0 + 4 >> 2];
HEAPF32[$0 + 8 >> 2] = -HEAPF32[$0 + 8 >> 2];
}
if ($1 & 4) {
HEAPF32[$0 + 8 >> 2] = -HEAPF32[$0 + 8 >> 2];
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
if ($1 & 8) {
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
HEAPF32[$0 + 4 >> 2] = -HEAPF32[$0 + 4 >> 2];
}
}
function AtomicTimedMorph__newCopy_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = operator_20new_28unsigned_20long_29(52);
HEAP32[19359] = 0;
$2 = invoke_ii(437, $1 | 0) | 0;
$3 = HEAP32[19359];
HEAP32[19359] = 0;
if (($3 | 0) != 1) {
AtomicTimedMorph__operator__28AtomicTimedMorph_20const__29($2, $0);
return $2 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function bool_20get_attrib_float_2c_20double__28XMLCell__2c_20float__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = 0;
$1 = bool_20HA_get_attrib_float_2c_20double__28HashAny_char_20const__2c_20char_20const___20const__2c_20float__2c_20AttribStatus__2c_20char_20const__2c_20char_20const__29(HEAP32[$0 + 4 >> 2], $1, $4 + 12 | 0, $2, $3);
__stack_pointer = $4 + 16 | 0;
return $1;
}
function Transform__setCompose_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = $0 + 12 | 0;
$5 = Vector__Vector_28_29($3);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($4, $1, $5);
Vector__setAdd_28Vector_20const__29($0, $5);
Quaternion__setCompose_28Quaternion_20const__29($4, $2);
__stack_pointer = $3 + 16 | 0;
}
function OneHConcretePostureModifier__OneHConcretePostureModifier_28OneHConcretePostureModifier_20const__29($0, $1) {
var $2 = 0, $3 = 0;
$0 = Quaternion__Quaternion_28Quaternion_20const__29($0, $1);
HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
$2 = HEAP32[$1 + 28 >> 2];
$3 = HEAP32[$1 + 24 >> 2];
HEAP32[$0 + 24 >> 2] = $3;
HEAP32[$0 + 28 >> 2] = $2;
$3 = HEAP32[$1 + 20 >> 2];
$2 = HEAP32[$1 + 16 >> 2];
HEAP32[$0 + 16 >> 2] = $2;
HEAP32[$0 + 20 >> 2] = $3;
return $0;
}
function FingerBaseJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28_29($3 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4);
VRMLRotation__print_28_IO_FILE__2c_20int_29_20const(VRMLRotation__VRMLRotation_28Quaternion_20const__29($3, $4), $1, $2);
__stack_pointer = $3 + 32 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 
wasm2js_i32$1 = $1 | -2147483648, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0;
label$1: {
if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__char_traits_char___eof_28_29(), HEAP32[$0 + 76 >> 2])) {
$1 = HEAP32[$0 + 76 >> 2];
break label$1;
}
$1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, 32);
HEAP32[$0 + 76 >> 2] = $1;
}
return $1 << 24 >> 24;
}
function ThumbBaseJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28_29($3 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4);
VRMLRotation__print_28_IO_FILE__2c_20int_29_20const(VRMLRotation__VRMLRotation_28Quaternion_20const__29($3, $4), $1, $2);
__stack_pointer = $3 + 32 | 0;
}
function HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__29($0, $1, $2, $3, $4, $5) {
var $6 = 0;
$6 = __stack_pointer - 16 | 0;
__stack_pointer = $6;
$1 = HEAP32[$1 >> 2];
HEAP32[$6 + 4 >> 2] = $1;
HEAP32[$6 + 8 >> 2] = $1;
$0 = HanimAvatar__createSite_28SiteID_2c_20Joint__2c_20Vector_20const__2c_20float_2c_20Vector_20const__2c_20float_29($0, $6 + 4 | 0, $2, $3, $4, $5, $4);
__stack_pointer = $6 + 16 | 0;
return $0;
}
function SplitMovement__setDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $3 = 0;
BasicMovement__setDuration_28float_2c_20bool_29($0, $1, $2);
$1 = Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 44 >> 2]);
$3 = HEAP32[$0 + 528 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 64 >> 2]]($3, $1, $2);
}
$0 = HEAP32[$0 + 532 >> 2];
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1, $2);
}
}
function SSFrame__AddPRSet_28SSPRSet__29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 12 >> 2] = $1;
label$1: {
if (!$1) {
break label$1;
}
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___push_back_28SSPRSet__20const__29($0 + 4 | 0, $2 + 12 | 0);
if (!SSPRSet__IsRoot_28_29(HEAP32[$2 + 12 >> 2])) {
break label$1;
}
HEAP32[$0 + 40 >> 2] = HEAP32[$2 + 12 >> 2];
}
__stack_pointer = $2 + 16 | 0;
}
function CompoundMovement__CompoundMovement_28MovementType_2c_20SET_OF_HANDS_29($0, $1, $2) {
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, $1, $2);
HEAP32[$0 >> 2] = 61436;
HEAP32[19359] = 0;
invoke_ii(380, $0 + 528 | 0) | 0;
$2 = HEAP32[19359];
HEAP32[19359] = 0;
if (($2 | 0) != 1) {
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
BasicMovement___BasicMovement_28_29($0);
__resumeException($1 | 0);
abort();
}
function TwoArmAnimator__update_28_29($0) {
var $1 = 0;
$1 = $0 + 7128 | 0;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_29(HEAP32[$0 >> 2], $1, Math_fround(HEAPF32[$0 + 8 >> 2] - HEAPF32[$0 + 4 >> 2]));
OneArmAnimator__computeJointRotations_28OneHConcretePosture_20const__2c_20float_29($0 + 16 | 0, $1, Math_fround(0));
OneArmAnimator__computeJointRotations_28OneHConcretePosture_20const__2c_20float_29($0 + 3572 | 0, $0 + 7240 | 0, Math_fround(0));
}
function appendIntToString_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 >> 2] = $1;
siprintf($2 + 4 | 0, 10741, $2);
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_20const__29($0, $2 + 4 | 0);
__stack_pointer = $2 + 16 | 0;
}
function TurretJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28_29($3 + 16 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4);
VRMLRotation__print_28_IO_FILE__2c_20int_29_20const(VRMLRotation__VRMLRotation_28Quaternion_20const__29($3, $4), $1, $2);
__stack_pointer = $3 + 32 | 0;
}
function OneHandStuff__update_28OneHandStuff_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
OneHandStuff__setHandOrientation_28Direction3_2c_20Direction2_29($0, Direction3__Direction3_28Direction3_20const__29($2 + 16 | 0, $1), Direction2__Direction2_28Direction2_20const__29($2 + 8 | 0, $1 + 12 | 0));
$1 = HEAP32[$1 + 36 >> 2];
if ($1) {
HEAP32[$0 + 36 >> 2] = $1;
}
__stack_pointer = $2 + 32 | 0;
}
function minDstSqJoints_28float_2c_20Vector__2c_20DynamicArrayP_Joint___29($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
label$1: {
if (!$1) {
break label$1;
}
while (1) {
if (HEAP32[$1 + 12 >> 2] <= ($2 | 0)) {
break label$1;
}
$4 = Vector__distanceSq_28Vector_20const__29_20const($0, DynamicArrayP_Joint___getElement_28int_29_20const($1, $2) + 68 | 0);
$3 = $3 > $4 ? $4 : $3;
$2 = $2 + 1 | 0;
continue;
}
}
return $3;
}
function element4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 39;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 41) {
break label$2;
}
break;
case 0:
break label$1;
case 1:
case 2:
break label$2;
case 3:
break label$3;
}
}
HEAP32[$0 >> 2] = 822;
return 51;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function element0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 39;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 41) {
break label$2;
}
break;
case 0:
break label$1;
case 1:
case 2:
break label$2;
case 3:
break label$3;
}
}
HEAP32[$0 >> 2] = 796;
return 40;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function attlist0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 41) {
break label$2;
}
break;
case 0:
break label$1;
case 1:
case 2:
break label$2;
case 3:
break label$3;
}
}
HEAP32[$0 >> 2] = 795;
return 34;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20float__2c_20char_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = 0;
$0 = bool_20HA_get_attrib_float_2c_20double__28HashAny_char_20const__2c_20char_20const___20const__2c_20float__2c_20AttribStatus__2c_20char_20const__2c_20char_20const__29($0, $1, $3 + 12 | 0, 7531, $2);
__stack_pointer = $3 + 16 | 0;
return $0;
}
function AnimgenInstance__DeAllocate_28int_29($0) {
var $1 = 0, $2 = 0;
$1 = AnimgenInstance__getInst_28int_29($0);
label$1: {
if (!$1) {
break label$1;
}
animgen_lite_terminate();
$2 = ($0 << 2) + 75492 | 0;
$0 = HEAP32[$2 >> 2];
if ($0) {
AnimgenInstance___AnimgenInstance_28_29($0);
operator_20delete_28void__29($0);
HEAP32[$2 >> 2] = 0;
}
$0 = HEAP32[$1 + 12 >> 2];
if (!$0) {
break label$1;
}
fclose($0);
}
return ($1 | 0) != 0;
}
function std____2__operator___28std____2__error_condition_20const__2c_20std____2__error_condition_20const__29($0, $1) {
var $2 = 0;
if (std____2__error_category__operator___28std____2__error_category_20const__29_20const(std____2__error_condition__category_28_29_20const($0), std____2__error_condition__category_28_29_20const($1))) {
$2 = (std____2__error_condition__value_28_29_20const($0) | 0) == (std____2__error_condition__value_28_29_20const($1) | 0);
}
return $2;
}
function normal_scanCdataSection($0, $1, $2) {
var $3 = 0;
$3 = -1;
label$1: {
if (($1 - $0 | 0) < 6) {
break label$1;
}
$1 = $0 + 6 | 0;
$3 = 0;
while (1) {
label$3: {
if (($3 | 0) == 6) {
$3 = 8;
} else {
if (HEAPU8[$0 | 0] == HEAPU8[$3 + 51760 | 0]) {
break label$3;
}
$1 = $0;
$3 = 0;
}
HEAP32[$2 >> 2] = $1;
break label$1;
}
$0 = $0 + 1 | 0;
$3 = $3 + 1 | 0;
continue;
}
}
return $3;
}
function SprintIndent_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20int_29($0, $1) {
var $2 = 0;
$1 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, 24232);
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function doctype0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 3;
label$1: {
label$2: {
label$3: {
switch ($1 - 15 | 0) {
default:
if (($1 | 0) != 41) {
break label$2;
}
break;
case 0:
break label$1;
case 1:
case 2:
break label$2;
case 3:
break label$3;
}
}
HEAP32[$0 >> 2] = 782;
return 4;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function build_model($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = HEAP32[$0 + 340 >> 2];
$3 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]](Math_imul(HEAP32[$2 + 156 >> 2], 20) + HEAP32[$2 + 148 >> 2] | 0) | 0;
if ($3) {
$2 = HEAP32[$2 + 156 >> 2];
HEAP32[$1 + 12 >> 2] = $3 + 20;
HEAP32[$1 + 8 >> 2] = Math_imul($2, 20) + $3;
build_node($0, 0, $3, $1 + 12 | 0, $1 + 8 | 0);
}
__stack_pointer = $1 + 16 | 0;
return $3;
}
function SplitMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAP32[$0 + 528 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $1, $2);
}
$3 = HEAP32[$0 + 532 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $1, $2);
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function bool_20get_attrib_int_2c_20long__28XMLCell__2c_20int__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = 0;
$1 = bool_20HA_get_attrib_int_2c_20long__28HashAny_char_20const__2c_20char_20const___20const__2c_20int__2c_20AttribStatus__2c_20char_20const__2c_20char_20const__29(HEAP32[$0 + 4 >> 2], $1, $4 + 12 | 0, $2, $3);
__stack_pointer = $4 + 16 | 0;
return $1;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
var $6 = 0, $7 = 0;
$6 = HEAP32[$0 + 4 >> 2];
$7 = $6 >> 8;
if ($6 & 1) {
$7 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2], $7);
}
$0 = HEAP32[$0 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
}
function std____2__locale____imp__has_facet_28long_29_20const($0, $1) {
var $2 = 0;
$0 = $0 + 8 | 0;
if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) >>> 0 > $1 >>> 0) {
$2 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2] != 0;
}
return $2;
}
function SiGMLHandshape__DefaultDigits_28_29_20const($0) {
var $1 = 0, $2 = 0, $3 = 0;
$2 = HEAP32[$0 >> 2];
label$1: {
if ($2 >>> 0 > 12) {
break label$1;
}
$3 = 1 << $2;
if (!($3 & 7032)) {
if (!($3 & 1158)) {
break label$1;
}
$1 = MakeDigits_28char_20const__29(12699);
break label$1;
}
$1 = HEAPU16[$0 + 52 >> 1];
if ($1) {
break label$1;
}
$1 = HEAP16[(Math_imul($2, 160) + 70752 | 0) + 152 >> 1];
}
return $1 << 16 >> 16;
}
function EllipseInfo__getZ_28float_29_20const($0, $1) {
var $2 = Math_fround(0);
$2 = HEAPF32[$0 >> 2];
if ($2 == Math_fround(0)) {
return Math_fround(HEAPF32[$0 + 12 >> 2] - Math_fround(Math_fround($1 * $1) * HEAPF32[$0 + 4 >> 2]));
}
$1 = maxREAL_28float_2c_20float_29(Math_fround(Math_fround(1) - sqr_28float_29(Math_fround($1 / $2))), Math_fround(0));
return Math_fround(Math_fround(HEAPF32[$0 + 4 >> 2] * Math_fround(Math_sqrt($1))) + HEAPF32[$0 + 12 >> 2]);
}
function std____2__error_category__equivalent_28int_2c_20std____2__error_condition_20const__29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($3 + 8 | 0, $0, $1);
$0 = std____2__operator___28std____2__error_condition_20const__2c_20std____2__error_condition_20const__29($3 + 8 | 0, $2);
__stack_pointer = $3 + 16 | 0;
return $0 | 0;
}
function TrajectoryParams__TrajectoryParams_28ControllerParams_20const__2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
$5 = $1;
$6 = HEAP32[$5 >> 2];
$1 = HEAP32[$5 + 4 >> 2];
HEAP32[$0 >> 2] = $6;
HEAP32[$0 + 4 >> 2] = $1;
$6 = HEAP32[$5 + 12 >> 2];
$1 = HEAP32[$5 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = $6;
HEAPF32[$0 + 24 >> 2] = $4;
HEAPF32[$0 + 20 >> 2] = $3;
HEAPF32[$0 + 16 >> 2] = $2;
return $0;
}
function TokenStream___TokenStream_28_29($0) {
var $1 = 0;
TokenStream__close_28_29($0);
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
$1 = HEAP32[$0 + 16 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicString___DynamicString_28_29($1));
HEAP32[$0 + 16 >> 2] = 0;
}
$1 = HEAP32[$0 + 20 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_char____DynamicArrayP_28_29($1));
HEAP32[$0 + 20 >> 2] = 0;
}
return $0;
}
function attlist1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
label$2: {
switch ($1 - 15 | 0) {
case 2:
HEAP32[$0 >> 2] = 783;
return 33;
default:
if (($1 | 0) == 41) {
break label$1;
}
case 1:
common($0);
$2 = -1;
break;
case 3:
break label$1;
case 0:
break label$2;
}
}
return $2 | 0;
}
HEAP32[$0 >> 2] = 802;
return 22;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 
wasm2js_i32$1 = $1, HEAP8[wasm2js_i32$0 + 11 | 0] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 
wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function SeqMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAPU16[$0 + 540 >> 1];
if ($3 << 16 > 0) {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0 + 528 | 0, $3 - 1 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $1, $2);
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function ParMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = $0 + 528 | 0;
$5 = HEAP16[$0 + 540 >> 1];
$0 = 0;
while (1) {
$3 = $0 << 16 >> 16;
if (($5 | 0) > ($3 | 0)) {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($4, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $1, $2);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29___delItem_28HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashChain_28_29($1));
continue;
}
break;
}
}
function TwoHConcretePostureChange__setCopyRest_28TwoHConcretePostureChange_20const__29($0, $1) {
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0, $1);
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 112 | 0, $1 + 112 | 0);
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 224 | 0, $1 + 224 | 0);
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 336 | 0, $1 + 336 | 0);
}
function ParTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
while (1) {
$4 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$4 + 12 >> 2] > ($5 | 0)) {
$4 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($4, $5);
FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1, $2, $3);
$5 = $5 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_OptionSpec___deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
OptionSpec___OptionSpec_28_29($2);
operator_20delete_28void__29($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function animgen_preFlightCheck_28char__2c_20bool_20_28__29_28void__2c_20AnimgenStatus_2c_20int_29_2c_20void__29($0, $1, $2) {
var $3 = 0;
HEAP32[18884] = 0;
label$1: {
label$2: {
if (!HEAPU8[75628]) {
HEAP32[18884] = 7;
$0 = 7;
break label$2;
}
$3 = 1;
if ($0) {
break label$1;
}
HEAP32[18884] = 6;
$0 = 6;
}
$3 = 0;
if (!$1) {
break label$1;
}
FUNCTION_TABLE[$1 | 0]($2, $0, 0) | 0;
$3 = 0;
}
return $3;
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
__cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
}
}
function SHMScalarController__resetOvershoot_28_29($0) {
var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0);
$1 = HEAPF32[$0 + 72 >> 2];
$2 = HEAPF32[$0 + 28 >> 2];
if ($2 > Math_fround(0)) {
$3 = HEAPF32[$0 + 80 >> 2];
label$2: {
if ($3 < $1) {
$1 = Math_fround($2 + $1);
break label$2;
}
if (!($1 < $3)) {
break label$2;
}
$1 = Math_fround($1 - $2);
}
HEAP8[$0 + 32 | 0] = 0;
}
HEAPF32[$0 + 76 >> 2] = $1;
}
function ParMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = $0 + 528 | 0;
$5 = HEAP16[$0 + 540 >> 1];
$0 = 0;
while (1) {
$3 = $0 << 16 >> 16;
if (($5 | 0) > ($3 | 0)) {
$3 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($4, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1, $2);
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function poolCopyString($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 12 >> 2];
if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
if (!poolGrow($0)) {
return 0;
}
$2 = HEAP32[$0 + 12 >> 2];
}
$3 = HEAPU8[$1 | 0];
HEAP32[$0 + 12 >> 2] = $2 + 1;
HEAP8[$2 | 0] = $3;
$2 = HEAPU8[$1 | 0];
$1 = $1 + 1 | 0;
if ($2) {
continue;
}
break;
}
$1 = HEAP32[$0 + 16 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 12 >> 2];
return $1;
}
function TwoHandStuff__TwoHandStuff_28TwoHandStuff_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = OneHandStuff__OneHandStuff_28OneHandStuff_20const__29($0, $1);
HEAP32[19359] = 0;
invoke_iii(476, $0 + 44 | 0, $1 + 44 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHandStuff___OneHandStuff_28_29($0);
__resumeException($1 | 0);
abort();
}
function ParTimedMorph__scaleDuration_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] <= ($3 | 0)) {
AbstractTimedMorph__scaleDuration_28float_29($0, $1);
} else {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $1);
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function StringToMorphTime_28char__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = Math_fround(0);
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
StringToMorphTimeType_28char__2c_20MorphTime__2c_20float__29($0, $1 + 12 | 0, $1 + 8 | 0);
__stack_pointer = $1 + 16 | 0;
$0 = HEAP32[$1 + 12 >> 2];
if ($0) {
$2 = Math_fround(HEAPF32[17101] * HEAPF32[(($0 << 2) + 68404 | 0) + 132 >> 2]);
} else {
$2 = HEAPF32[$1 + 8 >> 2];
}
return Math_fround($2);
}
function SeqTimedMorph__shiftStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] > ($3 | 0)) {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2, $1);
}
$3 = $3 + 1 | 0;
continue;
}
break;
}
AbstractTimedMorph__shiftStart_28float_29($0, $1);
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____makeHash_28HashAny_char_20const__2c_20int___2c_20char_20const__2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____vmakeHash_28HashAny_char_20const__2c_20int___2c_20char_20const__2c_20void__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0) {
var $1 = 0;
$1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
$0 = 0;
while (1) {
if (($0 | 0) != 3) {
HEAP32[($0 << 2) + $1 >> 2] = 0;
$0 = $0 + 1 | 0;
continue;
}
break;
}
}
function poolClear($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP32[$0 >> 2];
label$1: {
$2 = HEAP32[$0 + 4 >> 2];
if (!$2) {
HEAP32[$0 + 4 >> 2] = $1;
break label$1;
}
while (1) {
if (!$1) {
break label$1;
}
$3 = HEAP32[$1 >> 2];
HEAP32[$1 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
$2 = $1;
$1 = $3;
continue;
}
}
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function entity0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 11;
label$1: {
label$2: {
switch ($1 - 18 | 0) {
case 4:
HEAP32[$0 >> 2] = 793;
return 11;
case 0:
HEAP32[$0 >> 2] = 794;
return 9;
default:
if (($1 | 0) == 15) {
break label$1;
}
break;
case 1:
case 2:
case 3:
break label$2;
}
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___delItem_28HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChain_28_29($1));
continue;
}
break;
}
}
function completeQuad_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector__29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
Vector__Vector_28_29($4);
Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($4, $0, $2);
Vector__setSubtract_28Vector_20const__29($4, $1);
Vector__setFrom_28Vector_20const__29($3, $4);
Vector__checkValidVector_28_29_20const($3);
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_XMLCell___deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
XMLCell___XMLCell_28_29($2);
operator_20delete_28void__29($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), 
wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function MakeSplitMovement_28BasicMovement__2c_20BasicMovement__2c_20bool_29($0, $1, $2) {
var $3 = 0;
$3 = operator_20new_28unsigned_20long_29(536);
HEAP32[19359] = 0;
invoke_iiii(497, $3 | 0, ($2 ? $0 : $1) | 0, ($2 ? $1 : $0) | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $3;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($3);
__resumeException($0 | 0);
abort();
}
function DynamicArray1_AbstractTimedMorph____deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__2c_20float_29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$1 = HEAP32[$1 >> 2];
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 + 8 >> 2] = $1;
HanimAvatar__setSiteNormal_28Site__2c_20Vector_20const__2c_20float_29($4, HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($0 + 172 | 0, $4 + 4 | 0), $2, $3);
__stack_pointer = $4 + 16 | 0;
}
function DynamicArrayP_AbstractTimedMorph___deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function Controller__resetOvershoot_28_29($0) {
var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0);
$1 = HEAPF32[$0 + 60 >> 2];
$2 = HEAPF32[$0 + 12 >> 2];
if ($2 > Math_fround(0)) {
$3 = HEAPF32[$0 + 68 >> 2];
label$2: {
if ($3 < $1) {
$1 = Math_fround($2 + $1);
break label$2;
}
if (!($1 < $3)) {
break label$2;
}
$1 = Math_fround($1 - $2);
}
HEAP8[$0 + 16 | 0] = 0;
}
HEAPF32[$0 + 64 >> 2] = $1;
}
function ParTimedMorph__shiftStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] <= ($3 | 0)) {
AbstractTimedMorph__shiftStart_28float_29($0, $1);
} else {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2, $1);
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function little2_scanCdataSection($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = -1;
if (($1 - $0 | 0) >= 12) {
$4 = $0 + 12 | 0;
$1 = 0;
label$2: {
while (1) {
if (($1 | 0) == 6) {
$3 = 8;
break label$2;
}
$3 = 0;
if (!(HEAPU8[$0 + 1 | 0] | HEAPU8[$0 | 0] != HEAPU8[$1 + 51760 | 0])) {
$0 = $0 + 2 | 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$4 = $0;
}
HEAP32[$2 >> 2] = $4;
}
return $3;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) {
var $1 = 0;
$1 = 10;
if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) - 1 | 0;
}
return $1;
}
function prologProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $1;
$5 = HEAP32[$0 + 144 >> 2];
$5 = FUNCTION_TABLE[HEAP32[$5 >> 2]]($5, $1, $2, $4 + 12 | 0) | 0;
$0 = doProlog($0, HEAP32[$0 + 144 >> 2], $1, $2, $5, HEAP32[$4 + 12 >> 2], $3, !HEAPU8[$0 + 468 | 0]);
__stack_pointer = $4 + 16 | 0;
return $0 | 0;
}
function Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0, $6 = Math_fround(0);
$6 = Math_fround(Math_fround(1) - $3);
while (1) {
if (($4 | 0) == 3) {
Vector__checkValidVector_28_29_20const($0);
} else {
$5 = $4 << 2;
HEAPF32[$5 + $0 >> 2] = Math_fround($6 * HEAPF32[$1 + $5 >> 2]) + Math_fround(HEAPF32[$2 + $5 >> 2] * $3);
$4 = $4 + 1 | 0;
continue;
}
break;
}
}
function Joint__transformHanimToJointFrame_28Quaternion__2c_20Quaternion_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
Transform__quat_28_29_20const($3, $0 + 68 | 0);
Quaternion__setPostConjugate2_28Quaternion_20const__2c_20Quaternion_20const__29($1, $2, $3);
Transform__quat_28_29_20const($3, $0 + 40 | 0);
Quaternion__setPreCompose_28Quaternion_20const__29($1, $3);
__stack_pointer = $3 + 16 | 0;
}
function TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
label$1: {
if (HaveRightHand_28SET_OF_HANDS_29($1)) {
$2 = 0;
if (!OneHConcretePosture__totallyDefined_28_29_20const($0)) {
break label$1;
}
}
$2 = 1;
if (!HaveLeftHand_28SET_OF_HANDS_29($1)) {
break label$1;
}
$2 = OneHConcretePosture__totallyDefined_28_29_20const($0 + 112 | 0);
}
return $2 | 0;
}
function StaticGestureFromXML_28Gesture__2c_20DynamicArrayP_XMLCell___2c_20int_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = $1 ? HEAP32[$1 + 12 >> 2] : 0;
$4 = ($2 | 0) < ($3 | 0) ? $3 : $2;
while (1) {
$3 = $2;
if (($4 | 0) == ($3 | 0)) {
return $4;
}
$2 = $3 + 1 | 0;
if (AddToStaticGestureFromXML_28Gesture__2c_20XMLCell__29($0, DynamicArrayP_XMLCell___getElement_28int_29_20const($1, $3))) {
continue;
}
break;
}
return $3;
}
function DynamicArray1_JointRotation____deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function scaling_28float_2c_20float_2c_20float_29($0, $1, $2) {
$1 = $1 < Math_fround(0) ? Math_fround(-$1) : $1;
$2 = $2 < Math_fround(0) ? Math_fround(-$2) : $2;
return Math_fround(Math_max(Math_fround(Math_fround(Math_fround(Math_fround($0 + Math_fround(-1)) * Math_fround(.5)) * Math_fround(cos_28float_29(Math_fround(($1 > $2 ? Math_fround(1) : Math_fround($1 / $2)) * HEAPF32[17057])) + Math_fround(1))) + Math_fround(1)), Math_fround(1)));
}
function big2_scanCdataSection($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = -1;
if (($1 - $0 | 0) >= 12) {
$4 = $0 + 12 | 0;
$1 = 0;
label$2: {
while (1) {
if (($1 | 0) == 6) {
$3 = 8;
break label$2;
}
$3 = 0;
if (!(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] != HEAPU8[$1 + 51760 | 0])) {
$0 = $0 + 2 | 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$4 = $0;
}
HEAP32[$2 >> 2] = $4;
}
return $3;
}
function DynamicArrayP_BasicMovement___deleteAll_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$3 = $1 << 2;
$2 = HEAP32[$3 + HEAP32[$0 >> 2] >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[HEAP32[$0 >> 2] + $3 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function Direction2__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$1) {
break label$1;
}
if (Direction2__isUndef_28_29_20const($0)) {
fputs(7538, $1);
break label$1;
}
$3 = HEAPF32[$0 >> 2];
HEAPF64[$2 + 8 >> 3] = HEAPF32[$0 + 4 >> 2];
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 7921, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function attlist7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
label$2: {
switch ($1 - 21 | 0) {
case 3:
HEAP32[$0 >> 2] = 811;
return 33;
case 0:
HEAP32[$0 >> 2] = 815;
return 33;
default:
if (($1 | 0) == 15) {
break label$1;
}
break;
case 1:
case 2:
break label$2;
}
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function attlist4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
label$2: {
switch ($1 - 21 | 0) {
case 3:
HEAP32[$0 >> 2] = 811;
return 33;
case 0:
HEAP32[$0 >> 2] = 813;
return 33;
default:
if (($1 | 0) == 15) {
break label$1;
}
break;
case 1:
case 2:
break label$2;
}
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0;
if (($1 | 0) >= 0) {
DynamicArray1_Vector___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
$3 = HEAP32[$2 + 4 >> 2];
$1 = HEAP32[$0 >> 2] + Math_imul($1, 12) | 0;
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
HEAP32[$1 + 4 >> 2] = $3;
HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
}
function TwoHConcretePosture__TwoHConcretePosture_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$0 = OneHConcretePosture__OneHConcretePosture_28bool_29($0, 1);
HEAP32[19359] = 0;
invoke_iii(89, $0 + 112 | 0, 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHConcretePosture___OneHConcretePosture_28_29($0);
__resumeException($1 | 0);
abort();
}
function std____2__allocator_SSPRSet____allocate_28unsigned_20long_29($0, $1) {
if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___max_size_std____2__allocator_SSPRSet___2c_20void__28std____2__allocator_SSPRSet___20const__29($0) >>> 0 < $1 >>> 0) {
std____2____throw_length_error_28char_20const__29(8359);
abort();
}
return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}
function std____2__allocator_SSMorph____allocate_28unsigned_20long_29($0, $1) {
if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSMorph___20___max_size_std____2__allocator_SSMorph___2c_20void__28std____2__allocator_SSMorph___20const__29($0) >>> 0 < $1 >>> 0) {
std____2____throw_length_error_28char_20const__29(8359);
abort();
}
return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}
function printAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20int_2c_20InvertibleStringArray__29($0, $1, $2, $3, $4) {
if ($3) {
printAttribValue_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20char_20const__29($0, $1, $2, safeString_28char_20const__29(InvertibleStringArray__valueFromIndex_28int_29_20const($4, $3)));
}
}
function TorsoDecollider__ForceOutsideOffset_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = Vector__Vector_28_29($3);
$0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $4) | 0;
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($2, $4, $1);
__stack_pointer = $3 + 16 | 0;
return $0 | 0;
}
function SetREALArray_28float__2c_20int_2c_20____29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
HEAP32[$3 + 12 >> 2] = $2;
if (!($1 & 32768)) {
$2 = HEAP32[$3 + 12 >> 2];
while (1) {
$4 = ($1 << 16 >> 14) + $0 | 0;
$1 = $2 + 7 & -8;
HEAPF32[$4 >> 2] = HEAPF64[$1 >> 3];
$2 = $1 + 12 | 0;
$1 = HEAP32[$1 + 8 >> 2];
if (!($1 & 32768)) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
}
function sphTriFaceAngle_28float_2c_20float_2c_20float_29($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = cos_28float_29($0);
$4 = cos_28float_29($1);
$2 = Math_fround(cos_28float_29($2) - Math_fround($3 * $4));
$3 = Math_fround($2 * $2);
$0 = Math_fround(sin_28float_29($0) * sin_28float_29($1));
$0 = Math_fround($0 * $0);
return atan2_28float_2c_20float_29(sqrt_28float_29(Math_fround(($0 < $3 ? $3 : $0) - $3)), $2);
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
var $5 = 0, $6 = 0;
$5 = HEAP32[$0 + 4 >> 2];
$6 = $5 >> 8;
if ($5 & 1) {
$6 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$2 >> 2], $6);
}
$0 = HEAP32[$0 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
}
function SHMScalarController__resetVar_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 80 >> 2] = $1;
HEAPF32[$0 + 76 >> 2] = $1;
HEAPF32[$0 + 72 >> 2] = $1;
HEAP32[$0 + 88 >> 2] = 0;
HEAP32[$0 + 92 >> 2] = 0;
HEAP8[$0 + 32 | 0] = 1;
HEAP32[$0 + 100 >> 2] = 0;
HEAP32[$0 + 104 >> 2] = 0;
HEAP32[$0 + 64 >> 2] = 0;
HEAP32[$0 + 68 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 12 >> 2];
}
function HanimAnimationRecord__ApplyPseudoMorphs_28_29($0) {
var $1 = 0, $2 = 0, $3 = Math_fround(0);
while (1) {
if (($1 | 0) != 18) {
$2 = $1 << 2;
$3 = HEAPF32[$2 + HEAP32[$0 + 348 >> 2] >> 2];
if (!(HEAPF32[HEAP32[$0 + 344 >> 2] + $2 >> 2] == Math_fround(0) & $3 == Math_fround(0))) {
HanimAnimationRecord__ApplyPseudoMorph_28short_2c_20float_29($0, $1 << 16 >> 16, $3);
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function printJointBending_28_IO_FILE__2c_20char_20const__2c_20float_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
label$1: {
if (!$0) {
break label$1;
}
if ($2 == Math_fround(-100)) {
HEAP32[$3 >> 2] = $1;
fiprintf($0, 7535, $3);
break label$1;
}
HEAP32[$3 + 16 >> 2] = $1;
HEAPF64[$3 + 24 >> 3] = $2;
__small_fprintf($0, 7935, $3 + 16 | 0);
}
__stack_pointer = $3 + 32 | 0;
}
function HanimAvatar__locateSiteID_28bool_2c_20SiteID_29_20const($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
$2 = HEAP32[$2 >> 2];
HEAP32[$3 + 12 >> 2] = $2;
HEAP32[$3 + 16 >> 2] = $2;
HanimAvatar__locateSiteID_28bool_2c_20SiteID_2c_20Vector__2c_20Joint___2c_20Site___29_20const($0, $1, $3 + 12 | 0, 0, $3 + 28 | 0, $3 + 24 | 0);
__stack_pointer = $3 + 32 | 0;
$0 = HEAP32[$3 + 24 >> 2];
return $0;
}
function AnimgenInstance__SetOutput_28int_2c_20char_20const__29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
$0 = AnimgenInstance__getInst_28int_29($0);
label$1: {
if (!$0) {
break label$1;
}
$1 = copyString_28char_20const__29($1);
HEAP32[$0 + 8 >> 2] = $1;
if (!$1) {
break label$1;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = fopen($1, 1780), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
}
return ($0 | 0) != 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
var $1 = 0;
$1 = 10;
if ($0 >>> 0 >= 11) {
$0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0 + 1 | 0);
$1 = $0;
$0 = $0 - 1 | 0;
$1 = ($0 | 0) == 11 ? $1 : $0;
}
return $1;
}
function FingerPlayMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 528 >> 2] = 2;
HEAP32[$0 + 532 >> 2] = 2;
if (HaveRightHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
HEAP16[$0 + 508 >> 1] = HEAPU16[$0 + 508 >> 1] | 128;
}
if (HaveLeftHand_28SET_OF_HANDS_29(HEAP32[$0 + 8 >> 2])) {
$1 = $0;
$0 = $0 + 510 | 0;
HEAP16[$0 >> 1] = HEAPU16[$1 + 510 >> 1] | 128;
}
}
function SphereInterpolator__SphereInterpolator_28_29($0) {
var $1 = 0;
while (1) {
OctantInterpolator__OctantInterpolator_28_29(Math_imul($1, 84) + $0 | 0);
$1 = $1 + 1 | 0;
if (($1 | 0) != 4) {
continue;
}
break;
}
SphereInterpolator__setFrom_28float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(0));
return $0;
}
function ScaleSeqNonManual_28DynamicArray1_DynamicArray1_AtomicNonmanual_____2c_20float_29($0, $1) {
var $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($2 | 0)) {
break label$1;
}
ScaleParNonManual_28DynamicArray1_AtomicNonmanual___2c_20float_29(DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($0, $2), $1);
$2 = $2 + 1 | 0;
continue;
}
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) {
return unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0)) - 16 | 0;
}
function SSFrame___SSFrame_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 59112;
SSFrame__MakeEmpty_28_29($0);
$1 = HEAP32[$0 + 36 >> 2];
if ($1) {
operator_20delete_5b_5d_28void__29($1);
}
HEAP32[$0 + 36 >> 2] = 0;
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____vector_28_29($0 + 16 | 0);
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____vector_28_29($0 + 4 | 0);
return $0 | 0;
}
function AbstractTimedMorph__operator__28AbstractTimedMorph_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = $1;
$2 = HEAP32[$3 + 4 >> 2];
$1 = HEAP32[$3 + 8 >> 2];
$4 = $2;
$2 = $0;
HEAP32[$2 + 4 >> 2] = $4;
HEAP32[$2 + 8 >> 2] = $1;
HEAP32[$2 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
$2 = HEAP32[$3 + 16 >> 2];
$1 = HEAP32[$3 + 12 >> 2];
$4 = $1;
$1 = $0;
HEAP32[$1 + 12 >> 2] = $4;
HEAP32[$1 + 16 >> 2] = $2;
return $1;
}
function HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____delItem_28HashChain_char_20const__2c_20HashAny_char_20const__2c_20int______29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20HashAny_char_20const__2c_20int______HashChain_28_29($1));
continue;
}
break;
}
}
function HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20float_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAPF32[$3 + 12 >> 2] = $2;
HashAttribs_attrib_REAL_28HashAny_char_20const__2c_20char_20const___20const__2c_20float__2c_20char_20const__29($0, $3 + 12 | 0, $1);
__stack_pointer = $3 + 16 | 0;
$2 = HEAPF32[$3 + 12 >> 2];
return $2;
}
function float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, $0, $1);
__stack_pointer = $2 + 16 | 0;
return $3 ? $1 : $0;
}
function XMLCell__element_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if ($1) {
$0 = XMLCell__element_28char_20const__2c_20int_29($0, $1, 0);
if ($0 | !HEAPU8[67581]) {
break label$1;
}
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29(40818, $2);
}
$0 = 0;
}
__stack_pointer = $2 + 16 | 0;
return $0 | 0;
}
function _GLOBAL__sub_I_Movement_cpp() {
__cxx_global_var_init_43();
__cxx_global_var_init_567();
__cxx_global_var_init_566();
__cxx_global_var_init_1_34();
__cxx_global_var_init_544();
__cxx_global_var_init_2_16();
__cxx_global_var_init_3_7();
__cxx_global_var_init_546();
__cxx_global_var_init_545();
__cxx_global_var_init_40_1();
__cxx_global_var_init_41_1();
__cxx_global_var_init_568();
__cxx_global_var_init_569();
}
function std____2____wrap_iter_SSMorph__20const______wrap_iter_SSMorph____28std____2____wrap_iter_SSMorph____20const__2c_20std____2__enable_if_is_convertible_SSMorph___2c_20SSMorph__20const____value_2c_20void___type__29($0, $1, $2) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____wrap_iter_SSMorph_____base_28_29_20const($1), 
HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
return $0;
}
function findSuffix_28char_20const__29($0) {
var $1 = 0, $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
$2 = HEAPU8[$0 | 0];
label$3: {
if (($2 | 0) != 46) {
if ($2) {
$1 = isDirectorySeparator_28char_29($2 << 24 >> 24) ? 0 : $1;
break label$3;
}
$1 = $1 ? $1 : $0;
break label$1;
}
$1 = $0 + 1 | 0;
}
$0 = $0 + 1 | 0;
continue;
}
}
return $1;
}
function std____2____throw_length_error_28char_20const__29($0) {
var $1 = 0, $2 = 0;
$1 = __cxa_allocate_exception(8) | 0;
HEAP32[19359] = 0;
$2 = invoke_iii(16, $1 | 0, $0 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
__cxa_throw($2 | 0, 58980, 17);
abort();
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
__cxa_free_exception($1 | 0);
__resumeException($0 | 0);
abort();
}
function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) | 0;
}
function SHMScalarController__new_ref1_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
$1 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0)));
HEAPF32[$0 + 8 >> 2] = Math_max($1 < Math_fround(0) ? Math_fround(-$1) : $1, Math_fround(9999999747378752e-20));
}
function std____2__allocator_char___allocate_28unsigned_20long_29($0, $1) {
if (unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29($0) >>> 0 < $1 >>> 0) {
std____2____throw_length_error_28char_20const__29(8359);
abort();
}
return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
}
function pad($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 256 | 0;
__stack_pointer = $5;
if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
$2 = $2 - $3 | 0;
$3 = $2 >>> 0 < 256;
memset($5, $1 & 255, $3 ? $2 : 256);
if (!$3) {
while (1) {
out($0, $5, 256);
$2 = $2 - 256 | 0;
if ($2 >>> 0 > 255) {
continue;
}
break;
}
}
out($0, $5, $2);
}
__stack_pointer = $5 + 256 | 0;
}
function getint($0) {
var $1 = 0, $2 = 0, $3 = 0;
if (!isdigit(HEAP8[HEAP32[$0 >> 2]])) {
return 0;
}
while (1) {
$3 = HEAP32[$0 >> 2];
$1 = -1;
if ($2 >>> 0 <= 214748364) {
$1 = HEAP8[$3 | 0] - 48 | 0;
$2 = Math_imul($2, 10);
$1 = (2147483647 - $2 | 0) < ($1 | 0) ? -1 : $1 + $2 | 0;
}
HEAP32[$0 >> 2] = $3 + 1;
$2 = $1;
if (isdigit(HEAP8[$3 + 1 | 0])) {
continue;
}
break;
}
return $1;
}
function fixForearmRot_28Quaternion__2c_20Quaternion__2c_20float__2c_20float_29($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
if ($3 != Math_fround(0)) {
$5 = Quaternion__Quaternion_28_29($4);
Quaternion__decomposeQuatMY_28Quaternion__2c_20float__2c_20float_29($0, $5, $2, $3);
Quaternion__setCompose_28Quaternion_20const__29($1, $5);
}
__stack_pointer = $4 + 16 | 0;
}
function TokenStream__fillBuffer_28_29($0) {
var $1 = 0, $2 = 0;
if (HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 + 16 >> 2];
$2 = DynamicArray_char_2c_20_28char_290___getAddress_28int_29_20const($1, HEAP32[$1 + 12 >> 2]);
$1 = HEAP32[$0 + 16 >> 2];
$1 = fread($2, 1, HEAP32[$1 + 8 >> 2] - HEAP32[$1 + 12 >> 2] | 0, HEAP32[$0 + 4 >> 2]);
$0 = HEAP32[$0 + 16 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $1;
}
}
function HanimAvatar__setSiteNormal_28SiteID_2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = HEAP32[$1 >> 2];
HEAP32[$3 + 4 >> 2] = $1;
HEAP32[$3 + 8 >> 2] = $1;
HanimAvatar__setSiteNormal_28Site__2c_20Vector_20const__29($3, HashAny_SiteID_20const_2c_20Site____lookupString_28SiteID_29_20const($0 + 172 | 0, $3 + 4 | 0), $2);
__stack_pointer = $3 + 16 | 0;
}
function HanimAvatar__LookupSite_28char_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
label$1: {
if (!$1) {
break label$1;
}
$1 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const($0 + 144 | 0, $1);
if (($1 | 0) == HEAP32[$0 + 164 >> 2]) {
break label$1;
}
$2 = DynamicArrayP_Site___getElement_28int_29_20const(HEAP32[$0 + 108 >> 2], $1);
}
return $2 | 0;
}
function updatePer1_28Quaternion__2c_20Quaternion_20const__2c_20float_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = Quaternion__Quaternion_28Quaternion_20const__29($3, $1);
Quaternion__setScale_28float_29($1, $2);
Quaternion__setAdd_28Quaternion_20const__29($0, $1);
Quaternion__normalise_28_29($0);
Quaternion__setNonNegativePhase_28_29($0);
__stack_pointer = $3 + 16 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function operator_20new_28unsigned_20long_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 ? $0 : 1;
label$1: {
while (1) {
$0 = dlmalloc($1);
if ($0) {
break label$1;
}
$0 = std__get_new_handler_28_29();
if ($0) {
FUNCTION_TABLE[$0 | 0]();
continue;
}
break;
}
__cxa_throw(std__bad_alloc__bad_alloc_28_29(__cxa_allocate_exception(4) | 0) | 0, 58860, 926);
abort();
}
return $0 | 0;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___addItem_28SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($0, $1, $2) {
HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___insertString_28int_2c_20SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($0, KeyOps_SiGML_Element___hashFunction_28SiGML_Element_2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = +$4;
return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function DynamicString__appendString_28char_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = strlen($1);
DynamicArray_char_2c_20_28char_290___ensureFreeSpace_28int_29($0, $3);
$2 = HEAP32[$0 + 12 >> 2];
while (1) {
$4 = HEAPU8[$1 | 0];
if ($4) {
HEAP8[HEAP32[$0 >> 2] + $2 | 0] = $4;
$1 = $1 + 1 | 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $3;
}
function CannedHandshape__CannedHandshape_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
$1 = FingerBending__FingerBending_28_29($0);
FingerBending__FingerBending_28_29($1 + 16 | 0);
$2 = $1 + 152 | 0;
$0 = $1 + 32 | 0;
while (1) {
$0 = ThumbBending__ThumbBending_28_29($0) + 20 | 0;
if (($2 | 0) != ($0 | 0)) {
continue;
}
break;
}
HEAP32[$1 + 156 >> 2] = 0;
HEAP16[$1 + 152 >> 1] = 0;
return $1 | 0;
}
function durationScale_28MannerFlags_2c_20PathShape_29($0, $1) {
var $2 = 0, $3 = Math_fround(0);
label$1: {
if (HEAPU8[70600]) {
$2 = 68528;
$3 = HEAPF32[17116];
break label$1;
}
$2 = (HEAP32[$0 + 4 >> 2] << 2) + 68520 | 0;
$3 = Math_fround(HEAPF32[((HEAP32[$0 >> 2] << 2) + 68404 | 0) + 48 >> 2] * HEAPF32[(($1 << 2) + 68404 | 0) + 96 >> 2]);
}
$0 = $2;
return Math_fround($3 * HEAPF32[$0 >> 2]);
}
function OneHandStuff__OneHandStuff_28OneHandStuff_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = Direction3__Direction3_28Direction3_20const__29($0, $1);
Direction2__Direction2_28Direction2_20const__29($0 + 12 | 0, $1 + 12 | 0);
Quaternion__Quaternion_28Quaternion_20const__29($0 + 20 | 0, $1 + 20 | 0);
HEAP8[$0 + 40 | 0] = HEAPU8[$1 + 40 | 0];
HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
return $0 | 0;
}
function poolAppendString($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
$3 = HEAPU8[$1 | 0];
if ($3) {
$2 = HEAP32[$0 + 12 >> 2];
if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
if (!poolGrow($0)) {
return 0;
}
$3 = HEAPU8[$1 | 0];
$2 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 + 12 >> 2] = $2 + 1;
HEAP8[$2 | 0] = $3;
$1 = $1 + 1 | 0;
continue;
}
break;
}
return HEAP32[$0 + 16 >> 2];
}
function TwoHCircMoveSpec__TwoHCircMoveSpec_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$0 = OneHCircMoveSpec__OneHCircMoveSpec_28_29($0);
HEAP32[19359] = 0;
invoke_ii(467, $0 + 68 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHCircMoveSpec___OneHCircMoveSpec_28_29($0);
__resumeException($1 | 0);
abort();
}
function MannerFlags__setManner_28Manner_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
label$1: {
switch ($1 - 1 | 0) {
case 3:
HEAP32[$0 + 4 >> 2] = 1;
return;
case 4:
HEAP32[$0 + 4 >> 2] = 3;
return;
case 6:
HEAP8[$0 + 8 | 0] = 1;
return;
case 0:
case 1:
case 2:
case 5:
case 7:
case 8:
case 9:
case 10:
HEAP32[$0 >> 2] = $1;
break;
default:
break label$1;
}
}
}
function DynamicArrayP_char_20const___freeAll_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$2 = $1 << 2;
$3 = HEAP32[$2 + HEAP32[$0 >> 2] >> 2];
if ($3) {
dlfree($3);
HEAP32[HEAP32[$0 >> 2] + $2 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0) {
return std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0));
}
function Transform__setInverse_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$3 = $0 + 12 | 0;
Quaternion__setInverse_28_29($3);
$2 = Vector__Vector_28_29($1);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($3, $0, $2);
Vector__setInverse_28_29($2);
Vector__setFrom_28Vector_20const__29($0, $2);
__stack_pointer = $1 + 16 | 0;
}
function HanimAvatar__SetFaceSitePair_28Location_2c_20short_2c_20short_2c_20Vector_20const__29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
MakeSiteID_28Location_29($5 + 8 | 0, $1);
HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
HanimAvatar__SetFaceSitePair_28SiteID_2c_20short_2c_20short_2c_20Vector_20const__29($0, $5 + 4 | 0, $2, $3, $4);
__stack_pointer = $5 + 16 | 0;
}
function AbstractTimedMorph__shiftStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0);
HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + $1;
HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + $1;
$2 = HEAPF32[$0 + 12 >> 2];
if ($2 >= Math_fround(0)) {
HEAPF32[$0 + 12 >> 2] = $2 + $1;
}
$2 = HEAPF32[$0 + 16 >> 2];
if ($2 >= Math_fround(0)) {
HEAPF32[$0 + 16 >> 2] = $2 + $1;
}
}
function PrecomputeTrajectory_28short_29($0) {
var $1 = 0;
$1 = operator_20new_28unsigned_20long_29(32);
HEAP32[19359] = 0;
invoke_iii(343, $1 | 0, HEAP32[17605] + Math_imul($0 & 65535, 28) | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $1;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function Direction3__makeMirror_28Mirroring_29_20const($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
$3 = HEAPF32[$1 >> 2];
$2 = HEAPU8[$2 | 0];
$4 = $2 & 2 ? Math_fround(-$3) : $3;
$3 = HEAPF32[$1 + 4 >> 2];
$5 = $2 & 4 ? Math_fround(-$3) : $3;
$3 = HEAPF32[$1 + 8 >> 2];
Direction3__Direction3_28float_2c_20float_2c_20float_29($0, $4, $5, $2 & 8 ? Math_fround(-$3) : $3);
}
function DirectedMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
offset1Target_28Vector_20const__2c_20Vector__2c_20Vector__2c_20OneHDirMoveSpec__29($1, $0 + 288 | 0, $0 - -64 | 0, $0 + 600 | 0);
return;
}
offset1Target_28Vector_20const__2c_20Vector__2c_20Vector__2c_20OneHDirMoveSpec__29($1, $0 + 400 | 0, $0 + 176 | 0, $0 + 672 | 0);
}
function AnimgenInstance__AGIStartingStatus_28AnimgenStatus_2c_20int_2c_20bool__29($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$5 = HEAP32[$0 + 36 >> 2];
HEAP32[$4 + 8 >> 2] = $2;
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $5;
emscripten_asm_const_int(66527, 49572, $4 | 0) | 0;
HEAP32[$0 + 32 >> 2] = $1;
HEAP8[$3 | 0] = !$1;
__stack_pointer = $4 + 16 | 0;
}
function std__logic_error__logic_error_28char_20const__29($0, $1) {
$0 = std__exception__exception_28_29($0);
HEAP32[$0 >> 2] = 58880;
HEAP32[19359] = 0;
invoke_iii(927, $0 + 4 | 0, $1 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
std__exception___exception_28_29($0);
__resumeException($1 | 0);
abort();
}
function Quaternion__normalise_28_29($0) {
var $1 = 0, $2 = Math_fround(0), $3 = 0;
label$1: {
$2 = Quaternion__length_28_29_20const($0);
if ($2 == Math_fround(0)) {
break label$1;
}
while (1) {
if (($1 | 0) == 4) {
break label$1;
}
$3 = ($1 << 2) + $0 | 0;
HEAPF32[$3 >> 2] = HEAPF32[$3 >> 2] / $2;
$1 = $1 + 1 | 0;
continue;
}
}
Quaternion__checkValidQuat_28_29_20const($0);
}
function Mirroring__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ($1) {
$0 = HEAPU8[$0 | 0];
HEAP32[$2 + 12 >> 2] = $0 & 8 ? 84 : 70;
HEAP32[$2 + 8 >> 2] = $0 & 4 ? 84 : 70;
HEAP32[$2 + 4 >> 2] = $0 & 2 ? 84 : 70;
HEAP32[$2 >> 2] = $0 & 1 ? 84 : 70;
fiprintf($1, 10823, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function CompoundMovement__operator__28CompoundMovement_20const__29($0, $1) {
var $2 = 0, $3 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 536 >> 2];
$3 = HEAP32[$2 + 540 >> 2];
HEAP32[$0 + 536 >> 2] = $1;
HEAP32[$0 + 540 >> 2] = $3;
$1 = HEAP32[$2 + 532 >> 2];
$3 = HEAP32[$2 + 528 >> 2];
HEAP32[$0 + 528 >> 2] = $3;
HEAP32[$0 + 532 >> 2] = $1;
return $0;
}
function little2_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
label$1: {
while (1) {
$0 = HEAPU8[$3 | 0];
if ($0) {
if (HEAPU8[$1 + 1 | 0] | ($1 | 0) == ($2 | 0) | HEAPU8[$1 | 0] != ($0 | 0)) {
break label$1;
}
$3 = $3 + 1 | 0;
$1 = $1 + 2 | 0;
continue;
}
break;
}
$4 = ($1 | 0) == ($2 | 0);
}
return $4 | 0;
}
function RepeatMovement___RepeatMovement_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 62268;
$1 = HEAP32[$0 + 696 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 696 >> 2] = 0;
}
$1 = HEAP32[$0 + 700 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 700 >> 2] = 0;
}
return BasicMovement___BasicMovement_28_29($0) | 0;
}
function Handshape___Handshape_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 220 >> 2];
if ($1) {
operator_20delete_28void__29(SiGMLHandshape___SiGMLHandshape_28_29($1));
HEAP32[$0 + 220 >> 2] = 0;
}
$1 = HEAP32[$0 + 236 >> 2];
if ($1) {
HandJointRotations___HandJointRotations_28_29($1);
operator_20delete_28void__29($1);
HEAP32[$0 + 236 >> 2] = 0;
}
return SiGMLHandshape___SiGMLHandshape_28_29($0);
}
function HashAny_char_20const__2c_20int___emptyHash_28int_29($0) {
var $1 = 0, $2 = 0;
$1 = operator_20new_28unsigned_20long_29(28);
HEAP32[19359] = 0;
$2 = invoke_iiii(38, $1 | 0, $0 | 0, 9) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $2;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function XML_GetCurrentLineNumber($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP32[$0 + 272 >> 2];
label$1: {
if (!$1) {
break label$1;
}
$2 = HEAP32[$0 + 280 >> 2];
if ($2 >>> 0 > $1 >>> 0) {
break label$1;
}
$3 = HEAP32[$0 + 144 >> 2];
FUNCTION_TABLE[HEAP32[$3 + 48 >> 2]]($3, $2, $1, $0 + 392 | 0);
HEAP32[$0 + 280 >> 2] = HEAP32[$0 + 272 >> 2];
}
return HEAP32[$0 + 392 >> 2] + 1 | 0;
}
function SplitMovement___SplitMovement_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 62684;
$1 = HEAP32[$0 + 528 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 528 >> 2] = 0;
}
$1 = HEAP32[$0 + 532 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 532 >> 2] = 0;
}
return BasicMovement___BasicMovement_28_29($0) | 0;
}
function big2_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
label$1: {
while (1) {
$0 = HEAPU8[$3 | 0];
if ($0) {
if (HEAPU8[$1 | 0] | ($1 | 0) == ($2 | 0) | HEAPU8[$1 + 1 | 0] != ($0 | 0)) {
break label$1;
}
$3 = $3 + 1 | 0;
$1 = $1 + 2 | 0;
continue;
}
break;
}
$4 = ($1 | 0) == ($2 | 0);
}
return $4 | 0;
}
function SiGMLConstellation__AnalyseSingleLocation_28XMLCell__2c_20bool_29($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = HEAPU16[35148];
HEAP16[$3 + 8 >> 1] = $4;
HEAP16[$3 + 6 >> 1] = $4;
MakeSiteIDPairSub_28SiteIDPair__2c_20SiteID__2c_20XMLCell__2c_20Mirroring_2c_20bool_2c_20bool_29($0, $0 + 12 | 0, $1, $3 + 6 | 0, 1, $2);
__stack_pointer = $3 + 16 | 0;
}
function TwoArmAnimator__setMovement_28BasicMovement__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 >> 2];
if ($2) {
HEAPF32[$0 + 4 >> 2] = HEAPF32[$2 + 40 >> 2] + HEAPF32[$0 + 4 >> 2];
}
TwoArmAnimator__setInitialPosture_28BasicMovement__29($0, $1);
HEAP32[$0 >> 2] = $1;
OneArmAnimator__setMovement_28BasicMovement__29($0 + 16 | 0, $1);
OneArmAnimator__setMovement_28BasicMovement__29($0 + 3572 | 0, $1);
}
function KeyOps_SiteID_20const___eqkey_28SiteID_2c_20SiteID_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$0 = HEAP32[$0 >> 2];
HEAP32[$2 + 24 >> 2] = $0;
$1 = HEAP32[$1 >> 2];
HEAP32[$2 + 16 >> 2] = $1;
HEAP32[$2 + 12 >> 2] = $0;
HEAP32[$2 + 8 >> 2] = $1;
$1 = operator___28SiteID_2c_20SiteID_29_1($2 + 12 | 0, $2 + 8 | 0);
__stack_pointer = $2 + 32 | 0;
return $1;
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChain_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__2c_20HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function ElbowDisplacement__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
if ($1) {
$3 = HEAPF32[$0 >> 2];
$4 = HEAPF32[$0 + 4 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
HEAPF64[$2 + 8 >> 3] = $4;
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 10691, $2);
}
__stack_pointer = $2 + 32 | 0;
}
function DynamicArrayP_char___freeAll_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
label$1: {
if (!HEAP32[$0 >> 2]) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
break label$1;
}
$2 = $1 << 2;
$3 = HEAP32[$2 + HEAP32[$0 >> 2] >> 2];
if ($3) {
dlfree($3);
HEAP32[HEAP32[$0 >> 2] + $2 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
}
}
function Vector__setAddAll_28int_2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0;
label$1: {
if (($1 | 0) <= 0) {
Vector__setZero_28_29($0);
break label$1;
}
Vector__setFrom_28Vector_20const__29($0, $2);
$3 = 1;
while (1) {
if (($1 | 0) == ($3 | 0)) {
break label$1;
}
Vector__setAdd_28Vector_20const__29($0, Math_imul($3, 12) + $2 | 0);
$3 = $3 + 1 | 0;
continue;
}
}
}
function HingeJointRotation__operator__28HingeJointRotation_20const__29($0, $1) {
var $2 = 0, $3 = 0;
JointRotation__operator__28JointRotation_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 16 >> 2];
$3 = HEAP32[$2 + 20 >> 2];
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 20 >> 2] = $3;
$1 = HEAP32[$2 + 12 >> 2];
$3 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $1;
return $0;
}
function DestroySiGMLHandlers_28_29() {
var $0 = 0;
$0 = HEAP32[17619];
if ($0) {
operator_20delete_28void__29(HashAny_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashAny_28_29($0));
HEAP32[17619] = 0;
}
$0 = HEAP32[17618];
if ($0) {
operator_20delete_28void__29(HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashAny_28_29($0));
HEAP32[17618] = 0;
}
}
function CharToMorphAnchoring_28char_2c_20bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (($0 | 0) == 120) {
$1 = 1;
break label$1;
}
if (($0 | 0) == 101) {
$1 = 0;
break label$1;
}
HEAP32[$2 >> 2] = $0;
eprintf_28char_20const__2c_20____29(30909, $2);
}
__stack_pointer = $2 + 16 | 0;
return $1 | 0;
}
function QuatJointRotation__operator__28QuatJointRotation_20const__29($0, $1) {
var $2 = 0, $3 = 0;
JointRotation__operator__28JointRotation_20const__29($0, $1);
$2 = $1;
$1 = HEAP32[$2 + 16 >> 2];
$3 = HEAP32[$2 + 20 >> 2];
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 + 20 >> 2] = $3;
$1 = HEAP32[$2 + 12 >> 2];
$3 = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $1;
return $0;
}
function HingeJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
if ($1) {
$5 = $0 + 8 | 0;
$0 = indentString_28int_29($3);
printAxisVRML_28_IO_FILE__2c_20Vector_20const__2c_20float_2c_20char_20const__2c_20short_29($1, $5, $2, $0, $4);
dlfree($0);
}
}
function CircleInfo__getPoint_28float_2c_20Vector__29_20const($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = HEAPF32[$0 + 4 >> 2];
$1 = Math_fround(HEAPF32[$0 + 8 >> 2] * $1);
$4 = cosf($1);
Vector__set_x_28float_29($2, Math_fround(HEAPF32[$0 >> 2] + Math_fround($3 * $4)));
$1 = Math_fround($3 * sinf($1));
Vector__set_z_28float_29($2, $3 < Math_fround(0) ? Math_fround(-$1) : $1);
}
function store_int($0, $1, $2, $3) {
label$1: {
if (!$0) {
break label$1;
}
label$2: {
switch ($1 + 2 | 0) {
case 0:
HEAP8[$0 | 0] = $2;
return;
case 1:
HEAP16[$0 >> 1] = $2;
return;
case 2:
case 3:
HEAP32[$0 >> 2] = $2;
return;
case 5:
break label$2;
default:
break label$1;
}
}
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $3;
}
}
function std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29($0) {
return std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0);
}
function _GLOBAL__sub_I_SkelTopology_cpp() {
__cxx_global_var_init_37();
__cxx_global_var_init_613();
__cxx_global_var_init_1_28();
__cxx_global_var_init_2_11();
__cxx_global_var_init_3_5();
__cxx_global_var_init_4_3();
__cxx_global_var_init_5_2();
__cxx_global_var_init_6_3();
__cxx_global_var_init_7_2();
__cxx_global_var_init_8_2();
__cxx_global_var_init_9_3();
__cxx_global_var_init_10_2();
}
function UpdatePostMortem_28_29() {
var $0 = 0, $1 = 0, $2 = 0;
$0 = HEAPU8[70300];
if ($0) {
HEAP32[18886] = HEAP32[18886] + 1;
}
$1 = HEAPU8[70301];
if ($1) {
HEAP32[18887] = HEAP32[18887] + 1;
}
$2 = HEAPU8[70302];
if ($2) {
HEAP32[18888] = HEAP32[18888] + 1;
}
HEAP32[18885] = HEAP32[18885] + 1;
if (!($0 | $1 | $2)) {
HEAP32[18889] = HEAP32[18889] + 1;
}
ResetSiGMLFlags_28_29();
}
function SplitMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = operator_20new_28unsigned_20long_29(536);
HEAP32[19359] = 0;
invoke_iii(498, $1 | 0, $0 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function SiteID__isUndef_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 32 | 0;
__stack_pointer = $1;
$0 = HEAP32[$0 >> 2];
HEAP32[$1 + 24 >> 2] = $0;
$2 = HEAP32[17576];
HEAP32[$1 + 16 >> 2] = $2;
HEAP32[$1 + 12 >> 2] = $0;
HEAP32[$1 + 8 >> 2] = $2;
$0 = operator___28SiteID_2c_20SiteID_29_1($1 + 12 | 0, $1 + 8 | 0);
__stack_pointer = $1 + 32 | 0;
return $0 | 0;
}
function ZigzagInfo__zigzagTrajectory_28Vector__2c_20float_29_20const($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = HEAPF32[$0 + 20 >> 2];
$4 = HEAPF32[$0 + 16 >> 2];
Vector__setScale_28Vector_20const__2c_20float_29($1, $0 + 4 | 0, Math_fround(ZigzagInfo__zigsize_28float_29_20const($0, $2) * Math_fround(Math_fround($4 * Math_fround(Math_fround(1) - $2)) + Math_fround($3 * $2))));
}
function TwoHandStuff__TwoHandStuff_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$0 = OneHandStuff__OneHandStuff_28bool_29($0, 1);
HEAP32[19359] = 0;
invoke_iii(363, $0 + 44 | 0, 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0 | 0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
OneHandStuff___OneHandStuff_28_29($0);
__resumeException($1 | 0);
abort();
}
function SphereInterpolator__interpolate_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
if (Vector__isZero_28_29_20const($1)) {
Vector__setZero_28_29($2);
return;
}
OctantInterpolator__interpolate_28Vector_20const__2c_20Vector__29_20const((Math_imul(Vector__x_28_29_20const($1) >= Math_fround(0), 168) + $0 | 0) + Math_imul(Vector__y_28_29_20const($1) >= Math_fround(0), 84) | 0, $1, $2);
}
function SeqMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = operator_20new_28unsigned_20long_29(580);
HEAP32[19359] = 0;
invoke_iii(488, $1 | 0, $0 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function ParMovement__CopyMovement_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = operator_20new_28unsigned_20long_29(556);
HEAP32[19359] = 0;
invoke_iii(482, $1 | 0, $0 | 0) | 0;
$0 = HEAP32[19359];
HEAP32[19359] = 0;
if (($0 | 0) != 1) {
return $1 | 0;
}
$0 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($1);
__resumeException($0 | 0);
abort();
}
function OneHandStuff__calcHandRot_28_29($0) {
var $1 = 0;
$1 = __stack_pointer - 32 | 0;
__stack_pointer = $1;
SiGML__handOrientation_28Quaternion__2c_20bool_2c_20Direction3_2c_20Direction2_29($0 + 20 | 0, HEAPU8[$0 + 40 | 0], Direction3__Direction3_28Direction3_20const__29($1 + 16 | 0, $0), Direction2__Direction2_28Direction2_20const__29($1 + 8 | 0, $0 + 12 | 0));
__stack_pointer = $1 + 32 | 0;
}
function Joint__setLocalGlobalDirection_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = Vector__Vector_28Vector_20const__29($3, $1);
Transform__transformDirection_28Vector__29_20const($0 + 68 | 0, $1);
Joint__setGlobalGlobalDirection_28Vector_20const__2c_20Vector_20const__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
}
function std____2__error_category__equivalent_28std____2__error_code_20const__2c_20int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
if (std____2__error_category__operator___28std____2__error_category_20const__29_20const($0, std____2__error_code__category_28_29_20const($1))) {
$3 = (std____2__error_code__value_28_29_20const($1) | 0) == ($2 | 0);
}
return $3 | 0;
}
function poolDestroy($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 >> 2];
while (1) {
if ($1) {
$2 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 20 >> 2] + 8 >> 2]]($1);
$1 = $2;
continue;
}
break;
}
$1 = HEAP32[$0 + 4 >> 2];
while (1) {
if ($1) {
$2 = HEAP32[$1 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 + 20 >> 2] + 8 >> 2]]($1);
$1 = $2;
continue;
}
break;
}
}
function printLocationAttribSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20Location_29($0, $1, $2) {
if ($2) {
printAttribValue_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20char_20const__2c_20char_20const__29($0, 0, $1, InvertibleStringArray__valueFromIndex_28int_29_20const(HEAP32[18213], $2));
}
}
function SiGMLParser_28ParserData_20const__29($0) {
var $1 = 0;
$1 = MakeXMLParser_28_29();
XMLWrapper__SetElements_28HashAny_char_20const__2c_20int___29($1, HEAP32[18781]);
XMLWrapper__SetHandler_28void_20_28__29_28void__2c_20XMLCell__29_29($1, 383);
XMLWrapper__SetUserData_28void__29($1, ParserData__ParserData_28ParserData_20const__29(operator_20new_28unsigned_20long_29(20), $0));
return $1;
}
function OptionSpec__initialise_28bool_2c_20bool_2c_20bool_2c_20bool_2c_20bool_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6) {
HEAP8[$0 + 4 | 0] = $5;
HEAP8[$0 + 2 | 0] = $3;
HEAP8[$0 + 1 | 0] = $2 | $5;
$5 = $5 ^ 1;
HEAP8[$0 + 3 | 0] = $5 & $4;
HEAP8[$0 | 0] = $1 & $5;
$5 = copyString_28char_20const__29($6);
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = $5;
}
function printDigit_28_IO_FILE__2c_20DigitIndex_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$0) {
break label$1;
}
if (($1 | 0) == -1) {
fputs(14713, $0);
break label$1;
}
if ($1 >>> 0 >= 5) {
HEAP32[$2 >> 2] = $1;
fiprintf($0, 14800, $2);
break label$1;
}
fputc($1 + 49 | 0, $0);
}
__stack_pointer = $2 + 16 | 0;
}
function QuaternionController___QuaternionController_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
HEAP32[$0 >> 2] = 59372;
$1 = $0 + 448 | 0;
$2 = $0 + 16 | 0;
while (1) {
$1 = $1 - 108 | 0;
SHMScalarController___SHMScalarController_28_29($1);
if (($1 | 0) != ($2 | 0)) {
continue;
}
break;
}
return GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29($0) | 0;
}
function CeeOpeningFromThumbPos_28SiGMLHandshape__29($0) {
var $1 = 0;
label$1: {
if (HEAP32[$0 + 48 >> 2]) {
break label$1;
}
$1 = 2;
if (HEAP32[$0 >> 2] - 10 >>> 0 > 2) {
break label$1;
}
label$2: {
switch (HEAP32[$0 + 28 >> 2] - 3 | 0) {
case 0:
$1 = 1;
break;
case 1:
break label$2;
default:
break label$1;
}
}
HEAP32[$0 + 48 >> 2] = $1;
}
}
function SlowInOut_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3) {
var $4 = Math_fround(0);
label$1: {
if ($0 <= Math_fround(0)) {
break label$1;
}
if ($0 < $2) {
return Math_fround($0 / $2);
}
if ($0 > $1) {
break label$1;
}
$4 = Math_fround(1);
$0 = Math_fround($1 - $0);
if (!($3 > $0)) {
break label$1;
}
$4 = Math_fround($0 / $3);
}
return $4;
}
function NonmanualMovement__NonmanualMovement_28_29($0) {
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 61760;
HEAP8[$0 + 9 | 0] = 0;
HEAP8[$0 + 10 | 0] = 0;
HEAP8[$0 + 11 | 0] = 0;
HEAP8[$0 + 12 | 0] = 0;
HEAP8[$0 + 13 | 0] = 0;
HEAP8[$0 + 14 | 0] = 0;
HEAP8[$0 + 15 | 0] = 0;
HEAP8[$0 + 16 | 0] = 0;
return $0;
}
function void_20vSetArrayX_Manner__28Manner__2c_20short_2c_20void__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
HEAP32[$3 + 12 >> 2] = $2;
if (($1 | 0) >= 0) {
$1 = $1 & 65535;
while (1) {
HEAP32[($1 << 2) + $0 >> 2] = HEAP32[$2 >> 2];
$1 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
if (($1 | 0) >= 0) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
}
function SetFingerBendInfo_28char_20const__2c_20FingerbendType__2c_20FingerBending__29($0, $1, $2) {
var $3 = 0;
label$1: {
if (!$0) {
break label$1;
}
$3 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18221], $0);
HEAP32[$1 >> 2] = $3;
if ($3) {
break label$1;
}
FingerBending__SetFingerBending_28char_20const__29($2, $0);
}
return ($0 | 0) != 0;
}
function ScaleParNonManual_28DynamicArray1_AtomicNonmanual___2c_20float_29($0, $1) {
var $2 = 0, $3 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
if (HEAP32[$0 + 12 >> 2] <= ($2 | 0)) {
break label$1;
}
$3 = DynamicArray1_AtomicNonmanual___addrElement_28int_29($0, $2);
HEAPF32[$3 + 24 >> 2] = HEAPF32[$3 + 24 >> 2] * $1;
$2 = $2 + 1 | 0;
continue;
}
}
}
function element5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 39;
if (($1 | 0) != 15) {
label$2: {
if (($1 | 0) != 21) {
if (($1 | 0) != 36) {
break label$2;
}
HEAP32[$0 + 8 >> 2] = 39;
HEAP32[$0 >> 2] = 801;
return 46;
}
HEAP32[$0 >> 2] = 821;
return 39;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function HashChain_char_20const__2c_20AbstractTimedMorph____delItem_28HashChain_char_20const__2c_20AbstractTimedMorph_____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20AbstractTimedMorph_____HashChain_28_29($1));
continue;
}
break;
}
}
function BuildTables_28_29() {
CreateMovementTables_28_29();
CreateSiGMLTables_28_29();
CreateSiGMLHandlers_28_29();
CreateTrajectoryTable_28_29();
CreateControllerTable_28_29();
CreateNameIndexes_28_29();
GetConfigInfo_28_29();
InitialiseRepetitionSpecs_28_29();
Trajectory__PrecomputeTrajectories_28_29();
GetNonmanualDefsFromString_28char_20const__29(HEAP32[HEAP32[18904] + 12 >> 2]);
}
function strcmp($0, $1) {
var $2 = 0, $3 = 0;
$2 = HEAPU8[$0 | 0];
$3 = HEAPU8[$1 | 0];
label$1: {
if (!$2 | ($3 | 0) != ($2 | 0)) {
break label$1;
}
while (1) {
$3 = HEAPU8[$1 + 1 | 0];
$2 = HEAPU8[$0 + 1 | 0];
if (!$2) {
break label$1;
}
$1 = $1 + 1 | 0;
$0 = $0 + 1 | 0;
if (($2 | 0) == ($3 | 0)) {
continue;
}
break;
}
}
return $2 - $3 | 0;
}
function std____2____iostream_category__message_28int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!(($2 | 0) == 1 | ($2 | 0) > 256)) {
std____2____do_message__message_28int_29_20const($0, $1, $2);
return;
}
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, 4387);
}
function SeqMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP16[$0 + 540 >> 1];
$1 = ($1 | 0) > 0 ? $1 : 0;
$3 = $0 + 528 | 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0);
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function Quaternion__quatSign_28_29_20const($0) {
var $1 = Math_fround(0);
$1 = HEAPF32[$0 + 12 >> 2];
label$1: {
if ($1 != Math_fround(0)) {
break label$1;
}
$1 = HEAPF32[$0 + 8 >> 2];
if ($1 != Math_fround(0)) {
break label$1;
}
$1 = HEAPF32[$0 + 4 >> 2];
if ($1 != Math_fround(0)) {
break label$1;
}
$1 = HEAPF32[$0 >> 2];
}
return $1 < Math_fround(0) ? -1 : 1;
}
function ParMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0;
$1 = HEAP16[$0 + 540 >> 1];
$1 = ($1 | 0) > 0 ? $1 : 0;
$3 = $0 + 528 | 0;
while (1) {
if (($1 | 0) != ($2 | 0)) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($3, $2);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0);
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function FingerPlayMovement__FingerPlayMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 4, $1);
HEAP32[$0 + 528 >> 2] = 0;
HEAP32[$0 + 532 >> 2] = 0;
HEAP32[$0 >> 2] = 62172;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 + 540 >> 2] = 0;
HEAP32[$0 + 544 >> 2] = 0;
HEAP32[$0 + 548 >> 2] = 0;
return $0 | 0;
}
function operator___28SiteID_2c_20SiteID_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
$0 = HEAP32[$0 >> 2];
HEAP32[$2 + 24 >> 2] = $0;
$1 = HEAP32[$1 >> 2];
HEAP32[$2 + 16 >> 2] = $1;
HEAP32[$2 + 12 >> 2] = $0;
HEAP32[$2 + 8 >> 2] = $1;
$1 = operator___28SiteID_2c_20SiteID_29_1($2 + 12 | 0, $2 + 8 | 0);
__stack_pointer = $2 + 32 | 0;
return $1 ^ 1;
}
function MirrorAxisVec_28Mirroring_2c_20Vector__29($0, $1) {
var $2 = 0, $3 = 0;
$0 = HEAPU8[$0 | 0];
$2 = $0 << 5;
$3 = $0 << 4;
if (($2 ^ $3) << 24 >> 24 < 0) {
HEAPF32[$1 >> 2] = -HEAPF32[$1 >> 2];
}
$0 = $0 << 6;
if (($3 ^ $0) << 24 >> 24 < 0) {
HEAPF32[$1 + 4 >> 2] = -HEAPF32[$1 + 4 >> 2];
}
if (($0 ^ $2) << 24 >> 24 < 0) {
HEAPF32[$1 + 8 >> 2] = -HEAPF32[$1 + 8 >> 2];
}
}
function AvatarGeometry__AvatarGeometry_28_29($0) {
var $1 = 0, $2 = 0;
label$1: while (1) {
label$2: {
$1 = 0;
if (($2 | 0) == 2) {
break label$2;
}
while (1) if (($1 | 0) == 5) {
$2 = $2 + 1 | 0;
continue label$1;
} else {
HEAP32[(Math_imul($2, 20) + $0 | 0) + ($1 << 2) >> 2] = 1065353216;
$1 = $1 + 1 | 0;
continue;
}
}
break;
}
return $0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function HashChain_char_20const__20const_2c_20AvatarType___delItem_28HashChain_char_20const__20const_2c_20AvatarType____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__20const_2c_20AvatarType____HashChain_28_29($1));
continue;
}
break;
}
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____addItem_28char_20const__2c_20HashAny_char_20const__2c_20int___29($0, $1, $2) {
HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____insertString_28int_2c_20char_20const__2c_20HashAny_char_20const__2c_20int___29($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function void_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___construct_SSPRSet__2c_20SSPRSet__20const__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20SSPRSet__20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
void_20std____2__allocator_SSPRSet____construct_SSPRSet__2c_20SSPRSet__20const___28SSPRSet___2c_20SSPRSet__20const__29($0, $1, $2);
}
function void_20std____2__allocator_traits_std____2__allocator_SSMorph___20___construct_SSMorph__2c_20SSMorph__20const__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___2c_20SSMorph__20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
void_20std____2__allocator_SSMorph____construct_SSMorph__2c_20SSMorph__20const___28SSMorph___2c_20SSMorph__20const__29($0, $1, $2);
}
function unicode_byte_type($0, $1) {
var $2 = 0;
$2 = 7;
label$1: {
label$2: {
switch ($0 + 40 | 0) {
case 4:
case 5:
case 6:
case 7:
return 8;
case 0:
case 1:
case 2:
case 3:
break label$1;
default:
break label$2;
}
}
if (($0 | 0) == -1) {
$2 = 0;
if ($1 >>> 0 > 4294967293) {
break label$1;
}
}
$2 = 29;
}
return $2;
}
function SetThumbBendInfo_28char_20const__2c_20ThumbbendType__2c_20ThumbBending__29($0, $1, $2) {
var $3 = 0;
label$1: {
if (!$0) {
break label$1;
}
$3 = InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18222], $0);
HEAP32[$1 >> 2] = $3;
if ($3) {
break label$1;
}
ThumbBending__SetThumbBending_28char_20const__29($2, $0);
}
return ($0 | 0) != 0;
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashChain_28_29($0) {
HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29___delItem_28HashChain_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____29($0 + 8 | 0);
return HashChainItem_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashChainItem_28_29($0);
}
function normal_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
label$1: {
while (1) {
$0 = HEAPU8[$3 | 0];
if ($0) {
if (($1 | 0) == ($2 | 0) | HEAPU8[$1 | 0] != ($0 | 0)) {
break label$1;
}
$3 = $3 + 1 | 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
$4 = ($1 | 0) == ($2 | 0);
}
return $4 | 0;
}
function void_20vSetArrayX_bool__28bool__2c_20short_2c_20void__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
HEAP32[$3 + 12 >> 2] = $2;
if (($1 | 0) >= 0) {
$1 = $1 & 65535;
while (1) {
HEAP8[$0 + $1 | 0] = HEAP32[$2 >> 2] != 0;
$1 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
if (($1 | 0) >= 0) {
continue;
}
break;
}
HEAP32[$3 + 12 >> 2] = $2;
}
}
function SiteIDPair__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
if ($1) {
$2 = $0 + 4 | 0;
if (SiteID__defined_28_29_20const($2)) {
fputc(40, $1);
SiteID__print_28_IO_FILE__29_20const($0, $1);
fputc(44, $1);
SiteID__print_28_IO_FILE__29_20const($2, $1);
fputc(41, $1);
return;
}
SiteID__print_28_IO_FILE__29_20const($0, $1);
}
}
function ReportXMLError_28XMLResultCode_2c_20char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$0 = $0 - 1 | 0;
if ($0 >>> 0 > 2) {
$0 = 40439;
} else {
$0 = HEAP32[($0 << 2) + 63256 >> 2];
}
LogTime_28_29();
HEAP32[$2 >> 2] = $1;
eprintf_28char_20const__2c_20____29($0, $2);
__stack_pointer = $2 + 16 | 0;
}
function QuatJointRotation__print_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
if ($1) {
HEAP32[$3 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
fiprintf($1, 20032, $3);
Quaternion__print_28_IO_FILE__2c_20int_29_20const($0 + 8 | 0, $1, $2);
}
__stack_pointer = $3 + 16 | 0;
}
function PostureChangeFlags__holdWrist_28_29_20const($0) {
var $1 = 0, $2 = 0;
$2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
label$1: {
if (!($2 & 64)) {
$1 = 0;
if (!PostureChangeFlags__sets_handRot_28_29_20const($0)) {
break label$1;
}
$2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
}
$1 = 0;
if ($2 & 2) {
break label$1;
}
$1 = !($2 & 4);
}
return $1;
}
function FaceAnimator___FaceAnimator_28_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
while (1) {
if (($1 | 0) != 8) {
$3 = ($1 << 2) + $0 | 0;
$2 = HEAP32[$3 + 12 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 4 >> 2]]($2);
HEAP32[$3 + 12 >> 2] = 0;
}
$1 = $1 + 1 | 0;
continue;
}
break;
}
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return $0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) {
return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}
function SiGMLHandshape___SiGMLHandshape_28_29($0) {
var $1 = 0, $2 = 0;
$2 = $0 + 80 | 0;
$1 = ThumbBending___ThumbBending_28_29($0 + 160 | 0);
while (1) {
$1 = FingerBending___FingerBending_28_29($1 - 16 | 0);
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
FingerBending___FingerBending_28_29($0 + 32 | 0);
FingerBending___FingerBending_28_29($0 + 12 | 0);
return $0;
}
function InvertibleDynamicStringArray__addElement_28char_20const__29($0, $1) {
var $2 = 0;
$2 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[$0 >> 2], $1);
if (($2 | 0) == HEAP32[$0 + 12 >> 2]) {
$2 = HEAP32[HEAP32[$0 + 4 >> 2] + 12 >> 2];
InvertibleDynamicStringArray__AddValue_28short_2c_20char_20const__29($0, $2 << 16 >> 16, $1);
}
return $2;
}
function AGIStatusCallback_28void__2c_20AnimgenStatus_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP8[$3 + 15 | 0] = 0;
AnimgenInstance__AGIStartingStatus_28AnimgenStatus_2c_20int_2c_20bool__29($0, $1, $2, $3 + 15 | 0);
__stack_pointer = $3 + 16 | 0;
$0 = HEAPU8[$3 + 15 | 0];
return $0 | 0;
}
function string_read($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0;
$4 = HEAP32[$0 + 84 >> 2];
$3 = $2 + 256 | 0;
$5 = memchr($4, 0, $3);
$3 = $5 ? $5 - $4 | 0 : $3;
$2 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
__memcpy($1, $4, $2);
$3 = $3 + $4 | 0;
HEAP32[$0 + 84 >> 2] = $3;
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 4 >> 2] = $2 + $4;
return $2 | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($0) {
$0 = $0 | 0;
return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 77448) | 0;
}
function std____2__locale____imp__use_facet_28long_29_20const($0, $1) {
if (!std____2__locale____imp__has_facet_28long_29_20const($0, $1)) {
std____2____throw_bad_cast_28_29();
abort();
}
return HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 8 | 0, $1) >> 2];
}
function latin1_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
while (1) {
$0 = HEAP32[$1 >> 2];
if (!(($0 | 0) == ($2 | 0) | HEAP32[$3 >> 2] == ($4 | 0))) {
HEAP32[$1 >> 2] = $0 + 1;
$0 = HEAPU8[$0 | 0];
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 2;
HEAP16[$5 >> 1] = $0;
continue;
}
break;
}
}
function HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChain_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____2c_20HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function HashAny_char_20const__2c_20AbstractTimedMorph____freeStrings_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
dlfree(HEAP32[$1 >> 2]);
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function SeqTimedMorph__scaleAmount_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] > ($3 | 0)) {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1);
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function Quaternion__isZero_28_29_20const($0) {
var $1 = 0;
label$1: {
if (Quaternion__x_28_29_20const($0) != Math_fround(0)) {
break label$1;
}
if (Quaternion__y_28_29_20const($0) != Math_fround(0)) {
break label$1;
}
if (Quaternion__z_28_29_20const($0) != Math_fround(0)) {
break label$1;
}
$1 = Quaternion__w_28_29_20const($0) == Math_fround(1);
}
return $1;
}
function ParTimedMorph__scaleAmount_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 + 24 >> 2];
if (HEAP32[$2 + 12 >> 2] > ($3 | 0)) {
$2 = DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($2, $3);
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1);
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SSMorph__20const__2c_20SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29($0, $1) {
return std____2____wrap_iter_SSMorph__20const____base_28_29_20const($0) - std____2____wrap_iter_SSMorph__20const____base_28_29_20const($1) >> 2;
}
function HashAny_char_20const__2c_20int___freeStrings_28_29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
dlfree(HEAP32[$1 >> 2]);
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function __sin($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
$3 = $0 * $0;
$5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
$4 = $3 * $0;
if (!$2) {
return $4 * ($3 * $5 + -.16666666666666632) + $0;
}
return $0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $4 * .16666666666666632);
}
function TwoHAbstractPosture__operator__28TwoHAbstractPosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($0, $1);
OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($0 + 72 | 0, $1 + 72 | 0);
ConstellationInfo__operator__28ConstellationInfo_20const__29($0 + 144 | 0, $1 + 144 | 0);
return $0 | 0;
}
function RepeatMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
if (!HEAPU8[$0 + 570 | 0]) {
$3 = HEAP32[$0 + 696 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $1, $2);
}
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____setElement_28int_2c_20DynamicArray1_AtomicNonmanual___20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray1_DynamicArray1_AtomicNonmanual_____requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 >> 2];
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0) {
return std____2__pointer_traits_char____pointer_to_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0));
}
function std____2___28anonymous_20namespace_29__handle_strerror_r_return_28int_2c_20char__29($0, $1) {
label$1: {
label$2: {
switch ($0 + 1 | 0) {
case 0:
$0 = HEAP32[__errno_location() >> 2];
break;
case 1:
break label$1;
default:
break label$2;
}
}
$1 = 48531;
if (($0 | 0) == 28) {
break label$1;
}
abort();
abort();
}
return $1;
}
function ascii_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
while (1) {
$0 = HEAP32[$1 >> 2];
if (!(($0 | 0) == ($2 | 0) | HEAP32[$3 >> 2] == ($4 | 0))) {
HEAP32[$1 >> 2] = $0 + 1;
$0 = HEAPU8[$0 | 0];
$5 = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = $5 + 1;
HEAP8[$5 | 0] = $0;
continue;
}
break;
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__29($0, $1) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}
function little2_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAPU8[$1 | 0];
$3 = HEAPU8[$1 + 1 | 0];
if ($3) {
$2 = unicode_byte_type($3 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
if (!(!(1 << $2 & 2098688) | $2 >>> 0 > 21)) {
$1 = $1 + 2 | 0;
continue;
}
break;
}
return $1 | 0;
}
function Quaternion__invRotateRotation_28Quaternion__29_20const($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
Quaternion__setPostConjugate2_28Quaternion_20const__2c_20Quaternion_20const__29($1, Quaternion__Quaternion_28Quaternion_20const__29($2 + 16 | 0, $1), Quaternion__Quaternion_28Quaternion_20const__29_1($2, $0));
__stack_pointer = $2 + 32 | 0;
}
function prolog2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0;
label$1: {
switch (__wasm_rotl_i32($1 - 11 | 0, 31) | 0) {
case 0:
return 55;
case 1:
return 56;
case 9:
HEAP32[$0 >> 2] = 781;
return 2;
default:
common($0);
$5 = -1;
break;
case 2:
break label$1;
}
}
return $5 | 0;
}
function __towrite($0) {
var $1 = 0;
$1 = HEAP32[$0 + 72 >> 2];
HEAP32[$0 + 72 >> 2] = $1 | $1 - 1;
$1 = HEAP32[$0 >> 2];
if ($1 & 8) {
HEAP32[$0 >> 2] = $1 | 32;
return -1;
}
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
$1 = HEAP32[$0 + 44 >> 2];
HEAP32[$0 + 28 >> 2] = $1;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
return 0;
}
function HashAny_char_20const__2c_20char_20const____freeStrings_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
dlfree(HEAP32[$1 >> 2]);
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function AtomicTimedMorph__AtomicTimedMorph_28_29($0) {
$0 = $0 | 0;
$0 = AbstractTimedMorph__AbstractTimedMorph_28TimedMorphType_29($0, 1);
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = -1;
HEAP32[$0 + 28 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 61564;
HEAP16[$0 + 48 >> 1] = 1;
HEAP32[$0 + 40 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = 0;
return $0 | 0;
}
function std____2__enable_if_is_same_std____2__remove_const_SSMorph____type_2c_20SSMorph____value_20___20is_trivially_move_assignable_SSMorph____value_2c_20SSMorph_____type_20std____2____move_SSMorph__2c_20SSMorph___28SSMorph___2c_20SSMorph___2c_20SSMorph___29($0, $1, $2) {
var $3 = 0;
$3 = $1 - $0 | 0;
if (($0 | 0) != ($1 | 0)) {
memmove($2, $0, $3);
}
return $2 + $3 | 0;
}
function _GLOBAL__sub_I_Basics_cpp() {
__cxx_global_var_init_3();
__cxx_global_var_init_24();
__cxx_global_var_init_23();
__cxx_global_var_init_1_2();
__cxx_global_var_init_2_1();
__cxx_global_var_init_3_1();
__cxx_global_var_init_4();
__cxx_global_var_init_5();
__cxx_global_var_init_6();
__cxx_global_var_init_7();
__cxx_global_var_init_8();
__cxx_global_var_init_9();
}
function XMLCell__attrib_REAL_28char_20const__2c_20float_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAPF32[$3 + 12 >> 2] = $2;
XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $3 + 12 | 0, $1);
__stack_pointer = $3 + 16 | 0;
$2 = HEAPF32[$3 + 12 >> 2];
return Math_fround($2);
}
function AddToPlayList_28void__2c_20Gesture__29($0, $1) {
label$1: {
if (!$1) {
break label$1;
}
$0 = HEAP32[$0 + 12 >> 2];
if (!$0) {
break label$1;
}
if (!HEAPU8[$1 + 12 | 0]) {
FailedSiGML_28_29();
$1 = HEAP32[17611];
if (!$1 | !HEAPU8[$1 + 12 | 0]) {
break label$1;
}
}
AppendPlayItem_28DynamicArrayP_Gesture___2c_20Gesture__29($0, $1);
}
}
function big2_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0;
while (1) {
$2 = HEAPU8[$1 + 1 | 0];
$3 = HEAPU8[$1 | 0];
if ($3) {
$2 = unicode_byte_type($3 << 24 >> 24, $2 << 24 >> 24);
} else {
$2 = HEAPU8[($0 + $2 | 0) + 72 | 0];
}
if (!(!(1 << $2 & 2098688) | $2 >>> 0 > 21)) {
$1 = $1 + 2 | 0;
continue;
}
break;
}
return $1 | 0;
}
function SplitMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
BasicMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1);
$2 = HEAP32[$0 + 528 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $1);
$0 = HEAP32[$0 + 532 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1);
}
function NoMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29($0, $1, $2);
if (HEAPU8[67565]) {
eprintf_28char_20const__2c_20____29(25993, 0);
}
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChain_28_29($0) {
HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___delItem_28HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____29($0 + 8 | 0);
return HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($0);
}
function fwrite($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = Math_imul($1, $2);
label$1: {
if (HEAP32[$3 + 76 >> 2] < 0) {
$0 = __fwritex($0, $4, $3);
break label$1;
}
$5 = __lockfile($3);
$0 = __fwritex($0, $4, $3);
if (!$5) {
break label$1;
}
__unlockfile($3);
}
if (($0 | 0) == ($4 | 0)) {
return $1 ? $2 : 0;
}
return ($0 >>> 0) / ($1 >>> 0) | 0;
}
function Quaternion__setInverse_28Quaternion_20const__29($0, $1) {
Quaternion__set_x_28float_29($0, Math_fround(-Quaternion__x_28_29_20const($1)));
Quaternion__set_y_28float_29($0, Math_fround(-Quaternion__y_28_29_20const($1)));
Quaternion__set_z_28float_29($0, Math_fround(-Quaternion__z_28_29_20const($1)));
Quaternion__set_w_28float_29($0, Quaternion__w_28_29_20const($1));
}
function JointRotation__rotateVector_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
var $3 = 0, $4 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$4 = Quaternion__Quaternion_28_29($3);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4);
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($4, $1, $2);
__stack_pointer = $3 + 16 | 0;
}
function OctantInterpolator__OctantInterpolator_28_29($0) {
$0 = Vector__Vector_28_29($0);
Vector__Vector_28_29($0 + 12 | 0);
Vector__Vector_28_29($0 + 24 | 0);
Vector__Vector_28_29($0 + 36 | 0);
Vector__Vector_28_29($0 + 48 | 0);
Vector__Vector_28_29($0 + 60 | 0);
HEAP32[$0 + 72 >> 2] = 0;
HEAP32[$0 + 76 >> 2] = 0;
HEAPF32[$0 + 80 >> 2] = -HEAPF32[16989];
return $0;
}
function HashChain_char_20const__2c_20char_20const____delItem_28HashChain_char_20const__2c_20char_20const_____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20char_20const_____HashChain_28_29($1));
continue;
}
break;
}
}
function HanimAvatar__SetFaceSite_28Location_2c_20short_2c_20Vector_20const__29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
MakeSiteID_28Location_29($4 + 8 | 0, $1);
HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
HanimAvatar__SetFaceSite_28SiteID_2c_20short_2c_20Vector_20const__29($0, $4 + 4 | 0, $2, $3);
__stack_pointer = $4 + 16 | 0;
}
function AnimgenInstance__AGISignStart_28char_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$0 = HEAP32[$0 + 36 >> 2];
HEAP32[$4 + 12 >> 2] = $3;
HEAP32[$4 + 8 >> 2] = $2;
HEAP32[$4 + 4 >> 2] = $1;
HEAP32[$4 >> 2] = $0;
emscripten_asm_const_int(66563, 49576, $4 | 0) | 0;
__stack_pointer = $4 + 16 | 0;
}
function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2) {
HEAP32[19359] = 0;
std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2, 1);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function poolStoreString($0, $1, $2, $3) {
var $4 = 0;
label$1: {
if (!poolAppend($0, $1, $2, $3)) {
break label$1;
}
$1 = HEAP32[$0 + 12 >> 2];
if (($1 | 0) == HEAP32[$0 + 8 >> 2]) {
if (!poolGrow($0)) {
break label$1;
}
$1 = HEAP32[$0 + 12 >> 2];
}
HEAP32[$0 + 12 >> 2] = $1 + 1;
HEAP8[$1 | 0] = 0;
$4 = HEAP32[$0 + 16 >> 2];
}
return $4;
}
function HashAny_char_20const__2c_20SiteID___freeStrings_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
$1 = HEAP32[$0 >> 2] + ($2 << 3) | 0;
while (1) {
$1 = HEAP32[$1 >> 2];
if ($1) {
dlfree(HEAP32[$1 >> 2]);
$1 = $1 + 8 | 0;
continue;
}
break;
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__2c_20bool_29($0, $1, $2, $3) {
var $4 = 0;
label$1: {
if ($0) {
$4 = 1;
if (boolAttrib_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__2c_20bool__29($0, $1, $2)) {
break label$1;
}
}
HEAP8[$2 | 0] = $3;
$4 = 0;
}
return $4;
}
function __cxa_can_catch($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = HEAP32[$2 >> 2];
$0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $3 + 12 | 0) | 0;
if ($0) {
HEAP32[$2 >> 2] = HEAP32[$3 + 12 >> 2];
}
__stack_pointer = $3 + 16 | 0;
return $0 | 0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) {
return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0);
}
function __cxx_global_var_init_41_1() {
var $0 = Math_fround(0), $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0);
$1 = HEAPF32[17661];
$2 = HEAPF32[17660];
$0 = Math_fround(-$2);
$3 = Math_fround($1 * $0);
$0 = Math_fround(HEAPF32[17662] * $0);
Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29(70652, $3, $0, $0, Math_fround($2 * $1));
}
function MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
SiteID__SiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, $1, $2, $3, $4, $5, $6);
}
function toAscii($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $1;
HEAP32[$3 + 4 >> 2] = $3 + 11;
FUNCTION_TABLE[HEAP32[$0 + 56 >> 2]]($0, $3 + 12 | 0, $2, $3 + 4 | 0, $3 + 12 | 0);
__stack_pointer = $3 + 16 | 0;
$2 = HEAP8[$3 + 11 | 0];
$0 = HEAP32[$3 + 4 >> 2];
return ($0 | 0) == ($3 + 11 | 0) ? -1 : $2;
}
function HanimAvatar__createBodySegments_28_29($0) {
HanimAvatar__createArmSegment_28char_20const__29_20const($0, 12141);
HanimAvatar__createArmSegment_28char_20const__29_20const($0, 12128);
HanimAvatar__createArmSegment_28char_20const__29_20const($0, 11582);
HanimAvatar__createArmSegment_28char_20const__29_20const($0, 11569);
HanimAvatar__createTorsoMesh_28_29($0);
}
function RegisterMorph_28char_20const__29($0) {
var $1 = 0;
$1 = InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18845], $0);
if (($1 & 65535) == 65535) {
$1 = InvertibleDynamicStringArray__length_28_29_20const(HEAP32[18845]);
InvertibleDynamicStringArray__addElement_28char_20const__29(HEAP32[18845], $0);
}
return $1 << 16 >> 16;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 8 >> 2] & 2147483647;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20std____2____iom_t5_20const__29($0, $1) {
std____2__ios_base__precision_28long_29(HEAP32[HEAP32[$0 >> 2] - 12 >> 2] + $0 | 0, HEAP32[$1 >> 2]);
return $0;
}
function Direction3__setFromString_28char_20const__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
Direction3__setFromString_28char_20const__29($0, $1);
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 6 >> 1] = $2;
HEAP16[$3 + 8 >> 1] = $2;
Direction3__setMirror_28Mirroring_29($0, $3 + 6 | 0);
__stack_pointer = $3 + 16 | 0;
}
function Direction2__setFromString_28char_20const__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
Direction2__setFromString_28char_20const__29($0, $1);
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 6 >> 1] = $2;
HEAP16[$3 + 8 >> 1] = $2;
Direction2__setMirror_28Mirroring_29($0, $3 + 6 | 0);
__stack_pointer = $3 + 16 | 0;
}
function memcmp($0, $1, $2) {
var $3 = 0, $4 = 0, $5 = 0;
label$1: {
if (!$2) {
break label$1;
}
while (1) {
$3 = HEAPU8[$0 | 0];
$4 = HEAPU8[$1 | 0];
if (($3 | 0) == ($4 | 0)) {
$1 = $1 + 1 | 0;
$0 = $0 + 1 | 0;
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break label$1;
}
break;
}
$5 = $3 - $4 | 0;
}
return $5;
}
function SeqMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
BasicMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1);
if (HEAP32[$0 + 540 >> 2] > 0) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0 + 528 | 0, 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1);
}
}
function Getopts__OptionInfo_28char_20const__29($0, $1) {
var $2 = 0;
label$1: {
if (!$1) {
break label$1;
}
$1 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[$0 >> 2], $1);
if (($1 | 0) == -1) {
break label$1;
}
$2 = DynamicArrayP_OptionSpec___getElement_28int_29_20const(HEAP32[$0 + 8 >> 2], $1);
}
return $2;
}
function QuatJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
VRMLRotation__print_28_IO_FILE__2c_20int_29_20const(VRMLRotation__VRMLRotation_28Quaternion_20const__29($3, $0 + 8 | 0), $1, $2);
__stack_pointer = $3 + 16 | 0;
}
function NonZeroMorphSet_28float__29($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
$2 = $1 << 16 >> 16;
if ((InvertibleDynamicStringArray__length_28_29_20const(HEAP32[18845]) | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[($2 << 2) + $0 >> 2] = 1065353216;
$1 = $1 + 1 | 0;
continue;
}
}
}
function Transform__setComposeInv_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
Transform__Transform_28Vector_20const__2c_20Quaternion_20const__29($3, $1, $2);
Transform__setInverse_28_29($3);
Transform__setCompose_28Transform_20const__29($0, $3);
__stack_pointer = $3 + 32 | 0;
}
function MakeExpatParser_28_29() {
var $0 = 0, $1 = 0;
$0 = operator_20new_28unsigned_20long_29(32);
HEAP32[19359] = 0;
invoke_ii(728, $0 | 0) | 0;
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
$1 = __cxa_find_matching_catch_2() | 0;
getTempRet0() | 0;
operator_20delete_28void__29($0);
__resumeException($1 | 0);
abort();
}
function HashChain_char_20const__2c_20Gesture____delItem_28HashChain_char_20const__2c_20Gesture_____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20Gesture_____HashChain_28_29($1));
continue;
}
break;
}
}
function isAbsoluteFileName_28char_20const__29($0) {
var $1 = 0, $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
$1 = HEAPU8[$0 | 0];
if (!$1) {
break label$1;
}
if (($1 | 0) == 47) {
return 1;
}
if ($1 << 24 >> 24 < 65 | $1 >>> 0 > 122 | ($1 - 91 & 255) >>> 0 < 6) {
break label$1;
}
$2 = HEAPU8[$0 + 1 | 0] == 58;
}
return $2;
}
function decltype_28fp_base_28_29_20__20fp0_base_28_29_29_20std____2__operator__SSMorph__20const__2c_20SSMorph____28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph____20const__29($0, $1) {
return std____2____wrap_iter_SSMorph__20const____base_28_29_20const($0) - std____2____wrap_iter_SSMorph_____base_28_29_20const($1) >> 2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0, $1) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
return HEAPU8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 11 | 0] >>> 7 | 0;
}
function Vector__distanceSq_28Vector_20const__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
while (1) {
if (!(($2 | 0) == 3)) {
$3 = $2 << 2;
$4 = Math_fround(HEAPF32[$3 + $0 >> 2] - HEAPF32[$1 + $3 >> 2]);
$5 = Math_fround(Math_fround($4 * $4) + $5);
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $5;
}
function BreakSymmetry_28SiGMLConstellation__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2) {
BreakSymmetry_28SiteIDPair__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2);
BreakSymmetry_28SiteIDPair__2c_20HanimAvatar_20const__2c_20bool_29($0 + 16 | 0, $1, $2);
BreakSymmetry_28SiteIDPair__2c_20HanimAvatar_20const__2c_20bool_29($0 + 28 | 0, $1, $2 ^ 1);
}
function operator___28ThumbBending_20const__2c_20ThumbBending_20const__29_1($0, $1) {
var $2 = 0;
if (!(HEAPF32[$0 >> 2] != HEAPF32[$1 >> 2] | HEAPF32[$0 + 4 >> 2] != HEAPF32[$1 + 4 >> 2] | (HEAPF32[$0 + 8 >> 2] != HEAPF32[$1 + 8 >> 2] | HEAPF32[$0 + 12 >> 2] != HEAPF32[$1 + 12 >> 2]))) {
$2 = HEAPF32[$0 + 16 >> 2] == HEAPF32[$1 + 16 >> 2];
}
return $2;
}
function Controller__resetVar_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 68 >> 2] = $1;
HEAPF32[$0 + 64 >> 2] = $1;
HEAPF32[$0 + 60 >> 2] = $1;
HEAP32[$0 + 76 >> 2] = 0;
HEAP32[$0 + 80 >> 2] = 0;
HEAP8[$0 + 16 | 0] = 1;
HEAP32[$0 + 88 >> 2] = 0;
HEAP32[$0 + 92 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
}
function ASDdata__readFromString_28char_20const__29($0, $1) {
$1 = ReadXMLString_28char__29($1);
if (!$1) {
eprintf_28char_20const__2c_20____29(38051, 0);
__cxa_throw(AnimgenError__AnimgenError_28AnimgenStatus_29(__cxa_allocate_exception(4) | 0, 11) | 0, 60484, 0);
abort();
}
ASDdata__buildFromXMLCell_28XMLCell__2c_20char_20const__29($0, $1, 14688);
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction___ConstructTransaction_28std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___2c_20unsigned_20long_29($0, $1, $2) {
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 4 >> 2] + ($2 << 2);
return $0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____ConstructTransaction___ConstructTransaction_28std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___2c_20unsigned_20long_29($0, $1, $2) {
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 4 >> 2] + ($2 << 2);
return $0;
}
function __cos($0, $1) {
var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$2 = $0 * $0;
$3 = $2 * .5;
$4 = 1 - $3;
$5 = 1 - $4 - $3;
$3 = $2 * $2;
return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}
function OneHConcretePosture__totallyDefined_28_29_20const($0) {
var $1 = 0;
label$1: {
if (Vector__isZero_28_29_20const($0 + 4 | 0)) {
break label$1;
}
if (Vector__isZero_28_29_20const($0 + 16 | 0)) {
break label$1;
}
if (Quaternion__isZero_28_29_20const($0 + 40 | 0)) {
break label$1;
}
$1 = HEAP32[$0 + 56 >> 2] != 0;
}
return $1;
}
function HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HashAny_char_20const__2c_20char_20const____insertString_28int_2c_20char_20const__2c_20char_20const__29($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0) {
return HEAPU8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 11 | 0];
}
function TwoHPostureDistance_28TwoHConcretePosture_20const__2c_20TwoHConcretePosture_20const__29($0, $1) {
return maxREAL_28float_2c_20float_29(OneHPostureDistance_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__29($0, $1), OneHPostureDistance_28OneHConcretePosture_20const__2c_20OneHConcretePosture_20const__29($0 + 112 | 0, $1 + 112 | 0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0) {
return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 4 >> 2];
}
function HashChain_char_20const__2c_20SiteID___delItem_28HashChain_char_20const__2c_20SiteID____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20SiteID____HashChain_28_29($1));
continue;
}
break;
}
}
function HashChain_SiteID_20const_2c_20Site____delItem_28HashChain_SiteID_20const_2c_20Site_____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_SiteID_20const_2c_20Site_____HashChain_28_29($1));
continue;
}
break;
}
}
function HanimAvatar__SetFacePoint_28short_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
var $5 = 0;
$5 = __stack_pointer - 16 | 0;
__stack_pointer = $5;
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 488 >> 2], $1, Vector__Vector_28float_2c_20float_2c_20float_29($5, $2, $3, $4));
__stack_pointer = $5 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0) {
return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) >> 2];
}
function pop_arg_long_double($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
$2 = HEAP32[$1 >> 2] + 7 & -8;
HEAP32[$1 >> 2] = $2 + 16;
wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]), 
HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}
function handle_location_bodyarm_28Gesture__2c_20XMLCell__29($0, $1) {
SiGMLConstellation__AnalyseSingleLocation_28XMLCell__2c_20bool_29(HEAP32[$0 + 36 >> 2], $1, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0);
BreakSymmetry_28SiGMLConstellation__2c_20HanimAvatar_20const__2c_20bool_29(HEAP32[$0 + 36 >> 2], HEAP32[$0 >> 2], (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0);
}
function bool_20std____2__operator___SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29($0, $1) {
return bool_20std____2__operator___SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29_1($0, $1) ^ 1;
}
function OneHAbstractPosture___OneHAbstractPosture_28_29($0) {
var $1 = 0;
label$1: {
if (!HEAPU8[$0 + 52 | 0]) {
break label$1;
}
$1 = HEAP32[$0 + 56 >> 2];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(Handshape___Handshape_28_29($1));
HEAP32[$0 + 56 >> 2] = 0;
}
SiteIDPair___SiteIDPair_28_29($0 + 4 | 0);
return $0;
}
function HanimAvatar__LookupJoint_28char_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$1 = HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const($0 + 116 | 0, $1);
if (($1 | 0) != HEAP32[$0 + 136 >> 2]) {
$2 = DynamicArrayP_Joint___getElement_28int_29_20const(HEAP32[$0 + 104 >> 2], $1);
}
return $2 | 0;
}
function mergeHands_28SET_OF_HANDS_2c_20SET_OF_HANDS_29($0, $1) {
label$1: {
switch ($0 | 0) {
case 1:
return ($1 | 0) == 2 ? 5 : 1;
case 2:
return ($1 | 0) == 1 ? 5 : 2;
case 3:
return ($1 | 0) == 4 ? 5 : 3;
case 4:
return ($1 | 0) == 3 ? 5 : 4;
case 0:
$0 = $1;
break;
default:
break label$1;
}
}
return $0;
}
function addARPBone_28SSFrame__2c_20Joint_20const__29($0, $1) {
SSFrame__AddPRSet_28char__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, HEAP32[$1 >> 2], HEAPF32[$1 + 52 >> 2], HEAPF32[$1 + 56 >> 2], HEAPF32[$1 + 60 >> 2], HEAPF32[$1 - -64 >> 2], HEAPF32[$1 + 40 >> 2], HEAPF32[$1 + 44 >> 2], HEAPF32[$1 + 48 >> 2]);
}
function HashChain_char_20const__2c_20HashAny_char_20const__2c_20int______HashChain_28_29($0) {
HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____delItem_28HashChain_char_20const__2c_20HashAny_char_20const__2c_20int______29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($0);
}
function DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (($1 | 0) >= 0) {
DynamicArrayP_BasicMovement___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function DeleteTrailingMorphs_28_29() {
var $0 = 0;
label$1: {
$0 = HEAP32[17655];
if (!$0) {
break label$1;
}
DynamicArrayP_AbstractTimedMorph___deleteAll_28_29($0);
$0 = HEAP32[17655];
if (!$0) {
break label$1;
}
operator_20delete_28void__29(DynamicArrayP_AbstractTimedMorph____DynamicArrayP_28_29($0));
HEAP32[17655] = 0;
}
}
function checkCharRefNumber($0) {
var $1 = 0, $2 = 0;
$2 = -1;
$1 = $0 >> 8;
label$1: {
if ($1 - 216 >>> 0 < 8) {
break label$1;
}
label$2: {
if (($1 | 0) != 255) {
if (HEAPU8[$0 + 63592 | 0] | $1) {
break label$2;
}
break label$1;
}
if (($0 & -2) == 65534) {
break label$1;
}
}
$2 = $0;
}
return $2;
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___lookupString_28SiGML_Element_29_20const($0, $1) {
return HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___lookupInCell_28int_2c_20SiGML_Element_29_20const($0, KeyOps_SiGML_Element___hashFunction_28SiGML_Element_2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1);
}
function Direction3__Direction3_28char_20const__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 6 >> 1] = $2;
HEAP16[$3 + 8 >> 1] = $2;
Direction3__setFromString_28char_20const__2c_20Mirroring_29($0, $1, $3 + 6 | 0);
__stack_pointer = $3 + 16 | 0;
return $0;
}
function Direction2__Direction2_28char_20const__2c_20Mirroring_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$2 = HEAPU16[$2 >> 1];
HEAP16[$3 + 6 >> 1] = $2;
HEAP16[$3 + 8 >> 1] = $2;
Direction2__setFromString_28char_20const__2c_20Mirroring_29($0, $1, $3 + 6 | 0);
__stack_pointer = $3 + 16 | 0;
return $0;
}
function HashChain_char_20const__2c_20AbstractTimedMorph____HashChain_28HashChainItem_char_20const__2c_20AbstractTimedMorph___2c_20HashChain_char_20const__2c_20AbstractTimedMorph____29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function DynamicArray1_AbstractTimedMorph____setElement_28int_2c_20AbstractTimedMorph__20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray1_AbstractTimedMorph____requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 >> 2];
}
}
function void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SSPRSet___2c_20SSPRSet__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20SSPRSet___2c_20SSPRSet____29($0, $1, $2, $3) {
$2 = $2 - $1 | 0;
$0 = HEAP32[$3 >> 2] - $2 | 0;
HEAP32[$3 >> 2] = $0;
if (($2 | 0) > 0) {
__memcpy($0, $1, $2);
}
}
function void_20std____2____construct_backward_with_exception_guarantees_std____2__allocator_SSMorph___2c_20SSMorph__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___2c_20SSMorph___2c_20SSMorph____29($0, $1, $2, $3) {
$2 = $2 - $1 | 0;
$0 = HEAP32[$3 >> 2] - $2 | 0;
HEAP32[$3 >> 2] = $0;
if (($2 | 0) > 0) {
__memcpy($0, $1, $2);
}
}
function newGestureName_28char_20const__2c_20int_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ($0) {
$3 = (strlen($0) << 16) + 851968 >> 16;
$4 = dlmalloc($3);
HEAP32[$2 + 4 >> 2] = $1;
HEAP32[$2 >> 2] = $0;
snprintf($4, $3, 10624, $2);
}
__stack_pointer = $2 + 16 | 0;
return $4;
}
function copyStringWithSuffix_28char_20const__2c_20int_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 32 | 0;
__stack_pointer = $2;
HEAP32[$2 >> 2] = $1;
HEAP8[$2 + 31 | 0] = 0;
snprintf($2 + 19 | 0, 12, 10646, $2);
$0 = copyStringWithSuffix_28char_20const__2c_20char_20const__29($0, $2 + 19 | 0);
__stack_pointer = $2 + 32 | 0;
return $0;
}
function HashChain_char_20const__2c_20int___delItem_28HashChain_char_20const__2c_20int____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_char_20const__2c_20int____HashChain_28_29($1));
continue;
}
break;
}
}
function SeqMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAPU16[$0 + 540 >> 1];
if ($3 << 16 > 0) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0 + 528 | 0, $3 - 1 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, $2);
}
}
function OneHGesture__beginError_28_29_20const($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
LogTime_28_29();
$2 = HEAPU8[$0 | 0];
HEAP32[$1 >> 2] = HEAP32[HEAP32[$0 + 72 >> 2] + 8 >> 2];
HEAP32[$1 + 4 >> 2] = $2 ? 6595 : 6581;
eprintf_28char_20const__2c_20____29(24122, $1);
__stack_pointer = $1 + 16 | 0;
}
function TokenStream__TokenStream_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
TokenStream__initialise_28_29($0);
if ($1) {
wasm2js_i32$0 = $0, wasm2js_i32$1 = copyString_28char_20const__29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
TokenStream__open_28_29($0);
}
return $0 | 0;
}
function HashChain_char_20const__20const_2c_20AvatarType___HashChain_28HashChainItem_char_20const__20const_2c_20AvatarType__2c_20HashChain_char_20const__20const_2c_20AvatarType___29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function stringToLower_28char__29($0) {
var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
$1 = HEAP8[$0 | 0];
if (!$1) {
break label$1;
}
wasm2js_i32$0 = $0, wasm2js_i32$1 = tolower($1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
$0 = $0 + 1 | 0;
continue;
}
}
}
function SetLinearTrajectory_28Trajectory__29($0) {
var $1 = 0, $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
$2 = HEAP32[15355];
if (($2 | 0) <= ($1 | 0)) {
break label$1;
}
HEAPF32[HEAP32[$0 + 28 >> 2] + ($1 << 2) >> 2] = Math_fround($1 | 0) / Math_fround($2 | 0);
$1 = $1 + 1 | 0;
continue;
}
}
}
function updatePer2_28Quaternion__2c_20Quaternion_20const__2c_20float_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
$1 = Quaternion__Quaternion_28Quaternion_20const__29($3, $1);
Quaternion__setScale_28float_29($1, $2);
Quaternion__setAdd_28Quaternion_20const__29($0, $1);
__stack_pointer = $3 + 16 | 0;
}
function SeqMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAPU16[$0 + 540 >> 1];
if ($3 << 16 > 0) {
$0 = DynamicArrayP_BasicMovement___getElement_28int_29_20const($0 + 528 | 0, $3 - 1 | 0);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2);
}
}
function DynamicArray_short_2c_20_28short_29_1___setElement_28int_2c_20short_20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray_short_2c_20_28short_29_1___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP16[HEAP32[$0 >> 2] + ($1 << 1) >> 1] = HEAPU16[$2 >> 1];
}
}
function __clock() {
var $0 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
if (HEAPF64[9458] == 0) {
wasm2js_i32$0 = 75664, wasm2js_f64$0 = +_emscripten_date_now(), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}
$0 = (+_emscripten_date_now() - HEAPF64[9458]) * 1e3;
if (Math_abs($0) < 2147483648) {
return ~~$0 | 0;
}
return -2147483648;
}
function QuaternionController__get_perception_28_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
wasm2js_i32$1 = $1, wasm2js_i32$2 = Quaternion__Quaternion_28_29($0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 36 >> 2], 
FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
}
function QuaternionController__get_reference_28_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
wasm2js_i32$1 = $1, wasm2js_i32$2 = Quaternion__Quaternion_28_29($0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 24 >> 2], 
FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
}
function NewMorphSet_28_29() {
var $0 = 0, $1 = 0, $2 = 0;
$0 = InvertibleDynamicStringArray__length_28_29_20const(HEAP32[18845]);
$2 = ($0 | 0) > 0 ? $0 : 0;
$1 = dlmalloc($0 << 2);
$0 = 0;
while (1) {
if (!(($0 | 0) == ($2 | 0))) {
HEAP32[($0 << 2) + $1 >> 2] = 0;
$0 = $0 + 1 | 0;
continue;
}
break;
}
return $1 | 0;
}
function HashAny_char_20const__2c_20int___makeHash_28int_2c_20char_20const__2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = HashAny_char_20const__2c_20int___vmakeHash_28int_2c_20char_20const__2c_20void__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function HashAny_char_20const__2c_20AbstractTimedMorph____addItem_28char_20const__2c_20AbstractTimedMorph__29($0, $1, $2) {
HashAny_char_20const__2c_20AbstractTimedMorph____insertString_28int_2c_20char_20const__2c_20AbstractTimedMorph__29($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
return char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0) {
return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) >> 2];
}
function CannedHandshape___CannedHandshape_28_29($0) {
var $1 = 0, $2 = 0;
$1 = $0 + 152 | 0;
$2 = $0 + 32 | 0;
while (1) {
$1 = ThumbBending___ThumbBending_28_29($1 - 20 | 0);
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
FingerBending___FingerBending_28_29($0 + 16 | 0);
return FingerBending___FingerBending_28_29($0);
}
function _GLOBAL__sub_I_SiGML_cpp() {
__cxx_global_var_init_45();
__cxx_global_var_init_397();
__cxx_global_var_init_1_36();
__cxx_global_var_init_393();
__cxx_global_var_init_2_18();
__cxx_global_var_init_3_8();
__cxx_global_var_init_8_3();
__cxx_global_var_init_9_4();
__cxx_global_var_init_11_2();
__cxx_global_var_init_13_1();
}
function ZeroMorphSet_28float__29($0) {
var $1 = 0, $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
while (1) {
$2 = $1 << 16 >> 16;
if ((InvertibleDynamicStringArray__length_28_29_20const(HEAP32[18845]) | 0) <= ($2 | 0)) {
break label$1;
}
HEAP32[($2 << 2) + $0 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
}
}
function __uflow($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = -1;
label$1: {
if (__toread($0)) {
break label$1;
}
if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
break label$1;
}
$2 = HEAPU8[$1 + 15 | 0];
}
__stack_pointer = $1 + 16 | 0;
return $2;
}
function _GLOBAL__sub_I_Vector_cpp() {
__cxx_global_var_init_27();
__cxx_global_var_init_1_18();
__cxx_global_var_init_2_4();
__cxx_global_var_init_3_3();
__cxx_global_var_init_4_2();
__cxx_global_var_init_5_1();
__cxx_global_var_init_6_1();
__cxx_global_var_init_7_1();
__cxx_global_var_init_8_1();
__cxx_global_var_init_9_2();
}
function HingeJointRotation__interpolate_28HingeJointRotation_20const__2c_20HingeJointRotation_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
HEAPF32[$0 + 20 >> 2] = Math_fround(HEAPF32[$1 + 20 >> 2] * Math_fround(Math_fround(1) - $3)) + Math_fround(HEAPF32[$2 + 20 >> 2] * $3);
}
function HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashAny_28void_20_28__29_28void__2c_20XMLCell__29_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___initialise_28int_29($0, $2);
return $0 | 0;
}
function __lseek($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
$0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0, $1, $2, $3 & 255, $4 + 8 | 0));
__stack_pointer = $4 + 16 | 0;
$2 = HEAP32[$4 + 12 >> 2];
i64toi32_i32$HIGH_BITS = $0 ? -1 : $2;
$1 = HEAP32[$4 + 8 >> 2];
return $0 ? -1 : $1;
}
function entity6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 11;
label$1: {
switch ($1 - 15 | 0) {
case 3:
HEAP32[$0 + 8 >> 2] = 11;
HEAP32[$0 >> 2] = 801;
return 16;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function VectorController2__reset_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
Vector__setZero_28_29($0 + 16 | 0);
Vector__setZero_28_29($0 + 28 | 0);
Vector__setZero_28_29($0 + 40 | 0);
Vector__setZero_28_29($0 - -64 | 0);
Vector__setZero_28_29($0 + 76 | 0);
HEAPF32[$0 + 4 >> 2] = $1;
HEAPF32[$0 + 144 >> 2] = $1;
}
function TwoArmAnimator__reset_28TwoHConcretePosture__2c_20float_29($0, $1, $2) {
OneArmAnimator__reset_28OneHConcretePosture__2c_20float_29($0 + 16 | 0, $1, $2);
OneArmAnimator__reset_28OneHConcretePosture__2c_20float_29($0 + 3572 | 0, $1 + 112 | 0, $2);
HEAPF32[$0 + 8 >> 2] = $2;
HEAPF32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = 0;
}
function Quaternion__checkValidQuat_28_29_20const($0) {
label$1: {
if (!HEAPU8[67580]) {
break label$1;
}
if (!Quaternion__isBadQuat_28_29_20const($0)) {
break label$1;
}
eprintf_28char_20const__2c_20____29(20776, 0);
Quaternion__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 4);
eputc_28char_29(10);
}
}
function FaceAnimator__reset_28float_29($0, $1) {
var $2 = 0, $3 = 0;
HEAPF32[$0 + 4 >> 2] = $1;
HEAPF32[$0 >> 2] = $1;
while (1) {
if (($2 | 0) != 8) {
$3 = HEAP32[(($2 << 2) + $0 | 0) + 12 >> 2];
if ($3) {
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1);
}
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_XMLCell___setElement_28int_2c_20XMLCell__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (($1 | 0) >= 0) {
DynamicArrayP_XMLCell___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function DynamicArrayP_Segment___setElement_28int_2c_20Segment__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (($1 | 0) >= 0) {
DynamicArrayP_Segment___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function DynamicArray1_JointRotation____setElement_28int_2c_20JointRotation__20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray1_JointRotation____requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 >> 2];
}
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0) {
return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0);
}
function __cxx_global_var_init_40_1() {
var $0 = Math_fround(0), $1 = Math_fround(0), $2 = Math_fround(0);
$0 = HEAPF32[17660];
$1 = Math_fround($0 * HEAPF32[17662]);
$2 = HEAPF32[17661];
Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29(70624, Math_fround($2 * Math_fround(-$0)), $1, $1, Math_fround($0 * $2));
}
function TurretJointRotation__setFrom_28TurretJointRotation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1 + 8 | 0);
Vector__setFrom_28Vector_20const__29($0 + 20 | 0, $1 + 20 | 0);
HEAPF32[$0 + 32 >> 2] = HEAPF32[$1 + 32 >> 2];
HEAPF32[$0 + 36 >> 2] = HEAPF32[$1 + 36 >> 2];
}
function SiteID__whichDigit_28_29_20const($0) {
var $1 = 0;
label$1: {
$0 = (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) >>> 15 & 31;
if (!$0) {
$1 = 65535;
break label$1;
}
while (1) {
if ($0 & 1) {
break label$1;
}
$1 = $1 + 1 | 0;
$0 = $0 >>> 1 & 32767;
continue;
}
}
return $1 << 16 >> 16;
}
function PrintCASXMLHeader_28_IO_FILE__2c_20char_20const__2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 32 | 0;
__stack_pointer = $3;
if ($0) {
fputs(32160, $0);
HEAP32[$3 + 16 >> 2] = $1;
fiprintf($0, 32230, $3 + 16 | 0);
HEAP32[$3 >> 2] = $2;
fiprintf($0, 32266, $3);
}
__stack_pointer = $3 + 32 | 0;
}
function std____2____wrap_iter_SSMorph_____operator__28long_29_20const($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
std____2____wrap_iter_SSMorph_____operator___28long_29($2 + 8 | 0, $1);
__stack_pointer = $2 + 16 | 0;
$1 = HEAP32[$2 + 8 >> 2];
return $1;
}
function HashChain_char_20const__2c_20char_20const____HashChain_28HashChainItem_char_20const__2c_20char_20const___2c_20HashChain_char_20const__2c_20char_20const____29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return HashAny_char_20const__2c_20char_20const____lookupInCell_28int_2c_20char_20const__29_20const($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1) | 0;
}
function bool_20std____2__operator___SSMorph__20const___28std____2____wrap_iter_SSMorph__20const___20const__2c_20std____2____wrap_iter_SSMorph__20const___20const__29_1($0, $1) {
return (std____2____wrap_iter_SSMorph__20const____base_28_29_20const($0) | 0) == (std____2____wrap_iter_SSMorph__20const____base_28_29_20const($1) | 0);
}
function TargettedMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Gesture__installHandStuff_28TwoHandStuff_20const__29(HEAP32[$0 + 528 >> 2], $1);
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function HashAny_char_20const__20const_2c_20AvatarType___addItem_28char_20const__2c_20AvatarType_29($0, $1, $2) {
HashAny_char_20const__20const_2c_20AvatarType___insertString_28int_2c_20char_20const__2c_20AvatarType_29($0, KeyOps_char_20const__20const___hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function AGIFrameCallback_28void__2c_20SSFrame__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
HEAP8[$2 + 15 | 0] = 0;
AnimgenInstance__AGIFrame_28SSFrame__2c_20bool__29($0, $1, $2 + 15 | 0);
__stack_pointer = $2 + 16 | 0;
$0 = HEAPU8[$2 + 15 | 0];
return $0 | 0;
}
function externalEntityContentProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
$4 = 1;
$1 = doContent($0, 1, HEAP32[$0 + 144 >> 2], $1, $2, $3, !HEAPU8[$0 + 468 | 0]);
label$1: {
if (!$1) {
if (!storeRawNames($0)) {
break label$1;
}
}
$4 = $1;
}
return $4 | 0;
}
function ParserData__ParserData_28HashAny_char_20const__2c_20Gesture____2c_20DynamicArrayP_char_20const___2c_20HanimAvatar_20const__2c_20DynamicArrayP_Gesture___29($0, $1, $2, $3, $4) {
HEAP32[$0 + 16 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $4;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 >> 2] = 0;
return $0;
}
function HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChain_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function HashAny_char_20const__2c_20SiteID___lookupString_28char_20const__29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HashAny_char_20const__2c_20SiteID___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($2, HEAP32[$1 + 4 >> 2]), $2);
}
function FingerPlayMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function DynamicArrayP_Joint___setElement_28int_2c_20Joint__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (($1 | 0) >= 0) {
DynamicArrayP_Joint___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function printHandshapeType_28_IO_FILE__2c_20HandshapeType_29($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
label$1: {
if (!$0) {
break label$1;
}
if (!$1) {
fputs(14755, $0);
break label$1;
}
HEAP32[$2 >> 2] = $1;
fiprintf($0, 10741, $2);
}
__stack_pointer = $2 + 16 | 0;
}
function TargettedMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function SiteID__SiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
$4 = $3 << 12 & 28672 | ($2 << 8 & 3840 | $1 & 255) | ($4 & 31) << 15;
HEAP16[$0 >> 1] = $4;
HEAP8[$0 + 2 | 0] = ($5 << 20 & 7340032 | $4 | ($6 ? -8388608 : 0)) >>> 16;
return $0;
}
function RepSpec__initialise_28_29($0) {
var $1 = 0, $2 = Math_fround(0);
$1 = HEAPU8[$0 + 4 | 0];
HEAPF32[$0 + 12 >> 2] = $1 ? HEAPF32[17518] : Math_fround(-1);
if ($1) {
$2 = HEAPF32[17517];
} else {
$1 = HEAPU8[$0 + 3 | 0];
$2 = $1 ? HEAPF32[15329] : Math_fround(1);
}
RepSpec__setReturnRatio_28float_29($0, $2);
}
function Quaternion__setAngle_28float_29($0, $1) {
var $2 = 0, $3 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = Vector__Vector_28_29($2);
Quaternion__getAxis_28Vector__29_20const($0, $3);
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($0, $3, $1, 1);
__stack_pointer = $2 + 16 | 0;
}
function __fmodeflags($0) {
var $1 = 0;
$1 = 2;
if (!strchr($0, 43)) {
$1 = HEAPU8[$0 | 0] != 114;
}
$1 = strchr($0, 120) ? $1 | 128 : $1;
$1 = strchr($0, 101) ? $1 | 524288 : $1;
$0 = HEAPU8[$0 | 0];
$1 = ($0 | 0) == 114 ? $1 : $1 | 64;
$1 = ($0 | 0) == 119 ? $1 | 512 : $1;
return ($0 | 0) == 97 ? $1 | 1024 : $1;
}
function Vector__checkValidVector_28_29_20const($0) {
label$1: {
if (!HEAPU8[67580]) {
break label$1;
}
if (!Vector__isBadVector_28_29_20const($0)) {
break label$1;
}
eprintf_28char_20const__2c_20____29(20832, 0);
Vector__print_28_IO_FILE__2c_20int_29_20const($0, HEAP32[16886], 4);
eputc_28char_29(10);
}
}
function Quaternion__getAxisAngle_28Vector__2c_20float__29_20const($0, $1, $2) {
var $3 = Math_fround(0);
Quaternion__toVector_28Vector__29_20const($0, $1);
$3 = Vector__length_28_29_20const($1);
Vector__setUnit_28_29($1);
$3 = atan2_28float_2c_20float_29($3, Quaternion__w_28_29_20const($0));
HEAPF32[$2 >> 2] = $3 + $3;
}
function InvertibleDynamicStringArray__AddValue_28short_2c_20char_20const__29($0, $1, $2) {
$2 = copyString_28char_20const__29($2);
DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29(HEAP32[$0 + 4 >> 2], $1, $2);
HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29(HEAP32[$0 >> 2], $2, $1);
}
function DynamicArray_char_2c_20_28char_290___setElement_28int_2c_20char_20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray_char_2c_20_28char_290___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP8[HEAP32[$0 >> 2] + $1 | 0] = HEAPU8[$2 | 0];
}
}
function ControlledByScalar_Vector___reset_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0;
$2 = HEAP32[$0 + 36 >> 2];
if ($2) {
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1);
}
Vector__setFrom_28Vector_20const__29($0 + 12 | 0, $0);
Vector__setFrom_28Vector_20const__29($0 + 24 | 0, $0);
}
function std____2__allocator_SSPRSet____deallocate_28SSPRSet___2c_20unsigned_20long_29($0, $1, $2) {
HEAP32[19359] = 0;
invoke_viii(13, $1 | 0, $2 << 2, 4);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2__allocator_SSMorph____deallocate_28SSMorph___2c_20unsigned_20long_29($0, $1, $2) {
HEAP32[19359] = 0;
invoke_viii(13, $1 | 0, $2 << 2, 4);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_______ConstructTransaction___ConstructTransaction_28SSPRSet____2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
$3 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = ($2 << 2) + $3;
return $0;
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_______ConstructTransaction___ConstructTransaction_28SSMorph____2c_20unsigned_20long_29($0, $1, $2) {
var $3 = 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
$3 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = ($2 << 2) + $3;
return $0;
}
function memmove($0, $1, $2) {
var $3 = 0;
if ($0 >>> 0 < $1 >>> 0) {
return __memcpy($0, $1, $2);
}
if ($2) {
$3 = $0 + $2 | 0;
$1 = $1 + $2 | 0;
while (1) {
$3 = $3 - 1 | 0;
$1 = $1 - 1 | 0;
HEAP8[$3 | 0] = HEAPU8[$1 | 0];
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
return $0;
}
function Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($0, $1, $2, $3) {
Quaternion__setFromVecAngle_28float_2c_20float_2c_20float_2c_20float_2c_20bool_29($0, Vector__x_28_29_20const($1), Vector__y_28_29_20const($1), Vector__z_28_29_20const($1), $2, $3);
Quaternion__checkValidQuat_28_29_20const($0);
}
function DynamicArrayP_Site___setElement_28int_2c_20Site__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (($1 | 0) >= 0) {
DynamicArrayP_Site___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArrayP_AbstractTimedMorph___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function SplitMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAP32[$0 + 528 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 52 >> 2]]($3, $1, $2);
$0 = HEAP32[$0 + 532 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, $2);
}
function RepSpec__setReturnRatio_28float_29($0, $1) {
var $2 = Math_fround(0);
HEAPF32[$0 + 8 >> 2] = $1;
$2 = Math_fround($1 + Math_fround(1));
HEAPF32[$0 + 16 >> 2] = $2;
$2 = Math_fround($2 * Math_fround(HEAP16[$0 >> 1]));
HEAPF32[$0 + 20 >> 2] = $2;
if (!HEAPU8[$0 + 2 | 0]) {
HEAPF32[$0 + 20 >> 2] = $2 - $1;
}
}
function decltype_28static_cast_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29($0) {
std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0);
}
function Transform__Transform_28_29($0) {
$0 = $0 | 0;
$0 = Vector__Vector_28float_2c_20float_2c_20float_29($0, Math_fround(0), Math_fround(0), Math_fround(0));
Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29($0 + 12 | 0, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(1));
return $0 | 0;
}
function SplitMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function HingeJointRotation__setCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(Quaternion__getAngle_28_29_20const($1) + HEAPF32[$0 + 20 >> 2]), 
HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
}
function strerror_r($0, $1, $2) {
var $3 = 0;
$0 = strerror($0);
$3 = strlen($0);
label$1: {
if ($3 >>> 0 >= $2 >>> 0) {
$3 = 68;
if (!$2) {
break label$1;
}
$2 = $2 - 1 | 0;
__memcpy($1, $0, $2);
HEAP8[$1 + $2 | 0] = 0;
return 68;
}
__memcpy($1, $0, $3 + 1 | 0);
$3 = 0;
}
return $3;
}
function __tandf($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$2 = $0 * $0;
$3 = $2 * $0;
$4 = $2 * $2;
$2 = $3 * $4 * ($4 * ($2 * .009465647849436732 + .002974357433599673) + ($2 * .024528318116654728 + .05338123784456704)) + ($3 * ($2 * .13339200271297674 + .3333313950307914) + $0);
return Math_fround($1 ? -1 / $2 : $2);
}
function YXZRotation__setFrom_28float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
YXZRotation__set_x_28float_29($0, $1);
YXZRotation__set_y_28float_29($0, $2);
YXZRotation__set_z_28float_29($0, $3);
HEAP32[$0 + 20 >> 2] = $6;
HEAP32[$0 + 16 >> 2] = $5;
HEAP32[$0 + 12 >> 2] = $4;
}
function TwoHConcretePostureChange___TwoHConcretePostureChange_28_29($0) {
PostureChangeFlags___PostureChangeFlags_28_29($0 + 450 | 0);
PostureChangeFlags___PostureChangeFlags_28_29($0 + 448 | 0);
TwoHConcretePosture___TwoHConcretePosture_28_29($0 + 224 | 0);
return TwoHConcretePosture___TwoHConcretePosture_28_29($0);
}
function ThumbBending__Bendn_28short_29_20const($0, $1) {
var $2 = Math_fround(0);
$2 = Math_fround(-100);
label$1: {
switch ($1 | 0) {
case 0:
return HEAPF32[$0 >> 2];
case 1:
return HEAPF32[$0 + 12 >> 2];
case 2:
$2 = HEAPF32[$0 + 16 >> 2];
break;
default:
break label$1;
}
}
return $2;
}
function TorsoCurve__checkValidTorsoCurve_28_29_20const($0) {
Vector__checkValidVector_28_29_20const($0);
Vector__checkValidVector_28_29_20const($0 + 12 | 0);
Vector__checkValidVector_28_29_20const($0 + 24 | 0);
Vector__checkValidVector_28_29_20const($0 + 36 | 0);
Vector__checkValidVector_28_29_20const($0 + 48 | 0);
}
function ThumbBending__defined_28_29_20const($0) {
var $1 = 0;
$1 = 1;
if (!(HEAPF32[$0 >> 2] != Math_fround(-100) | HEAPF32[$0 + 4 >> 2] != Math_fround(-100) | (HEAPF32[$0 + 8 >> 2] != Math_fround(-100) | HEAPF32[$0 + 12 >> 2] != Math_fround(-100)))) {
$1 = HEAPF32[$0 + 16 >> 2] != Math_fround(-100);
}
return $1;
}
function SplitMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0;
$3 = HEAP32[$0 + 528 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1, $2);
$0 = HEAP32[$0 + 532 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2);
}
function Site___Site_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 52 >> 2];
if ($1) {
operator_20delete_28void__29($1);
HEAP32[$0 + 52 >> 2] = 0;
}
$1 = HEAP32[$0 + 24 >> 2];
if ($1) {
operator_20delete_28void__29($1);
HEAP32[$0 + 24 >> 2] = 0;
}
HEAP32[$0 + 16 >> 2] = 0;
dlfree(HEAP32[$0 >> 2]);
return $0;
}
function SeqMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function Quaternion__getAngle_28_29_20const($0) {
var $1 = Math_fround(0);
$1 = atan2_28float_2c_20float_29(Vector__alength_28float_2c_20float_2c_20float_29(Quaternion__x_28_29_20const($0), Quaternion__y_28_29_20const($0), Quaternion__z_28_29_20const($0)), Quaternion__w_28_29_20const($0));
return Math_fround($1 + $1);
}
function ParMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function HashAny_char_20const__2c_20Gesture____lookupString_28char_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return HashAny_char_20const__2c_20Gesture____lookupInCell_28int_2c_20char_20const__29_20const($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1) | 0;
}
function FingerBending__Bendn_28short_29_20const($0, $1) {
var $2 = Math_fround(0);
$2 = Math_fround(-100);
label$1: {
switch ($1 | 0) {
case 0:
return HEAPF32[$0 >> 2];
case 1:
return HEAPF32[$0 + 4 >> 2];
case 2:
$2 = HEAPF32[$0 + 8 >> 2];
break;
default:
break label$1;
}
}
return $2;
}
function QuatJointRotation__interpolate_28QuatJointRotation_20const__2c_20QuatJointRotation_20const__2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
Quaternion__setSlerp_28Quaternion_20const__2c_20Quaternion_20const__2c_20float_29($0 + 8 | 0, $1 + 8 | 0, $2 + 8 | 0, $3);
}
function NoMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2);
}
function HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HashAny_char_20const__2c_20int___insertString_28int_2c_20char_20const__2c_20int_29($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function Gesture__ShiftToPalm_28TwoHConcretePosture__29_20const($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 + 32 >> 2];
if ($2) {
OneHGesture__ShiftToPalm_28OneHConcretePosture__29_20const($2, $1 + 112 | 0);
}
$0 = HEAP32[$0 + 28 >> 2];
if ($0) {
OneHGesture__ShiftToPalm_28OneHConcretePosture__29_20const($0, $1);
}
}
function Quaternion__dotProduct_28Quaternion_20const__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0);
while (1) {
if (!(($2 | 0) == 4)) {
$3 = $2 << 2;
$4 = Math_fround(Math_fround(HEAPF32[$3 + $0 >> 2] * HEAPF32[$1 + $3 >> 2]) + $4);
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $4;
}
function HashChain_int_2c_20int___delItem_28HashChain_int_2c_20int____29($0) {
var $1 = 0;
while (1) {
$1 = HEAP32[$0 >> 2];
if ($1) {
HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$1 + 8 >> 2] = 0;
operator_20delete_28void__29(HashChain_int_2c_20int____HashChain_28_29($1));
continue;
}
break;
}
}
function AtomicTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
$1 = AtomicTimedMorph__getMorphAmount_28float_29_20const($0, $1);
$0 = (HEAP32[$0 + 24 >> 2] << 2) + $2 | 0;
HEAPF32[$0 >> 2] = $1 + HEAPF32[$0 >> 2];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0) {
return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0);
}
function hashTableDestroy($0) {
var $1 = 0, $2 = 0, $3 = 0;
while (1) {
$2 = HEAP32[$0 >> 2];
$3 = HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2];
if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
FUNCTION_TABLE[$3 | 0](HEAP32[($1 << 2) + $2 >> 2]);
$1 = $1 + 1 | 0;
continue;
}
break;
}
FUNCTION_TABLE[$3 | 0]($2);
}
function InvertibleStringArray___InvertibleStringArray_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 4 >> 2] = 0;
}
$1 = HEAP32[$0 >> 2];
if ($1) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($1));
HEAP32[$0 >> 2] = 0;
}
return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0, $1) | 0;
}
function HashChain_char_20const__2c_20Gesture____HashChain_28HashChainItem_char_20const__2c_20Gesture___2c_20HashChain_char_20const__2c_20Gesture____29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____HashAny_28HashAny_char_20const__2c_20int___2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____initialise_28int_29($0, $2);
return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1) | 0;
}
function DynamicArray_int_2c_20_1___setElement_28int_2c_20int_20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray_int_2c_20_1___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAP32[$2 >> 2];
}
}
function SplitMovement__SplitMovement_28BasicMovement__2c_20BasicMovement__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 7, 5);
HEAP32[$0 + 532 >> 2] = $2;
HEAP32[$0 + 528 >> 2] = $1;
HEAP32[$0 >> 2] = 62684;
return $0 | 0;
}
function PostureChangeTiming__print_28_IO_FILE__29_20const($0, $1) {
var $2 = 0, $3 = Math_fround(0);
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
$3 = HEAPF32[$0 >> 2];
HEAPF64[$2 + 8 >> 3] = HEAPF32[$0 + 4 >> 2];
HEAPF64[$2 >> 3] = $3;
__small_fprintf($1, 8117, $2);
__stack_pointer = $2 + 16 | 0;
}
function OneHCircMoveSpec__OneHCircMoveSpec_28_29($0) {
$0 = $0 | 0;
$0 = Vector__Vector_28_29($0);
Vector__Vector_28_29($0 + 12 | 0);
Vector__Vector_28_29($0 + 24 | 0);
Vector__Vector_28_29($0 + 36 | 0);
Vector__Vector_28_29($0 + 48 | 0);
HEAP32[$0 + 60 >> 2] = 0;
HEAP32[$0 + 64 >> 2] = 0;
return $0 | 0;
}
function HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChain_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function EllipseInfo__getPoint_28float_2c_20Vector__29_20const($0, $1, $2) {
var $3 = Math_fround(0);
$1 = Math_fround(HEAPF32[$0 + 8 >> 2] * $1);
$3 = EllipseInfo__getZ_28float_29_20const($0, $1);
Vector__set_x_28float_29($2, $1);
Vector__set_z_28float_29($2, $3);
Vector__checkValidVector_28_29_20const($2);
}
function fmt_x($0, $1, $2, $3) {
var $4 = 0;
if ($0 | $1) {
while (1) {
$2 = $2 - 1 | 0;
HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 55248 | 0] | $3;
$4 = !$1 & $0 >>> 0 > 15 | ($1 | 0) != 0;
$0 = ($1 & 15) << 28 | $0 >>> 4;
$1 = $1 >>> 4 | 0;
if ($4) {
continue;
}
break;
}
}
return $2;
}
function decltype_28std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28declval_SSMorph____28_29_29_29_20std____2____unwrap_iter_SSMorph___2c_20std____2____unwrap_iter_impl_SSMorph___2c_20true__20__28SSMorph___29($0) {
return std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28SSMorph___29($0);
}
function XMLCell__attrib_int32_28char_20const__2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
XMLCell__attrib_int32_28int__2c_20char_20const__29($0, $3 + 12 | 0, $1);
__stack_pointer = $3 + 16 | 0;
$0 = HEAP32[$3 + 12 >> 2];
return $0;
}
function DynamicArray1_Quaternion___getElement_28int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!(HEAP32[$1 + 12 >> 2] > ($2 | 0) & ($2 | 0) >= 0)) {
Quaternion__Quaternion_28_29($0);
return;
}
Quaternion__Quaternion_28Quaternion_20const__29($0, HEAP32[$1 >> 2] + ($2 << 4) | 0);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0) {
return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0);
}
function ThumbBending__ThumbBending_28char_20const__29($0, $1) {
HEAP32[$0 + 16 >> 2] = -1027080192;
HEAP32[$0 + 8 >> 2] = -1027080192;
HEAP32[$0 + 12 >> 2] = -1027080192;
HEAP32[$0 >> 2] = -1027080192;
HEAP32[$0 + 4 >> 2] = -1027080192;
ThumbBending__SetThumbBending_28char_20const__29($0, $1);
return $0;
}
function TargettedMovement__TargettedMovement_28SET_OF_HANDS_2c_20Gesture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 9, $1);
HEAP8[$0 + 532 | 0] = 0;
HEAP32[$0 + 528 >> 2] = $2;
HEAP32[$0 >> 2] = 62364;
return $0 | 0;
}
function ASDdata__ASDdata_28char_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 >> 2] = -1;
memset($0 + 4 | 0, 0, 36);
if ($2) {
ASDdata__readFromFile_28char_20const__29($0, $1);
return $0 | 0;
}
ASDdata__readFromString_28char_20const__29($0, $1);
return $0 | 0;
}
function operator___28FingerBending_20const__2c_20FingerBending_20const__29_1($0, $1) {
var $2 = 0;
if (!(HEAPF32[$0 >> 2] != HEAPF32[$1 >> 2] | HEAPF32[$0 + 4 >> 2] != HEAPF32[$1 + 4 >> 2] | HEAPF32[$0 + 8 >> 2] != HEAPF32[$1 + 8 >> 2])) {
$2 = HEAPF32[$0 + 12 >> 2] == HEAPF32[$1 + 12 >> 2];
}
return $2;
}
function HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return HashAny_char_20const__2c_20int___lookupInCell_28int_2c_20char_20const__29_20const($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1) | 0;
}
function HashAny_char_20const__2c_20AbstractTimedMorph____lookupString_28char_20const__29_20const($0, $1) {
return HashAny_char_20const__2c_20AbstractTimedMorph____lookupInCell_28int_2c_20char_20const__29_20const($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1);
}
function FingerBending__FingerBending_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 8 >> 2] = -1027080192;
HEAP32[$0 + 12 >> 2] = -1027080192;
HEAP32[$0 >> 2] = -1027080192;
HEAP32[$0 + 4 >> 2] = -1027080192;
FingerBending__SetFingerBending_28char_20const__29($0, $1);
return $0 | 0;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual______DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(407, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function hashTableIterNext($0) {
var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
$1 = HEAP32[$0 >> 2];
$4 = HEAP32[$0 + 4 >> 2];
while (1) {
if (($1 | 0) == ($4 | 0)) {
return 0;
}
$2 = $1 + 4 | 0;
HEAP32[$0 >> 2] = $2;
$3 = HEAP32[$1 >> 2];
$1 = $2;
if (!$3) {
continue;
}
break;
}
return $3;
}
function Vector__dotProduct_28Vector_20const__29_20const($0, $1) {
var $2 = 0, $3 = 0, $4 = Math_fround(0);
while (1) {
if (!(($2 | 0) == 3)) {
$3 = $2 << 2;
$4 = Math_fround(Math_fround(HEAPF32[$3 + $0 >> 2] * HEAPF32[$1 + $3 >> 2]) + $4);
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $4;
}
function HashChain_char_20const__2c_20SiteID___HashChain_28HashChainItem_char_20const__2c_20SiteID__2c_20HashChain_char_20const__2c_20SiteID___29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function HashChain_SiteID_20const_2c_20Site____HashChain_28HashChainItem_SiteID_20const_2c_20Site___2c_20HashChain_SiteID_20const_2c_20Site____29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function vsscanf($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 144 | 0;
__stack_pointer = $3;
$3 = memset($3, 0, 144);
HEAP32[$3 + 76 >> 2] = -1;
HEAP32[$3 + 44 >> 2] = $0;
HEAP32[$3 + 32 >> 2] = 900;
HEAP32[$3 + 84 >> 2] = $0;
$0 = vfscanf($3, $1, $2);
__stack_pointer = $3 + 144 | 0;
return $0;
}
function DynamicArray0_float___setElement_28int_2c_20float_20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArray0_float___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAPF32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = HEAPF32[$2 >> 2];
}
}
function notation0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 17;
label$1: {
switch ($1 - 15 | 0) {
case 3:
HEAP32[$0 >> 2] = 797;
return 18;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
if (!$2) {
return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
}
if (($0 | 0) == ($1 | 0)) {
return 1;
}
return !strcmp(std__type_info__name_28_29_20const($0), std__type_info__name_28_29_20const($1));
}
function Quaternion__setPostConjugate2_28Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2) {
Quaternion__setFrom_28Quaternion_20const__29($0, $2);
Quaternion__setInverse_28_29($0);
Quaternion__setCompose_28Quaternion_20const__29($0, $1);
Quaternion__setCompose_28Quaternion_20const__29($0, $2);
}
function DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArrayP_char_20const___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____make_iter_28SSMorph___29($0, $1) {
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
$1 = HEAP32[std____2____wrap_iter_SSMorph_______wrap_iter_28SSMorph___29($0 + 8 | 0, $1) >> 2];
__stack_pointer = $0 + 16 | 0;
return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1);
return $0 | 0;
}
function entity10($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 11;
label$1: {
switch ($1 - 15 | 0) {
case 2:
HEAP32[$0 >> 2] = 783;
return 15;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function attlist6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
label$1: {
switch ($1 - 15 | 0) {
case 3:
HEAP32[$0 >> 2] = 817;
return 32;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function Vector__setScale_28Vector_20const__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0;
while (1) {
if (($3 | 0) == 3) {
Vector__checkValidVector_28_29_20const($0);
} else {
$4 = $3 << 2;
HEAPF32[$4 + $0 >> 2] = HEAPF32[$1 + $4 >> 2] * $2;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function NoMovement__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if ($1) {
HEAP32[$2 >> 2] = $0;
fiprintf($1, 32406, $2);
BasicMovement__print_28_IO_FILE__29_20const($0, $1);
}
__stack_pointer = $2 + 16 | 0;
}
function CharToMorphTempo_28char_29($0) {
var $1 = 0;
label$1: {
label$2: {
switch ($0 - 108 | 0) {
default:
if (($0 | 0) != 116) {
break label$1;
}
return 1;
case 0:
return 2;
case 1:
break label$1;
case 2:
break label$2;
}
}
$1 = 3;
}
return $1;
}
function entity1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 11;
label$1: {
switch ($1 - 15 | 0) {
case 3:
HEAP32[$0 >> 2] = 798;
return 10;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function Site__Site_28char_20const__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
SiteID__SiteID_28_29($0 + 12 | 0);
Vector__Vector_28_29($0 + 28 | 0);
Vector__Vector_28_29($0 + 40 | 0);
Site__initialise_28_29($0);
return $0 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____vector_28_29($0) {
std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_delete_28_29_20const($0);
return std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20______vector_base_28_29($0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____vector_28_29($0) {
std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_delete_28_29_20const($0);
return std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20______vector_base_28_29($0);
}
function doctype5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 3;
label$1: {
switch ($1 - 15 | 0) {
case 2:
HEAP32[$0 >> 2] = 784;
return 8;
default:
common($0);
$2 = -1;
break;
case 0:
break label$1;
}
}
return $2 | 0;
}
function contentProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$1 = doContent($0, 0, HEAP32[$0 + 144 >> 2], $1, $2, $3, !HEAPU8[$0 + 468 | 0]);
label$1: {
if ($1) {
break label$1;
}
if (storeRawNames($0)) {
break label$1;
}
$1 = 1;
}
return $1 | 0;
}
function R_1($0) {
return Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1)));
}
function Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4);
return $0 | 0;
}
function FingerPlayMovement__FingerPlayMovement_28FingerPlayMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 62172;
FingerPlayMovement__operator__28FingerPlayMovement_20const__29($0, $1);
return $0 | 0;
}
function ArmHandConstellation__CopyArmHandConstellation_28_29_20const($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(32020, $1);
}
__stack_pointer = $1 + 16 | 0;
return 0;
}
function std____2__locale__id____init_28_29($0) {
$0 = $0 | 0;
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0, wasm2js_i32$1 = int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29(), 
HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 >> 2] = $2;
return $0;
}
function indentString_28int_29($0) {
var $1 = 0, $2 = 0, $3 = 0;
$1 = $0 << 1;
$3 = ($1 | 0) > 0 ? $1 : 0;
$0 = dlmalloc($1 | 1);
while (1) {
if (($2 | 0) == ($3 | 0)) {
HEAP8[$0 + $1 | 0] = 0;
} else {
HEAP8[$0 + $2 | 0] = 32;
$2 = $2 + 1 | 0;
continue;
}
break;
}
return $0;
}
function animgenSetAvatar($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
return AnimgenInstance__SetAvatar_28int_2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3, $4, $5) | 0;
}
function R($0) {
return Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1)));
}
function DynamicArray_short_2c_20_28short_29_1____DynamicArray_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(258, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function Transform__print_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($1) {
fputs(12669, $1);
Vector__print_28_IO_FILE__2c_20int_29_20const($0, $1, $2);
fputs(12672, $1);
Quaternion__print_28_IO_FILE__2c_20int_29_20const($0 + 12 | 0, $1, $2);
}
}
function HashChain_char_20const__2c_20int___HashChain_28HashChainItem_char_20const__2c_20int__2c_20HashChain_char_20const__2c_20int___29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function HashAny_int_2c_20int___makeHash_28int_2c_20int_2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = HashAny_int_2c_20int___vmakeHash_28int_2c_20int_2c_20void__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function DynamicArrayP_OptionSpec___setElement_28int_2c_20OptionSpec__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArrayP_OptionSpec___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function HashChain_char_20const__2c_20AbstractTimedMorph_____HashChain_28_29($0) {
HashChain_char_20const__2c_20AbstractTimedMorph____delItem_28HashChain_char_20const__2c_20AbstractTimedMorph_____29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($0);
}
function HashAny_char_20const__2c_20FingerBending___lookupString_28char_20const__29_20const($0, $1, $2) {
HashAny_char_20const__2c_20FingerBending___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($2, HEAP32[$1 + 4 >> 2]), $2);
}
function SiGMLConstellation__CopySiGMLConstellation_28_29_20const($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(32062, $1);
}
__stack_pointer = $1 + 16 | 0;
return 0;
}
function OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
OneHAbstractPosture__printOrientationSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_2c_20bool_29_20const($0, $1, 1, 1);
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____appendElement_28DynamicArray1_AtomicNonmanual___20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_DynamicArray1_AtomicNonmanual_____setElement_28int_2c_20DynamicArray1_AtomicNonmanual___20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArray1_AbstractTimedMorph_____DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(454, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function AbsoluteSide_28RelativeBodySide_2c_20bool_29($0, $1) {
var $2 = 0;
label$1: {
switch ($0 - 1 | 0) {
case 0:
return $1 ? 1 : 2;
case 1:
return $1 ? 2 : 1;
case 2:
return $1 ? 3 : 4;
case 3:
$2 = $1 ? 4 : 3;
break;
default:
break label$1;
}
}
return $2;
}
function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0) {
void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0);
}
function HashAny_char_20const__2c_20ThumbBending___lookupString_28char_20const__29_20const($0, $1, $2) {
HashAny_char_20const__2c_20ThumbBending___lookupInCell_28int_2c_20char_20const__29_20const($0, $1, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($2, HEAP32[$1 + 4 >> 2]), $2);
}
function DynamicArray_char_2c_20_28char_290____DynamicArray_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(35, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_char_20const___popElement_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 12 >> 2];
label$1: {
if (($1 | 0) <= 0) {
$1 = 0;
$2 = 0;
break label$1;
}
$1 = $1 - 1 | 0;
$2 = HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
}
HEAP32[$0 + 12 >> 2] = $1;
return $2;
}
function DynamicArrayP_AbstractTimedMorph____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(444, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function AbstractTimedMorph__setDuration_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = Math_fround(0);
$2 = Math_fround(HEAPF32[$0 + 16 >> 2] - HEAPF32[$0 + 4 >> 2]);
if ($2 > Math_fround(0)) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, Math_fround($1 / $2));
}
}
function NonmanualMovement__CopyNonmanualMovement_28_29_20const($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(47140, $1);
}
__stack_pointer = $1 + 16 | 0;
return 0;
}
function HashAny_char_20const__2c_20Gesture____addItem_28char_20const__2c_20Gesture__29($0, $1, $2) {
HashAny_char_20const__2c_20Gesture____insertString_28int_2c_20char_20const__2c_20Gesture__29($0, KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function DynamicArray1_Vector___getElement_28int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!(HEAP32[$1 + 12 >> 2] > ($2 | 0) & ($2 | 0) >= 0)) {
Vector__Vector_28_29($0);
return;
}
Vector__Vector_28Vector_20const__29($0, HEAP32[$1 >> 2] + Math_imul($2, 12) | 0);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0) {
return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0);
}
function HashChain_char_20const__20const_2c_20AvatarType____HashChain_28_29($0) {
HashChain_char_20const__20const_2c_20AvatarType___delItem_28HashChain_char_20const__20const_2c_20AvatarType____29($0 + 8 | 0);
return HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($0);
}
function Vector__cosAngleWith_28Vector_20const__29_20const($0, $1) {
var $2 = Math_fround(0), $3 = Math_fround(0);
$2 = Vector__length_28_29_20const($0);
$3 = Vector__length_28_29_20const($1);
return Math_fround(Vector__dotProduct_28Vector_20const__29_20const($0, $1) / Math_fround($2 * $3));
}
function IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29($0, $1, $2, $3) {
var $4 = 0;
label$1: {
if (($0 | 0) == ($2 | 0)) {
$4 = 1;
if (($1 | 0) == ($3 | 0)) {
break label$1;
}
}
$4 = ($1 | 0) == ($2 | 0) & ($0 | 0) == ($3 | 0);
}
return $4;
}
function InvertibleDynamicStringArray__vAddToArrayH_28char_20const__2c_20void__29($0, $1, $2) {
while (1) {
if ($1) {
InvertibleDynamicStringArray__AddValue_28short_2c_20char_20const__29($0, HEAP16[$2 >> 1], $1);
$1 = HEAP32[$2 + 4 >> 2];
$2 = $2 + 8 | 0;
continue;
}
break;
}
}
function DynamicArray1_AtomicNonmanual____DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(408, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1) {
HEAP32[$0 >> 2] = 61628;
MannerFlags__MannerFlags_28_29($0 + 12 | 0);
TwoHConcretePostureChange__TwoHConcretePostureChange_28_29($0 + 60 | 0);
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
return $0;
}
function handle_bonesanimation_sign_28void__2c_20XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = convertGlossToID_28HashAny_char_20const__2c_20char_20const____29(HEAP32[$1 + 4 >> 2]);
UNIMPLEMENTED_28char_20const__29(6403);
ProcessSpeed_28XMLCell__2c_20Gesture__29($1, 0);
dlfree($0);
}
function DynamicArray1_JointRotation_____DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(133, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function unknown_isNmstrt($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = FUNCTION_TABLE[HEAP32[$0 + 364 >> 2]](HEAP32[$0 + 368 >> 2], $1) | 0;
if ($0 >>> 0 <= 65535) {
$2 = HEAP32[($0 >>> 3 & 28 | HEAPU8[($0 >>> 8 | 0) + 51248 | 0] << 5) + 49968 >> 2] & 1 << $0;
}
return $2 | 0;
}
function std____2__enable_if_is_move_constructible_SSPRSet_____value_20___20is_move_assignable_SSPRSet_____value_2c_20void___type_20std____2__swap_SSPRSet____28SSPRSet____2c_20SSPRSet____29($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$1 >> 2] = $2;
}
function std____2__enable_if_is_move_constructible_SSMorph_____value_20___20is_move_assignable_SSMorph_____value_2c_20void___type_20std____2__swap_SSMorph____28SSMorph____2c_20SSMorph____29($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$1 >> 2] = $2;
}
function ParserData__ParserData_28ParserData_20const__29($0, $1) {
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
return $0;
}
function EllipseInfo__error_28float_2c_20float_29_20const($0, $1, $2) {
var $3 = Math_fround(0), $4 = Math_fround(0);
$3 = Math_fround(10);
$4 = HEAPF32[$0 >> 2];
if (!($4 < $1 | Math_fround(-$4) > $1)) {
$3 = Math_fround($2 - EllipseInfo__getZ_28float_29_20const($0, $1));
}
return $3;
}
function DynamicArrayP_XMLCell___popElement_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 12 >> 2];
label$1: {
if (($1 | 0) <= 0) {
$1 = 0;
$2 = 0;
break label$1;
}
$1 = $1 - 1 | 0;
$2 = HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
}
HEAP32[$0 + 12 >> 2] = $1;
return $2;
}
function DynamicArrayP_BasicMovement____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(398, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 8 >> 2];
$2 = HEAP32[$0 >> 2] + ($1 >> 1) | 0;
$0 = HEAP32[$0 + 4 >> 2];
$0 = $1 & 1 ? HEAP32[HEAP32[$2 >> 2] + $0 >> 2] : $0;
FUNCTION_TABLE[$0 | 0]($2);
}
function Quaternion__setSubtract_28Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
while (1) {
if (($3 | 0) != 4) {
$4 = $3 << 2;
HEAPF32[$4 + $0 >> 2] = HEAPF32[$1 + $4 >> 2] - HEAPF32[$2 + $4 >> 2];
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_Gesture___setElement_28int_2c_20Gesture__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArrayP_Gesture___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function unknown_isName($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$0 = FUNCTION_TABLE[HEAP32[$0 + 364 >> 2]](HEAP32[$0 + 368 >> 2], $1) | 0;
if ($0 >>> 0 <= 65535) {
$2 = HEAP32[($0 >>> 3 & 28 | HEAPU8[($0 >>> 8 | 0) + 51504 | 0] << 5) + 49968 >> 2] & 1 << $0;
}
return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____assign_external_28char_20const__29($0, $1);
}
function DynamicArrayP_char_20const____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(43, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_char___popElement_28_29($0) {
var $1 = 0, $2 = 0;
$1 = HEAP32[$0 + 12 >> 2];
label$1: {
if (($1 | 0) <= 0) {
$1 = 0;
$2 = 0;
break label$1;
}
$1 = $1 - 1 | 0;
$2 = HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
}
HEAP32[$0 + 12 >> 2] = $1;
return $2;
}
function DynamicArray1_Quaternion____DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(262, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function CompoundMovement___CompoundMovement_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 61436;
$1 = $0 + 528 | 0;
DynamicArrayP_BasicMovement___deleteAll_28_29($1);
DynamicArrayP_BasicMovement____DynamicArrayP_28_29($1);
return BasicMovement___BasicMovement_28_29($0) | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + $1 | 0;
}
function getEncodingIndex($0) {
var $1 = 0;
label$1: {
if (!$0) {
$1 = 6;
break label$1;
}
while (1) {
if (($1 | 0) == 6) {
return -1;
}
if (streqci($0, HEAP32[($1 << 2) + 64256 >> 2])) {
break label$1;
}
$1 = $1 + 1 | 0;
continue;
}
}
return $1;
}
function DynamicArray_int_2c_20_1____DynamicArray_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(275, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_OptionSpec____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(52, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function ReadXMLString_28char__29($0) {
var $1 = 0, $2 = 0;
$1 = MakeXMLParser_28_29();
if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $0) | 0)) {
$2 = HEAP32[$1 + 20 >> 2];
HEAP32[$1 + 20 >> 2] = 0;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
return $2;
}
function Quaternion__setQuatFromVector_28Vector_20const__29($0, $1) {
Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, Vector__x_28_29_20const($1), Vector__y_28_29_20const($1), Vector__z_28_29_20const($1), Math_fround(0));
Quaternion__checkValidQuat_28_29_20const($0);
}
function Quaternion__setInverse_28_29($0) {
Quaternion__set_x_28float_29($0, Math_fround(-Quaternion__x_28_29_20const($0)));
Quaternion__set_y_28float_29($0, Math_fround(-Quaternion__y_28_29_20const($0)));
Quaternion__set_z_28float_29($0, Math_fround(-Quaternion__z_28_29_20const($0)));
}
function HashChain_char_20const__2c_20AbstractTimedMorph____HashChain_28HashChainItem_char_20const__2c_20AbstractTimedMorph___29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function AnimgenInstance__AnimgenInstance_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 40 >> 2] = 1;
HEAP32[$0 + 36 >> 2] = $1;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP16[$0 + 4 >> 1] = 256;
HEAP32[$0 >> 2] = 0;
return $0 | 0;
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________destruct_at_end_28SSPRSet___29($0, $1) {
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________destruct_at_end_28SSPRSet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1);
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________destruct_at_end_28SSMorph___29($0, $1) {
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________destruct_at_end_28SSMorph___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1);
}
function DynamicArrayP_XMLCell____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(719, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_Segment____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(332, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArrayP_Gesture____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(375, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function AtomicNonmanual__AtomicNonmanual_28_29($0) {
HEAP32[$0 + 20 >> 2] = 1065353216;
HEAP32[$0 + 24 >> 2] = 1065353216;
HEAP32[$0 + 12 >> 2] = -1082130432;
HEAP32[$0 + 16 >> 2] = 1065353216;
HEAP32[$0 + 8 >> 2] = 0;
HEAP16[$0 + 4 >> 1] = 65535;
HEAP32[$0 >> 2] = 0;
return $0;
}
function declClose($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
label$1: {
switch ($1 - 15 | 0) {
case 2:
HEAP32[$0 >> 2] = 783;
case 0:
return HEAP32[$0 + 8 >> 2];
default:
break label$1;
}
}
common($0);
return -1;
}
function TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0, $1);
OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29($0 + 112 | 0, $1 + 112 | 0);
}
function HashChain_char_20const__20const_2c_20AvatarType___HashChain_28HashChainItem_char_20const__20const_2c_20AvatarType__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function DynamicArray1_Vector____DynamicArray1_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(257, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function handle_mocap_sign_28void__2c_20XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = convertGlossToID_28HashAny_char_20const__2c_20char_20const____29(HEAP32[$1 + 4 >> 2]);
UNIMPLEMENTED_28char_20const__29(6385);
ProcessSpeed_28XMLCell__2c_20Gesture__29($1, 0);
dlfree($0);
}
function Vector__lengthsq_28_29_20const($0) {
var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
while (1) {
if (!(($1 | 0) == 3)) {
$2 = HEAPF32[($1 << 2) + $0 >> 2];
$3 = Math_fround(Math_fround($2 * $2) + $3);
$1 = $1 + 1 | 0;
continue;
}
break;
}
return $3;
}
function HingeJointRotation__setFromQuat_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = $0, wasm2js_f32$0 = Quaternion__getAngle_28_29_20const($1), HEAPF32[wasm2js_i32$0 + 20 >> 2] = wasm2js_f32$0;
}
function DynamicArrayP_Joint____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(137, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray0_float____DynamicArray0_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(522, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function utf8_isNmstrt3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAPU8[$1 | 0];
$0 = HEAPU8[$1 + 1 | 0];
$1 = HEAPU8[$1 + 2 | 0];
return 1 << $1 & HEAP32[(($1 >>> 5 & 1 | ($0 << 1 & 6 | HEAPU8[($0 >>> 2 & 15 | $2 << 4 & 240) + 51248 | 0] << 3)) << 2) + 49968 >> 2];
}
function fmt_o($0, $1, $2) {
var $3 = 0;
if ($0 | $1) {
while (1) {
$2 = $2 - 1 | 0;
HEAP8[$2 | 0] = $0 & 7 | 48;
$3 = !$1 & $0 >>> 0 > 7 | ($1 | 0) != 0;
$0 = ($1 & 7) << 29 | $0 >>> 3;
$1 = $1 >>> 3 | 0;
if ($3) {
continue;
}
break;
}
}
return $2;
}
function SHMScalarController__set_reference_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
if (HEAP32[$0 + 60 >> 2] == 1) {
HEAPF32[$0 + 80 >> 2] = $1;
HEAPF32[$0 + 76 >> 2] = $1;
return;
}
HEAPF32[$0 + 72 >> 2] = $1;
SHMScalarController__resetOvershoot_28_29($0);
}
function Gesture__Gesture_28_29($0) {
$0 = $0 | 0;
HEAP8[$0 + 12 | 0] = 1;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
GestureFlags__GestureFlags_28_29($0 + 13 | 0);
Mirroring__Mirroring_28_29($0 + 14 | 0);
memset($0 + 16 | 0, 0, 36);
return $0 | 0;
}
function DynamicArrayP_Site____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(138, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function DynamicArrayP_char___setElement_28int_2c_20char__29($0, $1, $2) {
if (($1 | 0) >= 0) {
DynamicArrayP_char___requireElement_28int_29($0, $1);
if (HEAP32[$0 + 12 >> 2] <= ($1 | 0)) {
HEAP32[$0 + 12 >> 2] = $1 + 1;
}
HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2] = $2;
}
}
function DynamicArrayP_char____DynamicArrayP_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(46, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_DynamicArray1_AtomicNonmanual_____resize_28int_29($0, DynamicArray1_DynamicArray1_AtomicNonmanual_____preferredSize_28int_29($0, $1));
}
}
function AnimgenInstance__SetSequence_28int_2c_20float_29($0, $1) {
var $2 = 0;
$0 = AnimgenInstance__getInst_28int_29($0);
if (!(!$0 | (HEAP32[$0 + 40 >> 2] & -2) != 2)) {
HEAPF32[$0 + 24 >> 2] = $1;
animgen_lite_reset($1);
HEAP32[$0 + 40 >> 2] = 3;
$2 = 1;
}
return $2;
}
function void_20SetArrayX_Manner__28Manner__2c_20short_2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
void_20vSetArrayX_Manner__28Manner__2c_20short_2c_20void__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
}
function utf8_isName3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAPU8[$1 | 0];
$0 = HEAPU8[$1 + 1 | 0];
$1 = HEAPU8[$1 + 2 | 0];
return 1 << $1 & HEAP32[(($1 >>> 5 & 1 | ($0 << 1 & 6 | HEAPU8[($0 >>> 2 & 15 | $2 << 4 & 240) + 51504 | 0] << 3)) << 2) + 49968 >> 2];
}
function Vector__setScale_28float_29($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) == 3) {
Vector__checkValidVector_28_29_20const($0);
} else {
$3 = ($2 << 2) + $0 | 0;
HEAPF32[$3 >> 2] = HEAPF32[$3 >> 2] * $1;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function Quaternion__setSubtract_28Quaternion_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
while (1) {
if (($2 | 0) != 4) {
$3 = $2 << 2;
$4 = $3 + $0 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] - HEAPF32[$1 + $3 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArray1_AbstractTimedMorph____clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function Handshape__CopyHandshape_28_29_20const($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
if (HEAPU8[67562]) {
LogTime_28_29();
HEAP32[$1 >> 2] = $0;
eprintf_28char_20const__2c_20____29(32106, $1);
}
__stack_pointer = $1 + 16 | 0;
return 0;
}
function DynamicArray_short_2c_20_28short_29_1___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$2 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP16[HEAP32[$0 >> 2] + ($1 + $3 << 1) >> 1] = 65535;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_AbstractTimedMorph___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DeleteTables_28_29() {
DeleteNonmanualDefs_28_29();
Trajectory__DestroyTrajectories_28_29();
DeleteConfigInfo_28_29();
DestroyNameIndexes_28_29();
DeleteControllerTable_28_29();
DeleteTrajectoryTable_28_29();
DeleteSiGMLTables_28_29();
DeleteMovementTables_28_29();
}
function Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
while (1) {
if (($3 | 0) != 3) {
$4 = $3 << 2;
HEAPF32[$4 + $0 >> 2] = HEAPF32[$1 + $4 >> 2] - HEAPF32[$2 + $4 >> 2];
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function DynamicArray_char_2c_20_28char_290___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP8[HEAP32[$0 >> 2] + ($1 + $2 | 0) | 0] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArray0_float___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$2 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAPF32[HEAP32[$0 >> 2] + ($1 + $3 << 2) >> 2] = HEAPF32[$0 + 16 >> 2];
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function die_28char_20const__29($0) {
var $1 = 0;
$1 = HEAP32[16886];
if ($1) {
fputs(21249, $1);
fputs($0, HEAP32[16886]);
eputc_28char_29(10);
}
__cxa_throw(GeneralError__GeneralError_28GeneralErrorCode_29(__cxa_allocate_exception(4) | 0, 2) | 0, 59180, 0);
abort();
}
function animgen_lite_reset($0) {
var $1 = 0;
$0 = $0 < Math_fround(1) ? $0 : Math_fround(Math_fround(1) / $0);
HEAPF32[15824] = $0;
$1 = HEAP32[18902];
if ($1) {
HEAPF32[$1 + 8 >> 2] = $0;
HanimAnimationRecord__reset_28float_29($1, Math_fround(0));
}
ZeroPostMortem();
}
function __fpclassifyl($0, $1, $2, $3) {
var $4 = 0, $5 = 0;
$4 = $3 & 65535;
$5 = $3 >>> 16 & 32767;
label$1: {
if (($5 | 0) != 32767) {
$3 = 4;
if ($5) {
break label$1;
}
return $0 | $2 | ($1 | $4) ? 3 : 2;
}
$3 = !($0 | $2 | ($1 | $4));
}
return $3;
}
function _GLOBAL__sub_I_Tables_cpp() {
__cxx_global_var_init_38();
__cxx_global_var_init_1_29();
__cxx_global_var_init_2_12();
__cxx_global_var_init_3_6();
__cxx_global_var_init_4_4();
__cxx_global_var_init_5_3();
__cxx_global_var_init_6_4();
__cxx_global_var_init_33_1();
}
function Vector__setLength_28float_29($0, $1) {
var $2 = Math_fround(0), $3 = 0;
$2 = Vector__length_28_29_20const($0);
$3 = $2 <= Math_fround(0);
if (!$3) {
Vector__setScale_28float_29($0, Math_fround($1 / $2));
Vector__checkValidVector_28_29_20const($0);
}
return !$3;
}
function ReadXMLFile_28char_20const__29($0) {
var $1 = 0, $2 = 0;
$1 = MakeXMLParser_28_29();
if (!XMLWrapper__ParseFile_28char_20const__29($1, $0)) {
$2 = HEAP32[$1 + 20 >> 2];
HEAP32[$1 + 20 >> 2] = 0;
}
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
return $2;
}
function OneHandStuff__OneHandStuff_28bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = Direction3__Direction3_28_29($0);
Direction2__Direction2_28_29($0 + 12 | 0);
Quaternion__Quaternion_28_29($0 + 20 | 0);
HEAP8[$0 + 40 | 0] = $1;
HEAP32[$0 + 36 >> 2] = 0;
return $0 | 0;
}
function SplitMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 + 528 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
}
$0 = HEAP32[$0 + 532 >> 2];
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0);
}
}
function Site__Site_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 4 >> 2] = -1;
HEAP32[$0 >> 2] = $1;
SiteID__SiteID_28_29($0 + 12 | 0);
Vector__Vector_28_29($0 + 28 | 0);
Vector__Vector_28_29($0 + 40 | 0);
Site__initialise_28_29($0);
return $0 | 0;
}
function void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29($0) {
$0 = $0 | 0;
std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0);
}
function concatStrings($0, $1) {
var $2 = 0;
if (!$0) {
return copyString_28char_20const__29($1);
}
if (!$1) {
return copyString_28char_20const__29($0);
}
$2 = strlen($0);
$0 = strcpy(dlmalloc(($2 + strlen($1) | 0) + 1 | 0), $0);
strcpy($0 + $2 | 0, $1);
return $0;
}
function SetHandshapeType_28HandshapeType__2c_20char_20const__29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if ($1) {
wasm2js_i32$0 = $0, wasm2js_i32$1 = MakeHandshapeType_28char_20const__29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
return ($1 | 0) != 0;
}
function Quaternion__setAdd_28Quaternion_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
while (1) {
if (($2 | 0) != 4) {
$3 = $2 << 2;
$4 = $3 + $0 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$1 + $3 >> 2] + HEAPF32[$4 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function HashAny_char_20const__2c_20AbstractTimedMorph____HashAny_28AbstractTimedMorph__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__2c_20AbstractTimedMorph____initialise_28int_29($0, $2);
return $0 | 0;
}
function DynamicArray1_JointRotation____clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function MirrorDirectionVec_28Mirroring_2c_20Vector__29($0, $1) {
$0 = HEAPU8[$0 | 0];
if ($0 & 2) {
HEAPF32[$1 >> 2] = -HEAPF32[$1 >> 2];
}
if ($0 & 4) {
HEAPF32[$1 + 4 >> 2] = -HEAPF32[$1 + 4 >> 2];
}
if ($0 & 8) {
HEAPF32[$1 + 8 >> 2] = -HEAPF32[$1 + 8 >> 2];
}
}
function HashChain_char_20const__2c_20char_20const_____HashChain_28_29($0) {
HashChain_char_20const__2c_20char_20const____delItem_28HashChain_char_20const__2c_20char_20const_____29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($0);
}
function HashChain_char_20const__2c_20char_20const____HashChain_28HashChainItem_char_20const__2c_20char_20const___29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function GestureParser__readXMLXML_28XMLCell__2c_20ParserData__2c_20Gesture___29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!$0) {
return 1;
}
HandleXMLGesture_28void__2c_20XMLCell__29($1, $0);
if ($2) {
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
}
return 0;
}
function DynamicArrayP_BasicMovement___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function Vector__setAdd_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = 0, $4 = 0;
while (1) {
if (($3 | 0) != 3) {
$4 = $3 << 2;
HEAPF32[$4 + $0 >> 2] = HEAPF32[$1 + $4 >> 2] + HEAPF32[$2 + $4 >> 2];
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function FingerBending__defined_28_29_20const($0) {
var $1 = 0;
$1 = 1;
if (!(HEAPF32[$0 >> 2] != Math_fround(-100) | HEAPF32[$0 + 4 >> 2] != Math_fround(-100) | HEAPF32[$0 + 8 >> 2] != Math_fround(-100))) {
$1 = HEAPF32[$0 + 12 >> 2] != Math_fround(-100);
}
return $1;
}
function DynamicArrayP_char_20const___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function void_20SetArrayX_bool__28bool__2c_20short_2c_20____29($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
void_20vSetArrayX_bool__28bool__2c_20short_2c_20void__29($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
}
function Vector__setSubtract_28Vector_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
while (1) {
if (($2 | 0) != 3) {
$3 = $2 << 2;
$4 = $3 + $0 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] - HEAPF32[$1 + $3 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function TargettedMovement__ForgetGesture_28_29($0) {
var $1 = 0;
label$1: {
if (HEAPU8[$0 + 532 | 0]) {
$1 = HEAP32[$0 + 528 >> 2];
if (!$1) {
break label$1;
}
operator_20delete_28void__29(Gesture___Gesture_28_29($1));
}
HEAP32[$0 + 528 >> 2] = 0;
}
}
function MakeNonmanualSlots_28Gesture__29($0) {
var $1 = 0, $2 = 0;
if ($0) {
$2 = dlmalloc(32);
while (1) {
if (($1 | 0) == 8) {
HEAP32[$0 + 48 >> 2] = $2;
} else {
HEAP32[($1 << 2) + $2 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
}
function LogTime_28_IO_FILE__29($0) {
var $1 = 0, $2 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$2 = TimeNow_28_29();
if ($0) {
Timestamp_28long_29($2);
HEAP32[$1 >> 2] = 67616;
fiprintf($0, 19901, $1);
}
__stack_pointer = $1 + 16 | 0;
return $2;
}
function printIndent_28_IO_FILE__2c_20int_29($0, $1) {
var $2 = 0;
label$1: {
if (!$0) {
break label$1;
}
$1 = ($1 | 0) > 0 ? $1 : 0;
while (1) {
if (($1 | 0) == ($2 | 0)) {
break label$1;
}
fputs(24232, $0);
$2 = $2 + 1 | 0;
continue;
}
}
}
function float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($0, $1) {
return float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1);
}
function DynamicArrayP_OptionSpec___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function XmlInitEncoding($0, $1, $2) {
$2 = getEncodingIndex($2);
if (($2 | 0) == -1) {
return 0;
}
HEAP32[$0 + 72 >> 2] = $1;
HEAP8[$0 + 69 | 0] = $2;
HEAP32[$0 + 48 >> 2] = 829;
HEAP32[$0 + 4 >> 2] = 830;
HEAP32[$0 >> 2] = 831;
HEAP32[$1 >> 2] = $0;
return 1;
}
function TargettedMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29($0, $1, $2, $3);
}
function HashChain_int_2c_20int___HashChain_28HashChainItem_int_2c_20int__2c_20HashChain_int_2c_20int___29($0, $1, $2) {
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $3;
return $0;
}
function eprintf_28char_20const__2c_20____29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
__stack_pointer = $2;
if (HEAP32[16886]) {
HEAP32[$2 + 12 >> 2] = $1;
vfprintf(HEAP32[16886], $0, $1);
}
__stack_pointer = $2 + 16 | 0;
}
function DynamicArrayP_XMLCell___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_Segment___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_Gesture___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function std____2____shared_count____release_shared_28_29($0) {
var $1 = 0;
$1 = long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0 + 4 | 0);
if (($1 | 0) == -1) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
}
return ($1 | 0) == -1;
}
function appendToken_28DynamicArrayP_char___2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
$2 = $2 - $1 | 0;
if (($2 | 0) > 0) {
$1 = strncpy(dlmalloc($2 + 1 | 0), $1, $2);
HEAP8[$2 + $1 | 0] = 0;
DynamicArrayP_char___appendElement_28char__29($0, $1);
}
}
function Vector__setAdd_28Vector_20const__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
while (1) {
if (($2 | 0) != 3) {
$3 = $2 << 2;
$4 = $3 + $0 | 0;
HEAPF32[$4 >> 2] = HEAPF32[$1 + $3 >> 2] + HEAPF32[$4 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function PostureChangeTiming__defaultFrom_28PostureChangeTiming_20const__29($0, $1) {
if (HEAPF32[$0 >> 2] == Math_fround(-2)) {
HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
}
if (HEAPF32[$0 + 4 >> 2] == Math_fround(-2)) {
HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
}
}
function DynamicArrayP_Joint___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function XMLWrapper___XMLWrapper_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
HEAP32[$0 >> 2] = 63196;
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
operator_20delete_28void__29(DynamicArrayP_char_20const____DynamicArrayP_28_29($1));
HEAP32[$0 + 4 >> 2] = 0;
}
return $0 | 0;
}
function MannerFlags__addMannerFlags_28MannerFlags_29($0, $1) {
var $2 = 0;
MannerFlags__addManner_28Manner_29($0, HEAP32[$1 >> 2]);
$2 = HEAP32[$1 + 4 >> 2];
if ($2) {
HEAP32[$0 + 4 >> 2] = $2;
}
HEAP8[$0 + 8 | 0] = HEAPU8[$0 + 8 | 0] | HEAP8[$1 + 8 | 0] & 1;
}
function DynamicArrayP_char___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function DynamicArrayP_Site___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$3 = ($2 | 0) > 0 ? $2 : 0;
$2 = 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $2 << 2) >> 2] = 0;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function AvatarConstraints___AvatarConstraints_28_29($0) {
var $1 = 0, $2 = 0;
$1 = $0 + 84 | 0;
$2 = $0 + 52 | 0;
while (1) {
$1 = ShoulderConstraint___ShoulderConstraint_28_29($1 - 16 | 0);
if (($2 | 0) != ($1 | 0)) {
continue;
}
break;
}
return $0;
}
function XMLCell___XMLCell_28_29($0) {
var $1 = 0;
HEAP32[19359] = 0;
invoke_vi(718, $0 | 0);
$1 = HEAP32[19359];
HEAP32[19359] = 0;
if (($1 | 0) != 1) {
return $0;
}
__cxa_find_matching_catch_3(0) | 0;
getTempRet0() | 0;
std__terminate_28_29();
abort();
}
function Vector__setCentroid_28int_2c_20Vector_20const__29($0, $1, $2) {
Vector__setAddAll_28int_2c_20Vector_20const__29($0, $1, $2);
if (($1 | 0) >= 2) {
Vector__setScale_28float_29($0, Math_fround(1 / +($1 | 0)));
}
Vector__checkValidVector_28_29_20const($0);
}
function Vector__findRot_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
var $3 = Math_fround(0);
$3 = Vector__dotProduct_28Vector_20const__29_20const($0, $1);
return atan2_28float_2c_20float_29(Vector__dotProduct_28Vector_20const__29_20const($0, $2), $3);
}
function OneHDirMoveSpec__OneHDirMoveSpec_28_29($0) {
$0 = Vector__Vector_28_29($0);
HEAP32[$0 + 12 >> 2] = 0;
Vector__Vector_28_29($0 + 16 | 0);
Vector__Vector_28_29($0 + 28 | 0);
HEAP32[$0 + 40 >> 2] = 0;
ZigzagInfo__ZigzagInfo_28_29($0 + 44 | 0);
return $0;
}
function HashChain_char_20const__2c_20Gesture____HashChain_28HashChainItem_char_20const__2c_20Gesture___29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function HashAttribs_attrib_string_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__29($0, $1) {
var $2 = 0;
if (!(!$0 | !$1)) {
$2 = HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const($0, $1);
}
return $2;
}
function HashAny_char_20const__20const_2c_20AvatarType___HashAny_28AvatarType_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__20const_2c_20AvatarType___initialise_28int_29($0, $2);
return $0 | 0;
}
function Direction3__setMirror_28Mirroring_29($0, $1) {
$1 = HEAPU8[$1 | 0];
if ($1 & 2) {
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
if ($1 & 4) {
HEAPF32[$0 + 4 >> 2] = -HEAPF32[$0 + 4 >> 2];
}
if ($1 & 8) {
HEAPF32[$0 + 8 >> 2] = -HEAPF32[$0 + 8 >> 2];
}
}
function notation3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 17;
}
if (($1 | 0) == 27) {
HEAP32[$0 + 8 >> 2] = 17;
HEAP32[$0 >> 2] = 801;
return 19;
}
common($0);
return -1;
}
function SeqMovement___SeqMovement_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 62588;
DynamicArrayP_BasicMovement___deleteAll_28_29($0 + 528 | 0);
DynamicArray0_float____DynamicArray0_28_29($0 + 560 | 0);
return CompoundMovement___CompoundMovement_28_29($0) | 0;
}
function FingerBaseJointRotation__setLongitAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47899, $0);
__stack_pointer = $0 + 16 | 0;
}
function DynamicArray_int_2c_20_1___clearData_28int_2c_20int_29($0, $1, $2) {
var $3 = 0;
$2 = ($2 | 0) > 0 ? $2 : 0;
while (1) {
if (($2 | 0) != ($3 | 0)) {
HEAP32[HEAP32[$0 >> 2] + ($1 + $3 << 2) >> 2] = -1;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function rescaleSpace_28float_2c_20float_29($0, $1) {
$0 = $1 != Math_fround(0) ? Math_fround(Math_fround(Math_fround($1 + Math_fround(1)) * $0) / Math_fround(Math_fround(1) - Math_fround($1 * Math_fround(Math_fround(1) - Math_fround($0 + $0))))) : $0;
return $0;
}
function XML_ParserCreate_MM($0, $1, $2) {
label$1: {
$0 = parserCreate($0, $1, $2);
if ($0) {
if (!HEAPU8[$0 + 232 | 0]) {
break label$1;
}
if (setContext($0, 49616)) {
break label$1;
}
XML_ParserFree($0);
}
return 0;
}
return $0;
}
function Transform__setPreCompose_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $2) {
Quaternion__rotateVector_28Vector__29_20const($2, $0);
Vector__setAdd_28Vector_20const__29($0, $1);
Quaternion__setPreCompose_28Quaternion_20const__29($0 + 12 | 0, $2);
}
function SplitMovement__operator__28SplitMovement_20const__29($0, $1) {
var $2 = 0;
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
$2 = HEAP32[$1 + 532 >> 2];
HEAP32[$0 + 528 >> 2] = HEAP32[$1 + 528 >> 2];
HEAP32[$0 + 532 >> 2] = $2;
return $0;
}
function OneHAbstractPosture__printShapeSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
Handshape__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const(HEAP32[$0 + 56 >> 2], $1);
}
function NoMovement__NoMovement_28NoMovement_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28BasicMovement_20const__29($0, $1);
HEAP32[$0 >> 2] = 61980;
NoMovement__operator__28NoMovement_20const__29($0, $1);
return $0 | 0;
}
function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
HEAP32[$1 + 28 >> 2] = $3;
}
}
function XMLCell__attrib_string_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = HEAP32[$0 + 4 >> 2];
if (!$0) {
return 0;
}
return HashAttribs_attrib_string_28HashAny_char_20const__2c_20char_20const___20const__2c_20char_20const__29($0, $1) | 0;
}
function Quaternion__rotateVectorAboutCentre_28Vector_20const__2c_20Vector_20const__2c_20Vector__29_20const($0, $1, $2, $3) {
Vector__setFrom_28Vector_20const__29($3, $2);
Quaternion__rotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($0, $1, $3);
}
function OneHConcretePostureModifier__OneHConcretePostureModifier_28_29($0) {
$0 = Quaternion__Quaternion_28_29($0);
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
return $0;
}
function HanimAnimationRecord__printARPFooter_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 96 >> 2];
if ($1) {
if (HEAP32[$0 + 20 >> 2] == 3) {
PrintCASXMLFooter_28_IO_FILE__29($1);
$1 = HEAP32[$0 + 96 >> 2];
}
fclose($1);
HEAP32[$0 + 96 >> 2] = 0;
}
}
function DeleteTrajectoryTable_28_29() {
var $0 = 0;
$0 = HEAP32[17605];
if ($0) {
dlfree($0);
HEAP32[17605] = 0;
}
$0 = HEAP32[17604];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[17604] = 0;
}
}
function DeleteControllerTable_28_29() {
var $0 = 0;
$0 = HEAP32[17051];
if ($0) {
dlfree($0);
HEAP32[17051] = 0;
}
$0 = HEAP32[17052];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[17052] = 0;
}
}
function HashChain_char_20const__2c_20SiteID___HashChain_28HashChainItem_char_20const__2c_20SiteID__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function HashChain_SiteID_20const_2c_20Site____HashChain_28HashChainItem_SiteID_20const_2c_20Site___29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function ferror($0) {
var $1 = 0, $2 = 0;
label$1: {
if (HEAP32[$0 + 76 >> 2] < 0) {
$1 = HEAP32[$0 >> 2];
break label$1;
}
$2 = __lockfile($0);
$1 = HEAP32[$0 >> 2];
if (!$2) {
break label$1;
}
__unlockfile($0);
}
return $1 >>> 5 & 1;
}
function TurretJointRotation__setLongitAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47783, $0);
__stack_pointer = $0 + 16 | 0;
}
function Controller__new_ref1_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
if (HEAP32[$0 + 44 >> 2] == 1) {
HEAPF32[$0 + 68 >> 2] = $1;
HEAPF32[$0 + 64 >> 2] = $1;
return;
}
HEAPF32[$0 + 60 >> 2] = $1;
Controller__resetOvershoot_28_29($0);
}
function BasicMovement__setMannerFlags_28MannerFlags_29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = HEAP32[$1 + 4 >> 2];
$2 = HEAP32[$1 >> 2];
$4 = $2;
$2 = $0;
HEAP32[$2 + 12 >> 2] = $4;
HEAP32[$2 + 16 >> 2] = $3;
HEAP8[$2 + 20 | 0] = HEAPU8[$1 + 8 | 0];
}
function BasicMovement__offsetFinalPos_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, 1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $2, 0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___length_28_29_20const($0) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($0) {
return !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
}
function Joint__pathToRoot_28DynamicArrayP_Joint___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$1 + 12 >> 2] = 0;
while (1) {
if ($0) {
DynamicArrayP_Joint___appendElement_28Joint__29($1, $0);
$0 = HEAP32[$0 + 8 >> 2];
continue;
}
break;
}
}
function HingeJointRotation__setLongitAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47962, $0);
__stack_pointer = $0 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0) {
return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
}
function feof($0) {
var $1 = 0, $2 = 0;
label$1: {
if (HEAP32[$0 + 76 >> 2] < 0) {
$1 = HEAP32[$0 >> 2];
break label$1;
}
$2 = __lockfile($0);
$1 = HEAP32[$0 >> 2];
if (!$2) {
break label$1;
}
__unlockfile($0);
}
return $1 >>> 4 & 1;
}
function VRMLRotation__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
VRMLRotation__set_x_28float_29($0, $1);
VRMLRotation__set_y_28float_29($0, $2);
VRMLRotation__set_z_28float_29($0, $3);
VRMLRotation__set_a_28float_29($0, $4);
}
function QuatJointRotation__setLongitAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47842, $0);
__stack_pointer = $0 + 16 | 0;
}
function HingeJointRotation__setSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47613, $0);
__stack_pointer = $0 + 16 | 0;
}
function HingeJointRotation__addSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47726, $0);
__stack_pointer = $0 + 16 | 0;
}
function HashAny_char_20const__2c_20char_20const____HashAny_28char_20const__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__2c_20char_20const____initialise_28int_29($0, $2);
return $0 | 0;
}
function DynamicArray_short_2c_20_28short_29_1___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray_short_2c_20_28short_29_1___resize_28int_29($0, DynamicArray_short_2c_20_28short_29_1___preferredSize_28int_29($0, $1));
}
}
function std____2__allocator_traits_std____2__allocator_SSPRSet___20___deallocate_28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20unsigned_20long_29($0, $1, $2) {
std____2__allocator_SSPRSet____deallocate_28SSPRSet___2c_20unsigned_20long_29($0, $1, $2);
}
function std____2__allocator_traits_std____2__allocator_SSMorph___20___deallocate_28std____2__allocator_SSMorph____2c_20SSMorph___2c_20unsigned_20long_29($0, $1, $2) {
std____2__allocator_SSMorph____deallocate_28SSMorph___2c_20unsigned_20long_29($0, $1, $2);
}
function StaticArmData__StaticArmData_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP8[$0 | 0] = 1;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
return $0 | 0;
}
function Quaternion__invRotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
Vector__setSubtract_28Vector_20const__29($2, $1);
Quaternion__invRotateVector_28Vector__29_20const($0, $2);
Vector__setAdd_28Vector_20const__29($2, $1);
}
function QuatJointRotation__setSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47557, $0);
__stack_pointer = $0 + 16 | 0;
}
function QuatJointRotation__addSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(47670, $0);
__stack_pointer = $0 + 16 | 0;
}
function BasicMovement__setFinalPos_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, 1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $2, 0);
}
function void_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___destroy_SSPRSet__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
std____2__allocator_SSPRSet____destroy_28SSPRSet___29($0, $1);
}
function void_20std____2__allocator_traits_std____2__allocator_SSMorph___20___destroy_SSMorph__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
std____2__allocator_SSMorph____destroy_28SSMorph___29($0, $1);
}
function Quaternion__setZero_28_29($0) {
$0 = $0 | 0;
Quaternion__set_x_28float_29($0, Math_fround(0));
Quaternion__set_y_28float_29($0, Math_fround(0));
Quaternion__set_z_28float_29($0, Math_fround(0));
Quaternion__set_w_28float_29($0, Math_fround(1));
}
function QuatJointRotation__setBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(48020, $0);
__stack_pointer = $0 + 16 | 0;
}
function QuatJointRotation__addBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
$0 = __stack_pointer - 16 | 0;
__stack_pointer = $0;
HEAPF64[$0 >> 3] = $1;
eprintf_28char_20const__2c_20____29(48075, $0);
__stack_pointer = $0 + 16 | 0;
}
function setARPBoneRot_28SSFrame__2c_20int_2c_20Quaternion_20const__29($0, $1, $2) {
SSFrame__SetBoneRotation_28int_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, HEAPF32[$2 >> 2], HEAPF32[$2 + 4 >> 2], HEAPF32[$2 + 8 >> 2], HEAPF32[$2 + 12 >> 2]);
}
function Timestamp_28long_29($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
HEAP32[$1 + 12 >> 2] = $0;
strftime(67616, 40, 11138, localtime($1 + 12 | 0) | 0) | 0;
HEAP8[67655] = 0;
__stack_pointer = $1 + 16 | 0;
return 67616;
}
function ThumbBending__SetThumbBending_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
HEAPF32[$0 + 16 >> 2] = $5;
HEAPF32[$0 + 12 >> 2] = $4;
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
}
function Quaternion__setScale_28Quaternion_20const__2c_20float_29($0, $1, $2) {
var $3 = 0, $4 = 0;
while (1) {
if (($3 | 0) != 4) {
$4 = $3 << 2;
HEAPF32[$4 + $0 >> 2] = HEAPF32[$1 + $4 >> 2] * $2;
$3 = $3 + 1 | 0;
continue;
}
break;
}
}
function HashChain_char_20const__2c_20int___HashChain_28HashChainItem_char_20const__2c_20int__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function HashChain_char_20const__2c_20Gesture_____HashChain_28_29($0) {
HashChain_char_20const__2c_20Gesture____delItem_28HashChain_char_20const__2c_20Gesture_____29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($0);
}
function BasicMovement__scaleDuration_28float_2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
if ($1 != Math_fround(1)) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, Math_fround(HEAPF32[$0 + 40 >> 2] * $1), $2);
}
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) {
return HEAP32[std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) {
return HEAP32[std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function SiGMLHandshape__IsThumbToBentMiddle_28_29($0) {
var $1 = 0;
if (HEAP32[$0 + 68 >> 2] == 2) {
$1 = IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29(HEAP32[$0 + 180 >> 2], HEAP32[$0 + 184 >> 2], 0, 2);
}
return $1;
}
function ParserData__ParserData_28HashAny_char_20const__2c_20Gesture____2c_20HanimAvatar_20const__29($0, $1, $2) {
HEAP32[$0 + 16 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 >> 2] = 0;
return $0;
}
function FingerBaseJointRotation__setZero_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 68 >> 2] = 0;
HEAP32[$0 + 60 >> 2] = 0;
HEAP32[$0 + 64 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
HEAP32[$0 + 56 >> 2] = 0;
}
function unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___max_size_std____2__allocator_SSPRSet___2c_20void__28std____2__allocator_SSPRSet___20const__29($0) {
return std____2__allocator_SSPRSet____max_size_28_29_20const($0);
}
function unsigned_20long_20std____2__allocator_traits_std____2__allocator_SSMorph___20___max_size_std____2__allocator_SSMorph___2c_20void__28std____2__allocator_SSMorph___20const__29($0) {
return std____2__allocator_SSMorph____max_size_28_29_20const($0);
}
function Site__getGlobalPosition_28Vector__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = HEAP32[$0 + 44 >> 2];
$2 = HEAP32[$0 + 40 >> 2];
$4 = $2;
$2 = $1;
HEAP32[$2 >> 2] = $4;
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
}
function DynamicArray_short_2c_20_28short_29_1___ensureSize_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
DynamicArray_short_2c_20_28short_29_1___resize_28int_29($0, DynamicArray_short_2c_20_28short_29_1___preferredSize_28int_29($0, $1));
}
}
function AtomicTimedMorph__scaleAmount_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 28 >> 2] = HEAPF32[$0 + 28 >> 2] * $1;
HEAPF32[$0 + 32 >> 2] = HEAPF32[$0 + 32 >> 2] * $1;
HEAPF32[$0 + 36 >> 2] = HEAPF32[$0 + 36 >> 2] * $1;
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______capacity_28_29_20const($0) {
return HEAP32[std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______capacity_28_29_20const($0) {
return HEAP32[std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function attlist5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$2 = 33;
if (($1 | 0) != 15) {
if (($1 | 0) == 23) {
HEAP32[$0 >> 2] = 815;
return 33;
}
common($0);
$2 = -1;
}
return $2 | 0;
}
function _GLOBAL__sub_I_Quaternion_cpp() {
__cxx_global_var_init_20();
__cxx_global_var_init_9_1();
__cxx_global_var_init_10_1();
__cxx_global_var_init_1_13();
__cxx_global_var_init_11_1();
__cxx_global_var_init_2_2();
__cxx_global_var_init_3_2();
}
function Site__getLocalPosition_28Vector__29($0, $1) {
var $2 = 0, $3 = 0, $4 = 0;
$3 = HEAP32[$0 + 32 >> 2];
$2 = HEAP32[$0 + 28 >> 2];
$4 = $2;
$2 = $1;
HEAP32[$2 >> 2] = $4;
HEAP32[$2 + 4 >> 2] = $3;
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 36 >> 2];
}
function Quaternion__rotateVectorAboutCentre_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
Vector__setSubtract_28Vector_20const__29($2, $1);
Quaternion__rotateVector_28Vector__29_20const($0, $2);
Vector__setAdd_28Vector_20const__29($2, $1);
}
function HashAny_int_2c_20int___lookupString_28int_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return HashAny_int_2c_20int___lookupInCell_28int_2c_20int_29_20const($0, KeyOps_int___hashFunction_28int_2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1) | 0;
}
function HashAny_char_20const__2c_20SiteID___HashAny_28SiteID_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = HEAP32[$1 >> 2];
HashAny_char_20const__2c_20SiteID___initialise_28int_29($0, $2);
return $0 | 0;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____DynamicArray1_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_DynamicArray1_AtomicNonmanual_____initialise_28int_2c_20DynamicArray1_AtomicNonmanual____29($0, $1, 0);
return $0 | 0;
}
function DynamicArray_char_2c_20_28char_290___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray_char_2c_20_28char_290___resize_28int_29($0, DynamicArray_char_2c_20_28char_290___preferredSize_28int_29($0, $1));
}
}
function BreakSymmetry_28SiteIDPair__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2) {
BreakSymmetry_28SiteID__2c_20HanimAvatar_20const__2c_20bool_29($0, $1, $2);
BreakSymmetry_28SiteID__2c_20HanimAvatar_20const__2c_20bool_29($0 + 4 | 0, $1, $2);
}
function utf8_isInvalid2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = 1;
label$1: {
if (HEAPU8[$1 | 0] < 194) {
break label$1;
}
$1 = HEAPU8[$1 + 1 | 0];
if (!($1 & 128)) {
break label$1;
}
$0 = ($1 & 192) == 192;
}
return $0 | 0;
}
function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function normal_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
while (1) {
$2 = HEAPU8[(HEAPU8[$1 | 0] + $0 | 0) + 72 | 0];
if (!($2 >>> 0 > 21 | !(1 << $2 & 2098688))) {
$1 = $1 + 1 | 0;
continue;
}
break;
}
return $1 | 0;
}
function destroyBindings($0, $1) {
var $2 = 0;
while (1) {
if ($0) {
$2 = HEAP32[$0 + 4 >> 2];
FUNCTION_TABLE[HEAP32[$1 + 20 >> 2]](HEAP32[$0 + 16 >> 2]);
FUNCTION_TABLE[HEAP32[$1 + 20 >> 2]]($0);
$0 = $2;
continue;
}
break;
}
}
function Quaternion__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
Quaternion__set_x_28float_29($0, $1);
Quaternion__set_y_28float_29($0, $2);
Quaternion__set_z_28float_29($0, $3);
Quaternion__set_w_28float_29($0, $4);
}
function unknown_isInvalid($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = 1;
$0 = FUNCTION_TABLE[HEAP32[$0 + 364 >> 2]](HEAP32[$0 + 368 >> 2], $1) | 0;
if ($0 >>> 0 <= 65535) {
$2 = checkCharRefNumber($0) >>> 31 | 0;
}
return $2 | 0;
}
function HashChain_char_20const__2c_20SiteID____HashChain_28_29($0) {
HashChain_char_20const__2c_20SiteID___delItem_28HashChain_char_20const__2c_20SiteID____29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($0);
}
function HashChain_SiteID_20const_2c_20Site_____HashChain_28_29($0) {
HashChain_SiteID_20const_2c_20Site____delItem_28HashChain_SiteID_20const_2c_20Site_____29($0 + 8 | 0);
return HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($0);
}
function AbstractTimedMorph__AbstractTimedMorph_28TimedMorphType_29($0, $1) {
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 >> 2] = 62788;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
return $0;
}
function Site__initialise_28_29($0) {
HEAP16[$0 + 12 >> 1] = HEAPU16[35152];
HEAP8[$0 + 14 | 0] = HEAPU8[70306];
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
}
function DynamicArray1_AbstractTimedMorph____requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_AbstractTimedMorph____resize_28int_29($0, DynamicArray1_AbstractTimedMorph____preferredSize_28int_29($0, $1));
}
}
function prologInitProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0;
$4 = initializeEncoding($0);
if (!$4) {
HEAP32[$0 + 264 >> 2] = 771;
$4 = prologProcessor($0, $1, $2, $3);
}
return $4 | 0;
}
function TargettedMovement__operator__28TargettedMovement_20const__29($0, $1) {
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
HEAP8[$0 + 532 | 0] = HEAPU8[$1 + 532 | 0];
HEAP32[$0 + 528 >> 2] = HEAP32[$1 + 528 >> 2];
return $0;
}
function AnimgenInstance__AGIPostMortem_28PostMortem__29($0, $1) {
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
HEAP32[$1 >> 2] = HEAP32[$0 + 36 >> 2];
emscripten_asm_const_int(67082, 49601, $1 | 0) | 0;
__stack_pointer = $1 + 16 | 0;
}
function YXZRotation__YXZRotation_28float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
YXZRotation__setFrom_28float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6);
return $0;
}
function XMLCellIterator__XMLCellIterator_28DynamicArrayP_XMLCell___2c_20char_20const__29($0, $1, $2) {
HEAP32[$0 + 12 >> 2] = -1;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 >> 2] = 0;
return $0;
}
function TwoHAbstractPosture___TwoHAbstractPosture_28_29($0) {
ConstellationInfo___ConstellationInfo_28_29($0 + 144 | 0);
OneHAbstractPosture___OneHAbstractPosture_28_29($0 + 72 | 0);
return OneHAbstractPosture___OneHAbstractPosture_28_29($0);
}
function DynamicArray_char_2c_20_28char_290___ensureSize_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
DynamicArray_char_2c_20_28char_290___resize_28int_29($0, DynamicArray_char_2c_20_28char_290___preferredSize_28int_29($0, $1));
}
}
function HashAny_char_20const__2c_20Gesture____HashAny_28Gesture__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__2c_20Gesture____initialise_28int_29($0, $2);
return $0 | 0;
}
function DynamicArrayP_AbstractTimedMorph___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_AbstractTimedMorph___resize_28int_29($0, DynamicArrayP_AbstractTimedMorph___preferredSize_28int_29($0, $1));
}
}
function trimLength_28Quaternion__2c_20float_29($0, $1) {
var $2 = Math_fround(0);
$2 = Quaternion__lengthsq_28_29_20const($0);
if ($2 > Math_fround($1 * $1)) {
Quaternion__setScale_28float_29($0, Math_fround($1 / sqrt_28float_29($2)));
}
}
function ProcessPostMortem_28float_2c_20DynamicArrayP_Gesture___2c_20void_20_28__29_28void__2c_20PostMortem__29_2c_20void__29($0, $1, $2) {
HEAPF32[18890] = $0;
HEAP32[18891] = HEAP32[18884];
if ($1) {
FUNCTION_TABLE[$1 | 0]($2, 75540);
}
}
function BasicMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
TwoHConcretePosture__installHandStuff_28TwoHandStuff_20const__29($0 + 284 | 0, $1);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2) | 0;
}
function __cxx_global_var_init_51() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75572, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_50() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75524, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_49() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75504, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_48() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75496, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_47() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75480, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_46() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75472, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_45() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70704, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_44() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70684, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_43() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70500, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_42() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70480, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_41() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70452, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_40() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70424, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_39() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70308, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_38() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70044, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_37() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68380, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_36() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68360, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_35() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68308, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_34() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68296, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_33() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68288, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_32() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68260, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_31() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68240, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_30() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68220, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_29() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68184, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_28() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68148, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_27() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68012, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_26() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67984, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_25() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67976, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_22() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67964, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_21() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67956, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_20() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67916, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_19() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67908, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_18() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67760, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_17() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67752, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_16() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67740, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_15() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67704, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_14() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67696, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_13() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67688, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_12() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67672, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_11() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67664, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_10() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67656, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function OneHGesture__OneHGesture_28bool_2c_20Gesture__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$0 = OneHAbstractPosture__OneHAbstractPosture_28bool_2c_20Gesture__29($0, $1, $2);
HEAP32[$0 + 72 >> 2] = $2;
return $0 | 0;
}
function __cxx_global_var_init_3() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67536, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_2() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67528, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function Vector__Vector_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
Vector__setFrom_28float_2c_20float_2c_20float_29($0, $1, $2, $3);
return $0 | 0;
}
function TurretJointRotation__setLongitAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21536);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function Transform__setFrom_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Vector__setFrom_28Vector_20const__29($0, $1);
Quaternion__setFrom_28Quaternion_20const__29($0 + 12 | 0, $2);
}
function unsigned_20long_20std____2__allocator_traits_std____2__allocator_char__20___max_size_std____2__allocator_char__2c_20void__28std____2__allocator_char__20const__29($0) {
return std____2__allocator_char___max_size_28_29_20const($0);
}
function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2);
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
return $0;
}
function HingeJointRotation__setLongitAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21640);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function DynamicArray_short_2c_20_28short_29_1___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = 65535;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP16[HEAP32[$0 >> 2] + ($1 << 1) >> 1];
return $2 << 16 >> 16;
}
function std____2____compressed_pair_elem_std____2__allocator_SSPRSet____2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SSPRSet____2c_20void__28std____2__allocator_SSPRSet____29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_SSMorph____2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_SSMorph____2c_20void__28std____2__allocator_SSMorph____29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function notation2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 17;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 823;
return 21;
}
common($0);
return -1;
}
function __syscall_ret($0) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if ($0 >>> 0 >= 4294963201) {
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0 - $0 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
$0 = -1;
}
return $0;
}
function __cxx_global_var_init() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67520, wasm2js_f32$0 = atan2_28float_2c_20float_29(Math_fround(1), Math_fround(0)), 
HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function Transform__invTransformVector_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
Vector__setSubtract_28Vector_20const__2c_20Vector_20const__29($2, $1, $0);
Quaternion__invRotateVector_28Vector__29_20const($0 + 12 | 0, $2);
}
function SiGMLConstellation___SiGMLConstellation_28_29($0) {
SiteIDPair___SiteIDPair_28_29($0 + 72 | 0);
SiteIDPair___SiteIDPair_28_29($0 + 28 | 0);
SiteIDPair___SiteIDPair_28_29($0 + 16 | 0);
return SiteIDPair___SiteIDPair_28_29($0);
}
function Quaternion__setFrom_28Quaternion_20const__29_1($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) != 4) {
$3 = $2 << 2;
HEAPF32[$3 + $0 >> 2] = HEAPF32[$1 + $3 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function Quaternion__Quaternion_28Vector_20const__2c_20float_2c_20bool_29($0, $1, $2, $3) {
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($0, $1, $2, $3);
Quaternion__checkValidQuat_28_29_20const($0);
return $0;
}
function QuatJointRotation__setLongitAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21589);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20DigitIndex_29($0, $1, $2, $3, $4) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0, $1, $2, $3, MakeDigit_28DigitIndex_29($4));
}
function HingeJointRotation__setSplayAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21485);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function HashAny_SiteID_20const_2c_20Site____HashAny_28Site__2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_SiteID_20const_2c_20Site____initialise_28int_29($0, $2);
return $0 | 0;
}
function HanimAvatar__siteLocation_28char_20const__2c_20Vector__29_20const($0, $1, $2) {
$0 = HanimAvatar__LookupSite_28char_20const__29_20const($0, $1);
if ($0) {
Site__getLocalPosition_28Vector__29($0, $2);
}
return ($0 | 0) != 0;
}
function attlist9($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 33;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 795;
return 38;
}
common($0);
return -1;
}
function TwoArmAnimator___TwoArmAnimator_28_29($0) {
TwoHConcretePosture___TwoHConcretePosture_28_29($0 + 7128 | 0);
OneArmAnimator___OneArmAnimator_28_29($0 + 3572 | 0);
OneArmAnimator___OneArmAnimator_28_29($0 + 16 | 0);
return $0;
}
function ThumbBending__ThumbBending_28_29($0) {
HEAP32[$0 + 16 >> 2] = -1027080192;
HEAP32[$0 + 8 >> 2] = -1027080192;
HEAP32[$0 + 12 >> 2] = -1027080192;
HEAP32[$0 >> 2] = -1027080192;
HEAP32[$0 + 4 >> 2] = -1027080192;
return $0;
}
function QuatJointRotation__setSplayAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21435);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function ParticipatesInFingerPlay_28FingerBending_29($0) {
var $1 = Math_fround(0);
$1 = HEAPF32[$0 >> 2];
return !(Math_fround(Math_fround($1 + HEAPF32[$0 + 4 >> 2]) + HEAPF32[$0 + 8 >> 2]) > Math_fround(6)) | !($1 > Math_fround(2));
}
function MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0, $1, $2, $3, $4) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, $1, $2, $3, $4, 1, 0);
}
function HashChain_int_2c_20int___HashChain_28HashChainItem_int_2c_20int__29($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function HashChain_char_20const__2c_20int____HashChain_28_29($0) {
HashChain_char_20const__2c_20int___delItem_28HashChain_char_20const__2c_20int____29($0 + 8 | 0);
return HashChainItem_char_20const__2c_20int____HashChainItem_28_29($0);
}
function HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashChainItem_28SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29_29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function std____2__error_category__default_error_condition_28int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
std____2__error_condition__error_condition_28int_2c_20std____2__error_category_20const__29($0, $2, $1);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const($0) {
std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
abort();
}
function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0, $1);
}
function entity9($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 11;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 809;
return 13;
}
common($0);
return -1;
}
function entity8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 11;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 806;
return 14;
}
common($0);
return -1;
}
function entity4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 11;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 808;
return 13;
}
common($0);
return -1;
}
function entity3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 11;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 799;
return 14;
}
common($0);
return -1;
}
function __memcpy($0, $1, $2) {
var $3 = 0;
if ($2) {
$3 = $0;
while (1) {
HEAP8[$3 | 0] = HEAPU8[$1 | 0];
$3 = $3 + 1 | 0;
$1 = $1 + 1 | 0;
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
return $0;
}
function SSMorph__SSMorph_28char__2c_20float_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
HEAP8[$0 + 8 | 0] = 0;
HEAP32[$0 >> 2] = 59136;
strncpy($0 + 4 | 0, $1, 4);
HEAPF32[$0 + 12 >> 2] = $2;
return $0 | 0;
}
function Quaternion__setFrom_28Quaternion_20const__29($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) != 4) {
$3 = $2 << 2;
HEAPF32[$3 + $0 >> 2] = HEAPF32[$1 + $3 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function QuatJointRotation__setBendAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
eputs_28char_20const__29(21692);
Vector__print_28_IO_FILE__2c_20int_29_20const($1, HEAP32[16886], 3);
eputs_28char_20const__29(48240);
}
function InvertibleStringArray__valueFromIndex_28int_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 8 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 + 4 >> 2] + ($1 << 2) >> 2];
return $2 | 0;
}
function DynamicArray1_AtomicNonmanual___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_AtomicNonmanual___resize_28int_29($0, DynamicArray1_AtomicNonmanual___preferredSize_28int_29($0, $1));
}
}
function DynamicArray1_AtomicNonmanual___appendElement_28AtomicNonmanual_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_AtomicNonmanual___setElement_28int_2c_20AtomicNonmanual_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function AGISignStartCallback_28void__2c_20char_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
AnimgenInstance__AGISignStart_28char_20const__2c_20int_2c_20int_29($0, $1, $2, $3);
}
function doctype3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 3;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 792;
return 5;
}
common($0);
return -1;
}
function doctype2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
if (($1 | 0) == 15) {
return 3;
}
if (($1 | 0) == 27) {
HEAP32[$0 >> 2] = 785;
return 6;
}
common($0);
return -1;
}
function __time($0) {
var $1 = 0, $2 = 0;
$2 = +_emscripten_date_now() / 1e3;
label$1: {
if (Math_abs($2) < 2147483648) {
$1 = ~~$2;
break label$1;
}
$1 = -2147483648;
}
if ($0) {
HEAP32[$0 >> 2] = $1;
}
return $1;
}
function InitSmMdLgTikTok_28float__29($0) {
if ($0) {
HEAP32[$0 + 16 >> 2] = 1065353216;
HEAP32[$0 + 8 >> 2] = 1065353216;
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 1065353216;
}
}
function Getopts__OptionValue_28char_20const__2c_20char_20const__29($0, $1, $2) {
$0 = Getopts__OptionValues_28char_20const__29($0, $1);
if ($0) {
$2 = DynamicArrayP_char_20const___getElement_28int_29_20const($0, 0);
}
return $2;
}
function Transform__invTransformRotation_28Quaternion_20const__2c_20Quaternion__29_20const($0, $1, $2) {
Quaternion__setFrom_28Quaternion_20const__29($2, $1);
Quaternion__invRotateRotation_28Quaternion__29_20const($0 + 12 | 0, $2);
}
function SetDigits_28short__2c_20char_20const__29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if ($1) {
wasm2js_i32$0 = $0, wasm2js_i32$1 = MakeDigits_28char_20const__29($1), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
}
}
function HingeJointRotation__setPreInvCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = Math_fround(0);
$2 = Quaternion__getAngle_28_29_20const($1);
HEAPF32[$0 + 20 >> 2] = HEAPF32[$0 + 20 >> 2] - $2;
}
function DynamicArray1_JointRotation____requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_JointRotation____resize_28int_29($0, DynamicArray1_JointRotation____preferredSize_28int_29($0, $1));
}
}
function std____2__setprecision_28int_29($0) {
var $1 = 0;
$1 = __stack_pointer - 16 | 0;
__stack_pointer = $1;
$0 = HEAP32[std____2____iom_t5____iom_t5_28int_29($1 + 8 | 0, $0) >> 2];
__stack_pointer = $1 + 16 | 0;
return $0;
}
function NonmanualMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
UNIMPLEMENTED_28char_20const__29(4212);
}
function AtomicNonmanual__clear_28_29($0) {
var $1 = 0;
HEAP16[$0 + 4 >> 1] = 65535;
HEAP32[$0 >> 2] = 0;
$1 = HEAP32[$0 + 8 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 8 >> 2] = 0;
}
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$0 = dynCall_jiji($0, $1, $2, $3, $4);
$2 = i64toi32_i32$HIGH_BITS;
setTempRet0($2 | 0);
return $0 | 0;
}
function SetDigit_28short__2c_20DigitIndex_29($0, $1) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAPU16[$0 >> 1] | MakeDigit_28DigitIndex_29($1), 
HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29_20const($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___first_28_29_20const($0 + 8 | 0);
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____end_cap_28_29_20const($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___first_28_29_20const($0 + 8 | 0);
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______clear_28_29($0) {
std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________destruct_at_end_28SSPRSet___29($0, HEAP32[$0 + 4 >> 2]);
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______clear_28_29($0) {
std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________destruct_at_end_28SSMorph___29($0, HEAP32[$0 + 4 >> 2]);
}
function fileExists_28char_20const__29($0) {
var $1 = 0;
$1 = __stack_pointer - 96 | 0;
__stack_pointer = $1;
if ($0) {
$0 = stat($0, $1 + 8 | 0);
} else {
$0 = 1;
}
__stack_pointer = $1 + 96 | 0;
$0 = !$0;
return $0;
}
function HingeJointRotation__setComposeInv_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = Math_fround(0);
$2 = Quaternion__getAngle_28_29_20const($1);
HEAPF32[$0 + 20 >> 2] = HEAPF32[$0 + 20 >> 2] - $2;
}
function HashAny_char_20const__2c_20int___HashAny_28int_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_char_20const__2c_20int___initialise_28int_29($0, $2);
return $0 | 0;
}
function DynamicArrayP_BasicMovement___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_BasicMovement___resize_28int_29($0, DynamicArrayP_BasicMovement___preferredSize_28int_29($0, $1));
}
}
function ControllerParams__ControllerParams_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
HEAPF32[$0 + 12 >> 2] = $4;
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
return $0;
}
function utf8_isNmstrt2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = HEAPU8[$1 + 1 | 0];
$1 = HEAPU8[$1 | 0];
return 1 << $0 & HEAP32[(($0 >>> 5 & 1 | (HEAPU8[($1 >>> 2 & 7) + 51248 | 0] << 3 | $1 << 1 & 6)) << 2) + 49968 >> 2];
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29_20const($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___second_28_29_20const($0 + 8 | 0);
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29_20const($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___second_28_29_20const($0 + 8 | 0);
}
function Vector__equal_28Vector_20const__29_20const($0, $1) {
var $2 = 0;
$2 = HEAPF32[$0 >> 2] != HEAPF32[$1 >> 2] | HEAPF32[$0 + 4 >> 2] != HEAPF32[$1 + 4 >> 2] ? $2 : HEAPF32[$0 + 8 >> 2] == HEAPF32[$1 + 8 >> 2];
return $2;
}
function TwoHAbstractPosture__reportUndefined_28_IO_FILE__29($0, $1) {
OneHAbstractPosture__reportUndefined_28_IO_FILE__2c_20bool_29($0, $1, 1);
OneHAbstractPosture__reportUndefined_28_IO_FILE__2c_20bool_29($0 + 72 | 0, $1, 0);
}
function Quaternion__setScale_28float_29($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) != 4) {
$3 = ($2 << 2) + $0 | 0;
HEAPF32[$3 >> 2] = HEAPF32[$3 >> 2] * $1;
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function InitSmMdLg_28float__29($0) {
if ($0) {
HEAP32[$0 + 16 >> 2] = 1070386381;
HEAP32[$0 + 8 >> 2] = 1060320051;
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 1056964608;
}
}
function std____2__ios_base__clear_28unsigned_20int_29($0, $1) {
$1 = !HEAP32[$0 + 24 >> 2] | $1;
HEAP32[$0 + 16 >> 2] = $1;
if (HEAP32[$0 + 20 >> 2] & $1) {
std____2____throw_failure_28char_20const__29(5079);
abort();
}
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___clear_28_29($0) {
std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____destruct_at_end_28SSPRSet___29($0, HEAP32[$0 >> 2]);
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___clear_28_29($0) {
std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____destruct_at_end_28SSMorph___29($0, HEAP32[$0 >> 2]);
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________end_cap_28_29_20const($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______first_28_29_20const($0 + 12 | 0);
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________end_cap_28_29_20const($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______first_28_29_20const($0 + 12 | 0);
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___second_28_29_20const($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____get_28_29_20const($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___second_28_29_20const($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____get_28_29_20const($0);
}
function __sindf($0) {
var $1 = 0, $2 = 0;
$1 = $0 * $0;
$2 = $1 * $0;
return Math_fround($2 * ($1 * $1) * ($1 * 2718311493989822e-21 + -.00019839334836096632) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
}
function Vector__setFrom_28Vector_20const__29($0, $1) {
var $2 = 0, $3 = 0;
while (1) {
if (($2 | 0) != 3) {
$3 = $2 << 2;
HEAPF32[$3 + $0 >> 2] = HEAPF32[$1 + $3 >> 2];
$2 = $2 + 1 | 0;
continue;
}
break;
}
}
function TwoHandStuff__update_28TwoHandStuff_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
OneHandStuff__update_28OneHandStuff_20const__29($0, $1);
OneHandStuff__update_28OneHandStuff_20const__29($0 + 44 | 0, $1 + 44 | 0);
}
function ThumbBaseJointRotation__setZero_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 44 >> 2] = 0;
HEAP32[$0 + 48 >> 2] = 0;
HEAP32[$0 + 60 >> 2] = 0;
HEAP32[$0 + 64 >> 2] = 0;
HEAP32[$0 + 52 >> 2] = 0;
HEAP32[$0 + 56 >> 2] = 0;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function ControlledByScalar_Vector___ControlledByScalar_28_29($0) {
$0 = $0 | 0;
$0 = Vector__Vector_28_29($0);
Vector__Vector_28_29($0 + 12 | 0);
Vector__Vector_28_29($0 + 24 | 0);
HEAP32[$0 + 36 >> 2] = 0;
return $0 | 0;
}
function utf8_isName2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = HEAPU8[$1 + 1 | 0];
$1 = HEAPU8[$1 | 0];
return 1 << $0 & HEAP32[(($0 >>> 5 & 1 | (HEAPU8[($1 >>> 2 & 7) + 51504 | 0] << 3 | $1 << 1 & 6)) << 2) + 49968 >> 2];
}
function Transform__transformVector_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
Quaternion__rotateVector_28Vector_20const__2c_20Vector__29_20const($0 + 12 | 0, $1, $2);
Vector__setAdd_28Vector_20const__29($2, $0);
}
function MakeSiteID_28Location_2c_20SideIndex_2c_20ExtremitySide_2c_20short_29($0, $1, $2, $3, $4) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0, $1, HEAP32[($2 << 2) + 48916 >> 2], $3, $4);
}
function DynamicArrayP_char_20const___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_char_20const___resize_28int_29($0, DynamicArrayP_char_20const___preferredSize_28int_29($0, $1));
}
}
function NonmanualMovement__getCurrentFacePosture_28float_2c_20float_2c_20float__2c_20bool_29($0, $1, $2, $3, $4) {
$0 = HEAP32[$0 + 20 >> 2];
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $3, $4);
}
}
function std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0) {
$0 = $0 | 0;
return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 77460) | 0;
}
function DynamicArrayP_BasicMovement___ensureSize_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
DynamicArrayP_BasicMovement___resize_28int_29($0, DynamicArrayP_BasicMovement___preferredSize_28int_29($0, $1));
}
}
function std____2__allocator_traits_std____2__allocator_SSPRSet___20___allocate_28std____2__allocator_SSPRSet____2c_20unsigned_20long_29($0, $1) {
return std____2__allocator_SSPRSet____allocate_28unsigned_20long_29($0, $1);
}
function std____2__allocator_traits_std____2__allocator_SSMorph___20___allocate_28std____2__allocator_SSMorph____2c_20unsigned_20long_29($0, $1) {
return std____2__allocator_SSMorph____allocate_28unsigned_20long_29($0, $1);
}
function std____2__allocator_char__20std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_std____2__allocator_char__2c_20void_2c_20void__28std____2__allocator_char__20const__29($0) {}
function __ofl_add($0) {
var $1 = 0, $2 = 0;
$1 = __ofl_lock();
HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
$2 = HEAP32[$1 >> 2];
if ($2) {
HEAP32[$2 + 52 >> 2] = $0;
}
HEAP32[$1 >> 2] = $0;
__ofl_unlock();
return $0;
}
function DynamicArray1_AbstractTimedMorph____appendElement_28AbstractTimedMorph__20const__29($0, $1) {
DynamicArray1_AbstractTimedMorph____setElement_28int_2c_20AbstractTimedMorph__20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function ConstellationInfo__ConstellationInfo_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 0;
Direction3__Direction3_28_29($0 + 4 | 0);
SiteID__SiteID_28_29($0 + 16 | 0);
SiteID__SiteID_28_29($0 + 20 | 0);
return $0 | 0;
}
function BasicMovement__setMotionAttributes_28MotionAttributes_20const__29($0, $1) {
BasicMovement__setBaseMotionAttributes_28MotionAttributes_20const__29($0, $1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
}
function SHMScalarController__reset_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, Math_fround(0));
HEAPF32[$0 + 68 >> 2] = $1;
HEAPF32[$0 + 64 >> 2] = $1;
}
function HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int_____HashChainItem_28char_20const__2c_20HashAny_char_20const__2c_20int___29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function NewCopyJointRotation_28JointRotation_20const__29($0) {
var $1 = 0;
$1 = Joint__NewJointRotation_28_29(HEAP32[$0 + 4 >> 2]);
CopyJointRotation_28JointRotation__2c_20JointRotation_20const__29($1, $0);
return $1;
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function NoMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
BasicMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1);
__memcpy($0 + 284 | 0, $1, 224);
}
function DynamicArray_int_2c_20_1___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray_int_2c_20_1___resize_28int_29($0, DynamicArray_int_2c_20_1___preferredSize_28int_29($0, $1));
}
}
function DynamicArrayP_OptionSpec___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_OptionSpec___resize_28int_29($0, DynamicArrayP_OptionSpec___preferredSize_28int_29($0, $1));
}
}
function DynamicArray1_Quaternion___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_Quaternion___resize_28int_29($0, DynamicArray1_Quaternion___preferredSize_28int_29($0, $1));
}
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______second_28_29($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSPRSet____2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______second_28_29($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSMorph____2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function ZigzagInfo__ZigzagInfo_28_29($0) {
HEAP32[$0 >> 2] = 0;
Vector__Vector_28_29($0 + 4 | 0);
HEAP32[$0 + 24 >> 2] = 1077936128;
HEAP32[$0 + 16 >> 2] = 1065353216;
HEAP32[$0 + 20 >> 2] = 1065353216;
return $0;
}
function InvertibleStringArray__InvertibleStringArray_28short_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 12 >> 2] = $1;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0 | 0;
}
function GeneralController_Quaternion_2c_20Quaternion___GeneralController_28_29($0) {
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 59592;
return $0;
}
function DynamicArray_short_2c_20_28short_29_1___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function AvatarJointRotationIndex___AvatarJointRotationIndex_28_29($0) {
DynamicArray1_JointRotation_____DynamicArray1_28_29($0 + 204 | 0);
DynamicArray1_JointRotation_____DynamicArray1_28_29($0 + 188 | 0);
return $0;
}
function cosRule_28float_2c_20float_2c_20float_29($0, $1, $2) {
return Math_fround(Math_fround(Math_fround(Math_fround($0 * $0) + Math_fround($1 * $1)) - Math_fround($2 * $2)) / Math_fround(Math_fround($0 + $0) * $1));
}
function Transform__Transform_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $2) {
$0 = Vector__Vector_28Vector_20const__29($0, $1);
Quaternion__Quaternion_28Quaternion_20const__29($0 + 12 | 0, $2);
return $0;
}
function SiGML__convertDirectionVec_28Vector__2c_20Direction3_29($0, $1) {
Vector__setFrom_28float_2c_20float_2c_20float_29($0, HEAPF32[$1 >> 2], HEAPF32[$1 + 4 >> 2], HEAPF32[$1 + 8 >> 2]);
Vector__setUnit_28_29($0);
}
function ControlledByScalar_Vector____ControlledByScalar_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 36 >> 2];
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
HEAP32[$0 + 36 >> 2] = 0;
}
return $0;
}
function BasicMovement__printTopLevelSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1);
}
function keyeq($0, $1) {
var $2 = 0;
while (1) {
$2 = HEAPU8[$0 | 0];
if (($2 | 0) != HEAPU8[$1 | 0]) {
return 0;
}
if ($2) {
$1 = $1 + 1 | 0;
$0 = $0 + 1 | 0;
continue;
}
break;
}
return 1;
}
function __cxx_global_var_init_9_4() {
var $0 = 0;
$0 = 72896;
while (1) {
$0 = FingerBending__FingerBending_28_29($0) + 16 | 0;
if (($0 | 0) != 73920) {
continue;
}
break;
}
__cxa_atexit(703, 0, 1024);
}
function SHMScalarController__set_perception_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
if (HEAP32[$0 + 60 >> 2] != 1) {
HEAPF32[$0 + 80 >> 2] = $1;
SHMScalarController__resetOvershoot_28_29($0);
}
}
function OneHAbstractPosture__isTotallyDefined_28_29_20const($0) {
var $1 = 0;
if (SiteIDPair__defined_28_29_20const($0 + 4 | 0)) {
$1 = OneHAbstractPosture__isAlmostTotallyDefined_28_29_20const($0);
}
return $1;
}
function HingeJointRotation__toQuaternion_28Quaternion__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setFromVecAngle_28Vector_20const__2c_20float_2c_20bool_29($1, $0 + 8 | 0, HEAPF32[$0 + 20 >> 2], 1);
}
function HingeJointRotation__setFrom_28HingeJointRotation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1 + 8 | 0);
HEAPF32[$0 + 20 >> 2] = HEAPF32[$1 + 20 >> 2];
}
function HashAny_int_2c_20int___addItem_28int_2c_20int_29($0, $1, $2) {
HashAny_int_2c_20int___insertString_28int_2c_20int_2c_20int_29($0, KeyOps_int___hashFunction_28int_2c_20int_29($1, HEAP32[$0 + 4 >> 2]), $1, $2);
}
function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0) {
HEAP32[$0 >> 2] = -1;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___end_28_29($0) {
return std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____make_iter_28SSMorph___29($0, HEAP32[$0 + 4 >> 2]);
}
function isDirectorySeparator_28char_29($0) {
var $1 = 0;
$0 = $0 - 47 | 0;
$1 = $0 & 31;
return ($0 & 255) >>> 0 < 46 & (($0 & 63) >>> 0 >= 32 ? 8192 >>> $1 | 0 : ((1 << $1) - 1 & 8192) << 32 - $1 | 2049 >>> $1);
}
function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
}
function __cxx_global_var_init_13_1() {
var $0 = 0;
$0 = 74944;
while (1) {
$0 = ThumbBending__ThumbBending_28_29($0) + 20 | 0;
if (($0 | 0) != 75104) {
continue;
}
break;
}
__cxa_atexit(705, 0, 1024);
}
function __cxx_global_var_init_11_2() {
var $0 = 0;
$0 = 73984;
while (1) {
$0 = ThumbBending__ThumbBending_28_29($0) + 20 | 0;
if (($0 | 0) != 74944) {
continue;
}
break;
}
__cxa_atexit(704, 0, 1024);
}
function TrajectoryParams__TrajectoryParams_28_29($0) {
$0 = ControllerParams__ControllerParams_28_29($0);
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 981668463;
HEAP32[$0 + 20 >> 2] = 1065185444;
return $0;
}
function DynamicArray_char_2c_20_28char_290___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArray0_float___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = $0 + 16 | 0;
return HEAPF32[(($1 | 0) >= 0 ? HEAP32[$0 + 12 >> 2] > ($1 | 0) ? HEAP32[$0 >> 2] + ($1 << 2) | 0 : $2 : $2) >> 2];
}
function AddJointRotation_28Quaternion_20const__2c_20JointRotation__2c_20bool_2c_20HanimAvatar_20const__29($0, $1) {
UNIMPLEMENTED_28char_20const__29(3399);
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $0);
}
function AbsoluteHand_28SET_OF_HANDS_2c_20bool_29($0, $1) {
label$1: {
switch ($0 - 1 | 0) {
case 0:
return $1 ? 3 : 4;
case 1:
$0 = $1 ? 4 : 3;
break;
default:
break label$1;
}
}
return $0;
}
function __wasi_syscall_ret($0) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
if (!$0) {
return 0;
}
wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
return -1;
}
function __cxx_global_var_init_3_8() {
var $0 = Math_fround(0);
$0 = HEAPF32[17685];
Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29(70724, Math_fround(-$0), Math_fround(0), Math_fround(0), $0);
}
function HanimAvatar__initialiseStaticArmData_28_29($0) {
StaticArmData__initialise_28bool_2c_20HanimAvatar_20const__29($0, 0, $0);
StaticArmData__initialise_28bool_2c_20HanimAvatar_20const__29($0 + 28 | 0, 1, $0);
}
function Gesture__InitPosture_28TwoHConcretePosture__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Gesture__InitPosture1_28TwoHConcretePosture__29($0, $1);
Gesture__ShiftToPalm_28TwoHConcretePosture__29_20const($0, $1);
}
function DynamicArray1_AbstractTimedMorph____clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArray1_AbstractTimedMorph____DynamicArray1_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_AbstractTimedMorph____initialise_28int_2c_20AbstractTimedMorph___29($0, $1, 0);
return $0 | 0;
}
function CircleInfo__error_28float_2c_20float_29_20const($0, $1, $2) {
return Math_fround(Math_fround(sqr_28float_29(Math_fround($1 - HEAPF32[$0 >> 2])) + sqr_28float_29($2)) - sqr_28float_29(HEAPF32[$0 + 4 >> 2]));
}
function stringHash_28char_20const__29($0) {
var $1 = 0, $2 = 0;
while (1) {
$1 = HEAPU8[$0 | 0];
if ($1) {
$0 = $0 + 1 | 0;
$2 = __wasm_rotl_i32($2, 8) + $1 | 0;
continue;
}
break;
}
return $2;
}
function std__runtime_error___runtime_error_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 58900;
std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
return std__exception___exception_28_29($0) | 0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___begin_28_29($0) {
return std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____make_iter_28SSMorph___29($0, HEAP32[$0 >> 2]);
}
function Quaternion__setFlip_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
if (($1 | 0) != 4) {
$2 = ($1 << 2) + $0 | 0;
HEAPF32[$2 >> 2] = -HEAPF32[$2 >> 2];
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function InitVersionInfo() {
SetVersionInfo_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29(HEAP32[15817], HEAP32[15818], HEAP32[15821], HEAP32[15819], HEAP32[15820]);
}
function GestureParser__readXMLString_28char_20const__2c_20ParserData__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return GestureParser__readXMLString_28char_20const__2c_20ParserData__2c_20Gesture___29($0, $1, 0) | 0;
}
function FingerBending__SetFingerBending_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
HEAPF32[$0 + 12 >> 2] = $4;
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
}
function DynamicArrayP_AbstractTimedMorph___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____end_cap_28_29($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___first_28_29($0 + 8 | 0);
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____end_cap_28_29($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___first_28_29($0 + 8 | 0);
}
function __small_fprintf($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = __small_vfprintf($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function Vector__setInverse_28_29($0) {
var $1 = 0, $2 = 0;
while (1) {
if (($1 | 0) != 3) {
$2 = ($1 << 2) + $0 | 0;
HEAPF32[$2 >> 2] = -HEAPF32[$2 >> 2];
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function Quaternion__toVector_28Vector__29_20const($0, $1) {
Vector__setFrom_28float_2c_20float_2c_20float_29($1, Quaternion__x_28_29_20const($0), Quaternion__y_28_29_20const($0), Quaternion__z_28_29_20const($0));
}
function DynamicArray_char_2c_20_28char_290___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP8[HEAP32[$0 >> 2] + $1 | 0];
return $2 << 24 >> 24;
}
function void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0, $1) {
HEAP32[$0 >> 2] = $1;
}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____alloc_28_29($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___second_28_29($0 + 8 | 0);
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____alloc_28_29($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___second_28_29($0 + 8 | 0);
}
function std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
return std____2__allocator_SSPRSet____allocator_28_29($0);
}
function std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
return std____2__allocator_SSMorph____allocator_28_29($0);
}
function __cxx_global_var_init_1_42() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75576, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_41() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75528, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_40() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75508, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_39() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75500, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_38() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75484, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_37() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 75476, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_36() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70708, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_35() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70688, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_34() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70504, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_33() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70484, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_32() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70456, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_31() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70428, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_30() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70312, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_29() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 70048, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_28() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68384, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_27() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68364, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_26() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68312, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_25() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68300, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_24() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68292, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_23() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68264, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_22() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68244, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_21() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68224, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_20() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68188, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_19() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68152, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_18() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 68016, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_17() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67988, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_16() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67980, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_15() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67968, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_14() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67960, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_13() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67920, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_12() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67912, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_11() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67764, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_10() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67756, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function ZeroPostMortem() {
HEAP32[18885] = 0;
HEAP32[18886] = 0;
HEAP32[18891] = 0;
HEAP32[18892] = 0;
HEAP32[18889] = 0;
HEAP32[18890] = 0;
HEAP32[18887] = 0;
HEAP32[18888] = 0;
ResetSiGMLFlags_28_29();
}
function NoMovement__NoMovement_28SET_OF_HANDS_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = BasicMovement__BasicMovement_28MovementType_2c_20SET_OF_HANDS_29($0, 10, $1);
HEAP32[$0 >> 2] = 61980;
return $0 | 0;
}
function DynamicArray0_float___DynamicArray0_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 16 >> 2] = $1;
DynamicArray0_float___initialise_28int_2c_20float__29($0, 0, 0);
return $0 | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0) {
return std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20___capacity_28_29_20const($0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0) {
return std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20___capacity_28_29_20const($0);
}
function std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
return std____2__allocator_char___allocate_28unsigned_20long_29($0, $1);
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________end_cap_28_29($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______first_28_29($0 + 12 | 0);
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________end_cap_28_29($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______first_28_29($0 + 12 | 0);
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___second_28_29($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____get_28_29($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___second_28_29($0) {
return std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____get_28_29($0);
}
function __cxx_global_var_init_1_9() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67744, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_8() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67708, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_7() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67700, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_6() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67692, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_5() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67676, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_4() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67668, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_3() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67660, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_2() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67540, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function __cxx_global_var_init_1_1() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67532, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function SiGML__convertExtremitySide_28char_20const__2c_20bool_29($0, $1) {
return SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29(HEAP32[($1 ? 72860 : 72864) >> 2], $0);
}
function HanimAvatar__ForceOutsideTorsoOffset_28Vector_20const__2c_20Vector__29_20const($0, $1, $2) {
$0 = HEAP32[$0 + 80 >> 2];
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2) | 0;
}
}
function GeneralController_Vector_2c_20Vector___GeneralController_28_29($0) {
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 59540;
return $0;
}
function DynamicArrayP_XMLCell___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_XMLCell___resize_28int_29($0, DynamicArrayP_XMLCell___preferredSize_28int_29($0, $1));
}
}
function DynamicArrayP_Segment___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_Segment___resize_28int_29($0, DynamicArrayP_Segment___preferredSize_28int_29($0, $1));
}
}
function DynamicArrayP_Gesture___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_Gesture___resize_28int_29($0, DynamicArrayP_Gesture___preferredSize_28int_29($0, $1));
}
}
function DynamicArrayP_BasicMovement___appendElement_28BasicMovement__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArray1_AtomicNonmanual___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function std__logic_error___logic_error_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 58880;
std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
return std__exception___exception_28_29($0) | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {}
function std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____throw_length_error_28_29_20const($0) {
std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
abort();
}
function std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____throw_length_error_28_29_20const($0) {
std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
abort();
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________alloc_28_29($0) {
return std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______second_28_29($0 + 12 | 0);
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________alloc_28_29($0) {
return std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______second_28_29($0 + 12 | 0);
}
function SSPRSet__SetRotation_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
HEAPF32[$0 + 12 >> 2] = $1;
HEAPF32[$0 + 24 >> 2] = $4;
HEAPF32[$0 + 20 >> 2] = $3;
HEAPF32[$0 + 16 >> 2] = $2;
}
function GestureParser__readXMLFile_28char_20const__2c_20ParserData__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return GestureParser__readXMLFile_28char_20const__2c_20ParserData__2c_20Gesture___29($0, $1, 0) | 0;
}
function DynamicArray1_JointRotation____clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function __cxx_global_var_init_1() {
var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
wasm2js_i32$0 = 67524, wasm2js_f32$0 = sqrt_28float_29(Math_fround(2)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
}
function WristMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 528 >> 2] = HEAP32[$1 + 204 >> 2];
HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 92 >> 2];
}
function HashAny_int_2c_20int___HashAny_28int_2c_20int_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 20 >> 2] = $1;
HashAny_int_2c_20int___initialise_28int_29($0, $2);
return $0 | 0;
}
function GeneralController_float_2c_20float___GeneralController_28_29($0) {
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 59488;
return $0;
}
function DynamicArrayP_BasicMovement___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArray1_AbstractTimedMorph____getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArray_short_2c_20_28short_29_1___DynamicArray_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray_short_2c_20_28short_29_1___initialise_28int_2c_20short__29($0, $1, 0);
return $0 | 0;
}
function DynamicArrayP_char_20const___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_AbstractTimedMorph___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArray1_Vector___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray1_Vector___resize_28int_29($0, DynamicArray1_Vector___preferredSize_28int_29($0, $1));
}
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___first_28_29_20const($0) {
return std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___first_28_29_20const($0) {
return std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29_20const($0);
}
function snprintf($0, $1, $2, $3) {
var $4 = 0;
$4 = __stack_pointer - 16 | 0;
__stack_pointer = $4;
HEAP32[$4 + 12 >> 2] = $3;
$3 = vsnprintf($0, $1, $2, $3);
__stack_pointer = $4 + 16 | 0;
return $3;
}
function arg_n($0, $1) {
var $2 = 0;
$2 = __stack_pointer - 16 | 0;
HEAP32[$2 + 12 >> 2] = $0;
$0 = ($1 >>> 0 > 1 ? ($1 << 2) - 4 | 0 : 0) + $0 | 0;
HEAP32[$2 + 8 >> 2] = $0 + 4;
return HEAP32[$0 >> 2];
}
function DynamicArrayP_char_20const___appendElement_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_char_20const___setElement_28int_2c_20char_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function Direction3__Direction3_28Direction3_20const__29($0, $1) {
HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
HEAPF32[$0 + 8 >> 2] = HEAPF32[$1 + 8 >> 2];
return $0;
}
function __cosdf($0) {
var $1 = 0;
$0 = $0 * $0;
$1 = $0 * $0;
return Math_fround($0 * $1 * ($0 * 2439044879627741e-20 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1)));
}
function Vector__Vector_28Vector_20const__29_1($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if ($1) {
Vector__setFrom_28Vector_20const__29($0, $1);
return $0 | 0;
}
Vector__setZero_28_29($0);
return $0 | 0;
}
function DynamicArray_int_2c_20_1___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_OptionSpec___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArray1_Quaternion___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function BasicMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Vector__setAdd_28Vector_20const__29((($2 ? 224 : 336) + $0 | 0) - -64 | 0, $1);
}
function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
return HEAPU32[$1 >> 2] < HEAPU32[$2 >> 2];
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______first_28_29_20const($0) {
return std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______first_28_29_20const($0) {
return std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29_20const($0);
}
function handle_handconstellation_28Gesture__2c_20XMLCell__29($0, $1) {
SiGMLConstellation__AnalyseHandConstellation_28XMLCell__2c_20bool_29(HEAP32[$0 + 36 >> 2], $1, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0);
}
function DynamicArrayP_Joint___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_Joint___resize_28int_29($0, DynamicArrayP_Joint___preferredSize_28int_29($0, $1));
}
}
function DynamicArray1_DynamicArray1_AtomicNonmanual_____preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArray0_float___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArray0_float___resize_28int_29($0, DynamicArray0_float___preferredSize_28int_29($0, $1));
}
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
return std____2__allocator_char___allocator_28_29($0);
}
function FingerBaseJointRotation__operator__28FingerBaseJointRotation_20const__29($0, $1) {
JointRotation__operator__28JointRotation_20const__29($0, $1);
__memcpy($0 + 8 | 0, $1 + 8 | 0, 64);
return $0;
}
function DynamicArray1_JointRotation____getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function CircularMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2);
}
function BasicMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Vector__setFrom_28Vector_20const__29((($2 ? 224 : 336) + $0 | 0) - -64 | 0, $1);
}
function Trajectory__allocateData_28_29($0) {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
wasm2js_i32$0 = $0, wasm2js_i32$1 = dlmalloc(HEAP32[15355] << 2), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
}
function DynamicArray_short_2c_20_28short_29_1___appendElement_28short_20const__29($0, $1) {
DynamicArray_short_2c_20_28short_29_1___setElement_28int_2c_20short_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArrayP_XMLCell___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_Segment___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_Gesture___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_BasicMovement___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29($0, $1) {
DynamicArrayP_AbstractTimedMorph___setElement_28int_2c_20AbstractTimedMorph__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArray1_AtomicNonmanual___DynamicArray1_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_AtomicNonmanual___initialise_28int_2c_20AtomicNonmanual__29($0, $1, 0);
return $0 | 0;
}
function std__length_error__length_error_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
$0 = std__logic_error__logic_error_28char_20const__29($0, $1);
HEAP32[$0 >> 2] = 58948;
return $0 | 0;
}
function std____2__make_error_code_28std____2__io_errc_29($0, $1) {
std____2__iostream_category_28_29();
std____2__error_code__error_code_28int_2c_20std____2__error_category_20const__29($0, $1, 66080);
}
function std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet_______ConstructTransaction____ConstructTransaction_28_29($0) {
HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
return $0;
}
function std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph_______ConstructTransaction____ConstructTransaction_28_29($0) {
HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
return $0;
}
function ThumbBaseJointRotation__operator__28ThumbBaseJointRotation_20const__29($0, $1) {
JointRotation__operator__28JointRotation_20const__29($0, $1);
__memcpy($0 + 8 | 0, $1 + 8 | 0, 60);
return $0;
}
function SiGML__convertboolfalse_28char_20const__29($0) {
$0 = $0 | 0;
return (SiGML__convertAttribute_28HashAny_char_20const__2c_20int__20const__2c_20char_20const__29(HEAP32[18219], $0) | 0) == 1 | 0;
}
function Mirroring__Mirroring_28short_2c_20short_2c_20short_2c_20short_29($0, $1, $2, $3, $4) {
HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240 | ($4 << 3 & 8 | ($3 << 2 & 4 | ($2 << 1 & 2 | $1 & 1)));
return $0;
}
function InvertibleDynamicStringArray__valueFromIndex_28int_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return DynamicArrayP_char_20const___getElement_28int_29_20const(HEAP32[$0 + 4 >> 2], $1) | 0;
}
function HanimAvatar__setSiteNormal_28Site__2c_20Vector_20const__29($0, $1, $2) {
if ($1) {
HanimAvatar__setSiteNormal_28Site__2c_20Vector_20const__2c_20float_29($1, $1, $2, HEAPF32[$1 + 20 >> 2]);
}
}
function DynamicArrayP_char___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_char___resize_28int_29($0, DynamicArrayP_char___preferredSize_28int_29($0, $1));
}
}
function DynamicArrayP_char_20const___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArrayP_Site___requireElement_28int_29($0, $1) {
if (HEAP32[$0 + 8 >> 2] <= ($1 | 0)) {
DynamicArrayP_Site___resize_28int_29($0, DynamicArrayP_Site___preferredSize_28int_29($0, $1));
}
}
function DynamicArray1_Vector___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function Direction3__handedVector_28bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Direction3__set_handedVector_28bool_29(Direction3__Direction3_28Direction3_20const__29_1($0, $1), $2);
}
function Direction2__handedVector_28bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Direction2__set_handedVector_28bool_29(Direction2__Direction2_28Direction2_20const__29_1($0, $1), $2);
}
function std____2__ios_base____set_badbit_and_consider_rethrow_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] | 1;
if (HEAP8[$0 + 20 | 0] & 1) {
__cxa_rethrow();
abort();
}
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
return $0;
}
function memset($0, $1, $2) {
var $3 = 0;
if ($2) {
$3 = $0;
while (1) {
HEAP8[$3 | 0] = $1;
$3 = $3 + 1 | 0;
$2 = $2 - 1 | 0;
if ($2) {
continue;
}
break;
}
}
return $0;
}
function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29_1($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2] - 1 | 0;
HEAP32[$0 >> 2] = $1;
return $1;
}
function __DOUBLE_BITS($0) {
var $1 = 0, $2 = 0;
wasm2js_scratch_store_f64(+$0);
$1 = wasm2js_scratch_load_i32(1) | 0;
$2 = wasm2js_scratch_load_i32(0) | 0;
i64toi32_i32$HIGH_BITS = $1;
return $2;
}
function XMLCell__attrib_REAL_28float__2c_20char_20const__29($0, $1, $2) {
return bool_20get_attrib_float_2c_20double__28XMLCell__2c_20float__2c_20char_20const__2c_20char_20const__29($0, $1, 7531, $2);
}
function SiteIDPair__SiteIDPair_28SiteID_2c_20SiteID_29($0, $1, $2) {
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
$2 = HEAP32[$2 >> 2];
HEAP32[$0 + 8 >> 2] = 1056964608;
HEAP32[$0 + 4 >> 2] = $2;
return $0;
}
function ParTimedMorph__appendElement_28AbstractTimedMorph__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29(HEAP32[$0 + 24 >> 2], $1);
}
function FingerBending__FingerBending_28_29($0) {
HEAP32[$0 + 8 >> 2] = -1027080192;
HEAP32[$0 + 12 >> 2] = -1027080192;
HEAP32[$0 >> 2] = -1027080192;
HEAP32[$0 + 4 >> 2] = -1027080192;
return $0;
}
function DynamicArray_int_2c_20_1___appendElement_28int_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray_int_2c_20_1___setElement_28int_2c_20int_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArrayP_Joint___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArray0_float___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function Direction3__isUndef_28_29_20const($0) {
var $1 = 0;
$1 = HEAPF32[$0 >> 2] != Math_fround(0) | HEAPF32[$0 + 4 >> 2] != Math_fround(0) ? $1 : HEAPF32[$0 + 8 >> 2] == Math_fround(0);
return $1;
}
function std__get_new_handler_28_29() {
return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(77540);
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20____ConstructTransaction____ConstructTransaction_28_29($0) {
HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
return $0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20____ConstructTransaction____ConstructTransaction_28_29($0) {
HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29($0, $1) {
return $0;
}
function animgenAllocate($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return AnimgenInstance__Allocate_28int_2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3) | 0;
}
function VRMLRotation__VRMLRotation_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
VRMLRotation__setFrom_28float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4);
return $0;
}
function ThumbBaseJointRotation__setPreInvCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8752);
eprintf_28char_20const__2c_20____29(31914, 0);
}
function DynamicArrayP_char___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_Site___clear_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function DynamicArrayP_OptionSpec___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function Direction2__setMirror_28Mirroring_29($0, $1) {
$1 = HEAPU8[$1 | 0];
if ($1 & 2) {
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
if ($1 & 4) {
HEAPF32[$0 + 4 >> 2] = -HEAPF32[$0 + 4 >> 2];
}
}
function std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
if ($1) {
memset($0, std____2__char_traits_char___to_int_type_28char_29($2), $1);
}
return $0;
}
function siprintf($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = vsiprintf($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function fiprintf($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = vfiprintf($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function computeError1_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2) {
getRefDirection_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2);
}
function SiteID__isArmHandSite_28_29_20const($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = 1;
if (!isArmLocation_28short_29(HEAPU8[$0 | 0])) {
$1 = SiteID__isHandSite_28_29_20const($0);
}
return $1 | 0;
}
function SiGMLHandshape__IsMiddleCrossedOverIndex_28_29($0) {
return IsContactPair_28DigitIndex_2c_20DigitIndex_2c_20DigitIndex_2c_20DigitIndex_29(HEAP32[$0 + 180 >> 2], HEAP32[$0 + 184 >> 2], 2, 1);
}
function OneHGesture__operator__28OneHGesture_20const__29($0, $1) {
OneHAbstractPosture__operator__28OneHAbstractPosture_20const__29($0, $1);
HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
return $0;
}
function FingerBaseJointRotation__setFrom_28FingerBaseJointRotation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
FingerBaseJointRotation__operator__28FingerBaseJointRotation_20const__29($0, $1);
}
function AvatarJointNumIndex___AvatarJointNumIndex_28_29($0) {
DynamicArray_int_2c_20_1____DynamicArray_28_29($0 + 116 | 0);
DynamicArray_int_2c_20_1____DynamicArray_28_29($0 + 100 | 0);
return $0;
}
function std__get_terminate_28_29() {
return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(66084);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2030ul__20___size_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___vector_28_29($0) {
return std____2____vector_base_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____vector_base_28_29($0);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___vector_28_29($0) {
return std____2____vector_base_SSMorph__2c_20std____2__allocator_SSMorph___20_____vector_base_28_29($0);
}
function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
return std____2__locale____imp__use_facet_28long_29_20const(HEAP32[$0 >> 2], std____2__locale__id____get_28_29($1));
}
function handle_split_location_28Gesture__2c_20XMLCell__29($0, $1) {
SiGMLConstellation__AnalyseSplitLocation_28XMLCell__2c_20bool_29(HEAP32[$0 + 36 >> 2], $1, (HEAPU8[$0 + 13 | 0] & 64) >>> 6 | 0);
}
function attrDigit_28XMLCell__2c_20short_29($0, $1) {
$0 = XMLCell__attrib_int32_28char_20const__2c_20int_29($0, 2776, $1 + 1 | 0);
return ($0 - 6 >>> 0 < 4294967291 ? $1 : $0 - 1 | 0) << 16 >> 16;
}
function Direction3__handedAxis_28bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
Direction3__set_handedAxis_28bool_29(Direction3__Direction3_28Direction3_20const__29_1($0, $1), $2);
}
function CircularMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
BasicMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2);
}
function ThumbBaseJointRotation__setComposeInv_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(1856);
eprintf_28char_20const__2c_20____29(31810, 0);
}
function RepSpec__RepSpec_28short_2c_20bool_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
HEAP8[$0 + 4 | 0] = $4;
HEAP8[$0 + 3 | 0] = $3;
HEAP8[$0 + 2 | 0] = $2;
HEAP16[$0 >> 1] = $1;
return $0;
}
function QuatJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
}
function HandleXMLGesture_28void__2c_20XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if ($1) {
checkSiGML_28XMLCell__29($1);
DefaultSiGMLTopLevelHandler_28void__2c_20XMLCell__29($0, $1);
}
}
function DynamicArray_short_2c_20_28short_29_1___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_XMLCell___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArrayP_Segment___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArrayP_Gesture___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
std____2__ios_base__setstate_28unsigned_20int_29($0, $1);
}
function Vector__isZero_28_29_20const($0) {
var $1 = 0;
$1 = HEAPF32[$0 >> 2] != Math_fround(0) | HEAPF32[$0 + 4 >> 2] != Math_fround(0) ? $1 : HEAPF32[$0 + 8 >> 2] == Math_fround(0);
return $1;
}
function HashChain_int_2c_20int____HashChain_28_29($0) {
HashChain_int_2c_20int___delItem_28HashChain_int_2c_20int____29($0 + 8 | 0);
return HashChainItem_int_2c_20int____HashChainItem_28_29($0);
}
function HashChainItem_char_20const__2c_20AbstractTimedMorph____HashChainItem_28char_20const__2c_20AbstractTimedMorph__29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function Direction3__operator__28Direction3_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (($0 | 0) != ($1 | 0)) {
Direction3__setFrom_28Direction3_20const__29($0, $1);
}
return $0 | 0;
}
function Direction2__operator__28Direction2_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (($0 | 0) != ($1 | 0)) {
Direction2__setFrom_28Direction2_20const__29($0, $1);
}
return $0 | 0;
}
function DeleteMovementTables_28_29() {
var $0 = 0;
$0 = HEAP32[17651];
if ($0) {
operator_20delete_28void__29(InvertibleStringArray___InvertibleStringArray_28_29($0));
HEAP32[17651] = 0;
}
}
function ArmHandConstellation___ArmHandConstellation_28_29($0) {
SiteIDPair___SiteIDPair_28_29($0 + 24 | 0);
SiteIDPair___SiteIDPair_28_29($0 + 12 | 0);
return SiteIDPair___SiteIDPair_28_29($0);
}
function sscanf($0, $1, $2) {
var $3 = 0;
$3 = __stack_pointer - 16 | 0;
__stack_pointer = $3;
HEAP32[$3 + 12 >> 2] = $2;
$2 = vsscanf($0, $1, $2);
__stack_pointer = $3 + 16 | 0;
return $2;
}
function __cxx_global_array_dtor($0) {
$0 = $0 | 0;
$0 = 72832;
while (1) {
$0 = CannedHandshape___CannedHandshape_28_29($0 - 160 | 0);
if (($0 | 0) != 70752) {
continue;
}
break;
}
}
function XMLCell__attrib_int32_28int__2c_20char_20const__29($0, $1, $2) {
return bool_20get_attrib_int_2c_20long__28XMLCell__2c_20int__2c_20char_20const__2c_20char_20const__29($0, $1, 10125, $2);
}
function Trajectory___Trajectory_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 28 >> 2];
if ($1) {
dlfree($1);
HEAP32[$0 + 28 >> 2] = 0;
}
return TrajectoryParams___TrajectoryParams_28_29($0);
}
function ThumbBaseJointRotation__setFrom_28ThumbBaseJointRotation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
ThumbBaseJointRotation__operator__28ThumbBaseJointRotation_20const__29($0, $1);
}
function ThumbBaseJointRotation__setFromQuat_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(3033);
eprintf_28char_20const__2c_20____29(31863, 0);
}
function TargettedMovement___TargettedMovement_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 62364;
TargettedMovement__ForgetGesture_28_29($0);
return BasicMovement___BasicMovement_28_29($0) | 0;
}
function InvertibleStringArray__InvertibleStringArray_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
return $0 | 0;
}
function DynamicArray_char_2c_20_28char_290___appendElement_28char_20const__29($0, $1) {
DynamicArray_char_2c_20_28char_290___setElement_28int_2c_20char_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArrayP_char_20const___DynamicArrayP_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_char_20const___initialise_28int_2c_20char_20const___29($0, $1, 0);
return $0 | 0;
}
function DynamicArrayP_Joint___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArray0_float___appendElement_28float_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray0_float___setElement_28int_2c_20float_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function _GLOBAL__sub_I_ArmAnimator_cpp() {
__cxx_global_var_init_29();
__cxx_global_var_init_21_1();
__cxx_global_var_init_20_1();
__cxx_global_var_init_1_20();
__cxx_global_var_init_2_6();
}
function ThumbBaseJointRotation__setCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8861);
eprintf_28char_20const__2c_20____29(31970, 0);
}
function SiteID__makeSide_28AbsoluteBodySide_29_20const($0, $1, $2) {
$1 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $1;
HEAP8[$0 + 2 | 0] = $1 >>> 16;
HEAP16[$0 >> 1] = $1 & 61695 | $2 << 8 & 3840;
}
function SiGMLHandshape__DefaultDigitLocation_28short_29_20const($0, $1) {
var $2 = 0;
$0 = HEAP32[$0 >> 2] - 1 | 0;
if ($0 >>> 0 <= 11) {
$2 = HEAP32[($0 << 2) + 49168 >> 2];
}
return $2;
}
function DynamicArray_char_2c_20_28char_290___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_char___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function DynamicArrayP_Site___getElement_28int_29_20const($0, $1) {
var $2 = 0;
$2 = ($1 | 0) < 0 | HEAP32[$0 + 12 >> 2] <= ($1 | 0) ? $2 : HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
return $2;
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0) {
return $0;
}
function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29() {
var $0 = 0;
$0 = HEAP32[19364] + 1 | 0;
HEAP32[19364] = $0;
return $0;
}
function initializeEncoding($0) {
var $1 = 0;
if (!XmlInitEncoding($0 + 148 | 0, $0 + 144 | 0, HEAP32[$0 + 228 >> 2])) {
$1 = handleUnknownEncoding($0, HEAP32[$0 + 228 >> 2]);
}
return $1;
}
function __cxx_global_var_init_9_2() {
Vector__Vector_28Vector_20const__29(68112, 68032);
Vector__Vector_28Vector_20const__29(68124, 68044);
Vector__Vector_28Vector_20const__29(68136, 68056);
}
function __cxx_global_array_dtor_10($0) {
$0 = $0 | 0;
$0 = 73920;
while (1) {
$0 = FingerBending___FingerBending_28_29($0 - 16 | 0);
if (($0 | 0) != 72896) {
continue;
}
break;
}
}
function PostureChangeFlags__PostureChangeFlags_28_29($0) {
var $1 = 0;
$1 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 63488;
HEAP8[$0 | 0] = $1;
HEAP8[$0 + 1 | 0] = $1 >>> 8;
return $0;
}
function OctantInterpolator__zeroComponent_28Vector_20const__29_20const($0, $1) {
return OctantInterpolator__getComponent_28Vector_20const__2c_20Vector_20const__29_20const($0, $1, $0 + 12 | 0);
}
function DynamicArray1_AbstractTimedMorph____preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArray1_AbstractTimedMorph____DynamicArray1_28_29($0) {
$0 = $0 | 0;
DynamicArray1_AbstractTimedMorph____initialise_28int_2c_20AbstractTimedMorph___29($0, 0, 0);
return $0 | 0;
}
function OctantInterpolator__oneComponent_28Vector_20const__29_20const($0, $1) {
return OctantInterpolator__getComponent_28Vector_20const__2c_20Vector_20const__29_20const($0, $1, $0 + 24 | 0);
}
function InvertibleDynamicStringArray__indexFromValue_28char_20const__29_20const($0, $1) {
return HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[$0 >> 2], $1);
}
function DynamicArrayP_XMLCell___topElement_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 12 >> 2];
if (($1 | 0) <= 0) {
return 0;
}
return HEAP32[(HEAP32[$0 >> 2] + ($1 << 2) | 0) - 4 >> 2];
}
function DynamicArrayP_AbstractTimedMorph___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function Direction3__setFrom_28Direction3_20const__29($0, $1) {
HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
HEAPF32[$0 + 8 >> 2] = HEAPF32[$1 + 8 >> 2];
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20___first_28_29($0) {
return std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20___first_28_29($0) {
return std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29($0);
}
function __cxx_global_var_init_3_4() {
Vector__Vector_28float_2c_20float_2c_20float_29(68328, Math_fround(.4000000059604645), Math_fround(.3199999928474426), Math_fround(.10000000149011612));
}
function __cxx_global_array_dtor_14($0) {
$0 = $0 | 0;
$0 = 75104;
while (1) {
$0 = ThumbBending___ThumbBending_28_29($0 - 20 | 0);
if (($0 | 0) != 74944) {
continue;
}
break;
}
}
function __cxx_global_array_dtor_12($0) {
$0 = $0 | 0;
$0 = 74944;
while (1) {
$0 = ThumbBending___ThumbBending_28_29($0 - 20 | 0);
if (($0 | 0) != 73984) {
continue;
}
break;
}
}
function XML_SetUserData($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = $1;
if (HEAP32[$0 + 4 >> 2] == ($2 | 0)) {
HEAP32[$0 + 4 >> 2] = $1;
}
}
function DynamicArrayP_AbstractTimedMorph___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_AbstractTimedMorph___initialise_28int_2c_20AbstractTimedMorph___29($0, 0, 0);
return $0 | 0;
}
function init_pthread_self() {
var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
HEAP32[18967] = 75704;
wasm2js_i32$0 = 75796, wasm2js_i32$1 = getpid(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function computeError2_28Quaternion__2c_20Quaternion_20const__2c_20Quaternion_20const__29($0, $1, $2) {
Quaternion__setSubtract_28Quaternion_20const__2c_20Quaternion_20const__29($0, $2, $1);
}
function Quaternion__setZeroVec_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
while (1) {
if (($1 | 0) != 4) {
HEAP32[($1 << 2) + $0 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function CharToMorphTime_28char_29($0) {
$0 = $0 | 0;
$0 = CharToMorphTimeType_28char_29($0);
return Math_fround(Math_fround(HEAPF32[17101] * HEAPF32[(($0 << 2) + 68404 | 0) + 132 >> 2]));
}
function AbstractTimedMorph__setStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, Math_fround($1 - HEAPF32[$0 + 4 >> 2]));
}
function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0) {
return $0 + 15 & -16;
}
function std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet______first_28_29($0) {
return std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29($0);
}
function std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph______first_28_29($0) {
return std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29($0);
}
function TargettedMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
Gesture__SetConstellationDefaults_28_29(HEAP32[$0 + 528 >> 2]);
Gesture__InstallAHConst_28_29(HEAP32[$0 + 528 >> 2]);
}
function Joint__rotateJointGlobal_28Quaternion_20const__29($0, $1) {
Quaternion__setPreCompose_28Quaternion_20const__29($0 + 80 | 0, $1);
Joint__computeLocalFromGlobalTransforms_28_29($0);
}
function END_UNIMPLEMENTED_28_29() {
var $0 = 0;
$0 = HEAP32[16887];
if ($0) {
operator_20delete_28void__29(HashAny_char_20const__2c_20int____HashAny_28_29($0));
HEAP32[16887] = 0;
}
}
function DynamicArray1_AtomicNonmanual___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function __cxx_global_var_init_2_5() {
YXZRotation__YXZRotation_28float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20int_29(68156, Math_fround(0), Math_fround(0), Math_fround(0), 1, 0, 2);
}
function DynamicArray1_JointRotation____preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DeleteVersionInfo_28_29() {
var $0 = 0;
$0 = HEAP32[16933];
if ($0) {
dlfree($0);
HEAP32[16933] = 0;
}
$0 = HEAP32[16934];
if ($0) {
dlfree($0);
HEAP32[16934] = 0;
}
}
function _GLOBAL__sub_I_Segment_cpp() {
__cxx_global_var_init_35();
__cxx_global_var_init_53();
__cxx_global_var_init_1_26();
__cxx_global_var_init_2_9();
__cxx_global_var_init_3_4();
}
function Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($0, $1, $2) {
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $1, $2, Math_fround(.5));
}
function DynamicArrayP_XMLCell___appendElement_28XMLCell__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_XMLCell___setElement_28int_2c_20XMLCell__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArrayP_BasicMovement___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function AtomicTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1);
}
function TwoHDirMoveSpec__TwoHDirMoveSpec_28_29($0) {
$0 = $0 | 0;
$0 = OneHDirMoveSpec__OneHDirMoveSpec_28_29($0);
OneHDirMoveSpec__OneHDirMoveSpec_28_29($0 + 72 | 0);
return $0 | 0;
}
function TwoHConcretePosture___TwoHConcretePosture_28_29($0) {
OneHConcretePosture___OneHConcretePosture_28_29($0 + 112 | 0);
return OneHConcretePosture___OneHConcretePosture_28_29($0);
}
function MakeSiteID_28Location_2c_20SideIndex_29($0, $1, $2) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0, $1, HEAP32[($2 << 2) + 48916 >> 2], 0, 0);
}
function HashChainItem_char_20const__20const_2c_20AvatarType___HashChainItem_28char_20const__2c_20AvatarType_29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function DynamicArray_short_2c_20_28short_29_1___DynamicArray_28_29($0) {
$0 = $0 | 0;
DynamicArray_short_2c_20_28short_29_1___initialise_28int_2c_20short__29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_char_20const___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
HEAP32[$0 >> 2] = 0;
return $0;
}
function std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
HEAP32[$0 >> 2] = 0;
return $0;
}
function hash($0) {
var $1 = 0, $2 = 0;
while (1) {
$1 = HEAPU8[$0 | 0];
if ($1) {
$0 = $0 + 1 | 0;
$2 = Math_imul($2, 1000003) ^ $1;
continue;
}
break;
}
return $2;
}
function Site__setLocalPosition_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 28 | 0, $1);
Site__computeGlobalPosition_28_29($0);
}
function InvertibleStringArray__indexFromValue_28char_20const__29_20const($0, $1) {
return HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const(HEAP32[$0 >> 2], $1);
}
function HashChainItem_SiteID_20const_2c_20Site____HashChainItem_28SiteID_2c_20Site__29($0, $1, $2) {
$1 = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function DynamicArray1_AtomicNonmanual___addrElement_28int_29($0, $1) {
DynamicArray1_AtomicNonmanual___requireElement_28int_29($0, $1);
return HEAP32[$0 >> 2] + Math_imul($1, 28) | 0;
}
function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
return HEAP32[$0 >> 2];
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___data_28_29_20const($0) {
return SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29(HEAP32[$0 >> 2]);
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___data_28_29_20const($0) {
return SSMorph___20std____2____to_address_SSMorph___28SSMorph___29(HEAP32[$0 >> 2]);
}
function OctantInterpolator__poleComponent_28Vector_20const__29_20const($0, $1) {
return OctantInterpolator__getComponent_28Vector_20const__2c_20Vector_20const__29_20const($0, $1, $0);
}
function NumDigits_28short_29($0) {
var $1 = 0;
while (1) {
if ($0 & 65535) {
$1 = ($0 & 1) + $1 | 0;
$0 = $0 << 16 >> 17;
continue;
}
break;
}
return $1 << 16 >> 16;
}
function HashChainItem_char_20const__2c_20char_20const____HashChainItem_28char_20const__2c_20char_20const__29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function DynamicArray_int_2c_20_1___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_OptionSpec___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArray1_Quaternion___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function Vector__setZero_28_29($0) {
$0 = $0 | 0;
var $1 = 0;
while (1) {
if (($1 | 0) != 3) {
HEAP32[($1 << 2) + $0 >> 2] = 0;
$1 = $1 + 1 | 0;
continue;
}
break;
}
}
function HashChainItem_char_20const__2c_20SiteID___HashChainItem_28char_20const__2c_20SiteID_29($0, $1, $2) {
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
return $0;
}
function AtomicNonmanual__setFrom_28NonmanualItems_2c_20short_2c_20AbstractTimedMorph__29($0, $1, $2, $3) {
HEAP32[$0 + 8 >> 2] = $3;
HEAP16[$0 + 4 >> 1] = $2;
HEAP32[$0 >> 2] = $1;
}
function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
$1 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $1;
std____2____shared_count____add_shared_28_29($1);
return $0;
}
function poolInit($0, $1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
}
function __cxx_global_var_init_6_3() {
HEAP32[17276] = 1046368878;
HEAP32[17274] = 1041571739;
HEAP32[17275] = 1041571739;
HEAP32[17272] = 1066031343;
HEAP32[17273] = 1054838168;
}
function Transform__setCompose_28Transform_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Transform__setCompose_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $1 + 12 | 0);
}
function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}
function __cxx_global_var_init_2_3() {
VRMLRotation__VRMLRotation_28float_2c_20float_2c_20float_2c_20float_29(67992, Math_fround(0), Math_fround(0), Math_fround(1), Math_fround(0));
}
function Quaternion__Quaternion_28Vector_20const__29($0, $1) {
Quaternion__setQuatFromVector_28Vector_20const__29($0, $1);
Quaternion__checkValidQuat_28_29_20const($0);
return $0;
}
function PostureChangeFlags__setInitFlags_28_29($0) {
var $1 = 0;
$1 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 63488 | 122;
HEAP8[$0 | 0] = $1;
HEAP8[$0 + 1 | 0] = $1 >>> 8;
}
function DynamicArrayP_XMLCell___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_Segment___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_Gesture___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArray1_AtomicNonmanual___DynamicArray1_28_29($0) {
$0 = $0 | 0;
DynamicArray1_AtomicNonmanual___initialise_28int_2c_20AtomicNonmanual__29($0, 0, 0);
return $0 | 0;
}
function DefaultSiteIDForExtfidir_28Direction3_29($0) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29($0, 21, 0, 0, 0, 3, 0);
}
function trimAnglePI_28float_29($0) {
var $1 = Math_fround(0);
$1 = HEAPF32[16902];
return Math_fround(remfloat_28float_2c_20float_29(Math_fround($1 + $0), HEAPF32[16901]) - $1);
}
function isSpace($0) {
var $1 = 0;
$1 = $0 - 9 | 0;
label$1: {
if ($1 >>> 0 <= 23) {
$0 = 1;
if (1 << $1 & 8388627) {
break label$1;
}
}
$0 = 0;
}
return $0;
}
function FingerBending__SetFingerBending_28char_20const__29($0, $1) {
FingerBending__SetFingerBending_28char_20const__2c_20HashAny_char_20const__2c_20FingerBending___29($0, $1, 0);
}
function DynamicArray1_Vector___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function CircularMovement___CircularMovement_28_29($0) {
$0 = $0 | 0;
TwoHCircMoveSpec___TwoHCircMoveSpec_28_29($0 + 616 | 0);
return BasicMovement___BasicMovement_28_29($0) | 0;
}
function BasicMovement___BasicMovement_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 61628;
TwoHConcretePostureChange___TwoHConcretePostureChange_28_29($0 + 60 | 0);
return $0 | 0;
}
function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}
function __cxx_global_var_init_10_2() {
Vector__Vector_28float_2c_20float_2c_20float_29(69856, Math_fround(0), Math_fround(-.04500000178813934), Math_fround(-.07000000029802322));
}
function TokenStream__setBuffer_28char_20const__29($0, $1) {
HEAP32[HEAP32[$0 + 16 >> 2] + 12 >> 2] = 0;
DynamicString__appendString_28char_20const__29(HEAP32[$0 + 16 >> 2], $1);
}
function OneHConcretePosture___OneHConcretePosture_28_29($0) {
HEAP32[$0 + 56 >> 2] = 0;
OneHConcretePostureModifier___OneHConcretePostureModifier_28_29($0 + 76 | 0);
return $0;
}
function DynamicArrayP_Joint___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_Joint___appendElement_28Joint__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_Joint___setElement_28int_2c_20Joint__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArray0_float___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function std____2__error_code__message_28_29_20const($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 + 4 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($0, $2, HEAP32[$1 >> 2]);
}
function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
return void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0);
}
function QuatJointRotation__setPreInvCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setPreInvCompose_28Quaternion_20const__29($0 + 8 | 0, $1);
}
function OneArmAnimator__reset_28OneHConcretePosture__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
OneArmAnimator__reset_28OneHConcretePosture__2c_20float_29($0, $1, Math_fround(0));
}
function DynamicArrayP_char___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArrayP_Site___preferredSize_28int_29($0, $1) {
$0 = HEAP32[$0 + 4 >> 2];
if (($1 | 0) >= ($0 | 0)) {
$0 = ((($1 | 0) / 2 | 0) + $1 | 0) + 1 | 0;
}
return $0;
}
function DynamicArray1_JointRotation____DynamicArray1_28_29($0) {
$0 = $0 | 0;
DynamicArray1_JointRotation____initialise_28int_2c_20JointRotation___29($0, 0, 0);
return $0 | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29($0) {
$0 = $0 | 0;
return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
}
function __cxx_global_var_init_7_2() {
HEAP32[17284] = -1083644523;
HEAP32[17282] = -1097668189;
HEAP32[17283] = -1091039874;
HEAP32[17280] = 0;
HEAP32[17281] = -1093322895;
}
function __cxx_global_var_init_3_2() {
Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29(67928, Math_fround(0), Math_fround(0), Math_fround(0), Math_fround(1));
}
function Site__computeLocalPosition_28_29($0) {
Transform__invTransformVector_28Vector_20const__2c_20Vector__29_20const(HEAP32[$0 + 16 >> 2] + 68 | 0, $0 + 40 | 0, $0 + 28 | 0);
}
function void_20std____2__allocator_SSPRSet____construct_SSPRSet__2c_20SSPRSet__20const___28SSPRSet___2c_20SSPRSet__20const__29($0, $1, $2) {
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
}
function void_20std____2__allocator_SSMorph____construct_SSMorph__2c_20SSMorph__20const___28SSMorph___2c_20SSMorph__20const__29($0, $1, $2) {
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
}
function std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($0) {
return $0 + 12 | 0;
}
function TwoArmAnimator__setInitialPosture_28BasicMovement__29($0, $1) {
FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, HEAP32[$0 >> 2] ? $0 + 7128 | 0 : HEAP32[17612]);
}
function Transform__transformVector_28Vector__29_20const($0, $1) {
Quaternion__rotateVector_28Vector__29_20const($0 + 12 | 0, $1);
Vector__setAdd_28Vector_20const__29($1, $0);
}
function HanimAvatar__SetFacePoint_28short_2c_20Vector_20const__29($0, $1, $2) {
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29(HEAP32[$0 + 488 >> 2], $1, $2);
}
function FingerplayParams__FingerplayParams_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function DynamicArrayP_BasicMovement___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_BasicMovement___initialise_28int_2c_20BasicMovement___29($0, 0, 0);
return $0 | 0;
}
function DynamicArray1_Vector___DynamicArray1_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArray1_Vector___initialise_28int_2c_20Vector__29($0, $1, 0);
return $0 | 0;
}
function ControllerParams__ControllerParams_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = 1065353216;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function ThumbBending__SetThumbBending_28char_20const__29($0, $1) {
ThumbBending__SetThumbBending_28char_20const__2c_20HashAny_char_20const__2c_20ThumbBending___29($0, $1, 0);
}
function Site__computeGlobalPosition_28_29($0) {
Transform__transformVector_28Vector_20const__2c_20Vector__29_20const(HEAP32[$0 + 16 >> 2] + 68 | 0, $0 + 28 | 0, $0 + 40 | 0);
}
function QuatJointRotation__setFrom_28QuatJointRotation_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setFrom_28Quaternion_20const__29($0 + 8 | 0, $1 + 8 | 0);
}
function MirrorBodySide_28AbsoluteBodySide_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 - 1 | 0;
if ($1 >>> 0 <= 3) {
$0 = HEAP32[($1 << 2) + 49116 >> 2];
}
return $0 | 0;
}
function std____2__error_condition__error_condition_28int_2c_20std____2__error_category_20const__29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function operator___28FingerBending_20const__2c_20FingerBending_20const__29($0, $1) {
return operator___28FingerBending_20const__2c_20FingerBending_20const__29_1($0, $1) ^ 1;
}
function __cxx_global_var_init_3_7() {
var $0 = 0;
$0 = 70528;
while (1) {
$0 = Vector__Vector_28_29($0) + 12 | 0;
if (($0 | 0) != 70600) {
continue;
}
break;
}
}
function Vector__alengthsq_28float_2c_20float_2c_20float_29($0, $1, $2) {
return Math_fround(Math_fround($2 * $2) + Math_fround(Math_fround($0 * $0) + Math_fround($1 * $1)));
}
function SiteIDPair__SiteIDPair_28_29($0) {
$0 = $0 | 0;
$0 = SiteID__SiteID_28_29($0);
SiteID__SiteID_28_29($0 + 4 | 0);
HEAP32[$0 + 8 >> 2] = 1056964608;
return $0 | 0;
}
function HashChainItem_char_20const__2c_20Gesture____HashChainItem_28char_20const__2c_20Gesture__29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function DynamicArrayP_Joint___DynamicArrayP_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_Joint___initialise_28int_2c_20Joint___29($0, $1, 0);
return $0 | 0;
}
function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0));
}
function SeqTimedMorph__appendElement_28AbstractTimedMorph__29($0, $1) {
DynamicArrayP_AbstractTimedMorph___appendElement_28AbstractTimedMorph__29(HEAP32[$0 + 24 >> 2], $1);
}
function DynamicArray_char_2c_20_28char_290___getAddress_28int_29_20const($0, $1) {
return ($1 | 0) >= 0 ? HEAP32[$0 + 8 >> 2] > ($1 | 0) ? HEAP32[$0 >> 2] + $1 | 0 : 0 : 0;
}
function DynamicArray_char_2c_20_28char_290___ensureFreeSpace_28int_29($0, $1) {
DynamicArray_char_2c_20_28char_290___ensureSize_28int_29($0, HEAP32[$0 + 12 >> 2] + $1 | 0);
}
function DynamicArrayP_char_20const___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_char_20const___initialise_28int_2c_20char_20const___29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_BasicMovement___getAddress_28int_29_20const($0, $1) {
return ($1 | 0) >= 0 ? HEAP32[$0 + 8 >> 2] > ($1 | 0) ? HEAP32[$0 >> 2] + ($1 << 2) | 0 : 0 : 0;
}
function Direction3__Direction3_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
return $0;
}
function SiGMLHandshape__IsThumbbetween23Fist_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2] != 1 | HEAP32[$0 + 196 >> 2] != 1 ? $1 : HEAP32[$0 + 200 >> 2] == 2;
return $1;
}
function QuatJointRotation__setComposeInv_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setComposeInv_28Quaternion_20const__29($0 + 8 | 0, $1);
}
function OneHConcretePosture__computeWristLoc_28Vector__29_20const($0, $1) {
OneHConcretePosture__computeWristLoc_28HanimAvatar_20const__2c_20Vector__29_20const($0, 0, $1);
}
function __cxx_global_var_init_33_1() {
SiteID__SiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29(70304, 0, 0, 0, 0, 0, 0);
}
function TokenStream__expandBuffer_28_29($0) {
$0 = HEAP32[$0 + 16 >> 2];
DynamicArray_char_2c_20_28char_290___requireElement_28int_29($0, HEAP32[$0 + 8 >> 2] + 999 | 0);
}
function DynamicArrayP_Site___DynamicArrayP_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
DynamicArrayP_Site___initialise_28int_2c_20Site___29($0, $1, 0);
return $0 | 0;
}
function DynamicArrayP_OptionSpec___appendElement_28OptionSpec__29($0, $1) {
DynamicArrayP_OptionSpec___setElement_28int_2c_20OptionSpec__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArray1_Vector___appendElement_28Vector_20const__29($0, $1) {
DynamicArray1_Vector___setElement_28int_2c_20Vector_20const__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function operator___28ThumbBending_20const__2c_20ThumbBending_20const__29($0, $1) {
return operator___28ThumbBending_20const__2c_20ThumbBending_20const__29_1($0, $1) ^ 1;
}
function WristWaggling__WristWaggling_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 1065353216;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function Transform__invTransformRotation_28Quaternion__29_20const($0, $1) {
Transform__invTransformRotation_28Quaternion_20const__2c_20Quaternion__29_20const($0, $1, $1);
}
function QuaternionController___QuaternionController_28_29_1($0) {
$0 = $0 | 0;
QuaternionController___QuaternionController_28_29($0);
operator_20delete_28void__29($0);
}
function MakeHandshapeType_28char_20const__29($0) {
if (!$0) {
return 0;
}
return InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18776], $0);
}
function std____2____iostream_category_____iostream_category_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(std____2__error_category___error_category_28_29($0));
}
function compute_k1k2_28float__2c_20float__2c_20float_2c_20float_29($0, $1, $2, $3) {
HEAPF32[$1 >> 2] = $2;
HEAPF32[$0 >> 2] = Math_fround($2 - $3) * Math_fround(.25);
}
function TwoHConcretePostureChange__setInitFlags_28_29($0) {
PostureChangeFlags__setInitFlags_28_29($0 + 448 | 0);
PostureChangeFlags__setInitFlags_28_29($0 + 450 | 0);
}
function OctantInterpolator__getComponent_28Vector_20const__2c_20Vector_20const__29_20const($0, $1, $2) {
return Vector__dotProduct_28Vector_20const__29_20const($1, $2);
}
function Getopts__OptionValues_28char_20const__29($0, $1) {
$0 = Getopts__OptionInfo_28char_20const__29($0, $1);
if (!$0) {
return 0;
}
return HEAP32[$0 + 12 >> 2];
}
function DynamicArray_char_2c_20_28char_290___DynamicArray_28int_29($0, $1) {
DynamicArray_char_2c_20_28char_290___initialise_28int_2c_20char__29($0, $1, 0);
return $0;
}
function std____2__allocator_SSPRSet____allocator_28_29($0) {
return std____2____non_trivial_if_true_2c_20std____2__allocator_SSPRSet___20_____non_trivial_if_28_29($0);
}
function std____2__allocator_SSMorph____allocator_28_29($0) {
return std____2____non_trivial_if_true_2c_20std____2__allocator_SSMorph___20_____non_trivial_if_28_29($0);
}
function isExtremityLocation_28Location_29($0) {
var $1 = 0;
$1 = 1;
if (!isFingerLocation_28Location_29($0)) {
$1 = isArmLocation_28Location_29($0);
}
return $1;
}
function LookupSAMPAPhoneme_28char_20const__29($0) {
return HashAny_char_20const__2c_20AbstractTimedMorph____lookupString_28char_20const__29_20const(HEAP32[17652], $0);
}
function Getopts__OptionCount_28char_20const__29($0, $1) {
$0 = Getopts__OptionInfo_28char_20const__29($0, $1);
if (!$0) {
return 0;
}
return HEAP32[$0 + 16 >> 2];
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0) {
$0 = $0 | 0;
return std____2__ios_base__rdbuf_28_29_20const($0) | 0;
}
function Vector__Vector_28_29($0) {
$0 = $0 | 0;
Vector__setFrom_28float_2c_20float_2c_20float_29($0, Math_fround(0), Math_fround(0), Math_fround(0));
return $0 | 0;
}
function TwoHCircMoveSpec___TwoHCircMoveSpec_28_29($0) {
OneHCircMoveSpec___OneHCircMoveSpec_28_29($0 + 68 | 0);
return OneHCircMoveSpec___OneHCircMoveSpec_28_29($0);
}
function SeqTimedMorph__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, 0);
}
}
function ParTimedMorph__print_28_IO_FILE__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if ($1) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, 0);
}
}
function DynamicArrayP_OptionSpec___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_OptionSpec___initialise_28int_2c_20OptionSpec___29($0, 0, 0);
return $0 | 0;
}
function isMotion_28XMLCell__29($0) {
if (!$0) {
return 0;
}
return isMotionElement_28SiGML_Element_29(SiGML__convertElement_28char_20const__29(HEAP32[$0 >> 2]));
}
function SHMScalarController___SHMScalarController_28_29_1($0) {
$0 = $0 | 0;
SHMScalarController___SHMScalarController_28_29($0);
operator_20delete_28void__29($0);
}
function QuatJointRotation__setCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setCompose_28Quaternion_20const__29($0 + 8 | 0, $1);
}
function DynamicArrayP_BasicMovement___DynamicArrayP_28int_29($0, $1) {
DynamicArrayP_BasicMovement___initialise_28int_2c_20BasicMovement___29($0, $1, 0);
return $0;
}
function DynamicArray1_Quaternion___DynamicArray1_28_29($0) {
$0 = $0 | 0;
DynamicArray1_Quaternion___initialise_28int_2c_20Quaternion__29($0, 0, 0);
return $0 | 0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($0) {
$0 = $0 | 0;
return std____2__ios_base__good_28_29_20const($0) | 0;
}
function std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
return HEAPF32[$1 >> 2] < HEAPF32[$2 >> 2];
}
function QuatJointRotation__toQuaternion_28Quaternion__29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setFrom_28Quaternion_20const__29($1, $0 + 8 | 0);
}
function MakeSiteID_28Location_2c_20AbsoluteBodySide_29($0, $1, $2) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_29($0, $1, $2, 0, 0);
}
function std____2__error_code__error_code_28int_2c_20std____2__error_category_20const__29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function isArmHandLocation_28Location_29($0) {
var $1 = 0;
$1 = 1;
if (!isHandLocation_28Location_29($0)) {
$1 = isArmLocation_28Location_29($0);
}
return $1;
}
function _GLOBAL__sub_I_HanimAnimator_cpp() {
__cxx_global_var_init_32();
__cxx_global_var_init_138();
__cxx_global_var_init_1_23();
__cxx_global_var_init_2_8();
}
function Vector__setMidPoint_28Vector_20const__2c_20float_29($0, $1, $2) {
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__2c_20float_29($0, $0, $1, $2);
}
function SiGML__convertProximity_28char_20const__29($0) {
return SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29(HEAP32[18218], $0);
}
function Quaternion__Quaternion_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setFrom_28Quaternion_20const__29($0, $1);
return $0 | 0;
}
function QuatJointRotation__setFromQuat_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Quaternion__setFrom_28Quaternion_20const__29($0 + 8 | 0, $1);
}
function HashChainItem_char_20const__2c_20int___HashChainItem_28char_20const__2c_20int_29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function DeleteConfigInfo_28_29() {
var $0 = 0;
$0 = HEAP32[17100];
if ($0) {
operator_20delete_28void__29(XMLCell___XMLCell_28_29($0));
HEAP32[17100] = 0;
}
}
function std____2__ctype_char___widen_28char_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
}
function _GLOBAL__sub_I_animgenlite_cpp() {
__cxx_global_var_init_51();
__cxx_global_var_init_1_42();
__cxx_global_var_init_2_20();
__cxx_global_var_init_3_9();
}
function _GLOBAL__sub_I_VRMLRotation_cpp() {
__cxx_global_var_init_26();
__cxx_global_var_init_4_1();
__cxx_global_var_init_1_17();
__cxx_global_var_init_2_3();
}
function SiGML__convertLocation_28char_20const__29($0) {
return SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29(HEAP32[18213], $0);
}
function HashAny_char_20const__2c_20char_20const____startIteration_28_29_20const($0, $1) {
HashAny_char_20const__2c_20char_20const____Iterator__Iterator_28_29($0);
}
function DynamicString__DynamicString_28int_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return DynamicArray_char_2c_20_28char_290___DynamicArray_28int_29($0, $1) | 0;
}
function void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0, $1) {
void_20std____2____libcpp_operator_delete_void___28void__29($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1) {}
function __localtime_r($0, $1) {
tzset();
_localtime_js($0 | 0, $1 | 0);
HEAP32[$1 + 40 >> 2] = HEAP32[(HEAP32[$1 + 32 >> 2] ? 75660 : 75656) >> 2];
return $1;
}
function _GLOBAL__sub_I_YXZRotation_cpp() {
__cxx_global_var_init_28();
__cxx_global_var_init_6_2();
__cxx_global_var_init_1_19();
__cxx_global_var_init_2_5();
}
function SiteID__isHandSite_28_29_20const($0) {
return isHandLocation_28short_29(HEAPU8[$0 | 0]) | ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) & 1015808) != 0;
}
function SiGML__convertContact_28char_20const__29($0) {
return SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29(HEAP32[18218], $0);
}
function InvertibleDynamicStringArray__length_28_29_20const($0) {
$0 = $0 | 0;
$0 = HEAP32[$0 + 4 >> 2];
if (!$0) {
return 0;
}
return HEAP32[$0 + 12 >> 2];
}
function AnimgenInstance__getInst_28int_29($0) {
var $1 = 0;
if (AnimgenInstance__validInst_28int_29($0)) {
$1 = HEAP32[($0 << 2) + 75492 >> 2];
}
return $1;
}
function std____2__ios_base__getloc_28_29_20const($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
}
function long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2] + 1 | 0;
HEAP32[$0 >> 2] = $1;
return $1;
}
function long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0) {
var $1 = 0;
$1 = HEAP32[$0 >> 2] - 1 | 0;
HEAP32[$0 >> 2] = $1;
return $1;
}
function SiGMLConstellation__mergeFrom_28SiGMLConstellation_20const__29($0, $1) {
if (SiGMLConstellation__defined_28_29_20const($1)) {
__memcpy($0, $1, 84);
}
}
function FingerBaseJointRotation__setLongitAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 32 | 0, $1);
}
function Direction2__Direction2_28Direction2_20const__29($0, $1) {
HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
return $0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___operator_5b_5d_28unsigned_20long_29($0, $1) {
return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___operator_5b_5d_28unsigned_20long_29($0, $1) {
return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__allocator_char___allocator_28_29($0) {
return std____2____non_trivial_if_true_2c_20std____2__allocator_char__20_____non_trivial_if_28_29($0);
}
function std____2____unwrap_iter_impl_SSMorph___2c_20true_____apply_28SSMorph___29($0) {
return SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($0);
}
function Transform__setPreCompose_28Transform_20const__29($0, $1) {
Transform__setPreCompose_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $1 + 12 | 0);
}
function Transform__setComposeInv_28Transform_20const__29($0, $1) {
Transform__setComposeInv_28Vector_20const__2c_20Quaternion_20const__29($0, $1, $1 + 12 | 0);
}
function ThumbBaseJointRotation__setLongitAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 32 | 0, $1);
}
function MirrorBodySide_28AbsoluteBodySide_2c_20Mirroring_29($0, $1) {
if (HEAPU8[$1 | 0] & 2) {
$0 = MirrorBodySide_28AbsoluteBodySide_29($0);
}
return $0;
}
function FingerBaseJointRotation__setSplayAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 20 | 0, $1);
}
function midpoint_28float_2c_20float_2c_20float_29($0, $1, $2) {
return Math_fround(Math_fround($0 * Math_fround(Math_fround(1) - $2)) + Math_fround($1 * $2));
}
function __stdio_seek($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$2 = __lseek(HEAP32[$0 + 60 >> 2], $1, $2, $3);
return $2 | 0;
}
function __cxx_global_var_init_2_9() {
Vector__Vector_28float_2c_20float_2c_20float_29(68316, Math_fround(1), Math_fround(.800000011920929), Math_fround(.25));
}
function XMLWrapper__XMLWrapper_28_29($0) {
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 63196;
return $0;
}
function Vector__alength_28float_2c_20float_2c_20float_29($0, $1, $2) {
return sqrt_28float_29(Vector__alengthsq_28float_2c_20float_2c_20float_29($0, $1, $2));
}
function ThumbBaseJointRotation__setSplayAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 20 | 0, $1);
}
function DynamicArrayP_Gesture___appendElement_28Gesture__29($0, $1) {
DynamicArrayP_Gesture___setElement_28int_2c_20Gesture__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function std____2__system_error___system_error_28_29_1($0) {
$0 = $0 | 0;
std____2__system_error___system_error_28_29($0);
operator_20delete_28void__29($0);
}
function std____2__ios_base__failure___failure_28_29_1($0) {
$0 = $0 | 0;
std____2__ios_base__failure___failure_28_29($0);
operator_20delete_28void__29($0);
}
function operator___28SiteID_2c_20SiteID_29_1($0, $1) {
return (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16) == (HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 | 0] << 16);
}
function hashTableInit($0, $1) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP8[$0 + 4 | 0] = 0;
HEAP32[$0 + 16 >> 2] = $1;
HEAP32[$0 >> 2] = 0;
}
function VectorController2___VectorController2_28_29_1($0) {
$0 = $0 | 0;
VectorController2___VectorController2_28_29($0);
operator_20delete_28void__29($0);
}
function TargettedMovement___TargettedMovement_28_29_1($0) {
$0 = $0 | 0;
TargettedMovement___TargettedMovement_28_29($0);
operator_20delete_28void__29($0);
}
function NonmanualMovement___NonmanualMovement_28_29_1($0) {
$0 = $0 | 0;
NonmanualMovement___NonmanualMovement_28_29($0);
operator_20delete_28void__29($0);
}
function MannerFlags__defined_28_29_20const($0) {
var $1 = 0;
$1 = 1;
$1 = HEAP32[$0 >> 2] | HEAP32[$0 + 4 >> 2] ? $1 : HEAPU8[$0 + 8 | 0] != 0;
return $1;
}
function KeyOps_SiteID_20const___hashFunction_28SiteID_2c_20int_29($0, $1) {
return intHash_28unsigned_20int_2c_20int_29(SiteID__asInt_28_29_20const($0), $1);
}
function FingerBaseJointRotation__setBendAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1);
}
function DynamicArray_int_2c_20_1___DynamicArray_28_29($0) {
$0 = $0 | 0;
DynamicArray_int_2c_20_1___initialise_28int_2c_20int__29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_XMLCell___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_XMLCell___initialise_28int_2c_20XMLCell___29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_Segment___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_Segment___initialise_28int_2c_20Segment___29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_Gesture___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_Gesture___initialise_28int_2c_20Gesture___29($0, 0, 0);
return $0 | 0;
}
function Direction3__Direction3_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Direction3__setFromString_28char_20const__29($0, $1);
return $0 | 0;
}
function Direction2__Direction2_28char_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Direction2__setFromString_28char_20const__29($0, $1);
return $0 | 0;
}
function BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_29($0, $1, $2) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $1, $2, 1);
}
function _GLOBAL__sub_I_Humanoid_cpp() {
__cxx_global_var_init_18();
__cxx_global_var_init_61();
__cxx_global_var_init_1_11();
__cxx_global_var_init_52();
}
function ThumbBaseJointRotation__setBendAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1);
}
function Site__setGlobalPosition_28Vector_20const__29($0, $1) {
Vector__setFrom_28Vector_20const__29($0 + 40 | 0, $1);
Site__computeLocalPosition_28_29($0);
}
function KeyOps_char_20const__20const___hashFunction_28char_20const__2c_20int_29($0, $1) {
return (stringHash_28char_20const__29($0) >>> 0) % ($1 >>> 0) | 0;
}
function GeneralController_Quaternion_2c_20Quaternion___reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function FingerBaseJointRotation__addSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = HEAPF32[$0 + 48 >> 2] + $1;
}
function EllipseInfo__EllipseInfo_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
return $0;
}
function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
if ($2) {
__memcpy($0, $1, $2);
}
return $0;
}
function TurretJointRotation__setSplayAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 20 | 0, $1);
}
function ThumbBaseJointRotation__addSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = HEAPF32[$0 + 48 >> 2] + $1;
}
function SSFrame__GetNumMorphs_28_29_20const($0) {
return std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0 + 16 | 0);
}
function FingerBaseJointRotation__addBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = HEAPF32[$0 + 44 >> 2] + $1;
}
function ControlledByScalar_Vector___set_perception_28Vector_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 12 | 0, $1);
}
function std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
if ($2) {
memmove($0, $1, $2);
}
return $0;
}
function std____2____basic_string_common_true_____throw_length_error_28_29_20const($0) {
std____2____throw_length_error_28char_20const__29(7260);
abort();
}
function ThumbBaseJointRotation__addBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = HEAPF32[$0 + 44 >> 2] + $1;
}
function SSFrame__GetNumPRSets_28_29_20const($0) {
return std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0 + 4 | 0);
}
function SHMScalarController__new_per1_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1);
}
function QuaternionController__newTime_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1);
}
function FingerBaseJointRotation___FingerBaseJointRotation_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(JointRotation___JointRotation_28_29($0));
}
function ConstellationInfo__isTotallyDefined_28_29_20const($0) {
if (!HEAP32[$0 >> 2]) {
return 0;
}
return SiteID__defined_28_29_20const($0 + 16 | 0);
}
function CircleInfo__CircleInfo_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
return $0;
}
function std____2____vector_base_common_true_____throw_length_error_28_29_20const($0) {
std____2____throw_length_error_28char_20const__29(4349);
abort();
}
function setAccel_28Quaternion__2c_20Quaternion_20const__2c_20float_29($0, $1, $2) {
Quaternion__setScale_28Quaternion_20const__2c_20float_29($0, $1, $2);
}
function Vector__setFrom_28float_2c_20float_2c_20float_29($0, $1, $2, $3) {
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
}
function TurretJointRotation__setBendAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1);
}
function SHMScalarController___SHMScalarController_28_29($0) {
$0 = $0 | 0;
return GeneralController_float_2c_20float____GeneralController_28_29($0) | 0;
}
function DynamicArray1_Vector___DynamicArray1_28_29($0) {
$0 = $0 | 0;
DynamicArray1_Vector___initialise_28int_2c_20Vector__29($0, 0, 0);
return $0 | 0;
}
function setRef2_28Quaternion__2c_20Quaternion_20const__2c_20float_29($0, $1, $2) {
Quaternion__setScale_28Quaternion_20const__2c_20float_29($0, $1, $2);
}
function fabsl($0, $1, $2, $3, $4) {
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = $4 & 2147483647;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
}
function TurretJointRotation__addSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 36 >> 2] = HEAPF32[$0 + 36 >> 2] + $1;
}
function ThumbBaseJointRotation___ThumbBaseJointRotation_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(JointRotation___JointRotation_28_29($0));
}
function SiGMLHandshape__thumbIsOpposed_28_29_20const($0) {
return OpposedThumbHandshape_28HandshapeType_29(HEAP32[$0 >> 2]) | HEAP32[$0 + 28 >> 2] == 4;
}
function Quaternion__setScaleRotation_28float_29($0, $1) {
Quaternion__setAngle_28float_29($0, Math_fround(Quaternion__getAngle_28_29_20const($0) * $1));
}
function HingeJointRotation__setBendAxis_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 8 | 0, $1);
}
function FingerBaseJointRotation__setPreInvCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8710);
}
function AGIPostMortemCallback_28void__2c_20PostMortem__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
AnimgenInstance__AGIPostMortem_28PostMortem__29($0, $0);
}
function std__runtime_error___runtime_error_28_29_1($0) {
$0 = $0 | 0;
std__runtime_error___runtime_error_28_29($0);
operator_20delete_28void__29($0);
}
function VectorController2___VectorController2_28_29($0) {
$0 = $0 | 0;
return GeneralController_Vector_2c_20Vector____GeneralController_28_29($0) | 0;
}
function TurretJointRotation__addBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 32 >> 2] = HEAPF32[$0 + 32 >> 2] + $1;
}
function HandsitePriority_28Location_29($0) {
var $1 = 0;
if (isHandLocation_28Location_29($0)) {
$1 = HEAP16[($0 << 1) + 49502 >> 1];
}
return $1;
}
function DynamicArrayP_Joint___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_Joint___initialise_28int_2c_20Joint___29($0, 0, 0);
return $0 | 0;
}
function CompoundMovement__addComponent_28BasicMovement__29($0, $1) {
DynamicArrayP_BasicMovement___appendElement_28BasicMovement__29($0 + 528 | 0, $1);
}
function AtomicTimedMorph__scaleDuration_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
AbstractTimedMorph__scaleDuration_28float_29($0, $1);
}
function AppendPlayItem_28DynamicArrayP_Gesture___2c_20Gesture__29($0, $1) {
if ($0) {
DynamicArrayP_Gesture___appendElement_28Gesture__29($0, $1);
}
}
function __cxx_global_var_init_2_20() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(75580, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_19() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(75512, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_18() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70712, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_17() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70692, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_16() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70508, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_15() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70488, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_14() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70460, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_13() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70432, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_12() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(70052, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_11() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(68388, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_10() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(68368, Math_fround(0), Math_fround(0), Math_fround(0));
}
function RepeatMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
$0 = HEAP32[$0 + 696 >> 2];
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0);
}
function RepSpec__RepSpec_28_29($0) {
$0 = $0 | 0;
HEAP8[$0 + 4 | 0] = 0;
HEAP32[$0 >> 2] = 16777217;
RepSpec__initialise_28_29($0);
return $0 | 0;
}
function IFS_spec__IFS_spec_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
return $0;
}
function HingeJointRotation__addBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 20 >> 2] = HEAPF32[$0 + 20 >> 2] + $1;
}
function AtomicTimedMorph___AtomicTimedMorph_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(AbstractTimedMorph___AbstractTimedMorph_28_29($0));
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20___size_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20___size_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function hashTableIterInit($0, $1) {
var $2 = 0;
$2 = HEAP32[$1 >> 2];
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = (HEAP32[$1 + 8 >> 2] << 2) + $2;
}
function __lctrans_impl($0, $1) {
if ($1) {
$1 = __mo_lookup(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], $0);
} else {
$1 = 0;
}
return $1 ? $1 : $0;
}
function __cxx_global_var_init_2_8() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(68268, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_7() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(68248, Math_fround(0), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_6() {
Direction3__Direction3_28float_2c_20float_2c_20float_29(68192, Math_fround(0), Math_fround(0), Math_fround(0));
}
function FingerBaseJointRotation__setComposeInv_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(1817);
}
function attrSide_28XMLCell__29($0) {
$0 = XMLCell__attrib_string_28char_20const__29($0, 9722);
if (!$0) {
return 0;
}
return !strcmp($0, 2792);
}
function TurretJointRotation__setPreInvCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8672);
}
function KeyOps_char_20const____hashFunction_28char_20const__2c_20int_29($0, $1) {
return (stringHash_28char_20const__29($0) >>> 0) % ($1 >>> 0) | 0;
}
function HashAny_char_20const__2c_20SiteID___startIteration_28_29_20const($0, $1) {
HashAny_char_20const__2c_20SiteID___Iterator__Iterator_28_29($0);
}
function GeneralController_Vector_2c_20Vector___reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function DynamicArrayP_char___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_char___initialise_28int_2c_20char___29($0, 0, 0);
return $0 | 0;
}
function DynamicArrayP_Site___DynamicArrayP_28_29($0) {
$0 = $0 | 0;
DynamicArrayP_Site___initialise_28int_2c_20Site___29($0, 0, 0);
return $0 | 0;
}
function CircularMovement___CircularMovement_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(CircularMovement___CircularMovement_28_29($0));
}
function AbstractTimedMorph__printIndented_28_IO_FILE__29_20const($0, $1) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, HEAP16[33801]);
}
function std____2____throw_bad_cast_28_29() {
__cxa_throw(std__bad_cast__bad_cast_28_29(__cxa_allocate_exception(4) | 0) | 0, 59080, 907);
abort();
}
function animgenGenerateFrames($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return AnimgenInstance__GenerateFrames_28int_2c_20char_20const__29($0, $1) | 0;
}
function VectorController2__get_perception_28Vector__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($1, $0 + 28 | 0);
}
function PostureChangeTiming__PostureChangeTiming_28float_2c_20float_29($0, $1, $2) {
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
return $0;
}
function GetNonmanualDefsFromString_28char_20const__29($0) {
GetNonmanualDefs_28XMLCell__2c_20char_20const__29(ReadXMLString_28char__29($0), 14688);
}
function FingerBaseJointRotation__setFromQuat_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(2996);
}
function VectorController2__set_perception_28Vector_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0 + 28 | 0, $1);
}
function VectorController2__get_reference_28Vector__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($1, $0 + 16 | 0);
}
function TurretJointRotation___TurretJointRotation_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(JointRotation___JointRotation_28_29($0));
}
function SiGML__convertElement_28char_20const__29($0) {
return InvertibleStringArray__indexFromValue_28char_20const__29_20const(HEAP32[18782], $0);
}
function ShoulderConstraint__ShoulderConstraint_28_29($0) {
$0 = $0 | 0;
$0 = Vector__Vector_28_29($0);
HEAP32[$0 + 12 >> 2] = 0;
return $0 | 0;
}
function GeneralController_float_2c_20float___reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function FingerBaseJointRotation__setCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8825);
}
function DynamicArrayP_char___appendElement_28char__29($0, $1) {
DynamicArrayP_char___setElement_28int_2c_20char__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function DynamicArrayP_Site___appendElement_28Site__29($0, $1) {
DynamicArrayP_Site___setElement_28int_2c_20Site__29($0, HEAP32[$0 + 12 >> 2], $1);
}
function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0) {
return HEAP32[$0 >> 2];
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
i64toi32_i32$HIGH_BITS = 0;
return 0;
}
function TurretJointRotation__setComposeInv_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(1782);
}
function Direction2__setFrom_28Direction2_20const__29($0, $1) {
HEAPF32[$0 >> 2] = HEAPF32[$1 >> 2];
HEAPF32[$0 + 4 >> 2] = HEAPF32[$1 + 4 >> 2];
}
function AtomicTimedMorph__shiftStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
AbstractTimedMorph__shiftStart_28float_29($0, $1);
}
function std____2__ios_base__setstate_28unsigned_20int_29($0, $1) {
std____2__ios_base__clear_28unsigned_20int_29($0, HEAP32[$0 + 16 >> 2] | $1);
}
function isTgtMotion_28XMLCell__29($0) {
if (!$0) {
return 0;
}
return (SiGML__convertElement_28char_20const__29(HEAP32[$0 >> 2]) | 0) == 21;
}
function Vector__distance_28Vector_20const__29_20const($0, $1) {
return sqrt_28float_29(Vector__distanceSq_28Vector_20const__29_20const($0, $1));
}
function TorsoDecollider___TorsoDecollider_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(TorsoDecollider___TorsoDecollider_28_29($0));
}
function HingeJointRotation___HingeJointRotation_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(JointRotation___JointRotation_28_29($0));
}
function FingerPlayMovement___FingerPlayMovement_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(BasicMovement___BasicMovement_28_29($0));
}
function Direction2__set_handedVector_28bool_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (!$1) {
Direction2__set_leftHandedVector_28_29($0);
}
}
function BasicMovement__setInitialPosture_28TwoHConcretePosture_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__memcpy($0 + 60 | 0, $1, 224);
}
function std__logic_error___logic_error_28_29_1($0) {
$0 = $0 | 0;
std__logic_error___logic_error_28_29($0);
operator_20delete_28void__29($0);
}
function std__length_error___length_error_28_29($0) {
$0 = $0 | 0;
std__logic_error___logic_error_28_29($0);
operator_20delete_28void__29($0);
}
function Vector__Vector_28Vector_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__setFrom_28Vector_20const__29($0, $1);
return $0 | 0;
}
function TurretJointRotation__setFromQuat_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(2963);
}
function Quaternion__setNonNegativePhase_28_29($0) {
if ((Quaternion__quatSign_28_29_20const($0) | 0) < 0) {
Quaternion__setFlip_28_29($0);
}
}
function HashChainItem_int_2c_20int___HashChainItem_28int_2c_20int_29($0, $1, $2) {
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 >> 2] = $1;
return $0;
}
function Direction3__set_leftHandedAxis_28_29($0) {
HEAPF32[$0 + 4 >> 2] = -HEAPF32[$0 + 4 >> 2];
HEAPF32[$0 + 8 >> 2] = -HEAPF32[$0 + 8 >> 2];
}
function initUpdatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
normal_updatePosition(64316, $1, $2, $3);
}
function animgenSetSequence($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
return AnimgenInstance__SetSequence_28int_2c_20float_29($0, $1) | 0;
}
function __cxx_global_var_init_8_1() {
Vector__Vector_28float_2c_20float_2c_20float_29(68092, Math_fround(0), Math_fround(0), Math_fround(-1));
}
function __cxx_global_var_init_7_1() {
Vector__Vector_28float_2c_20float_2c_20float_29(68080, Math_fround(0), Math_fround(-1), Math_fround(0));
}
function __cxx_global_var_init_6_1() {
Vector__Vector_28float_2c_20float_2c_20float_29(68068, Math_fround(-1), Math_fround(0), Math_fround(0));
}
function TwoHandStuff___TwoHandStuff_28_29($0) {
OneHandStuff___OneHandStuff_28_29($0 + 44 | 0);
return OneHandStuff___OneHandStuff_28_29($0);
}
function TurretJointRotation__setCompose_28Quaternion_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
UNIMPLEMENTED_28char_20const__29(8793);
}
function QuatJointRotation___QuatJointRotation_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(JointRotation___JointRotation_28_29($0));
}
function HashAny_char_20const__2c_20int___startIteration_28_29_20const($0, $1) {
HashAny_char_20const__2c_20int___Iterator__Iterator_28_29($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0) {}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($0) {
return HEAPU8[$0 | 0];
}
function std____2____do_message__message_28int_29_20const($0, $1, $2) {
std____2___28anonymous_20namespace_29__do_strerror_r_28int_29($0, $2);
}
function __cxx_global_var_init_5_1() {
Vector__Vector_28float_2c_20float_2c_20float_29(68056, Math_fround(0), Math_fround(0), Math_fround(1));
}
function __cxx_global_var_init_4_2() {
Vector__Vector_28float_2c_20float_2c_20float_29(68044, Math_fround(0), Math_fround(1), Math_fround(0));
}
function __cxx_global_var_init_3_3() {
Vector__Vector_28float_2c_20float_2c_20float_29(68032, Math_fround(1), Math_fround(0), Math_fround(0));
}
function __cxx_global_var_init_2_4() {
Vector__Vector_28float_2c_20float_2c_20float_29(68020, Math_fround(0), Math_fround(0), Math_fround(0));
}
function HashAny_char_20const__2c_20char_20const____Iterator__Iterator_28_29($0) {
HEAP32[$0 >> 2] = -1;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function HanimAvatar__GetFacePoint_28short_29($0, $1, $2) {
DynamicArray1_Vector___getElement_28int_29_20const($0, HEAP32[$1 + 488 >> 2], $2);
}
function ElbowDisplacement__ElbowDisplacement_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function AtomicTimedMorph__setStart_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
AbstractTimedMorph__setStart_28float_29($0, $1);
}
function std__runtime_error__what_28_29_20const($0) {
$0 = $0 | 0;
return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0) | 0;
}
function std____2____shared_count____add_shared_28_29($0) {
long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0 + 4 | 0);
}
function XML_SetElementHandler($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 56 >> 2] = $2;
HEAP32[$0 + 52 >> 2] = $1;
}
function RepeatMovement___RepeatMovement_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(RepeatMovement___RepeatMovement_28_29($0));
}
function DirectedMovement___DirectedMovement_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(BasicMovement___BasicMovement_28_29($0));
}
function void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0) {
return operator_20new_28unsigned_20long_29($0);
}
function __wasm_i64_udiv($0, $1, $2, $3) {
$3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
return $3;
}
function VectorController2__get_perception_28_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__Vector_28Vector_20const__29($0, $1 + 28 | 0);
}
function std__logic_error__what_28_29_20const($0) {
$0 = $0 | 0;
return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0) | 0;
}
function __strerror_l($0, $1) {
return __lctrans(HEAPU16[(($0 >>> 0 > 149 ? 0 : $0) << 1) + 57936 >> 1] + 56104 | 0, HEAP32[$1 + 20 >> 2]);
}
function VectorController2__get_reference_28_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
Vector__Vector_28Vector_20const__29($0, $1 + 16 | 0);
}
function NoMovement__operator__28NoMovement_20const__29($0, $1) {
BasicMovement__operator__28BasicMovement_20const__29($0, $1);
return $0;
}
function initScanContent($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return initScan($0, 1, $1, $2, $3) | 0;
}
function animgenSetOutput($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return AnimgenInstance__SetOutput_28int_2c_20char_20const__29($0, $1) | 0;
}
function TwoArmAnimator__newTime_28float_29($0, $1) {
HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 4 >> 2] + $1;
TwoArmAnimator__update_28_29($0);
}
function Quaternion__getAxis_28Vector__29_20const($0, $1) {
Quaternion__toVector_28Vector__29_20const($0, $1);
Vector__setUnit_28_29($1);
}
function ExpatWrapper___ExpatWrapper_28_29_1($0) {
$0 = $0 | 0;
ExpatWrapper___ExpatWrapper_28_29($0);
operator_20delete_28void__29($0);
}
function initScanProlog($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return initScan($0, 0, $1, $2, $3) | 0;
}
function __wasm_rotl_i32($0, $1) {
var $2 = 0;
$2 = $1 & 31;
$1 = 0 - $1 & 31;
return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}
function VRMLRotation__VRMLRotation_28Quaternion_20const__29($0, $1) {
Quaternion__toVRML_28VRMLRotation__29_20const($1, $0);
return $0;
}
function SplitMovement___SplitMovement_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(SplitMovement___SplitMovement_28_29($0));
}
function SeqTimedMorph___SeqTimedMorph_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(SeqTimedMorph___SeqTimedMorph_28_29($0));
}
function ParTimedMorph___ParTimedMorph_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(ParTimedMorph___ParTimedMorph_28_29($0));
}
function ParMovement___ParMovement_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(CompoundMovement___CompoundMovement_28_29($0));
}
function std__exception___exception_28_29_1($0) {
$0 = $0 | 0;
std__exception___exception_28_29($0);
operator_20delete_28void__29($0);
}
function std____2__iostream_category_28_29() {
if (!HEAPU8[77444]) {
__cxa_atexit(908, 0, 1024);
HEAP8[77444] = 1;
}
return 66080;
}
function std____2__ios_base__precision_28long_29($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 + 8 >> 2];
HEAP32[$0 + 8 >> 2] = $1;
return $2;
}
function __cxa_is_pointer_type($0) {
$0 = $0 | 0;
if (!$0) {
return 0;
}
return (__dynamic_cast($0, 58400, 58544, 0) | 0) != 0 | 0;
}
function SHMScalarController__get_perception_28float__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAPF32[$1 >> 2] = HEAPF32[$0 + 80 >> 2];
}
function Quaternion__Quaternion_28Quaternion_20const__29_1($0, $1) {
Quaternion__setFrom_28Quaternion_20const__29_1($0, $1);
return $0;
}
function MannerFlags__addManner_28Manner_29($0, $1) {
if (HEAP32[$0 >> 2] < ($1 | 0)) {
MannerFlags__setManner_28Manner_29($0, $1);
}
}
function unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) {
return HEAP32[$0 >> 2];
}
function _GLOBAL__sub_I_JointRotation_cpp() {
__cxx_global_var_init_34();
__cxx_global_var_init_31_1();
__cxx_global_var_init_1_25();
}
function _GLOBAL__sub_I_GestureParser_cpp() {
__cxx_global_var_init_41();
__cxx_global_var_init_1_32();
__cxx_global_var_init_2_14();
}
function WristMovement___WristMovement_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(BasicMovement___BasicMovement_28_29($0));
}
function SHMScalarController__get_reference_28float__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAPF32[$1 >> 2] = HEAPF32[$0 + 76 >> 2];
}
function KeyOps_SiGML_Element___hashFunction_28SiGML_Element_2c_20int_29($0, $1) {
return intHash_28unsigned_20int_2c_20int_29($0, $1);
}
function HashAny_char_20const__2c_20SiteID___Iterator__Iterator_28_29($0) {
HEAP32[$0 >> 2] = -1;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function std__bad_alloc___bad_alloc_28_29($0) {
$0 = $0 | 0;
std__exception___exception_28_29($0);
operator_20delete_28void__29($0);
}
function std____2__ios_base__width_28long_29($0, $1) {
var $2 = 0;
$2 = HEAP32[$0 + 12 >> 2];
HEAP32[$0 + 12 >> 2] = $1;
return $2;
}
function std____2____compressed_pair_elem_std____2__allocator_SSPRSet____2c_201_2c_20false_____get_28_29($0) {
return HEAP32[$0 >> 2];
}
function std____2____compressed_pair_elem_std____2__allocator_SSMorph____2c_201_2c_20false_____get_28_29($0) {
return HEAP32[$0 >> 2];
}
function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}
function __wasm_i64_mul($0, $1, $2, $3) {
$3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
return $3;
}
function Vector__setMidPoint_28Vector_20const__29($0, $1) {
Vector__setMidPoint_28Vector_20const__2c_20Vector_20const__29($0, $0, $1);
}
function Direction3__Direction3_28Direction3_20const__29_1($0, $1) {
Direction3__setFrom_28Direction3_20const__29($0, $1);
return $0;
}
function Direction2__Direction2_28Direction2_20const__29_1($0, $1) {
Direction2__setFrom_28Direction2_20const__29($0, $1);
return $0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($0) {
return !HEAP32[$0 >> 2];
}
function _GLOBAL__sub_I_OneHGesture_cpp() {
__cxx_global_var_init_44();
__cxx_global_var_init_1_35();
__cxx_global_var_init_2_17();
}
function _GLOBAL__sub_I_FaceAnimator_cpp() {
__cxx_global_var_init_31();
__cxx_global_var_init_1_22();
__cxx_global_var_init_2_7();
}
function Transform__transformDirection_28Vector__29_20const($0, $1) {
Quaternion__rotateVector_28Vector__29_20const($0 + 12 | 0, $1);
}
function TokenStream__close_28_29($0) {
var $1 = 0;
$1 = HEAP32[$0 + 4 >> 2];
if ($1) {
fclose($1);
HEAP32[$0 + 4 >> 2] = 0;
}
}
function ThumbBaseJointRotation__setLongitAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 52 >> 2] = $1;
}
function OneHGesture___OneHGesture_28_29($0) {
HEAP32[$0 + 72 >> 2] = 0;
return OneHAbstractPosture___OneHAbstractPosture_28_29($0);
}
function FingerBaseJointRotation__setSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = $1;
}
function std__bad_cast___bad_cast_28_29_1($0) {
$0 = $0 | 0;
std__bad_cast___bad_cast_28_29($0);
operator_20delete_28void__29($0);
}
function std____2__ios_base__failure___failure_28_29($0) {
$0 = $0 | 0;
return std____2__system_error___system_error_28_29($0) | 0;
}
function std____2____wrap_iter_SSMorph_____operator___28long_29($0, $1) {
HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
return $0;
}
function _GLOBAL__sub_I_animgenlib_cpp() {
__cxx_global_var_init_49();
__cxx_global_var_init_1_40();
__cxx_global_var_init_2_19();
}
function _GLOBAL__sub_I_Controller_cpp() {
__cxx_global_var_init_30();
__cxx_global_var_init_29_1();
__cxx_global_var_init_1_21();
}
function ThumbBaseJointRotation__setSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = $1;
}
function QuaternionController__reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function MaxDuration_28float_2c_20float_2c_20float_29($0, $1, $2) {
return $2 > Math_fround(0) ? $2 : $1 > Math_fround(0) ? $1 : $0;
}
function HashAny_char_20const__2c_20int___Iterator__Iterator_28_29($0) {
HEAP32[$0 >> 2] = -1;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function FingerBaseJointRotation__setBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = $1;
}
function Direction2__isUndef_28_29_20const($0) {
return HEAPF32[$0 >> 2] == Math_fround(0) & HEAPF32[$0 + 4 >> 2] == Math_fround(0);
}
function std____2__error_category__operator___28std____2__error_category_20const__29_20const($0, $1) {
return ($0 | 0) == ($1 | 0);
}
function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
$0 = $0 | 0;
return std__type_info___type_info_28_29($0) | 0;
}
function _GLOBAL__sub_I_Handshape_cpp() {
__cxx_global_var_init_42();
__cxx_global_var_init_1_33();
__cxx_global_var_init_2_15();
}
function ThumbBaseJointRotation__setBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = $1;
}
function SHMScalarController__reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function Quaternion__setPositivePhase_28_29($0) {
if (HEAPF32[$0 + 12 >> 2] < Math_fround(0)) {
Quaternion__setFlip_28_29($0);
}
}
function MergeDefaultSiteIDs_28SiteID_2c_20SiteID_29($0, $1, $2) {
HEAP32[$0 >> 2] = HEAP32[(HEAPU8[$1 | 0] == 21 ? $1 : $2) >> 2];
}
function FingerPlayMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
}
function Direction2__Direction2_28float_2c_20float_29($0, $1, $2) {
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 >> 2] = $1;
return $0;
}
function std____2__system_error___system_error_28_29($0) {
$0 = $0 | 0;
return std__runtime_error___runtime_error_28_29($0) | 0;
}
function _GLOBAL__sub_I_Gesture_cpp() {
__cxx_global_var_init_40();
__cxx_global_var_init_1_31();
__cxx_global_var_init_2_13();
}
function XmlParseXmlDecl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
return doParseXmlDecl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
}
function VectorController2__reset_28_29($0) {
$0 = $0 | 0;
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, Math_fround(0));
}
function TurretJointRotation__setSplayAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 36 >> 2] = $1;
}
function StringToMorphTempo_28char_20const__29($0) {
if (!$0) {
return 0;
}
return CharToMorphTempo_28char_29(HEAP8[$0 | 0]);
}
function SeqMovement___SeqMovement_28_29_1($0) {
$0 = $0 | 0;
operator_20delete_28void__29(SeqMovement___SeqMovement_28_29($0));
}
function OneHGesture__isRightHand_28_29_20const($0) {
return HEAPU8[$0 | 0] == (HEAPU8[HEAP32[$0 + 72 >> 2] + 13 | 0] >>> 6 & 1);
}
function OneHConcretePosture__addTo_targetLoc_28Vector_20const__29($0, $1) {
Vector__setAdd_28Vector_20const__29($0 + 4 | 0, $1);
}
function NoMovement___NoMovement_28_29($0) {
$0 = $0 | 0;
operator_20delete_28void__29(BasicMovement___BasicMovement_28_29($0));
}
function TurretJointRotation__setBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 32 >> 2] = $1;
}
function Direction3__Direction3_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29($0, $1) {
return pthread_cond_wait($0, $1);
}
function std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____get_28_29_20const($0) {
return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____get_28_29_20const($0) {
return $0;
}
function errorProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return HEAP32[$0 + 268 >> 2];
}
function HingeJointRotation__setBendAngle_28float_29($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 20 >> 2] = $1;
}
function FingerPlayMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
}
function AtomicNonmanual__setFrom_28NonmanualItems_2c_20short_29($0, $1, $2) {
HEAP16[$0 + 4 >> 1] = $2;
HEAP32[$0 >> 2] = $1;
}
function std__bad_alloc__bad_alloc_28_29($0) {
$0 = std__exception__exception_28_29($0);
HEAP32[$0 >> 2] = 58788;
return $0;
}
function _GLOBAL__sub_I_Test_cpp() {
__cxx_global_var_init_22();
__cxx_global_var_init_14_1();
__cxx_global_var_init_1_15();
}
function _GLOBAL__sub_I_Site_cpp() {
__cxx_global_var_init_36();
__cxx_global_var_init_1_27();
__cxx_global_var_init_2_10();
}
function Vector__setSubtract_28Vector_20const__29_1($0, $1) {
if ($1) {
Vector__setSubtract_28Vector_20const__29($0, $1);
}
}
function JointRotation__operator__28JointRotation_20const__29($0, $1) {
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
return $0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____invalidate_iterators_past_28SSPRSet___29($0, $1) {}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_iterators_past_28SSMorph___29($0, $1) {}
function std____2__numeric_limits_long___max_28_29() {
return std____2____libcpp_numeric_limits_long_2c_20true___max_28_29();
}
function std____2__locale___locale_28_29($0) {
std____2____shared_count____release_shared_28_29(HEAP32[$0 >> 2]);
return $0;
}
function std____2____libcpp_condvar_broadcast_28pthread_cond_t__29($0) {
$0 = $0 | 0;
return pthread_cond_broadcast($0) | 0;
}
function WristMovement__offset1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
}
function std__bad_cast__bad_cast_28_29($0) {
$0 = std__exception__exception_28_29($0);
HEAP32[$0 >> 2] = 59032;
return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const($0) {
return HEAP32[$0 + 72 >> 2];
}
function setThrew($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (!HEAP32[19359]) {
HEAP32[19360] = $1;
HEAP32[19359] = $0;
}
}
function HashChainItem_SiGML_Element_2c_20void_20_28__29_28Gesture__2c_20XMLCell__29____HashChainItem_28_29($0) {
return $0;
}
function std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29($0) {
return $0 - 12 | 0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0) {
return $0;
}
function __cxx_global_var_init_5_3() {
Mirroring__Mirroring_28short_2c_20short_2c_20short_2c_20short_29(70298, 0, 1, 0, 0);
}
function Timings__Timings_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
return $0;
}
function JointRotation__JointRotation_28Joint__29($0, $1) {
HEAP32[$0 + 4 >> 2] = $1;
HEAP32[$0 >> 2] = 59644;
return $0;
}
function Getopts__FlagOption_28char_20const__29($0, $1) {
return (Getopts__OptionCount_28char_20const__29($0, $1) | 0) > 0;
}
function operator_20new_5b_5d_28unsigned_20long_29($0) {
$0 = $0 | 0;
return operator_20new_28unsigned_20long_29($0) | 0;
}
function WristMovement__set1FinalPos_28Vector_20const__2c_20bool_29($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
}
function BasicMovement__operator__28BasicMovement_20const__29($0, $1) {
__memcpy($0 + 4 | 0, $1 + 4 | 0, 524);
return $0;
}
function AnimgenInstance__Init_28_29() {
var $0 = 0;
$0 = HEAP32[18872];
if (!$0) {
HEAP32[18872] = 1;
}
return !$0;
}
function std____2____libcpp_mutex_unlock_28pthread_mutex_t__29($0) {
$0 = $0 | 0;
return __pthread_mutex_unlock($0) | 0;
}
function Transform__setZero_28_29($0) {
$0 = $0 | 0;
Vector__setZero_28_29($0);
Quaternion__setZero_28_29($0 + 12 | 0);
}
function HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29____HashChainItem_28_29($0) {
return $0;
}
function std____2____non_trivial_if_true_2c_20std____2__allocator_SSPRSet___20_____non_trivial_if_28_29($0) {
return $0;
}
function std____2____non_trivial_if_true_2c_20std____2__allocator_SSMorph___20_____non_trivial_if_28_29($0) {
return $0;
}
function PostureChangeTiming__PostureChangeTiming_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_SSPRSet___2c_201_2c_20true_____get_28_29($0) {
return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_SSMorph___2c_201_2c_20true_____get_28_29($0) {
return $0;
}
function DynamicString___DynamicString_28_29($0) {
return DynamicArray_char_2c_20_28char_290____DynamicArray_28_29($0);
}
function XML_ErrorString($0) {
var $1 = 0;
$1 = $0 - 1 >>> 0 <= 39 ? HEAP32[($0 << 2) + 63312 >> 2] : $1;
return $1;
}
function SiteIDPair__setUndefined_28_29($0) {
SiteID__setUndefined_28_29($0);
SiteID__setUndefined_28_29($0 + 4 | 0);
}
function SSPRSet___SSPRSet_28_29_1($0) {
$0 = $0 | 0;
SSPRSet___SSPRSet_28_29($0);
operator_20delete_28void__29($0);
}
function SSMorph___SSMorph_28_29_1($0) {
$0 = $0 | 0;
SSMorph___SSMorph_28_29($0);
operator_20delete_28void__29($0);
}
function SSFrame___SSFrame_28_29_1($0) {
$0 = $0 | 0;
SSFrame___SSFrame_28_29($0);
operator_20delete_28void__29($0);
}
function std____2____libcpp_mutex_lock_28pthread_mutex_t__29($0) {
$0 = $0 | 0;
return __pthread_mutex_lock($0) | 0;
}
function eputs_28char_20const__29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[16886];
if ($1) {
fputs($0, $1);
}
}
function Direction3__set_handedVector_28bool_29($0, $1) {
if (!$1) {
Direction3__set_leftHandedVector_28_29($0);
}
}
function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
HEAP8[$0 | 0] = HEAPU8[$1 | 0];
}
function std____2____non_trivial_if_true_2c_20std____2__allocator_char__20_____non_trivial_if_28_29($0) {
return $0;
}
function error($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
return 0;
}
function TurretJointRotation__setZero_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 32 >> 2] = 0;
HEAP32[$0 + 36 >> 2] = 0;
}
function std__terminate_28_29() {
std____terminate_28void_20_28__29_28_29_29(std__get_terminate_28_29());
abort();
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0) {
return $0;
}
function SetJRPZero_28JointRotation__29($0) {
if ($0) {
FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
}
}
function KeyOps_int___hashFunction_28int_2c_20int_29($0, $1) {
return intHash_28unsigned_20int_2c_20int_29($0, $1);
}
function GetNewJointRotation_28Joint__29($0) {
if (!$0) {
return 0;
}
return Joint__NewJointRotation_28_29($0);
}
function GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function DegreesToRadians_28float_29($0) {
return Math_fround(Math_fround(HEAPF32[17509] / Math_fround(180)) * $0);
}
function Transform__quat_28_29_20const($0, $1) {
Quaternion__Quaternion_28Quaternion_20const__29($0, $1 + 12 | 0);
}
function KeyOps_SiGML_Element___eqkey_28SiGML_Element_2c_20SiGML_Element_29($0, $1) {
return ($0 | 0) == ($1 | 0);
}
function HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int______HashChainItem_28_29($0) {
return $0;
}
function BasicMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function AtomicNonmanual__defined_28_29_20const($0) {
return HEAP32[$0 >> 2] != 0 | HEAPU16[$0 + 4 >> 1] != 65535;
}
function std____2____wrap_iter_SSMorph_______wrap_iter_28SSMorph___29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function bool_20__libcpp_isinf_float__28float_29($0) {
return Math_fround(Math_abs($0)) == Math_fround(infinity);
}
function __cxx_global_var_init_31_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[17074];
HEAPF32[17076] = $0 + $0;
}
function __cxx_global_var_init_29_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[17055];
HEAPF32[17057] = $0 + $0;
}
function __cxx_global_var_init_21_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[17046];
HEAPF32[17054] = $0 + $0;
}
function __cxx_global_var_init_20_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[17054];
HEAPF32[17053] = $0 + $0;
}
function __cxx_global_var_init_14_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[16991];
HEAPF32[16993] = $0 + $0;
}
function __cxx_global_var_init_10_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[16986];
HEAPF32[16987] = $0 + $0;
}
function XMLWrapper__SetHandler_28void_20_28__29_28void__2c_20XMLCell__29_29($0, $1) {
HEAP32[$0 + 12 >> 2] = $1;
}
function SHMScalarController__get_perception_28_29($0) {
$0 = $0 | 0;
return Math_fround(HEAPF32[$0 + 80 >> 2]);
}
function Direction3__set_handedAxis_28bool_29($0, $1) {
if (!$1) {
Direction3__set_leftHandedAxis_28_29($0);
}
}
function Direction3__setZero_28_29($0) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
}
function fputs($0, $1) {
var $2 = 0;
$2 = strlen($0);
return ($2 | 0) != (fwrite($0, 1, $2, $1) | 0) ? -1 : 0;
}
function __cxx_global_var_init_9_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[16979];
HEAPF32[16986] = $0 + $0;
}
function __cxx_global_var_init_6_2() {
var $0 = Math_fround(0);
$0 = HEAPF32[17037];
HEAPF32[17045] = $0 + $0;
}
function __cxx_global_var_init_613() {
var $0 = Math_fround(0);
$0 = HEAPF32[17095];
HEAPF32[17509] = $0 + $0;
}
function __cxx_global_var_init_567() {
var $0 = Math_fround(0);
$0 = HEAPF32[17625];
HEAPF32[17668] = $0 + $0;
}
function __cxx_global_var_init_566() {
var $0 = Math_fround(0);
$0 = HEAPF32[17668];
HEAPF32[17667] = $0 + $0;
}
function __cxx_global_var_init_4_1() {
var $0 = Math_fround(0);
$0 = HEAPF32[16996];
HEAPF32[17002] = $0 + $0;
}
function __cxx_global_var_init_397() {
var $0 = Math_fround(0);
$0 = HEAPF32[17676];
HEAPF32[18867] = $0 + $0;
}
function __cxx_global_var_init_138() {
var $0 = Math_fround(0);
$0 = HEAPF32[17065];
HEAPF32[17071] = $0 + $0;
}
function SeqMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function SHMScalarController__get_reference_28_29($0) {
$0 = $0 | 0;
return Math_fround(HEAPF32[$0 + 76 >> 2]);
}
function ParMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function MannerFlags__setZero_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP8[$0 + 8 | 0] = 0;
}
function JointRotation__JointRotation_28_29($0) {
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 >> 2] = 59644;
return $0;
}
function GestureFlags__haveRight_28_29_20const($0) {
$0 = HEAPU8[$0 | 0];
return ($0 & ($0 & 64 ? 4 : 8)) != 0;
}
function DynamicArrayP_Joint___operator_5b_5d_28int_29_20const($0, $1) {
return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____invalidate_all_iterators_28_29($0) {}
function std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____invalidate_all_iterators_28_29($0) {}
function stackAlloc($0) {
$0 = $0 | 0;
$0 = __stack_pointer - $0 & -16;
__stack_pointer = $0;
return $0 | 0;
}
function printIndent_28_IO_FILE__29($0) {
$0 = $0 | 0;
printIndent_28_IO_FILE__2c_20int_29($0, HEAP16[33801]);
}
function __cxx_global_var_init_61() {
var $0 = Math_fround(0);
$0 = HEAPF32[16940];
HEAPF32[16976] = $0 + $0;
}
function __cxx_global_var_init_53() {
var $0 = Math_fround(0);
$0 = HEAPF32[17077];
HEAPF32[17089] = $0 + $0;
}
function __cxx_global_var_init_24() {
var $0 = Math_fround(0);
$0 = HEAPF32[16884];
HEAPF32[16902] = $0 + $0;
}
function __cxx_global_var_init_23() {
var $0 = Math_fround(0);
$0 = HEAPF32[16902];
HEAPF32[16901] = $0 + $0;
}
function SiGMLHandshape__IsFistAroundThumb_28_29($0) {
return HEAP32[$0 >> 2] == 1 & HEAPU8[$0 + 216 | 0] != 0;
}
function Quaternion__length_28_29_20const($0) {
return sqrt_28float_29(Quaternion__lengthsq_28_29_20const($0));
}
function NoMovement__setOwnMotionAttributes_28MotionAttributes_20const__29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function GestureFlags__haveLeft_28_29_20const($0) {
$0 = HEAPU8[$0 | 0];
return ($0 & ($0 & 64 ? 8 : 4)) != 0;
}
function GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function __cxx_global_array_dtor_1($0) {
$0 = $0 | 0;
std____2__error_category___error_category_28_29(66080);
}
function _GLOBAL__sub_I_SphereInterpolation_cpp() {
__cxx_global_var_init_21();
__cxx_global_var_init_1_14();
}
function Vector__flip_x_28_29($0) {
$0 = (HEAP16[24298] << 2) + $0 | 0;
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
function TwoArmAnimator__selectRightLeft_28SideIndex_29($0, $1) {
return (($1 | 0) == 1 ? 16 : 3572) + $0 | 0;
}
function TokenStream__TokenStream_28_29($0) {
$0 = $0 | 0;
TokenStream__initialise_28_29($0);
return $0 | 0;
}
function KeyOps_char_20const____eqkey_28char_20const__2c_20char_20const__29($0, $1) {
return !strcmp($0, $1);
}
function void_20std____2____libcpp_operator_delete_void___28void__29($0) {
operator_20delete_28void__29($0);
}
function std__bad_cast___bad_cast_28_29($0) {
$0 = $0 | 0;
return std__exception___exception_28_29($0) | 0;
}
function std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29_20const($0) {
return $0;
}
function std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29_20const($0) {
return $0;
}
function eputc_28char_29($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[16886];
if ($1) {
fputc($0, $1);
}
}
function _GLOBAL__sub_I_animgenlibglobals_cpp() {
__cxx_global_var_init_50();
__cxx_global_var_init_1_41();
}
function SiteIDPair__defined_28_29_20const($0) {
$0 = $0 | 0;
return SiteID__defined_28_29_20const($0) | 0;
}
function BasicMovement__setManner_28Manner_29($0, $1) {
MannerFlags__addManner_28Manner_29($0 + 12 | 0, $1);
}
function minREAL_28float_2c_20float_29($0, $1) {
return float_20XXmin_float__28float_2c_20float_29($0, $1);
}
function SiteIDPair__isUndef_28_29_20const($0) {
$0 = $0 | 0;
return SiteID__isUndef_28_29_20const($0) | 0;
}
function GeneralController_Vector_2c_20Vector____GeneralController_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, $1) {
return ($0 | 0) == ($1 | 0);
}
function _GLOBAL__sub_I_AnimgenInstance_cpp() {
__cxx_global_var_init_47();
__cxx_global_var_init_1_38();
}
function _GLOBAL__sub_I_AffineTransform_cpp() {
__cxx_global_var_init_17();
__cxx_global_var_init_1_10();
}
function SiGMLHandshape__isUndef_28_29_20const($0) {
return SiGMLHandshape__defined_28_29_20const($0) ^ 1;
}
function SSMorph___20std____2____rewrap_iter_SSMorph____28SSMorph___2c_20SSMorph___29($0, $1) {
return $1;
}
function trimREAL_28float_2c_20float_2c_20float_29($0, $1, $2) {
return $0 > $1 ? $0 : $1 > $2 ? $2 : $1;
}
function swapc($0, $1) {
return $1 ? $0 << 8 & 16711680 | $0 << 24 | ($0 >>> 8 & 65280 | $0 >>> 24) : $0;
}
function __stdio_close($0) {
$0 = $0 | 0;
return __wasi_fd_close(dummy_1(HEAP32[$0 + 60 >> 2]) | 0) | 0;
}
function _GLOBAL__sub_I_AnimgenOptions_cpp() {
__cxx_global_var_init_48();
__cxx_global_var_init_1_39();
}
function GeneralController_float_2c_20float____GeneralController_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function dynCall_jiji($0, $1, $2, $3, $4) {
$3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
return $3;
}
function _GLOBAL__sub_I_DynamicStrings_cpp() {
__cxx_global_var_init_10();
__cxx_global_var_init_1_3();
}
function SiteID__defined_28_29_20const($0) {
$0 = $0 | 0;
return SiteID__isUndef_28_29_20const($0) ^ 1;
}
function SignFlags__reset_28_29($0) {
HEAP8[$0 + 2 | 0] = 0;
HEAP8[$0 | 0] = 0;
HEAP8[$0 + 1 | 0] = 0;
}
function Quaternion__Quaternion_28_29($0) {
$0 = $0 | 0;
Quaternion__setZero_28_29($0);
return $0 | 0;
}
function FingerBending__isUndef_28_29_20const($0) {
return FingerBending__defined_28_29_20const($0) ^ 1;
}
function short_20maxScalar_short__28short_2c_20short_29($0, $1) {
return ($0 | 0) > ($1 | 0) ? $0 : $1;
}
function isArmHandLocation_28int_29($0) {
$0 = $0 | 0;
return isArmHandLocation_28Location_29($0) | 0;
}
function Vector__length_28_29_20const($0) {
return sqrt_28float_29(Vector__lengthsq_28_29_20const($0));
}
function GeneralController_Vector_2c_20Vector____GeneralController_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function ThumbBending__isUndef_28_29_20const($0) {
return ThumbBending__defined_28_29_20const($0) ^ 1;
}
function MakeSiteID_28Location_29($0, $1) {
MakeSiteID_28Location_2c_20AbsoluteBodySide_29($0, $1, 0);
}
function GestureFlags__GestureFlags_28_29($0) {
HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 128 | 64;
return $0;
}
function Direction2__Direction2_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
return $0;
}
function _GLOBAL__sub_I_XMLWrapper_cpp() {
__cxx_global_var_init_46();
__cxx_global_var_init_1_37();
}
function _GLOBAL__sub_I_Trajectory_cpp() {
__cxx_global_var_init_39();
__cxx_global_var_init_1_30();
}
function HashChainItem_char_20const__2c_20AbstractTimedMorph_____HashChainItem_28_29($0) {
return $0;
}
function GeneralError__GeneralError_28GeneralErrorCode_29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function GeneralController_float_2c_20float____GeneralController_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function std____2____compressed_pair_elem_SSPRSet___2c_200_2c_20false_____get_28_29($0) {
return $0;
}
function std____2____compressed_pair_elem_SSMorph___2c_200_2c_20false_____get_28_29($0) {
return $0;
}
function _GLOBAL__sub_I_Transform_cpp() {
__cxx_global_var_init_25();
__cxx_global_var_init_1_16();
}
function XMLCell__print_28_IO_FILE__29($0, $1) {
XMLCell__print_28_IO_FILE__2c_20int_29($0, $1, $0);
}
function QuatJointRotation__setZero_28_29($0) {
$0 = $0 | 0;
Quaternion__setZero_28_29($0 + 8 | 0);
}
function PrintCASXMLFooter_28_IO_FILE__29($0) {
if ($0) {
fputs(32141, $0);
fputs(32152, $0);
}
}
function HashChainItem_char_20const__20const_2c_20AvatarType____HashChainItem_28_29($0) {
return $0;
}
function std____2____wrap_iter_SSMorph__20const____base_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function animgenDeAllocate($0) {
$0 = $0 | 0;
return AnimgenInstance__DeAllocate_28int_29($0) | 0;
}
function _GLOBAL__sub_I_MiscMath_cpp() {
__cxx_global_var_init_19();
__cxx_global_var_init_1_12();
}
function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
return HEAP32[$0 + $1 >> 2];
}
function strchr($0, $1) {
$0 = __strchrnul($0, $1);
return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
}
function _GLOBAL__sub_I_Filepath_cpp() {
__cxx_global_var_init_11();
__cxx_global_var_init_1_4();
}
function Getopts__Getopts_28_29($0) {
$0 = $0 | 0;
Getopts__initialise_28_29($0);
return $0 | 0;
}
function Direction3__defined_28_29_20const($0) {
return Direction3__isUndef_28_29_20const($0) ^ 1;
}
function Direction2__defined_28_29_20const($0) {
return Direction2__isUndef_28_29_20const($0) ^ 1;
}
function AnimgenError__AnimgenError_28AnimgenStatus_29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
return $0;
}
function _GLOBAL__sub_I_getopts_cpp() {
__cxx_global_var_init_16();
__cxx_global_var_init_1_9();
}
function _GLOBAL__sub_I_Version_cpp() {
__cxx_global_var_init_15();
__cxx_global_var_init_1_8();
}
function Handshape__defined_28_29_20const($0) {
return SiGMLHandshape__defined_28_29_20const($0);
}
function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
return $0;
}
function __wasm_ctz_i32($0) {
if ($0) {
return 31 - Math_clz32($0 - 1 ^ $0) | 0;
}
return 32;
}
function __FLOAT_BITS_1($0) {
return wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2);
}
function _GLOBAL__sub_I_SSPRSet_cpp() {
__cxx_global_var_init_2();
__cxx_global_var_init_1_1();
}
function _GLOBAL__sub_I_Joint_cpp() {
__cxx_global_var_init_33();
__cxx_global_var_init_1_24();
}
function PostureChangeFlags__sets_handRot_28_29_20const($0) {
return (HEAPU8[$0 | 0] & 48) != 0;
}
function PostureChangeFlags__sets_handPos_28_29_20const($0) {
return (HEAPU8[$0 | 0] & 15) != 0;
}
function Handshape__isUndef_28_29_20const($0) {
return Handshape__defined_28_29_20const($0) ^ 1;
}
function std____2__error_code__operator_20bool_28_29_20const($0) {
return HEAP32[$0 >> 2] != 0;
}
function int_20maxScalar_int__28int_2c_20int_29($0, $1) {
return ($0 | 0) > ($1 | 0) ? $0 : $1;
}
function _GLOBAL__sub_I_SAMPA_cpp() {
__cxx_global_var_init_14();
__cxx_global_var_init_1_7();
}
function HashChainItem_char_20const__2c_20char_20const_____HashChainItem_28_29($0) {
return $0;
}
function FaceAnimator__setMovement_28NonmanualMovement___29($0, $1) {
HEAP32[$0 + 8 >> 2] = $1;
}
function strnlen($0, $1) {
var $2 = 0;
$2 = memchr($0, 0, $1);
return $2 ? $2 - $0 | 0 : $1;
}
function errorSize_28Quaternion_20const__29($0) {
return Quaternion__length_28_29_20const($0);
}
function __FLOAT_BITS($0) {
return wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2);
}
function _GLOBAL__sub_I_Hash_cpp() {
__cxx_global_var_init_12();
__cxx_global_var_init_1_5();
}
function SiteID__asInt_28_29_20const($0) {
return HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 | 0] << 16;
}
function HashAny_char_20const__2c_20char_20const____Iterator___Iterator_28_29($0) {
return $0;
}
function std__uncaught_exception_28_29() {
return (std__uncaught_exceptions_28_29() | 0) > 0;
}
function Vector__setUnit_28_29($0) {
return Vector__setLength_28float_29($0, Math_fround(1));
}
function SiteID__defaultProximity_28_29($0) {
SiteID__defaultProximity_28Proximity_29($0, 0);
}
function DynamicArrayP_char_20const___getElements_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function std____2__error_condition__category_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2];
}
function std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() {
return 2147483647;
}
function _GLOBAL__sub_I_SSMorph_cpp() {
__cxx_global_var_init();
__cxx_global_var_init_1();
}
function _GLOBAL__sub_I_IO_cpp() {
__cxx_global_var_init_13();
__cxx_global_var_init_1_6();
}
function SiteID__SiteID_28_29($0) {
HEAP16[$0 >> 1] = 0;
HEAP8[$0 + 2 | 0] = 0;
return $0;
}
function std____2__error_category___error_category_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function std____2____wrap_iter_SSMorph_____base_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function std____2____iostream_category__name_28_29_20const($0) {
$0 = $0 | 0;
return 6634;
}
function isExtremityLocation_28short_29($0) {
return isExtremityLocation_28Location_29($0);
}
function intHash_28unsigned_20int_2c_20int_29($0, $1) {
return ($0 >>> 0) % ($1 >>> 0) | 0;
}
function __cxx_global_var_init_9_3() {
SphereInterpolator__SphereInterpolator_28_29(69512);
}
function __cxx_global_var_init_8_2() {
SphereInterpolator__SphereInterpolator_28_29(69172);
}
function Mirroring__Mirroring_28_29($0) {
HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240;
return $0;
}
function Direction3__set_leftHandedVector_28_29($0) {
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
function Direction2__set_leftHandedVector_28_29($0) {
HEAPF32[$0 >> 2] = -HEAPF32[$0 >> 2];
}
function std____2____vector_base_common_true_____vector_base_common_28_29($0) {
return $0;
}
function std____2____iom_t5____iom_t5_28int_29($0, $1) {
HEAP32[$0 >> 2] = $1;
return $0;
}
function __cxx_global_var_init_11_1() {
HEAPF32[16988] = HEAPF32[16980] * Math_fround(.5);
}
function TargettedMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function MakeSetOfHands_28bool_2c_20bool_29($0, $1) {
return $0 ? $1 ? 5 : 1 : $1 ? 2 : 0;
}
function HashChainItem_char_20const__2c_20Gesture_____HashChainItem_28_29($0) {
return $0;
}
function __cxx_global_var_init_569() {
HEAPF32[17670] = HEAPF32[17668] / Math_fround(30);
}
function __cxx_global_var_init_568() {
HEAPF32[17669] = HEAPF32[17668] / Math_fround(10);
}
function __cxx_global_var_init_544() {
HEAPF32[17660] = HEAPF32[17626] * Math_fround(.5);
}
function __cxx_global_var_init_393() {
HEAPF32[17685] = HEAPF32[17677] * Math_fround(.5);
}
function OneHConcretePostureModifier___OneHConcretePostureModifier_28_29($0) {
return $0;
}
function MannerFlags__MannerFlags_28_29($0) {
MannerFlags__setZero_28_29($0);
return $0;
}
function DirectedMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function CircularMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function AbstractTimedMorph___AbstractTimedMorph_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function std____2__char_traits_char___length_28char_20const__29($0) {
return strlen($0);
}
function std____2____libcpp_refstring__c_str_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function OneArmAnimator__setMovement_28BasicMovement__29($0, $1) {
HEAP32[$0 >> 2] = $1;
}
function HingeJointRotation__setZero_28_29($0) {
$0 = $0 | 0;
HEAP32[$0 + 20 >> 2] = 0;
}
function HashChainItem_char_20const__2c_20SiteID____HashChainItem_28_29($0) {
return $0;
}
function HashChainItem_SiteID_20const_2c_20Site_____HashChainItem_28_29($0) {
return $0;
}
function std____2__error_code__category_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2];
}
function std____2__allocator_SSPRSet____max_size_28_29_20const($0) {
return 1073741823;
}
function std____2__allocator_SSMorph____max_size_28_29_20const($0) {
return 1073741823;
}
function float_20XXmin_float__28float_2c_20float_29($0, $1) {
return $0 < $1 ? $0 : $1;
}
function __small_vfprintf($0, $1, $2) {
return __vfprintf_internal($0, $1, $2, 897, 0);
}
function XML_ParserCreate($0) {
$0 = $0 | 0;
return XML_ParserCreate_MM($0, 0, 0) | 0;
}
function RepeatMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function HashAny_char_20const__2c_20SiteID___Iterator___Iterator_28_29($0) {
return $0;
}
function Direction2__setZero_28_29($0) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
}
function cot_28float_29($0) {
return tan_28float_29(Math_fround(HEAPF32[17625] - $0));
}
function SplitMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function SiteID__setUndefined_28_29($0) {
HEAP16[$0 >> 1] = 0;
HEAP8[$0 + 2 | 0] = 0;
}
function OneHGesture__invalidate_28_29($0) {
HEAP8[HEAP32[$0 + 72 >> 2] + 12 | 0] = 0;
}
function BasicMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function std____2__error_condition__value_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function makeHands_28bool_2c_20bool_29($0, $1) {
return $0 ? $1 ? 5 : 1 : $1 ? 2 : 0;
}
function isFingerLocation_28short_29($0) {
return isFingerLocation_28Location_29($0);
}
function absREAL_28float_29($0) {
return $0 < Math_fround(0) ? Math_fround(-$0) : $0;
}
function __cxx_global_var_init_5_2() {
GestureGeometry__GestureGeometry_28_29(68592);
}
function TwoHAbstractPosture__right_28bool_29($0, $1) {
return $1 ? $0 : $0 + 72 | 0;
}
function TokenStream__allowQuotedStrings_28bool_29($0, $1) {
HEAP8[$0 + 33 | 0] = $1;
}
function SSPRSet___20std____2____to_address_SSPRSet___28SSPRSet___29($0) {
return $0;
}
function SSMorph___20std____2____to_address_SSMorph___28SSMorph___29($0) {
return $0;
}
function HaveNondomHand_28SET_OF_HANDS_29($0) {
return ($0 | 0) == 2 | ($0 | 0) == 5;
}
function HashChainItem_char_20const__2c_20int____HashChainItem_28_29($0) {
return $0;
}
function AbstractTimedMorph___AbstractTimedMorph_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function std____2____libcpp_refstring____uses_refcount_28_29_20const($0) {
return 1;
}
function out($0, $1, $2) {
if (!(HEAPU8[$0 | 0] & 32)) {
__fwritex($1, $2, $0);
}
}
function TwoHAbstractPosture__left_28bool_29($0, $1) {
return $1 ? $0 + 72 | 0 : $0;
}
function SeqMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function ParMovement__setBodyPart_28Location_29($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
}
function KeyOps_int___eqkey_28int_2c_20int_29($0, $1) {
return ($0 | 0) == ($1 | 0);
}
function HaveRightHand_28SET_OF_HANDS_29($0) {
return ($0 | 0) == 3 | ($0 | 0) == 5;
}
function HashAny_char_20const__2c_20int___Iterator___Iterator_28_29($0) {
return $0;
}
function std__uncaught_exceptions_28_29() {
return __cxa_uncaught_exceptions() | 0;
}
function std__exception__exception_28_29($0) {
HEAP32[$0 >> 2] = 58808;
return $0;
}
function std____2__ios_base__width_28_29_20const($0) {
return HEAP32[$0 + 12 >> 2];
}
function std____2__ios_base__rdbuf_28_29_20const($0) {
return HEAP32[$0 + 24 >> 2];
}
function std____2__ios_base__good_28_29_20const($0) {
return !HEAP32[$0 + 16 >> 2];
}
function operator_20delete_5b_5d_28void__29($0) {
operator_20delete_28void__29($0);
}
function isnan_28float_29($0) {
return bool_20__libcpp_isnan_float__28float_29($0);
}
function isinf_28float_29($0) {
return bool_20__libcpp_isinf_float__28float_29($0);
}
function isHorizontalWhiteSpace_28char_29($0) {
return !($0 & -33) | ($0 | 0) == 9;
}
function __cxx_global_var_init_4_3() {
AvatarGeometry__AvatarGeometry_28_29(68552);
}
function AnimgenInstance__validInst_28int_29($0) {
return !$0 & HEAP32[18872] == 1;
}
function std____2__ios_base__flags_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2];
}
function std____2__char_traits_char___to_int_type_28char_29($0) {
return $0 & 255;
}
function Mirroring__defined_28_29_20const($0) {
return (HEAPU8[$0 | 0] & 15) != 0;
}
function MakeDigit_28DigitIndex_29($0) {
return 1 << ($0 << 16 >> 16) << 16 >> 16;
}
function vfprintf($0, $1, $2) {
return __vfprintf_internal($0, $1, $2, 897, 898);
}
function isHandLocation_28short_29($0) {
return isHandLocation_28Location_29($0);
}
function SignFlags__SignFlags_28_29($0) {
SignFlags__reset_28_29($0);
return $0;
}
function CompoundMovement___CompoundMovement_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function std____2__pointer_traits_char____pointer_to_28char__29($0) {
return $0;
}
function std____2__error_code__value_28_29_20const($0) {
return HEAP32[$0 >> 2];
}
function checkSiGML_28XMLCell__29($0) {
UNIMPLEMENTED_28char_20const__29(11614);
}
function XMLWrapper__SetUserData_28void__29($0, $1) {
HEAP32[$0 + 16 >> 2] = $1;
}
function TokenStream__allowComments_28bool_29($0, $1) {
HEAP8[$0 + 32 | 0] = $1;
}
function OpposedThumbHandshape_28HandshapeType_29($0) {
return $0 - 7 >>> 0 < 6;
}
function Decollider__Decollider_28_29($0) {
HEAP32[$0 >> 2] = 61304;
return $0;
}
function wctomb($0, $1) {
if (!$0) {
return 0;
}
return wcrtomb($0, $1, 0);
}
function isArmLocation_28short_29($0) {
return isArmLocation_28Location_29($0);
}
function abort_message($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
abort();
abort();
}
function __cxx_global_var_init_3_5() {
AvatarTiming__AvatarTiming_28_29(68404);
}
function SSFrame__SetTimestamp_28float_29($0, $1) {
HEAPF32[$0 + 28 >> 2] = $1;
}
function JointRotation___JointRotation_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function vfiprintf($0, $1, $2) {
return __vfprintf_internal($0, $1, $2, 0, 0);
}
function strerror($0) {
return __strerror_l($0, HEAP32[__get_tp() + 88 >> 2]);
}
function SSFrame__SetDuration_28float_29($0, $1) {
HEAPF32[$0 + 32 >> 2] = $1;
}
function Mirroring__isUndef_28_29_20const($0) {
return !(HEAPU8[$0 | 0] & 15);
}
function std__type_info__name_28_29_20const($0) {
return HEAP32[$0 + 4 >> 2];
}
function std__bad_alloc__what_28_29_20const($0) {
$0 = $0 | 0;
return 10744;
}
function setZeroPer2_28Quaternion__29($0) {
Quaternion__setZeroVec_28_29($0);
}
function isSigningSpaceLocation_28Location_29($0) {
return $0 - 16 >>> 0 < 9;
}
function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
$0 = $0 | 0;
}
function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
$0 = $0 | 0;
}
function VRMLRotation__set_a_28float_29($0, $1) {
HEAPF32[$0 + 12 >> 2] = $1;
}
function Mirroring__setZero_28_29($0) {
HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240;
}
function std__exception__what_28_29_20const($0) {
$0 = $0 | 0;
return 5693;
}
function std__exception___exception_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function isMotionElement_28SiGML_Element_29($0) {
return $0 - 18 >>> 0 < 13;
}
function VRMLRotation__set_z_28float_29($0, $1) {
HEAPF32[$0 + 8 >> 2] = $1;
}
function VRMLRotation__set_y_28float_29($0, $1) {
HEAPF32[$0 + 4 >> 2] = $1;
}
function LogTime_28_29() {
return LogTime_28_IO_FILE__29(HEAP32[16886]) | 0;
}
function vsiprintf($0, $1, $2) {
return vsniprintf($0, 2147483647, $1, $2);
}
function std__bad_cast__what_28_29_20const($0) {
$0 = $0 | 0;
return 2036;
}
function std____2__allocator_char___max_size_28_29_20const($0) {
return -1;
}
function YXZRotation__set_z_28float_29($0, $1) {
HEAPF32[$0 + 8 >> 2] = $1;
}
function YXZRotation__set_y_28float_29($0, $1) {
HEAPF32[$0 + 4 >> 2] = $1;
}
function Quaternion__set_w_28float_29($0, $1) {
HEAPF32[$0 + 12 >> 2] = $1;
}
function JointRotation___JointRotation_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function HashChainItem_int_2c_20int____HashChainItem_28_29($0) {
return $0;
}
function BasicMovement___BasicMovement_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function mbsinit($0) {
if (!$0) {
return 1;
}
return !HEAP32[$0 >> 2];
}
function maxREAL_28float_2c_20float_29($0, $1) {
return $0 > $1 ? $0 : $1;
}
function isNewline_28char_29($0) {
return ($0 | 0) == 10 | ($0 | 0) == 13;
}
function VRMLRotation__a_28_29_20const($0) {
return HEAPF32[$0 + 12 >> 2];
}
function SSPRSet__IsRoot_28_29($0) {
return !memcmp($0 + 4 | 0, 11178, 5);
}
function Quaternion__set_z_28float_29($0, $1) {
HEAPF32[$0 + 8 >> 2] = $1;
}
function Quaternion__set_y_28float_29($0, $1) {
HEAPF32[$0 + 4 >> 2] = $1;
}
function char__20std____2____to_address_char__28char__29($0) {
return $0;
}
function __cxx_global_var_init_6_4() {
SignFlags__SignFlags_28_29(70300);
}
function __cxx_global_var_init_4_4() {
Mirroring__Mirroring_28_29(70296);
}
function ZigzagInfo__isUndef_28_29_20const($0) {
return !HEAP32[$0 >> 2];
}
function XMLWrapper__GetUserData_28_29($0) {
return HEAP32[$0 + 16 >> 2];
}
function VRMLRotation__z_28_29_20const($0) {
return HEAPF32[$0 + 8 >> 2];
}
function VRMLRotation__y_28_29_20const($0) {
return HEAPF32[$0 + 4 >> 2];
}
function Decollider___Decollider_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function emscripten_get_heap_size() {
return __wasm_memory_size() << 16;
}
function VRMLRotation__set_x_28float_29($0, $1) {
HEAPF32[$0 >> 2] = $1;
}
function Quaternion__w_28_29_20const($0) {
return HEAPF32[$0 + 12 >> 2];
}
function bool_20__libcpp_isnan_float__28float_29($0) {
return $0 != $0;
}
function YXZRotation__set_x_28float_29($0, $1) {
HEAPF32[$0 >> 2] = $1;
}
function UNIMPLEMENTED_28char_20const__29($0) {
$0 = $0 | 0;
return 1;
}
function ShoulderConstraint___ShoulderConstraint_28_29($0) {
return $0;
}
function Quaternion__z_28_29_20const($0) {
return HEAPF32[$0 + 8 >> 2];
}
function Quaternion__y_28_29_20const($0) {
return HEAPF32[$0 + 4 >> 2];
}
function PostureChangeFlags___PostureChangeFlags_28_29($0) {
return $0;
}
function HasDigit_28short_2c_20short_29($0, $1) {
return $0 >>> $1 & 1;
}
function std____2__allocator_SSPRSet____destroy_28SSPRSet___29($0, $1) {}
function std____2__allocator_SSMorph____destroy_28SSMorph___29($0, $1) {}
function isHeadLocation_28Location_29($0) {
return $0 - 25 >>> 0 < 19;
}
function isFingerLocation_28Location_29($0) {
return $0 - 7 >>> 0 < 5;
}
function Vector__set_z_28float_29($0, $1) {
HEAPF32[$0 + 8 >> 2] = $1;
}
function Vector__set_y_28float_29($0, $1) {
HEAPF32[$0 + 4 >> 2] = $1;
}
function Quaternion__set_x_28float_29($0, $1) {
HEAPF32[$0 >> 2] = $1;
}
function isHandLocation_28Location_29($0) {
return $0 - 1 >>> 0 < 11;
}
function atan2_28float_2c_20float_29($0, $1) {
return atan2f($0, $1);
}
function __cxx_global_var_init_3_9() {
Timings__Timings_28_29(75592);
}
function XMLWrapper___XMLWrapper_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function WaggleTrajectory_28float_29($0) {
return sin_28float_29($0);
}
function VRMLRotation__x_28_29_20const($0) {
return HEAPF32[$0 >> 2];
}
function TorsoCurve__farright_28_29_20const($0) {
return $0 + 48 | 0;
}
function Decollider___Decollider_28_29_1($0) {
$0 = $0 | 0;
abort();
}
function ConstellationInfo___ConstellationInfo_28_29($0) {
return $0;
}
function safeString_28char_20const__29($0) {
return $0 ? $0 : 14681;
}
function __cxx_global_var_init_3_1() {
HEAP8[67564] = HEAPU8[59176];
}
function __cxx_global_var_init_2_1() {
HEAP8[67559] = HEAPU8[59176];
}
function HaveLeftHand_28SET_OF_HANDS_29($0) {
return ($0 & -2) == 4;
}
function Vector__z_28_29_20const($0) {
return HEAPF32[$0 + 8 >> 2];
}
function Vector__y_28_29_20const($0) {
return HEAPF32[$0 + 4 >> 2];
}
function TrajectoryParams___TrajectoryParams_28_29($0) {
return $0;
}
function TorsoCurve__centre_28_29_20const($0) {
return $0 + 24 | 0;
}
function SSPRSet___SSPRSet_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function SSMorph___SSMorph_28_29($0) {
$0 = $0 | 0;
return $0 | 0;
}
function Quaternion__x_28_29_20const($0) {
return HEAPF32[$0 >> 2];
}
function OneHCircMoveSpec___OneHCircMoveSpec_28_29($0) {
return $0;
}
function HaveDomHand_28SET_OF_HANDS_29($0) {
return ($0 & -5) == 1;
}
function softLocation_28Location_29($0) {
return $0 - 7 >>> 0 < 2;
}
function isArmLocation_28Location_29($0) {
return ($0 & -4) == 12;
}
function animgenInit() {
return AnimgenInstance__Init_28_29() | 0;
}
function __cxx_global_var_init_9() {
HEAP8[67600] = HEAPU8[59176];
}
function __cxx_global_var_init_8() {
HEAP8[67599] = HEAPU8[59176];
}
function __cxx_global_var_init_7() {
HEAP8[67578] = HEAPU8[59176];
}
function __cxx_global_var_init_6() {
HEAP8[67570] = HEAPU8[59176];
}
function __cxx_global_var_init_546() {
HEAP32[17662] = 1036809590;
}
function __cxx_global_var_init_545() {
HEAP32[17661] = 1065269400;
}
function __cxx_global_var_init_5() {
HEAP8[67569] = HEAPU8[59176];
}
function __cxx_global_var_init_4() {
HEAP8[67568] = HEAPU8[59176];
}
function __cxx_global_var_init_2_2() {
HEAP32[16981] = 1060439283;
}
function __cxa_pure_virtual() {
abort_message(15265, 0);
abort();
}
function Vector__set_x_28float_29($0, $1) {
HEAPF32[$0 >> 2] = $1;
}
function TorsoCurve__right_28_29_20const($0) {
return $0 + 36 | 0;
}
function strncpy($0, $1, $2) {
__stpncpy($0, $1, $2);
return $0;
}
function sqrt_28float_29($0) {
return Math_fround(Math_sqrt($0));
}
function TorsoCurve__left_28_29_20const($0) {
return $0 + 12 | 0;
}
function ResetSiGMLFlags_28_29() {
SignFlags__reset_28_29(70300);
}
function BasicMovement__FinaliseGestures_28_29($0) {
$0 = $0 | 0;
}
function AvatarNameIndex___AvatarNameIndex_28_29($0) {
return $0;
}
function AtomicNonmanual___AtomicNonmanual_28_29($0) {
return $0;
}
function AnimgenInstance___AnimgenInstance_28_29($0) {
return $0;
}
function isspace($0) {
return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
}
function isNever($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return 0;
}
function __emscripten_stdout_close($0) {
$0 = $0 | 0;
return 0;
}
function Site__getGlobalPosition_28_29($0) {
return $0 + 40 | 0;
}
function MakeXMLParser_28_29() {
return MakeExpatParser_28_29();
}
function stackRestore($0) {
$0 = $0 | 0;
__stack_pointer = $0;
}
function Vector__x_28_29_20const($0) {
return HEAPF32[$0 >> 2];
}
function Site__getLocalPosition_28_29($0) {
return $0 + 28 | 0;
}
function std____2__char_traits_char___eof_28_29() {
return -1;
}
function XML_GetErrorCode($0) {
return HEAP32[$0 + 268 >> 2];
}
function TorsoCurve__farright_28_29($0) {
return $0 + 48 | 0;
}
function StaticArmData___StaticArmData_28_29($0) {
return $0;
}
function FingerBending___FingerBending_28_29($0) {
return $0;
}
function __lctrans($0, $1) {
return __lctrans_impl($0, $1);
}
function TorsoCurve__farleft_28_29_20const($0) {
return $0;
}
function TorsoCurve__centre_28_29($0) {
return $0 + 24 | 0;
}
function ThumbBending___ThumbBending_28_29($0) {
return $0;
}
function OneHandStuff___OneHandStuff_28_29($0) {
return $0;
}
function std__type_info___type_info_28_29($0) {
return $0;
}
function sqr_28float_29($0) {
return Math_fround($0 * $0);
}
function TorsoCurve__right_28_29($0) {
return $0 + 36 | 0;
}
function AnchorChar_28bool_29($0) {
return $0 ? 120 : 101;
}
function tolower($0) {
return isupper($0) ? $0 | 32 : $0;
}
function sq_28float_29($0) {
return Math_fround($0 * $0);
}
function localtime($0) {
return __localtime_r($0, 75728);
}
function TorsoCurve__left_28_29($0) {
return $0 + 12 | 0;
}
function stat($0, $1) {
return fstatat(-100, $0, $1, 0);
}
function XmlPrologStateInit($0) {
HEAP32[$0 >> 2] = 778;
}
function strcpy($0, $1) {
__stpcpy($0, $1);
return $0;
}
function sqrtf($0) {
return Math_fround(Math_sqrt($0));
}
function operator_20delete_28void__29($0) {
dlfree($0);
}
function SiteIDPair___SiteIDPair_28_29($0) {
return $0;
}
function ParserData___ParserData_28_29($0) {
return $0;
}
function Controller___Controller_28_29($0) {
return $0;
}
function fabsf($0) {
return Math_fround(Math_abs($0));
}
function boolchar_28bool_29($0) {
return $0 ? 84 : 70;
}
function VersionString_28_29() {
return HEAP32[16933];
}
function NondomSide_28bool_29($0) {
return $0 ? 2 : 1;
}
function __ofl_lock() {
__lock(75772);
return 75776;
}
function XmlGetUtf8InternalEncoding() {
return 63884;
}
function VersionDate_28_29() {
return HEAP32[16930];
}
function Vector__yref_28_29($0) {
return $0 + 4 | 0;
}
function TorsoCurve__farleft_28_29($0) {
return $0;
}
function DomSide_28bool_29($0) {
return $0 ? 1 : 2;
}
function tzset() {
_tzset_js(75648, 75652, 75656);
}
function stackSave() {
return __stack_pointer | 0;
}
function emscripten_futex_wake($0, $1) {
return 0;
}
function XmlSizeOfUnknownEncoding() {
return 1908;
}
function isupper($0) {
return $0 - 65 >>> 0 < 26;
}
function isdigit($0) {
return $0 - 48 >>> 0 < 10;
}
function asin_28float_29($0) {
return asinf($0);
}
function acos_28float_29($0) {
return acosf($0);
}
function UnimplSiGML_28_29() {
HEAP8[70302] = 1;
}
function FailedSiGML_28_29() {
HEAP8[70300] = 1;
}
function pthread_cond_broadcast($0) {
return 0;
}
function __pthread_mutex_unlock($0) {
return 0;
}
function tan_28float_29($0) {
return tanf($0);
}
function sin_28float_29($0) {
return sinf($0);
}
function pthread_cond_wait($0, $1) {
return 0;
}
function getpid() {
return __syscall_getpid();
}
function cos_28float_29($0) {
return cosf($0);
}
function SHOW_UNIMPLEMENTED_28_IO_FILE__29($0) {}
function __pthread_mutex_lock($0) {
return 0;
}
function __cxa_atexit($0, $1, $2) {
return 0;
}
function BadSiGML_28_29() {
HEAP8[70301] = 1;
}
function common($0) {
HEAP32[$0 >> 2] = 781;
}
function TimeNow_28_29() {
return __time(0);
}
function floor($0) {
return Math_floor($0);
}
function __errno_location() {
return 75644;
}
function __ofl_unlock() {
__unlock(75772);
}
function sqrt($0) {
return Math_sqrt($0);
}
function __fe_raise_inexact() {
return 0;
}
function __syscall_getpid() {
return 42;
}
function animgenTerminate() {
return 1;
}
function __fe_getround() {
return 0;
}
function __lockfile($0) {
return 1;
}
function __get_tp() {
return 75780;
}
function dummy_1($0) {
return $0;
}
function __unlockfile($0) {}
function __unlock($0) {}
function __lock($0) {}
function dummy($0) {}
// EMSCRIPTEN_END_FUNCS
;
bufferView = HEAPU8;
initActiveSegments(env);
var FUNCTION_TABLE = Table([null, operator_20new_5b_5d_28unsigned_20long_29, std____2____compressed_pair_SSPRSet___2c_20std____2__allocator_SSPRSet___20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29, std____2____compressed_pair_SSMorph___2c_20std____2__allocator_SSMorph___20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29, std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet________construct_at_end_28unsigned_20long_2c_20SSPRSet__20const__29, std____2__vector_SSPRSet__2c_20std____2__allocator_SSPRSet___20_____swap_out_circular_buffer_28std____2____split_buffer_SSPRSet__2c_20std____2__allocator_SSPRSet______29, std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph________construct_at_end_28unsigned_20long_2c_20SSMorph__20const__29, std____2__vector_SSMorph__2c_20std____2__allocator_SSMorph___20_____swap_out_circular_buffer_28std____2____split_buffer_SSMorph__2c_20std____2__allocator_SSMorph______29, SSMorph__SSMorph_28char__2c_20float_29, void_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___construct_SSPRSet__2c_20SSPRSet__20const__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___2c_20SSPRSet__20const__29, SSPRSet__SSPRSet_28char__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29, SSPRSet__SSPRSet_28_29, void_20std____2__allocator_traits_std____2__allocator_SSPRSet___20___destroy_SSPRSet__2c_20void__28std____2__allocator_SSPRSet____2c_20SSPRSet___29, std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29, void_20std____2__allocator_traits_std____2__allocator_SSMorph___20___destroy_SSMorph__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___29, unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29, std__length_error__length_error_28char_20const__29, std__logic_error___logic_error_28_29, void_20std____2__allocator_traits_std____2__allocator_SSMorph___20___construct_SSMorph__2c_20SSMorph__20const__2c_20void__28std____2__allocator_SSMorph____2c_20SSMorph___2c_20SSMorph__20const__29, SSFrame___SSFrame_28_29, SSFrame___SSFrame_28_29_1, SSMorph___SSMorph_28_29, SSMorph___SSMorph_28_29_1, SSPRSet___SSPRSet_28_29, SSPRSet___SSPRSet_28_29_1, std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const, std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29, std____2__ios_base____set_badbit_and_consider_rethrow_28_29, __cxa_end_catch, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29, std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29, std____2__ctype_char___widen_28char_29_20const, DynamicArray_char_2c_20_28char_290___clear_28_29, printIndent_28_IO_FILE__29, InvertibleStringArray__InvertibleStringArray_28short_29, HashAny_char_20const__2c_20int___HashAny_28int_2c_20int_29, InvertibleStringArray__InvertibleStringArray_28_29, HashChain_char_20const__2c_20int___insert_28HashChainItem_char_20const__2c_20int__29, DynamicArrayP_char_20const___DynamicArrayP_28int_29, HashAny_char_20const__2c_20int___freeStrings_28_29, DynamicArrayP_char_20const___clear_28_29, InvertibleDynamicStringArray__InvertibleDynamicStringArray_28short_2c_20bool_29, DynamicString__DynamicString_28int_29, DynamicArrayP_char___clear_28_29, TokenStream__TokenStream_28_29, DynamicArrayP_char___DynamicArrayP_28_29, DynamicArrayP_char_20const___freeAll_28_29, DynamicArrayP_OptionSpec___DynamicArrayP_28_29, DynamicArrayP_char___freeAll_28_29, DynamicArrayP_OptionSpec___clear_28_29, TokenStream__TokenStream_28char_20const__29, DynamicArrayP_char_20const___DynamicArrayP_28_29, OptionSpec__OptionSpec_28OptionType_2c_20bool_2c_20char_20const__29, TorsoCurve__TorsoCurve_28TorsoCurve_20const__2c_20TorsoCurve_20const__2c_20float_29, TorsoDecollider___TorsoDecollider_28_29, TorsoDecollider___TorsoDecollider_28_29_1, TorsoDecollider__ForceOutside_28Vector_20const__2c_20Vector__29_20const, TorsoDecollider__ForceOutsideOffset_28Vector_20const__2c_20Vector__29_20const, ControlledByScalar_Vector___ControlledByScalar_28_29, QuaternionController__QuaternionController_28_29, SHMScalarController__SHMScalarController_28_29, operator_20new_28unsigned_20long_29, OneArmAnimator__reset_28OneHConcretePosture__29, Joint__NewJointRotation_28_29, HandJointRotations__setFrom_28HandJointRotations_20const__29, HandJointRotations__HandJointRotations_28HandJointRotations_20const__29, Vector__Vector_28_29, OneHConcretePosture__computeWristLoc_28HanimAvatar_20const__2c_20Vector__29_20const, eprintf_28char_20const__2c_20____29, HanimAvatar__computeArmRotations_28JointRotation___2c_20bool_2c_20Vector_20const__2c_20Quaternion_20const__2c_20Quaternion_20const__2c_20float_2c_20float_29_20const, VectorController2__reset_28float_29, Vector__Vector_28Vector_20const__29, VectorController2__set_reference_28Vector_29, VectorController2__set_perception_28Vector_29, QuaternionController__reset_28float_29, Quaternion__Quaternion_28Quaternion_20const__29, QuaternionController__set_reference_28Quaternion_29, QuaternionController__set_perception_28Quaternion_29, SHMScalarController__reset_28float_29, SHMScalarController__set_reference_28float_29, ControlledByScalar_Vector___reset_28float_29, ControlledByScalar_Vector___set_reference_28Vector_29, ControlledByScalar_Vector___set_perception_28Vector_29, Quaternion__Quaternion_28_29, OneArmAnimator__OneArmAnimator_28OneHConcretePosture__2c_20HanimAvatar_20const__29, TwoHConcretePosture__TwoHConcretePosture_28_29, OneHConcretePosture__OneHConcretePosture_28bool_29, Quaternion__setZeroVec_28_29, SHMScalarController___SHMScalarController_28_29, SHMScalarController___SHMScalarController_28_29_1, SHMScalarController__reset_28_29, SHMScalarController__get_reference_28_29, SHMScalarController__get_reference_28float__29, SHMScalarController__set_perception_28float_29, SHMScalarController__get_perception_28_29, SHMScalarController__get_perception_28float__29, SHMScalarController__newTime_28float_29, SHMScalarController__resetVar_28float_29, SHMScalarController__new_ref1_28float_29, SHMScalarController__new_per1_28float_29, VectorController2___VectorController2_28_29, VectorController2___VectorController2_28_29_1, VectorController2__reset_28_29, VectorController2__get_reference_28_29, VectorController2__get_reference_28Vector__29, VectorController2__get_perception_28_29, VectorController2__get_perception_28Vector__29, VectorController2__newTime_28float_29, QuaternionController___QuaternionController_28_29, QuaternionController___QuaternionController_28_29_1, QuaternionController__reset_28_29, QuaternionController__get_reference_28_29, QuaternionController__get_reference_28Quaternion__29, QuaternionController__get_perception_28_29, QuaternionController__get_perception_28Quaternion__29, QuaternionController__newTime_28float_29, QuaternionController__XnewTime_28float_29, GeneralController_float_2c_20float____GeneralController_28_29, GeneralController_float_2c_20float____GeneralController_28_29_1, __cxa_pure_virtual, GeneralController_float_2c_20float___reset_28_29, GeneralController_Vector_2c_20Vector____GeneralController_28_29, GeneralController_Vector_2c_20Vector____GeneralController_28_29_1, GeneralController_Vector_2c_20Vector___reset_28_29, GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29, GeneralController_Quaternion_2c_20Quaternion____GeneralController_28_29_1, GeneralController_Quaternion_2c_20Quaternion___reset_28_29, NewMorphSet_28_29, NonZeroMorphSet_28float__29, DynamicArray1_JointRotation____DynamicArray1_28_29, DynamicArray1_JointRotation____clear_28_29, TwoArmAnimator__TwoArmAnimator_28TwoHConcretePosture__2c_20HanimAvatar_20const__29, FaceAnimator__FaceAnimator_28HanimAvatar_20const__29, SSFrame__SSFrame_28_29, DynamicArrayP_Joint___clear_28_29, DynamicArrayP_Site___clear_28_29, DynamicArrayP_Joint___DynamicArrayP_28int_29, DynamicArrayP_Site___DynamicArrayP_28int_29, HingeJointRotation__HingeJointRotation_28Joint__29, TurretJointRotation__TurretJointRotation_28Joint__29, FingerBaseJointRotation__FingerBaseJointRotation_28Joint__29, ThumbBaseJointRotation__ThumbBaseJointRotation_28Joint__29, QuatJointRotation__QuatJointRotation_28Joint__29, Vector__setZero_28_29, Quaternion__setZero_28_29, HingeJointRotation__HingeJointRotation_28HingeJointRotation__29, TurretJointRotation__TurretJointRotation_28TurretJointRotation__29, FingerBaseJointRotation__FingerBaseJointRotation_28FingerBaseJointRotation__29, ThumbBaseJointRotation__ThumbBaseJointRotation_28ThumbBaseJointRotation__29, QuatJointRotation__QuatJointRotation_28QuatJointRotation__29, JointRotation___JointRotation_28_29, JointRotation___JointRotation_28_29_1, HingeJointRotation___HingeJointRotation_28_29, HingeJointRotation__toQuaternion_28Quaternion__29_20const, HingeJointRotation__setZero_28_29, HingeJointRotation__setFromQuat_28Quaternion_20const__29, HingeJointRotation__setCompose_28Quaternion_20const__29, HingeJointRotation__setComposeInv_28Quaternion_20const__29, HingeJointRotation__setPreInvCompose_28Quaternion_20const__29, HingeJointRotation__setBendAngle_28float_29, HingeJointRotation__addBendAngle_28float_29, HingeJointRotation__setSplayAngle_28float_29, HingeJointRotation__addSplayAngle_28float_29, HingeJointRotation__setLongitAngle_28float_29, HingeJointRotation__setBendAxis_28Vector_20const__29, HingeJointRotation__setSplayAxis_28Vector_20const__29, HingeJointRotation__setLongitAxis_28Vector_20const__29, HingeJointRotation__print_28_IO_FILE__2c_20short_29_20const, HingeJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const, HingeJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const, HingeJointRotation__setFrom_28HingeJointRotation_20const__29, HingeJointRotation__interpolate_28HingeJointRotation_20const__2c_20HingeJointRotation_20const__2c_20float_29, TurretJointRotation___TurretJointRotation_28_29, TurretJointRotation__toQuaternion_28Quaternion__29_20const, TurretJointRotation__setZero_28_29, TurretJointRotation__setFromQuat_28Quaternion_20const__29, TurretJointRotation__setCompose_28Quaternion_20const__29, TurretJointRotation__setComposeInv_28Quaternion_20const__29, TurretJointRotation__setPreInvCompose_28Quaternion_20const__29, TurretJointRotation__setBendAngle_28float_29, TurretJointRotation__addBendAngle_28float_29, TurretJointRotation__setSplayAngle_28float_29, TurretJointRotation__addSplayAngle_28float_29, TurretJointRotation__setLongitAngle_28float_29, TurretJointRotation__setBendAxis_28Vector_20const__29, TurretJointRotation__setSplayAxis_28Vector_20const__29, TurretJointRotation__setLongitAxis_28Vector_20const__29, TurretJointRotation__print_28_IO_FILE__2c_20short_29_20const, TurretJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const, TurretJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const, TurretJointRotation__setFrom_28TurretJointRotation_20const__29, TurretJointRotation__interpolate_28TurretJointRotation_20const__2c_20TurretJointRotation_20const__2c_20float_29, FingerBaseJointRotation___FingerBaseJointRotation_28_29, FingerBaseJointRotation__toQuaternion_28Quaternion__29_20const, FingerBaseJointRotation__setZero_28_29, FingerBaseJointRotation__setFromQuat_28Quaternion_20const__29, FingerBaseJointRotation__setCompose_28Quaternion_20const__29, FingerBaseJointRotation__setComposeInv_28Quaternion_20const__29, FingerBaseJointRotation__setPreInvCompose_28Quaternion_20const__29, FingerBaseJointRotation__setBendAngle_28float_29, FingerBaseJointRotation__addBendAngle_28float_29, FingerBaseJointRotation__setSplayAngle_28float_29, FingerBaseJointRotation__addSplayAngle_28float_29, FingerBaseJointRotation__setLongitAngle_28float_29, FingerBaseJointRotation__setBendAxis_28Vector_20const__29, FingerBaseJointRotation__setSplayAxis_28Vector_20const__29, FingerBaseJointRotation__setLongitAxis_28Vector_20const__29, FingerBaseJointRotation__print_28_IO_FILE__2c_20short_29_20const, FingerBaseJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const, FingerBaseJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const, FingerBaseJointRotation__setFrom_28FingerBaseJointRotation_20const__29, FingerBaseJointRotation__interpolate_28FingerBaseJointRotation_20const__2c_20FingerBaseJointRotation_20const__2c_20float_29, ThumbBaseJointRotation___ThumbBaseJointRotation_28_29, ThumbBaseJointRotation__toQuaternion_28Quaternion__29_20const, ThumbBaseJointRotation__setZero_28_29, ThumbBaseJointRotation__setFromQuat_28Quaternion_20const__29, ThumbBaseJointRotation__setCompose_28Quaternion_20const__29, ThumbBaseJointRotation__setComposeInv_28Quaternion_20const__29, ThumbBaseJointRotation__setPreInvCompose_28Quaternion_20const__29, ThumbBaseJointRotation__setBendAngle_28float_29, ThumbBaseJointRotation__addBendAngle_28float_29, ThumbBaseJointRotation__setSplayAngle_28float_29, ThumbBaseJointRotation__addSplayAngle_28float_29, ThumbBaseJointRotation__setLongitAngle_28float_29, ThumbBaseJointRotation__setBendAxis_28Vector_20const__29, ThumbBaseJointRotation__setSplayAxis_28Vector_20const__29, ThumbBaseJointRotation__setLongitAxis_28Vector_20const__29, ThumbBaseJointRotation__print_28_IO_FILE__2c_20short_29_20const, ThumbBaseJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const, ThumbBaseJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const, ThumbBaseJointRotation__setFrom_28ThumbBaseJointRotation_20const__29, ThumbBaseJointRotation__interpolate_28ThumbBaseJointRotation_20const__2c_20ThumbBaseJointRotation_20const__2c_20float_29, QuatJointRotation___QuatJointRotation_28_29, QuatJointRotation__toQuaternion_28Quaternion__29_20const, QuatJointRotation__setZero_28_29, QuatJointRotation__setFromQuat_28Quaternion_20const__29, QuatJointRotation__setCompose_28Quaternion_20const__29, QuatJointRotation__setComposeInv_28Quaternion_20const__29, QuatJointRotation__setPreInvCompose_28Quaternion_20const__29, QuatJointRotation__setBendAngle_28float_29, QuatJointRotation__addBendAngle_28float_29, QuatJointRotation__setSplayAngle_28float_29, QuatJointRotation__addSplayAngle_28float_29, QuatJointRotation__setLongitAngle_28float_29, QuatJointRotation__setBendAxis_28Vector_20const__29, QuatJointRotation__setSplayAxis_28Vector_20const__29, QuatJointRotation__setLongitAxis_28Vector_20const__29, QuatJointRotation__print_28_IO_FILE__2c_20short_29_20const, QuatJointRotation__printRotationVRML_28_IO_FILE__2c_20short_29_20const, QuatJointRotation__printAxesVRML_28_IO_FILE__2c_20float_2c_20short_2c_20short_29_20const, QuatJointRotation__setFrom_28QuatJointRotation_20const__29, QuatJointRotation__interpolate_28QuatJointRotation_20const__2c_20QuatJointRotation_20const__2c_20float_29, DynamicArray1_Vector___DynamicArray1_28int_29, DynamicArray_short_2c_20_28short_29_1___DynamicArray_28int_29, DynamicArray1_Vector___clear_28_29, DynamicArray_short_2c_20_28short_29_1___clear_28_29, DynamicArray_short_2c_20_28short_29_1___DynamicArray_28_29, DynamicArray1_Vector___DynamicArray1_28_29, DynamicArray1_Quaternion___DynamicArray1_28_29, DynamicArray1_Quaternion___clear_28_29, ShoulderConstraint__ShoulderConstraint_28_29, XMLCell__element_28char_20const__29, XMLCell__attrib_REAL_28char_20const__2c_20float_29, Vector__Vector_28float_2c_20float_2c_20float_29, XMLCell__attrib_REALVEC3_28Vector__2c_20char_20const__2c_20Vector_20const__29, DynamicArrayP_Joint___DynamicArrayP_28_29, HanimAvatar__LookupJoint_28char_20const__29_20const, __cxa_throw, HanimAvatar__LookupSite_28char_20const__29_20const, DynamicArrayP_Joint___appendElement_28Joint__29, DynamicArray_int_2c_20_1___DynamicArray_28_29, DynamicArray_int_2c_20_1___appendElement_28int_20const__29, DynamicArray_int_2c_20_1___clear_28_29, SiteID__print_28_IO_FILE__29_20const, AvatarNameIndex__AvatarNameIndex_28_29, HashAny_char_20const__2c_20SiteID___HashAny_28SiteID_2c_20int_29, HashAny_char_20const__20const_2c_20AvatarType___HashAny_28AvatarType_2c_20int_29, HashAny_char_20const__2c_20char_20const____HashAny_28char_20const__2c_20int_29, HashChain_char_20const__2c_20SiteID___insert_28HashChainItem_char_20const__2c_20SiteID__29, HashChain_char_20const__20const_2c_20AvatarType___insert_28HashChainItem_char_20const__20const_2c_20AvatarType__29, DynamicArrayP_Site___DynamicArrayP_28_29, DynamicArrayP_Segment___DynamicArrayP_28_29, AvatarJointIndex__AvatarJointIndex_28HanimAvatar__29, AvatarJointNumIndex__AvatarJointNumIndex_28AvatarJointIndex_20const__29, StaticArmData__StaticArmData_28_29, HashAny_SiteID_20const_2c_20Site____HashAny_28Site__2c_20int_29, AvatarTiming__AvatarTiming_28_29, copyString_28char_20const__29, Quaternion__Quaternion_28float_2c_20float_2c_20float_2c_20float_29, HanimAvatar__initialise_28_29, InvertibleDynamicStringArray__length_28_29_20const, HashAny_char_20const__2c_20int___lookupString_28char_20const__29_20const, Joint__Joint_28char_20const__2c_20int_2c_20Joint__2c_20Segment__2c_20DynamicArrayP_Site___29, DynamicArrayP_Joint___setElement_28int_2c_20Joint__29, HashAny_char_20const__2c_20int___addItem_28char_20const__2c_20int_29, InvertibleDynamicStringArray__valueFromIndex_28int_29_20const, Joint__addChildJoint_28Joint__29, Transform__setFrom_28Vector_20const__2c_20Quaternion_20const__29, exit, Joint__computeGlobalFromLocalTransforms_28_29, HanimAvatar__completeQuadSites_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29, Site__Site_28char_20const__2c_20int_29, LogTime_28_29, HashAny_char_20const__2c_20SiteID___lookupString_28char_20const__29_20const, eputc_28char_29, Site__print_28_IO_FILE__29_20const, DynamicArrayP_Site___setElement_28int_2c_20Site__29, HashAny_SiteID_20const_2c_20Site____addItem_28SiteID_2c_20Site__29, Joint__addSite_28Site__29, DynamicArray1_Vector___getElement_28int_29_20const, Site__setLocalPosition_28Vector_20const__29, UNIMPLEMENTED_28char_20const__29, Site__printName_28_IO_FILE__29_20const, HanimAvatar__CreateJointIndex_28_29, HanimAvatar__createARPFacePoints_28_29, HanimAvatar__createFacePolygons_28_29, AvatarConstraints__AvatarConstraints_28_29, AvatarConstraints__initialise_28HanimAvatar__29, Segment__Segment_28char_20const__2c_20int_29, DynamicArrayP_Segment___setElement_28int_2c_20Segment__29, MakeSiteID_28Location_2c_20AbsoluteBodySide_2c_20ExtremitySide_2c_20short_2c_20Proximity_2c_20bool_29, HanimAvatar__createQuincunxCentreSite_28SiteID_29, HanimAvatar__duplicateSite_28SiteID_2c_20SiteID_29, DynamicArray1_Quaternion___getElement_28int_29_20const, HashChain_SiteID_20const_2c_20Site____insert_28HashChainItem_SiteID_20const_2c_20Site___29, Site__Site_28char_20const__29, Vector__Vector_28Vector_20const__29_1, TorsoDecollider__TorsoDecollider_28short_29, TorsoCurve__TorsoCurve_28Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__2c_20Vector_20const__29, DynamicArrayP_Segment___clear_28_29, HashChain_char_20const__2c_20char_20const____insert_28HashChainItem_char_20const__2c_20char_20const___29, Decollider___Decollider_28_29, Decollider___Decollider_28_29_1, Controller__Controller_28ControllerParams_29, Controller__resetVar_28float_29, Controller__new_ref1_28float_29, Controller__update_28float_29, eputs_28char_20const__29, TrajectoryParams__print_28_IO_FILE__29, Trajectory__Trajectory_28_29, Trajectory__Trajectory_28TrajectoryParams_20const__29, SiteIDPair__SiteIDPair_28_29, Mirroring__print_28_IO_FILE__29_20const, SiGMLConstellation__print_28_IO_FILE__29_20const, ArmHandConstellation__print_28_IO_FILE__29_20const, SiteID__defined_28_29_20const, SiteIDPair__defined_28_29_20const, SiteIDPair__print_28_IO_FILE__29_20const, SiteID__isArmHandSite_28_29_20const, MirrorBodySide_28AbsoluteBodySide_29, SiteID__isUndef_28_29_20const, CheckIsHandSite_28SiteID__2c_20bool_29, SiteID__defaultFrom_28SiteID_29, InvertibleStringArray__valueFromIndex_28int_29_20const, SiGMLConstellation__SiGMLConstellation_28_29, OneHGesture__OneHGesture_28bool_2c_20Gesture__29, Gesture__Gesture_28_29, Gesture__Gesture_28char_20const__2c_20HanimAvatar_20const__2c_20bool_29, TwoHandStuff__TwoHandStuff_28_29, TwoHAbstractPosture__TwoHAbstractPosture_28Gesture_20const__29, OneHandStuff__OneHandStuff_28bool_29, SiGMLConstellation__SiGMLConstellation_28SiGMLConstellation_20const__29, ArmHandConstellation__ArmHandConstellation_28SiGMLConstellation_2c_20ArmHandConstellation_20const__2c_20SET_OF_HANDS_2c_20Mirroring_2c_20bool_29, Joint__pathToRoot_28DynamicArrayP_Joint___29, Transform__setZero_28_29, Transform__Transform_28_29, Transform__setInverse_28_29, Joint__getGlobalBoneTranslation_28_29, Transform__setCompose_28Vector_20const__2c_20Quaternion_20const__29, Quaternion__print_28_IO_FILE__2c_20int_29, Transform__setCompose_28Transform_20const__29, Transform__print_28_IO_FILE__2c_20int_29_20const, DynamicArrayP_Gesture___clear_28_29, TargettedMovement__TargettedMovement_28SET_OF_HANDS_2c_20Gesture__29, NoMovement__NoMovement_28SET_OF_HANDS_29, SeqMovement__SeqMovement_28SET_OF_HANDS_29, DynamicArray0_float___DynamicArray0_28float_29, DynamicArrayP_BasicMovement___DynamicArrayP_28_29, ParTimedMorph__ParTimedMorph_28_29, DynamicArrayP_AbstractTimedMorph___DynamicArrayP_28_29, HandleXMLGesture_28void__2c_20XMLCell__29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28char_20const__29, GestureParser__readXMLFile_28char_20const__2c_20ParserData__29, HashAny_char_20const__2c_20Gesture____lookupString_28char_20const__29_20const, ReportXMLError_28XMLResultCode_2c_20char_20const__29, FailedSiGML_28_29, std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29, HashAny_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___HashAny_28void_20_28__29_28void__2c_20XMLCell__29_2c_20int_29, handle_mocap_sign_28void__2c_20XMLCell__29, handle_bonesanimation_sign_28void__2c_20XMLCell__29, handle_hamgestural_sign_28void__2c_20XMLCell__29, handle_gloss_sign_28void__2c_20XMLCell__29, DynamicArrayP_Gesture___DynamicArrayP_28_29, DynamicArrayP_BasicMovement___clear_28_29, DynamicArray1_DynamicArray1_AtomicNonmanual_____DynamicArray1_28int_29, DynamicArray1_AtomicNonmanual___DynamicArray1_28int_29, HashAny_int_2c_20int___lookupString_28int_29_20const, handle_nonmanual_item_28AtomicNonmanual__2c_20NonmanualItems_2c_20XMLCell__29, DynamicArray1_AtomicNonmanual___appendElement_28AtomicNonmanual_20const__29, DynamicArray1_AtomicNonmanual___DynamicArray1_28_29, DynamicArray1_DynamicArray1_AtomicNonmanual_____appendElement_28DynamicArray1_AtomicNonmanual___20const__29, HashChain_char_20const__2c_20Gesture____insert_28HashChainItem_char_20const__2c_20Gesture___29, DynamicArray1_DynamicArray1_AtomicNonmanual_____clear_28_29, DynamicArray1_AtomicNonmanual___clear_28_29, HashChain_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29___insert_28HashChainItem_SiGML_Element_2c_20void_20_28__29_28void__2c_20XMLCell__29__29, CompoundMovement___CompoundMovement_28_29, CompoundMovement___CompoundMovement_28_29_1, BasicMovement__setBodyPart_28Location_29, BasicMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, BasicMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, BasicMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, BasicMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29, BasicMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, BasicMovement__FinaliseGestures_28_29, BasicMovement__setInitialPosture_28TwoHConcretePosture_20const__29, BasicMovement__set1FinalPos_28Vector_20const__2c_20bool_29, BasicMovement__setFinalPos_28Vector_20const__2c_20Vector_20const__29, BasicMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, BasicMovement__offsetFinalPos_28Vector_20const__2c_20Vector_20const__29, BasicMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, BasicMovement__setDuration_28float_2c_20bool_29, BasicMovement__UseExplicitDuration_28_29, BasicMovement__print_28_IO_FILE__29_20const, BasicMovement__printTopLevelSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, BasicMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, CalcThumbBending_28ThumbBending__2c_20HandshapeType_2c_20BendSource_2c_20FingerbendType_2c_20FingerBending_2c_20FingerbendType_2c_20ThumbBending_2c_20ThumbbendType_29, ThumbBending__setAdd_28ThumbBending_20const__29, printFingerbendCode_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20FingerBending_2c_20char_20const__29, printThumbbendCode_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20ThumbBending_2c_20char_20const__29, HandJointRotations__HandJointRotations_28bool_2c_20Gesture_20const__29, SiGMLHandshape__SiGMLHandshape_28_29, SeqTimedMorph__SeqTimedMorph_28_29, AtomicTimedMorph__AtomicTimedMorph_28_29, CharToMorphTime_28char_29, CharToMorphAnchoring_28char_2c_20bool_29, TokenStream__TokeniseString_28char_20const__29, TokenStream__nextToken_28_29, StringToAnchoring_28char_20const__2c_20bool_29, StringToMorphTime_28char__29, DynamicArrayP_AbstractTimedMorph___clear_28_29, Handshape__Handshape_28bool_2c_20Gesture__29, OneHAbstractPosture__OneHAbstractPosture_28OneHAbstractPosture_20const__29, ConstellationInfo__ConstellationInfo_28_29, calcLeadFractions_28float__2c_20float_2c_20PostureChangeFlags_2c_20PostureChangeTiming_2c_20bool_29, SiteIDPair__isUndef_28_29_20const, isArmHandLocation_28int_29, HanimAvatar__siteStdDistance_28SiteIDPair_20const__29_20const, OneHConcretePosture__setCopyRest_28OneHConcretePosture_20const__29, DynamicArray1_AtomicNonmanual___getElement_28int_29_20const, DynamicArray1_AbstractTimedMorph____clear_28_29, AtomicTimedMorph__AtomicTimedMorph_28int_2c_20float_2c_20float_2c_20float_2c_20char_20const__29, DynamicArray1_AbstractTimedMorph____DynamicArray1_28int_29, HashAny_char_20const__2c_20AbstractTimedMorph____HashAny_28AbstractTimedMorph__2c_20int_29, DynamicArray1_AbstractTimedMorph____DynamicArray1_28_29, ANMtoATM_28AtomicNonmanual_29, ParTimedMorph__appendElement_28AbstractTimedMorph__29, AtomicNonmanual__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, TwoHDirMoveSpec__TwoHDirMoveSpec_28_29, DirectedMovement__operator__28DirectedMovement_20const__29, DirectedMovement__DirectedMovement_28DirectedMovement_20const__29, TwoHCircMoveSpec__TwoHCircMoveSpec_28_29, CircularMovement__operator__28CircularMovement_20const__29, OneHCircMoveSpec__OneHCircMoveSpec_28_29, CircularMovement__CircularMovement_28CircularMovement_20const__29, NoMovement__NoMovement_28NoMovement_20const__29, WristMovement__WristMovement_28WristMovement_20const__29, FingerPlayMovement__FingerPlayMovement_28FingerPlayMovement_20const__29, RepSpec__RepSpec_28_29, RepeatMovement__operator__28RepeatMovement_20const__29, RepeatMovement__RepeatMovement_28RepeatMovement_20const__29, ArmHandConstellation__ArmHandConstellation_28ArmHandConstellation_20const__29, OneHandStuff__OneHandStuff_28OneHandStuff_20const__29, Gesture__CopyGesture_28_29_20const, TargettedMovement__TargettedMovement_28TargettedMovement_20const__29, makeContact_28SiteIDPair_2c_20SiteID_29, Gesture__printPostureSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20PostureChangeFlags_2c_20PostureChangeFlags_29_20const, DynamicArrayP_BasicMovement___setElement_28int_2c_20BasicMovement__29, ParMovement__ParMovement_28ParMovement_20const__29, TwoHConcretePosture__print_28_IO_FILE__29_20const, TwoHandStuff__TwoHandStuff_28TwoHandStuff_20const__29, TwoHandStuff__update_28TwoHandStuff_20const__29, ArmHandConstellation__updateFrom_28ArmHandConstellation_20const__29, InstallParPosture_28Vector__2c_20Vector__2c_20OneHConcretePosture__2c_20PostureChangeFlags_20const__2c_20OneHConcretePosture_20const__2c_20Vector_20const__29, SeqMovement__SeqMovement_28SeqMovement_20const__29, TwoHConcretePosture__setCopyRest_28TwoHConcretePosture_20const__29, TwoHAbstractPosture__operator__28TwoHAbstractPosture_20const__29, BasicMovement__scaleDuration_28float_2c_20bool_29, DynamicArray0_float___appendElement_28float_20const__29, TwoHConcretePostureChange__print_28_IO_FILE__29_20const, TwoHConcretePosture__totallyDefined_28SET_OF_HANDS_29_20const, TwoHConcretePostureChange__printFinalUndefined_28_IO_FILE__2c_20SET_OF_HANDS_29_20const, ConstellationInfo__ConstellationInfo_28ConstellationInfo_20const__29, SplitMovement__SplitMovement_28BasicMovement__2c_20BasicMovement__29, SplitMovement__SplitMovement_28SplitMovement_20const__29, OneHandStuff__update_28OneHandStuff_20const__29, OneHConcretePosture__OneHConcretePosture_28OneHConcretePosture_20const__29, DynamicArrayP_BasicMovement___appendElements_28DynamicArrayP_BasicMovement___29, DynamicArrayP_BasicMovement___appendElement_28BasicMovement__29, MergeTgts_28DynamicArrayP_BasicMovement___29, ParMovement__ParMovement_28SET_OF_HANDS_29, RepeatMovement__RepeatMovement_28SET_OF_HANDS_29, DirectedMovement__DirectedMovement_28SET_OF_HANDS_29, CircularMovement__CircularMovement_28SET_OF_HANDS_29, WristMovement__WristMovement_28SET_OF_HANDS_29, FingerPlayMovement__FingerPlayMovement_28SET_OF_HANDS_29, SiGML__convertAttributeH_28InvertibleStringArray_20const__2c_20char_20const__29, MannerFlags__setManner_28Manner_29, SiGML__convertboolfalse_28char_20const__29, Direction3__Direction3_28char_20const__29, Direction3__handedVector_28bool_29, Direction3__operator__28Direction3_20const__29, Direction2__Direction2_28char_20const__29, Direction2__handedVector_28bool_29, Direction2__operator__28Direction2_20const__29, Direction2__EllipseDirection_28char_20const__29, Direction2__set_handedVector_28bool_29, Direction3__handedAxis_28bool_29, DynamicArray0_float___clear_28_29, HashChain_char_20const__2c_20AbstractTimedMorph____insert_28HashChainItem_char_20const__2c_20AbstractTimedMorph___29, AbstractTimedMorph___AbstractTimedMorph_28_29, AtomicTimedMorph___AtomicTimedMorph_28_29, AtomicTimedMorph__newCopy_28_29_20const, AtomicTimedMorph__CalcTiming_28float_29, AtomicTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const, AbstractTimedMorph__setDuration_28float_29, AtomicTimedMorph__scaleAmount_28float_29, AtomicTimedMorph__scaleDuration_28float_29, AtomicTimedMorph__setStart_28float_29, AtomicTimedMorph__shiftStart_28float_29, AtomicTimedMorph__print_28_IO_FILE__29_20const, AtomicTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const, AbstractTimedMorph__rescale_28float_2c_20float_2c_20float_29, AbstractTimedMorph__rescale_28XMLCell__29, BasicMovement___BasicMovement_28_29, BasicMovement___BasicMovement_28_29_1, NonmanualMovement___NonmanualMovement_28_29, NonmanualMovement___NonmanualMovement_28_29_1, NonmanualMovement__print_28_IO_FILE__29_20const, NonmanualMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, NonmanualMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, DirectedMovement___DirectedMovement_28_29, DirectedMovement__CopyMovement_28_29_20const, DirectedMovement__setBodyPart_28Location_29, DirectedMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, DirectedMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, DirectedMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, DirectedMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, DirectedMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, DirectedMovement__print_28_IO_FILE__29_20const, DirectedMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, DirectedMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, CircularMovement___CircularMovement_28_29, CircularMovement___CircularMovement_28_29_1, CircularMovement__CopyMovement_28_29_20const, CircularMovement__setBodyPart_28Location_29, CircularMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, CircularMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, CircularMovement__set1FinalPos_28Vector_20const__2c_20bool_29, CircularMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, CircularMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, CircularMovement__print_28_IO_FILE__29_20const, CircularMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, CircularMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, NoMovement___NoMovement_28_29, NoMovement__CopyMovement_28_29_20const, NoMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, NoMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, NoMovement__setInitialPosture_28TwoHConcretePosture_20const__29, NoMovement__print_28_IO_FILE__29_20const, NoMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, NoMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, WristMovement___WristMovement_28_29, WristMovement__CopyMovement_28_29_20const, WristMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, WristMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, WristMovement__set1FinalPos_28Vector_20const__2c_20bool_29, WristMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, WristMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, WristMovement__print_28_IO_FILE__29_20const, WristMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, WristMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, FingerPlayMovement___FingerPlayMovement_28_29, FingerPlayMovement__CopyMovement_28_29_20const, FingerPlayMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, FingerPlayMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, FingerPlayMovement__set1FinalPos_28Vector_20const__2c_20bool_29, FingerPlayMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, FingerPlayMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, FingerPlayMovement__print_28_IO_FILE__29_20const, FingerPlayMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, FingerPlayMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, RepeatMovement___RepeatMovement_28_29, RepeatMovement___RepeatMovement_28_29_1, RepeatMovement__CopyMovement_28_29_20const, RepeatMovement__setBodyPart_28Location_29, RepeatMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, RepeatMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, RepeatMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, RepeatMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29, RepeatMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, RepeatMovement__FinaliseGestures_28_29, RepeatMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, RepeatMovement__setDuration_28float_2c_20bool_29, RepeatMovement__print_28_IO_FILE__29_20const, RepeatMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, RepeatMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, TargettedMovement___TargettedMovement_28_29, TargettedMovement___TargettedMovement_28_29_1, TargettedMovement__CopyMovement_28_29_20const, TargettedMovement__setBodyPart_28Location_29, TargettedMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, TargettedMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, TargettedMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, TargettedMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, TargettedMovement__FinaliseGestures_28_29, TargettedMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, TargettedMovement__print_28_IO_FILE__29_20const, TargettedMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, TargettedMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, ParMovement___ParMovement_28_29, ParMovement__CopyMovement_28_29_20const, ParMovement__setBodyPart_28Location_29, ParMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, ParMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, ParMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, ParMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29, ParMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, ParMovement__FinaliseGestures_28_29, ParMovement__set1FinalPos_28Vector_20const__2c_20bool_29, ParMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, ParMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, ParMovement__setDuration_28float_2c_20bool_29, ParMovement__print_28_IO_FILE__29_20const, ParMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, ParMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, SeqMovement___SeqMovement_28_29, SeqMovement___SeqMovement_28_29_1, SeqMovement__CopyMovement_28_29_20const, SeqMovement__setBodyPart_28Location_29, SeqMovement__setOwnMotionAttributes_28MotionAttributes_20const__29, SeqMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, SeqMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, SeqMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29, SeqMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, SeqMovement__FinaliseGestures_28_29, SeqMovement__setInitialPosture_28TwoHConcretePosture_20const__29, SeqMovement__set1FinalPos_28Vector_20const__2c_20bool_29, SeqMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, SeqMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, SeqMovement__setDuration_28float_2c_20bool_29, SeqMovement__print_28_IO_FILE__29_20const, SeqMovement__printTopLevelSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, SeqMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, SeqMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, SplitMovement___SplitMovement_28_29, SplitMovement___SplitMovement_28_29_1, SplitMovement__CopyMovement_28_29_20const, SplitMovement__setBodyPart_28Location_29, SplitMovement__setAvatarDependentValues_28Gesture_20const__2c_20TwoHAbstractPosture__29, SplitMovement__propagateHandStuff_28TwoHandStuff__2c_20ArmHandConstellation__29, SplitMovement__propagateChangeFlags_28PostureChangeFlags_2c_20PostureChangeFlags_29, SplitMovement__setFinalHandStuff_28TwoHandStuff_20const__2c_20ArmHandConstellation_20const__29, SplitMovement__FinaliseGestures_28_29, SplitMovement__setInitialPosture_28TwoHConcretePosture_20const__29, SplitMovement__set1FinalPos_28Vector_20const__2c_20bool_29, SplitMovement__offset1FinalPos_28Vector_20const__2c_20bool_29, SplitMovement__GetCurrentPosture_28TwoHConcretePosture__2c_20float_2c_20bool_29, SplitMovement__setDuration_28float_2c_20bool_29, SplitMovement__print_28_IO_FILE__29_20const, SplitMovement__printSiGML_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_20const, SplitMovement__printSiGMLAttribs_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20bool_29_20const, AbstractTimedMorph___AbstractTimedMorph_28_29_1, AbstractTimedMorph__scaleDuration_28float_29, AbstractTimedMorph__setStart_28float_29, AbstractTimedMorph__shiftStart_28float_29, ParTimedMorph___ParTimedMorph_28_29, ParTimedMorph___ParTimedMorph_28_29_1, ParTimedMorph__newCopy_28_29_20const, ParTimedMorph__CalcTiming_28float_29, ParTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const, ParTimedMorph__scaleAmount_28float_29, ParTimedMorph__scaleDuration_28float_29, ParTimedMorph__shiftStart_28float_29, ParTimedMorph__print_28_IO_FILE__29_20const, ParTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const, SeqTimedMorph___SeqTimedMorph_28_29, SeqTimedMorph___SeqTimedMorph_28_29_1, SeqTimedMorph__newCopy_28_29_20const, SeqTimedMorph__CalcTiming_28float_29, SeqTimedMorph__fillMorphFrame_28float_2c_20float__2c_20bool_29_20const, SeqTimedMorph__scaleAmount_28float_29, SeqTimedMorph__scaleDuration_28float_29, SeqTimedMorph__shiftStart_28float_29, SeqTimedMorph__print_28_IO_FILE__29_20const, SeqTimedMorph__printIndented_28_IO_FILE__2c_20int_29_20const, OneHGesture__ConcreteLocateSite_28Vector__2c_20SiteIDPair_29, CannedHandshape__CannedHandshape_28_29, __cxx_global_array_dtor, __cxx_global_array_dtor_10, __cxx_global_array_dtor_12, __cxx_global_array_dtor_14, HashAny_int_2c_20int___HashAny_28int_2c_20int_29, XMLCell__attrib_string_28char_20const__29, FingerBending__FingerBending_28char_20const__29, MakeDigits_28char_20const__29, CannedHandshape__CannedHandshape_28FingerBending_2c_20FingerBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20ThumbbendType_2c_20ThumbBending_2c_20short_2c_20HandshapeClass_29, SpecialHandshapes__SpecialHandshapes_28_29, HashAny_char_20const__2c_20HashAny_char_20const__2c_20int_____HashAny_28HashAny_char_20const__2c_20int___2c_20int_29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, appendIntToString_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29, HashChain_int_2c_20int___insert_28HashChainItem_int_2c_20int__29, HashChain_char_20const__2c_20HashAny_char_20const__2c_20int_____insert_28HashChainItem_char_20const__2c_20HashAny_char_20const__2c_20int____29, DynamicArrayP_XMLCell___DynamicArrayP_28_29, XMLCell__clear_28_29, DynamicArrayP_XMLCell___clear_28_29, DynamicArrayP_char_20const___appendElement_28char_20const__29, XML_ParserCreate, XML_SetElementHandler, Expat_start_28void__2c_20char_20const__2c_20char_20const___29, Expat_end_28void__2c_20char_20const__29, XML_SetUserData, XMLCell__XMLCell_28char__29, XML_ParserFree, ExpatWrapper__ExpatWrapper_28_29, HashAny_char_20const__2c_20char_20const____lookupString_28char_20const__29_20const, HashAny_char_20const__2c_20char_20const____addItem_28char_20const__2c_20char_20const__29, DynamicArrayP_XMLCell___appendElement_28XMLCell__29, DynamicArrayP_XMLCell___setElement_28int_2c_20XMLCell__29, XMLCell__mergeXMLCell_28XMLCell_20const__29, XMLWrapper___XMLWrapper_28_29, XMLWrapper___XMLWrapper_28_29_1, ExpatWrapper___ExpatWrapper_28_29, ExpatWrapper___ExpatWrapper_28_29_1, ExpatWrapper__ParseFile_28_IO_FILE__29, ExpatWrapper__ParseString_28char_20const__29, AnimgenInstance__AnimgenInstance_28int_29, AGIStatusCallback_28void__2c_20AnimgenStatus_2c_20int_29, AGISignStartCallback_28void__2c_20char_20const__2c_20int_2c_20int_29, AGIFrameCallback_28void__2c_20SSFrame__29, AGIPostMortemCallback_28void__2c_20PostMortem__29, InitVersionInfo, VersionString_28_29, VersionDate_28_29, __clock, Getopts__Getopts_28_29, setupOptions_28Getopts__29, Getopts__processArgs_28char_20const___29, ProcessOptions_28Getopts__29, Getopts__printValue_28_IO_FILE__29, BuildTables_28_29, BuildHanimAvatar_28_29, HashAny_char_20const__2c_20Gesture____HashAny_28Gesture__2c_20int_29, CreateWaitGesture_28_29, ZeroPostMortem, InitHanimAnimator_28_29, ASDdata__ASDdata_28char_20const__2c_20bool_29, HanimAvatar__HanimAvatar_28ASDdata_20const__29, GestureParser__readXMLXML_28XMLCell__2c_20ParserData__2c_20Gesture___29, Gesture__InitPosture_28TwoHConcretePosture__29, HanimAnimationRecord__HanimAnimationRecord_28_29, GestureParser__readXMLString_28char_20const__2c_20ParserData__29, totalTime_28DynamicArrayP_Gesture__20const__29, dlmalloc, dlrealloc, dlfree, prologInitProcessor, prologProcessor, errorProcessor, contentProcessor, cdataSectionProcessor, epilogProcessor, externalEntityContentProcessor, internalEntityProcessor, prolog0, prolog1, doctype0, error, doctype1, internalSubset, prolog2, doctype3, doctype2, entity0, attlist0, element0, notation0, doctype5, doctype4, entity1, entity2, attlist1, element1, notation1, entity7, entity4, entity3, declClose, attlist2, element2, notation3, notation2, entity9, entity8, entity5, entity10, entity6, attlist8, attlist5, attlist3, attlist9, attlist6, attlist4, attlist7, element3, element6, element7, element4, element5, notation4, unknown_isInvalid, unknown_isNmstrt, unknown_isName, unknown_toUtf16, unknown_toUtf8, initUpdatePosition, initScanContent, initScanProlog, normal_prologTok, normal_contentTok, normal_cdataSectionTok, normal_attributeValueTok, normal_entityValueTok, normal_sameName, normal_nameMatchesAscii, normal_nameLength, normal_skipS, normal_getAtts, normal_charRefNumber, normal_predefinedEntityName, normal_updatePosition, normal_isPublicId, latin1_toUtf8, latin1_toUtf16, utf8_toUtf8, utf8_toUtf16, utf8_isName2, utf8_isName3, isNever, utf8_isNmstrt2, utf8_isNmstrt3, utf8_isInvalid2, utf8_isInvalid3, utf8_isInvalid4, big2_prologTok, big2_contentTok, big2_cdataSectionTok, big2_attributeValueTok, big2_entityValueTok, big2_sameName, big2_nameMatchesAscii, big2_nameLength, big2_skipS, big2_getAtts, big2_charRefNumber, big2_predefinedEntityName, big2_updatePosition, big2_isPublicId, big2_toUtf8, big2_toUtf16, little2_prologTok, little2_contentTok, little2_cdataSectionTok, little2_attributeValueTok, little2_entityValueTok, little2_sameName, little2_nameMatchesAscii, little2_nameLength, little2_skipS, little2_getAtts, little2_charRefNumber, little2_predefinedEntityName, little2_updatePosition, little2_isPublicId, little2_toUtf8, little2_toUtf16, ascii_toUtf8, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, string_read, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const, std____2__ios_base__getloc_28_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const, std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const, std__bad_cast___bad_cast_28_29, __cxx_global_array_dtor_1, std____2__ios_base__failure__failure_28char_20const__2c_20std____2__error_code_20const__29, std____2__ios_base__failure___failure_28_29, std____2__error_category___error_category_28_29, std____2____iostream_category_____iostream_category_28_29, std____2____iostream_category__name_28_29_20const, std____2__error_category__default_error_condition_28int_29_20const, std____2__error_category__equivalent_28int_2c_20std____2__error_condition_20const__29_20const, std____2__error_category__equivalent_28std____2__error_code_20const__2c_20int_29_20const, std____2____iostream_category__message_28int_29_20const, std____2__ios_base__failure___failure_28_29_1, std__runtime_error__what_28_29_20const, std____2__locale__id____init_28_29, void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29, std____2____libcpp_mutex_unlock_28pthread_mutex_t__29, std____2____libcpp_mutex_lock_28pthread_mutex_t__29, std____2____libcpp_condvar_broadcast_28pthread_cond_t__29, __cxa_rethrow, std__exception___exception_28_29, std____2____libcpp_refstring____libcpp_refstring_28char_20const__29, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, std____2__system_error____init_28std____2__error_code_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29, std__runtime_error__runtime_error_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29, std____2__system_error___system_error_28_29, std____2__system_error___system_error_28_29_1, abort, abort_message, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std__bad_alloc___bad_alloc_28_29, std__bad_alloc__what_28_29_20const, std__exception___exception_28_29_1, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_1, std__logic_error__what_28_29_20const, std__runtime_error___runtime_error_28_29, std__runtime_error___runtime_error_28_29_1, std__length_error___length_error_28_29, std__bad_cast___bad_cast_28_29_1, std__bad_cast__what_28_29_20const]);
function __wasm_memory_size() {
return buffer.byteLength / 65536 | 0;
}
function __wasm_memory_grow(pagesToAdd) {
pagesToAdd = pagesToAdd | 0;
var oldPages = __wasm_memory_size() | 0;
var newPages = oldPages + pagesToAdd | 0;
if ((oldPages < newPages) && (newPages < 65536)) {
var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
var newHEAP8 = new Int8Array(newBuffer);
newHEAP8.set(HEAP8);
HEAP8 = new Int8Array(newBuffer);
HEAP16 = new Int16Array(newBuffer);
HEAP32 = new Int32Array(newBuffer);
HEAPU8 = new Uint8Array(newBuffer);
HEAPU16 = new Uint16Array(newBuffer);
HEAPU32 = new Uint32Array(newBuffer);
HEAPF32 = new Float32Array(newBuffer);
HEAPF64 = new Float64Array(newBuffer);
buffer = newBuffer;
memory.buffer = buffer;
bufferView = HEAPU8;
}
return oldPages;
}
return {
"__wasm_call_ctors": __wasm_call_ctors, 
"__indirect_function_table": FUNCTION_TABLE, 
"malloc": dlmalloc, 
"free": dlfree, 
"animgenInit": animgenInit, 
"animgenAllocate": animgenAllocate, 
"animgenSetOutput": animgenSetOutput, 
"animgenSetAvatar": animgenSetAvatar, 
"animgenSetSequence": animgenSetSequence, 
"animgenGenerateFrames": animgenGenerateFrames, 
"animgenDeAllocate": animgenDeAllocate, 
"animgenTerminate": animgenTerminate, 
"__errno_location": __errno_location, 
"setThrew": setThrew, 
"stackSave": stackSave, 
"stackRestore": stackRestore, 
"stackAlloc": stackAlloc, 
"__cxa_can_catch": __cxa_can_catch, 
"__cxa_is_pointer_type": __cxa_is_pointer_type, 
"dynCall_jiji": legalstub$dynCall_jiji
};
}
return asmFunc(asmLibraryArg);
}
// EMSCRIPTEN_END_ASM
)(asmLibraryArg);
},
instantiate: /** @suppress{checkTypes} */ function(binary, info) {
return {
then: function(ok) {
var module = new WebAssembly.Module(binary);
ok({
'instance': new WebAssembly.Instance(module)
});
}
};
},
RuntimeError: Error
};
// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];
// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
abort('no native wasm support detected');
}
// include: runtime_safe_heap.js
// In MINIMAL_RUNTIME, setValue() and getValue() are only available when
// building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available
// (although their use is highly discouraged due to perf penalties)
/** @param {number} ptr
@param {number} value
@param {string} type
@param {number|boolean=} noSafe */
function setValue(ptr, value, type = 'i8', noSafe) {
if (type.endsWith('*')) type = 'i32';
switch (type) {
case 'i1': HEAP8[((ptr)>>0)] = value; break;
case 'i8': HEAP8[((ptr)>>0)] = value; break;
case 'i16': HEAP16[((ptr)>>1)] = value; break;
case 'i32': HEAP32[((ptr)>>2)] = value; break;
case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
case 'float': HEAPF32[((ptr)>>2)] = value; break;
case 'double': HEAPF64[((ptr)>>3)] = value; break;
default: abort('invalid type for setValue: ' + type);
}
}
/** @param {number} ptr
@param {string} type
@param {number|boolean=} noSafe */
function getValue(ptr, type = 'i8', noSafe) {
if (type.endsWith('*')) type = 'i32';
switch (type) {
case 'i1': return HEAP8[((ptr)>>0)];
case 'i8': return HEAP8[((ptr)>>0)];
case 'i16': return HEAP16[((ptr)>>1)];
case 'i32': return HEAP32[((ptr)>>2)];
case 'i64': return HEAP32[((ptr)>>2)];
case 'float': return HEAPF32[((ptr)>>2)];
case 'double': return Number(HEAPF64[((ptr)>>3)]);
default: abort('invalid type for getValue: ' + type);
}
}
// end include: runtime_safe_heap.js
// Wasm globals
var wasmMemory;
//========================================
// Runtime essentials
//========================================
// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;
// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;
/** @type {function(*, string=)} */
function assert(condition, text) {
if (!condition) {
// This build was created without ASSERTIONS defined.  `assert()` should not
// ever be called in this configuration but in case there are callers in
// the wild leave this simple abort() implemenation here for now.
abort(text);
}
}
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
var func = Module['_' + ident]; // closure exported function
return func;
}
// C calling interface.
/** @param {string|null=} returnType
@param {Array=} argTypes
@param {Arguments|Array=} args
@param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
// For fast lookup of conversion functions
var toC = {
'string': function(str) {
var ret = 0;
if (str !== null && str !== undefined && str !== 0) { // null string
// at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
var len = (str.length << 2) + 1;
ret = stackAlloc(len);
stringToUTF8(str, ret, len);
}
return ret;
},
'array': function(arr) {
var ret = stackAlloc(arr.length);
writeArrayToMemory(arr, ret);
return ret;
}
};
function convertReturnValue(ret) {
if (returnType === 'string') return UTF8ToString(ret);
if (returnType === 'boolean') return Boolean(ret);
return ret;
}
var func = getCFunc(ident);
var cArgs = [];
var stack = 0;
if (args) {
for (var i = 0; i < args.length; i++) {
var converter = toC[argTypes[i]];
if (converter) {
if (stack === 0) stack = stackSave();
cArgs[i] = converter(args[i]);
} else {
cArgs[i] = args[i];
}
}
}
var ret = func.apply(null, cArgs);
function onDone(ret) {
if (stack !== 0) stackRestore(stack);
return convertReturnValue(ret);
}
ret = onDone(ret);
return ret;
}
/** @param {string=} returnType
@param {Array=} argTypes
@param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
argTypes = argTypes || [];
// When the function takes numbers and returns a number, we can just return
// the original function
var numericArgs = argTypes.every(function(type){ return type === 'number'});
var numericRet = returnType !== 'string';
if (numericRet && numericArgs && !opts) {
return getCFunc(ident);
}
return function() {
return ccall(ident, returnType, argTypes, arguments, opts);
}
}
// include: runtime_legacy.js
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
/**
* allocate(): This function is no longer used by emscripten but is kept around to avoid
*             breaking external users.
*             You should normally not use allocate(), and instead allocate
*             memory using _malloc()/stackAlloc(), initialize it with
*             setValue(), and so forth.
* @param {(Uint8Array|Array<number>)} slab: An array of data.
* @param {number=} allocator : How to allocate memory, see ALLOC_*
*/
function allocate(slab, allocator) {
var ret;
if (allocator == ALLOC_STACK) {
ret = stackAlloc(slab.length);
} else {
ret = _malloc(slab.length);
}
if (!slab.subarray && !slab.slice) {
slab = new Uint8Array(slab);
}
HEAPU8.set(slab, ret);
return ret;
}
// end include: runtime_legacy.js
// include: runtime_strings.js
// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.
var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;
// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
* heapOrArray is either a regular array, or a JavaScript typed array view.
* @param {number} idx
* @param {number=} maxBytesToRead
* @return {string}
*/
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
var endIdx = idx + maxBytesToRead;
var endPtr = idx;
// TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
// Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
// (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
} else {
var str = '';
// If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
while (idx < endPtr) {
// For UTF8 byte structure, see:
// http://en.wikipedia.org/wiki/UTF-8#Description
// https://www.ietf.org/rfc/rfc2279.txt
// https://tools.ietf.org/html/rfc3629
var u0 = heapOrArray[idx++];
if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
var u1 = heapOrArray[idx++] & 63;
if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
var u2 = heapOrArray[idx++] & 63;
if ((u0 & 0xF0) == 0xE0) {
u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
} else {
u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
}
if (u0 < 0x10000) {
str += String.fromCharCode(u0);
} else {
var ch = u0 - 0x10000;
str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
}
}
}
return str;
}
// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
* @param {number} ptr
* @param {number=} maxBytesToRead
* @return {string}
*/
function UTF8ToString(ptr, maxBytesToRead) {
;
return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}
// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
return 0;
var startIdx = outIdx;
var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
// See http://unicode.org/faq/utf_bom.html#utf16-3
// For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
var u = str.charCodeAt(i); // possibly a lead surrogate
if (u >= 0xD800 && u <= 0xDFFF) {
var u1 = str.charCodeAt(++i);
u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
}
if (u <= 0x7F) {
if (outIdx >= endIdx) break;
heap[outIdx++] = u;
} else if (u <= 0x7FF) {
if (outIdx + 1 >= endIdx) break;
heap[outIdx++] = 0xC0 | (u >> 6);
heap[outIdx++] = 0x80 | (u & 63);
} else if (u <= 0xFFFF) {
if (outIdx + 2 >= endIdx) break;
heap[outIdx++] = 0xE0 | (u >> 12);
heap[outIdx++] = 0x80 | ((u >> 6) & 63);
heap[outIdx++] = 0x80 | (u & 63);
} else {
if (outIdx + 3 >= endIdx) break;
heap[outIdx++] = 0xF0 | (u >> 18);
heap[outIdx++] = 0x80 | ((u >> 12) & 63);
heap[outIdx++] = 0x80 | ((u >> 6) & 63);
heap[outIdx++] = 0x80 | (u & 63);
}
}
// Null-terminate the pointer to the buffer.
heap[outIdx] = 0;
return outIdx - startIdx;
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF8(str, outPtr, maxBytesToWrite) {
return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
var len = 0;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var u = str.charCodeAt(i); // possibly a lead surrogate
if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
if (u <= 0x7F) ++len;
else if (u <= 0x7FF) len += 2;
else if (u <= 0xFFFF) len += 3;
else len += 4;
}
return len;
}
// end include: runtime_strings.js
// include: runtime_strings_extra.js
// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.
// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function AsciiToString(ptr) {
var str = '';
while (1) {
var ch = HEAPU8[((ptr++)>>0)];
if (!ch) return str;
str += String.fromCharCode(ch);
}
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.
function stringToAscii(str, outPtr) {
return writeAsciiToMemory(str, outPtr, false);
}
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr, maxBytesToRead) {
var endPtr = ptr;
// TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
// Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
var idx = endPtr >> 1;
var maxIdx = idx + maxBytesToRead / 2;
// If maxBytesToRead is not passed explicitly, it will be undefined, and this
// will always evaluate to true. This saves on code size.
while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
endPtr = idx << 1;
if (endPtr - ptr > 32 && UTF16Decoder) {
return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
} else {
var str = '';
// If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
// will always evaluate to true. The loop is then terminated on the first null char.
for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
if (codeUnit == 0) break;
// fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
str += String.fromCharCode(codeUnit);
}
return str;
}
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF16(str, outPtr, maxBytesToWrite) {
// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
if (maxBytesToWrite === undefined) {
maxBytesToWrite = 0x7FFFFFFF;
}
if (maxBytesToWrite < 2) return 0;
maxBytesToWrite -= 2; // Null terminator.
var startPtr = outPtr;
var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
for (var i = 0; i < numCharsToWrite; ++i) {
// charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
HEAP16[((outPtr)>>1)] = codeUnit;
outPtr += 2;
}
// Null-terminate the pointer to the HEAP.
HEAP16[((outPtr)>>1)] = 0;
return outPtr - startPtr;
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF16(str) {
return str.length*2;
}
function UTF32ToString(ptr, maxBytesToRead) {
var i = 0;
var str = '';
// If maxBytesToRead is not passed explicitly, it will be undefined, and this
// will always evaluate to true. This saves on code size.
while (!(i >= maxBytesToRead / 4)) {
var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
if (utf32 == 0) break;
++i;
// Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
// See http://unicode.org/faq/utf_bom.html#utf16-3
if (utf32 >= 0x10000) {
var ch = utf32 - 0x10000;
str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
} else {
str += String.fromCharCode(utf32);
}
}
return str;
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF32(str, outPtr, maxBytesToWrite) {
// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
if (maxBytesToWrite === undefined) {
maxBytesToWrite = 0x7FFFFFFF;
}
if (maxBytesToWrite < 4) return 0;
var startPtr = outPtr;
var endPtr = startPtr + maxBytesToWrite - 4;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
var trailSurrogate = str.charCodeAt(++i);
codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
}
HEAP32[((outPtr)>>2)] = codeUnit;
outPtr += 4;
if (outPtr + 4 > endPtr) break;
}
// Null-terminate the pointer to the HEAP.
HEAP32[((outPtr)>>2)] = 0;
return outPtr - startPtr;
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF32(str) {
var len = 0;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var codeUnit = str.charCodeAt(i);
if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
len += 4;
}
return len;
}
// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
var size = lengthBytesUTF8(str) + 1;
var ret = _malloc(size);
if (ret) stringToUTF8Array(str, HEAP8, ret, size);
return ret;
}
// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
var size = lengthBytesUTF8(str) + 1;
var ret = stackAlloc(size);
stringToUTF8Array(str, HEAP8, ret, size);
return ret;
}
// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
@param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');
var /** @type {number} */ lastChar, /** @type {number} */ end;
if (dontAddNull) {
// stringToUTF8Array always appends null. If we don't want to do that, remember the
// character that existed at the location where the null will be placed, and restore
// that after the write (below).
end = buffer + lengthBytesUTF8(string);
lastChar = HEAP8[end];
}
stringToUTF8(string, buffer, Infinity);
if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
function writeArrayToMemory(array, buffer) {
HEAP8.set(array, buffer);
}
/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
for (var i = 0; i < str.length; ++i) {
HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
}
// Null-terminate the pointer to the HEAP.
if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}
// end include: runtime_strings_extra.js
// Memory management
var HEAP,
/** @type {!ArrayBuffer} */
buffer,
/** @type {!Int8Array} */
HEAP8,
/** @type {!Uint8Array} */
HEAPU8,
/** @type {!Int16Array} */
HEAP16,
/** @type {!Uint16Array} */
HEAPU16,
/** @type {!Int32Array} */
HEAP32,
/** @type {!Uint32Array} */
HEAPU32,
/** @type {!Float32Array} */
HEAPF32,
/** @type {!Float64Array} */
HEAPF64;
function updateGlobalBufferAndViews(buf) {
buffer = buf;
Module['HEAP8'] = HEAP8 = new Int8Array(buf);
Module['HEAP16'] = HEAP16 = new Int16Array(buf);
Module['HEAP32'] = HEAP32 = new Int32Array(buf);
Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}
var TOTAL_STACK = 5242880;
var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)
if (Module['wasmMemory']) {
wasmMemory = Module['wasmMemory'];
} else
{
wasmMemory = new WebAssembly.Memory({
'initial': INITIAL_MEMORY / 65536,
// In theory we should not need to emit the maximum if we want "unlimited"
// or 4GB of memory, but VMs error on that atm, see
// https://github.com/emscripten-core/emscripten/issues/14130
// And in the pthreads case we definitely need to emit a maximum. So
// always emit one.
'maximum': 2147483648 / 65536
});
}
if (wasmMemory) {
buffer = wasmMemory.buffer;
}
// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);
// end include: runtime_init_memory.js
// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;
// end include: runtime_init_table.js
// include: runtime_stack_check.js
// end include: runtime_stack_check.js
// include: runtime_assertions.js
// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called
var runtimeInitialized = false;
function keepRuntimeAlive() {
return noExitRuntime;
}
function preRun() {
if (Module['preRun']) {
if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
while (Module['preRun'].length) {
addOnPreRun(Module['preRun'].shift());
}
}
callRuntimeCallbacks(__ATPRERUN__);
}
function initRuntime() {
runtimeInitialized = true;
if (!Module["noFSInit"] && !FS.init.initialized)
FS.init();
FS.ignorePermissions = false;
TTY.init();
callRuntimeCallbacks(__ATINIT__);
}
function postRun() {
if (Module['postRun']) {
if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
while (Module['postRun'].length) {
addOnPostRun(Module['postRun'].shift());
}
}
callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
__ATPRERUN__.unshift(cb);
}
function addOnInit(cb) {
__ATINIT__.unshift(cb);
}
function addOnExit(cb) {
}
function addOnPostRun(cb) {
__ATPOSTRUN__.unshift(cb);
}
// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc
// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function getUniqueRunDependency(id) {
return id;
}
function addRunDependency(id) {
runDependencies++;
if (Module['monitorRunDependencies']) {
Module['monitorRunDependencies'](runDependencies);
}
}
function removeRunDependency(id) {
runDependencies--;
if (Module['monitorRunDependencies']) {
Module['monitorRunDependencies'](runDependencies);
}
if (runDependencies == 0) {
if (runDependencyWatcher !== null) {
clearInterval(runDependencyWatcher);
runDependencyWatcher = null;
}
if (dependenciesFulfilled) {
var callback = dependenciesFulfilled;
dependenciesFulfilled = null;
callback(); // can add another dependenciesFulfilled
}
}
}
/** @param {string|number=} what */
function abort(what) {
{
if (Module['onAbort']) {
Module['onAbort'](what);
}
}
what = 'Aborted(' + what + ')';
// TODO(sbc): Should we remove printing and leave it up to whoever
// catches the exception?
err(what);
ABORT = true;
EXITSTATUS = 1;
what += '. Build with -sASSERTIONS for more info.';
// Use a wasm runtime error, because a JS error might be seen as a foreign
// exception, which means we'd run destructors on it. We need the error to
// simply make the program stop.
// Suppress closure compiler warning here. Closure compiler's builtin extern
// defintion for WebAssembly.RuntimeError claims it takes no arguments even
// though it can.
// TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
/** @suppress {checkTypes} */
var e = new WebAssembly.RuntimeError(what);
// Throw the error whether or not MODULARIZE is set because abort is used
// in code paths apart from instantiation where an exception is expected
// to be thrown when abort is called.
throw e;
}
// {{MEM_INITIALIZER}}
// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';
// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
// Prefix of data URIs emitted by SINGLE_FILE and related options.
return filename.startsWith(dataURIPrefix);
}
// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
return filename.startsWith('file://');
}
// end include: URIUtils.js
var wasmBinaryFile;
wasmBinaryFile = 'animgencwa.wasm';
if (!isDataURI(wasmBinaryFile)) {
wasmBinaryFile = locateFile(wasmBinaryFile);
}
function getBinary(file) {
try {
if (file == wasmBinaryFile && wasmBinary) {
return new Uint8Array(wasmBinary);
}
var binary = tryParseAsDataURI(file);
if (binary) {
return binary;
}
if (readBinary) {
return readBinary(file);
} else {
throw "both async and sync fetching of the wasm failed";
}
}
catch (err) {
abort(err);
}
}
function getBinaryPromise() {
// If we don't have the binary yet, try to to load it asynchronously.
// Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
// See https://github.com/github/fetch/pull/92#issuecomment-140665932
// Cordova or Electron apps are typically loaded from a file:// url.
// So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
if (typeof fetch == 'function'
&& !isFileURI(wasmBinaryFile)
) {
return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
if (!response['ok']) {
throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
}
return response['arrayBuffer']();
}).catch(function () {
return getBinary(wasmBinaryFile);
});
}
else {
if (readAsync) {
// fetch is not available or url is file => try XHR (readAsync uses XHR internally)
return new Promise(function(resolve, reject) {
readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
});
}
}
}
// Otherwise, getBinary should be able to get it synchronously
return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}
// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
// prepare imports
var info = {
'env': asmLibraryArg,
'wasi_snapshot_preview1': asmLibraryArg,
};
// Load the wasm module and create an instance of using native support in the JS engine.
// handle a generated wasm instance, receiving its exports and
// performing other necessary setup
/** @param {WebAssembly.Module=} module*/
function receiveInstance(instance, module) {
var exports = instance.exports;
Module['asm'] = exports;
wasmTable = Module['asm']['__indirect_function_table'];
addOnInit(Module['asm']['__wasm_call_ctors']);
removeRunDependency('wasm-instantiate');
}
// we can't run yet (except in a pthread, where we have a custom sync instantiator)
addRunDependency('wasm-instantiate');
// Prefer streaming instantiation if available.
function receiveInstantiationResult(result) {
// 'result' is a ResultObject object which has both the module and instance.
// receiveInstance() will swap in the exports (to Module.asm) so they can be called
// TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
// When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
receiveInstance(result['instance']);
}
function instantiateArrayBuffer(receiver) {
return getBinaryPromise().then(function(binary) {
return WebAssembly.instantiate(binary, info);
}).then(function (instance) {
return instance;
}).then(receiver, function(reason) {
err('failed to asynchronously prepare wasm: ' + reason);
abort(reason);
});
}
function instantiateAsync() {
if (!wasmBinary &&
typeof WebAssembly.instantiateStreaming == 'function' &&
!isDataURI(wasmBinaryFile) &&
// Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
!isFileURI(wasmBinaryFile) &&
typeof fetch == 'function') {
return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
// Suppress closure warning here since the upstream definition for
// instantiateStreaming only allows Promise<Repsponse> rather than
// an actual Response.
// TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
/** @suppress {checkTypes} */
var result = WebAssembly.instantiateStreaming(response, info);
return result.then(
receiveInstantiationResult,
function(reason) {
// We expect the most common failure cause to be a bad MIME type for the binary,
// in which case falling back to ArrayBuffer instantiation should work.
err('wasm streaming compile failed: ' + reason);
err('falling back to ArrayBuffer instantiation');
return instantiateArrayBuffer(receiveInstantiationResult);
});
});
} else {
return instantiateArrayBuffer(receiveInstantiationResult);
}
}
// User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
// to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
// to any other async startup actions they are performing.
// Also pthreads and wasm workers initialize the wasm instance through this path.
if (Module['instantiateWasm']) {
try {
var exports = Module['instantiateWasm'](info, receiveInstance);
return exports;
} catch(e) {
err('Module.instantiateWasm callback failed with error: ' + e);
return false;
}
}
instantiateAsync();
return {}; // no exports yet; we'll fill them in later
}
// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;
// === Body ===
var ASM_CONSTS = {
66088: function($0) {jName = Module.UTF8ToString($0); console.log('buildFromXMLCell: filename '+jName+'. Found no avatarStaticData');},  
66205: function($0) {jName = Module.UTF8ToString($0); console.log('buildFromXMLCell: filename '+jName+'. Found no avatar');},  
66312: function($0) {jName = Module.UTF8ToString($0); console.log('buildFromXMLCell: filename '+jName+'. Found no skeleton');},  
66421: function($0) {jName = Module.UTF8ToString($0); console.log('buildFromXMLCell: filename '+jName+'. Found no joint');},  
66527: function($0, $1, $2) {Module.CB_SeqStart($0, $1, $2);},  
66563: function($0, $1, $2, $3) {jGloss = Module.UTF8ToString($1); Module.CB_SignStart($0, jGloss, $2, $3);},  
66642: function($0, $1, $2, $3, $4) {Module.CB_FrameStart($0,$1,$2,$3,$4);},  
66684: function($0, $1, $2) {fourCC = Module.UTF8ToString($1); newMorph = {id4cc:fourCC}; newMorph.amount = $2; Module.CB_Morph($0, newMorph);},  
66802: function($0, $1, $2, $3, $4, $5, $6, $7, $8) {fourCC = Module.UTF8ToString($1); transArray = [$6]; transArray.push($7); transArray.push($8); newBone = {id4cc:fourCC}; newBone.trans = transArray; rotArray = [$2]; rotArray.push($3); rotArray.push($4); rotArray.push($5); newBone.rot = rotArray; Module.CB_Bone($0, newBone);},  
67082: function($0) {Module.Util_Debug('Test Debug in AGIPostMortem'); Module.CB_SeqEnd($0);},  
67158: function($0) {jName = Module.UTF8ToString($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught unknown exception');},  
67279: function($0) {jName = Module.UTF8ToString($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught GeneralError');},  
67395: function($0) {jName = Module.UTF8ToString($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught AnimgenError');}
};
function callRuntimeCallbacks(callbacks) {
while (callbacks.length > 0) {
var callback = callbacks.shift();
if (typeof callback == 'function') {
callback(Module); // Pass the module as the first argument.
continue;
}
var func = callback.func;
if (typeof func == 'number') {
if (callback.arg === undefined) {
// Run the wasm function ptr with signature 'v'. If no function
// with such signature was exported, this call does not need
// to be emitted (and would confuse Closure)
getWasmTableEntry(func)();
} else {
// If any function with signature 'vi' was exported, run
// the callback with that signature.
getWasmTableEntry(func)(callback.arg);
}
} else {
func(callback.arg === undefined ? null : callback.arg);
}
}
}
function withStackSave(f) {
var stack = stackSave();
var ret = f();
stackRestore(stack);
return ret;
}
function demangle(func) {
return func;
}
function demangleAll(text) {
var regex =
/\b_Z[\w\d_]+/g;
return text.replace(regex,
function(x) {
var y = demangle(x);
return x === y ? x : (y + ' [' + x + ']');
});
}
function getWasmTableEntry(funcPtr) {
// In -Os and -Oz builds, do not implement a JS side wasm table mirror for small
// code size, but directly access wasmTable, which is a bit slower as uncached.
return wasmTable.get(funcPtr);
}
function handleException(e) {
// Certain exception types we do not treat as errors since they are used for
// internal control flow.
// 1. ExitStatus, which is thrown by exit()
// 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
//    that wish to return to JS event loop.
if (e instanceof ExitStatus || e == 'unwind') {
return EXITSTATUS;
}
quit_(1, e);
}
function jsStackTrace() {
var error = new Error();
if (!error.stack) {
// IE10+ special cases: It does have callstack info, but it is only
// populated if an Error object is thrown, so try that as a special-case.
try {
throw new Error();
} catch(e) {
error = e;
}
if (!error.stack) {
return '(no stack trace available)';
}
}
return error.stack.toString();
}
function setWasmTableEntry(idx, func) {
wasmTable.set(idx, func);
}
function stackTrace() {
var js = jsStackTrace();
if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
return demangleAll(js);
}
function ___cxa_allocate_exception(size) {
// Thrown object is prepended by exception metadata block
return _malloc(size + 24) + 24;
}
var exceptionCaught =  [];
function exception_addRef(info) {
info.add_ref();
}
var uncaughtExceptionCount = 0;
function ___cxa_begin_catch(ptr) {
var info = new ExceptionInfo(ptr);
if (!info.get_caught()) {
info.set_caught(true);
uncaughtExceptionCount--;
}
info.set_rethrown(false);
exceptionCaught.push(info);
exception_addRef(info);
return info.get_exception_ptr();
}
var exceptionLast = 0;
/** @constructor */
function ExceptionInfo(excPtr) {
this.excPtr = excPtr;
this.ptr = excPtr - 24;
this.set_type = function(type) {
HEAPU32[(((this.ptr)+(4))>>2)] = type;
};
this.get_type = function() {
return HEAPU32[(((this.ptr)+(4))>>2)];
};
this.set_destructor = function(destructor) {
HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
};
this.get_destructor = function() {
return HEAPU32[(((this.ptr)+(8))>>2)];
};
this.set_refcount = function(refcount) {
HEAP32[((this.ptr)>>2)] = refcount;
};
this.set_caught = function (caught) {
caught = caught ? 1 : 0;
HEAP8[(((this.ptr)+(12))>>0)] = caught;
};
this.get_caught = function () {
return HEAP8[(((this.ptr)+(12))>>0)] != 0;
};
this.set_rethrown = function (rethrown) {
rethrown = rethrown ? 1 : 0;
HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
};
this.get_rethrown = function () {
return HEAP8[(((this.ptr)+(13))>>0)] != 0;
};
// Initialize native structure fields. Should be called once after allocated.
this.init = function(type, destructor) {
this.set_adjusted_ptr(0);
this.set_type(type);
this.set_destructor(destructor);
this.set_refcount(0);
this.set_caught(false);
this.set_rethrown(false);
}
this.add_ref = function() {
var value = HEAP32[((this.ptr)>>2)];
HEAP32[((this.ptr)>>2)] = value + 1;
};
// Returns true if last reference released.
this.release_ref = function() {
var prev = HEAP32[((this.ptr)>>2)];
HEAP32[((this.ptr)>>2)] = prev - 1;
return prev === 1;
};
this.set_adjusted_ptr = function(adjustedPtr) {
HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
};
this.get_adjusted_ptr = function() {
return HEAPU32[(((this.ptr)+(16))>>2)];
};
// Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
// when the pointer is casted to some of the exception object base classes (e.g. when virtual
// inheritance is used). When a pointer is thrown this method should return the thrown pointer
// itself.
this.get_exception_ptr = function() {
// Work around a fastcomp bug, this code is still included for some reason in a build without
// exceptions support.
var isPointer = ___cxa_is_pointer_type(this.get_type());
if (isPointer) {
return HEAPU32[((this.excPtr)>>2)];
}
var adjusted = this.get_adjusted_ptr();
if (adjusted !== 0) return adjusted;
return this.excPtr;
};
}
function ___cxa_free_exception(ptr) {
return _free(new ExceptionInfo(ptr).ptr);
}
function exception_decRef(info) {
// A rethrown exception can reach refcount 0; it must not be discarded
// Its next handler will clear the rethrown flag and addRef it, prior to
// final decRef and destruction here
if (info.release_ref() && !info.get_rethrown()) {
var destructor = info.get_destructor();
if (destructor) {
// In Wasm, destructors return 'this' as in ARM
getWasmTableEntry(destructor)(info.excPtr);
}
___cxa_free_exception(info.excPtr);
}
}
function ___cxa_end_catch() {
// Clear state flag.
_setThrew(0);
// Call destructor if one is registered then clear it.
var info = exceptionCaught.pop();
exception_decRef(info);
exceptionLast = 0; // XXX in decRef?
}
function ___resumeException(ptr) {
if (!exceptionLast) { exceptionLast = ptr; }
throw ptr;
}
function ___cxa_find_matching_catch_2() {
var thrown = exceptionLast;
if (!thrown) {
// just pass through the null ptr
setTempRet0(0);
return 0;
}
var info = new ExceptionInfo(thrown);
info.set_adjusted_ptr(thrown);
var thrownType = info.get_type();
if (!thrownType) {
// just pass through the thrown ptr
setTempRet0(0);
return thrown;
}
var typeArray = Array.prototype.slice.call(arguments);
// can_catch receives a **, add indirection
// The different catch blocks are denoted by different types.
// Due to inheritance, those types may not precisely match the
// type of the thrown object. Find one which matches, and
// return the type of the catch block which should be called.
for (var i = 0; i < typeArray.length; i++) {
var caughtType = typeArray[i];
if (caughtType === 0 || caughtType === thrownType) {
// Catch all clause matched or exactly the same type is caught
break;
}
var adjusted_ptr_addr = info.ptr + 16;
if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
setTempRet0(caughtType);
return thrown;
}
}
setTempRet0(thrownType);
return thrown;
}
function ___cxa_find_matching_catch_3() {
var thrown = exceptionLast;
if (!thrown) {
// just pass through the null ptr
setTempRet0(0);
return 0;
}
var info = new ExceptionInfo(thrown);
info.set_adjusted_ptr(thrown);
var thrownType = info.get_type();
if (!thrownType) {
// just pass through the thrown ptr
setTempRet0(0);
return thrown;
}
var typeArray = Array.prototype.slice.call(arguments);
// can_catch receives a **, add indirection
// The different catch blocks are denoted by different types.
// Due to inheritance, those types may not precisely match the
// type of the thrown object. Find one which matches, and
// return the type of the catch block which should be called.
for (var i = 0; i < typeArray.length; i++) {
var caughtType = typeArray[i];
if (caughtType === 0 || caughtType === thrownType) {
// Catch all clause matched or exactly the same type is caught
break;
}
var adjusted_ptr_addr = info.ptr + 16;
if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
setTempRet0(caughtType);
return thrown;
}
}
setTempRet0(thrownType);
return thrown;
}
function ___cxa_find_matching_catch_5() {
var thrown = exceptionLast;
if (!thrown) {
// just pass through the null ptr
setTempRet0(0);
return 0;
}
var info = new ExceptionInfo(thrown);
info.set_adjusted_ptr(thrown);
var thrownType = info.get_type();
if (!thrownType) {
// just pass through the thrown ptr
setTempRet0(0);
return thrown;
}
var typeArray = Array.prototype.slice.call(arguments);
// can_catch receives a **, add indirection
// The different catch blocks are denoted by different types.
// Due to inheritance, those types may not precisely match the
// type of the thrown object. Find one which matches, and
// return the type of the catch block which should be called.
for (var i = 0; i < typeArray.length; i++) {
var caughtType = typeArray[i];
if (caughtType === 0 || caughtType === thrownType) {
// Catch all clause matched or exactly the same type is caught
break;
}
var adjusted_ptr_addr = info.ptr + 16;
if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
setTempRet0(caughtType);
return thrown;
}
}
setTempRet0(thrownType);
return thrown;
}
function ___cxa_rethrow() {
var info = exceptionCaught.pop();
if (!info) {
abort('no exception to throw');
}
var ptr = info.excPtr;
if (!info.get_rethrown()) {
// Only pop if the corresponding push was through rethrow_primary_exception
exceptionCaught.push(info);
info.set_rethrown(true);
info.set_caught(false);
uncaughtExceptionCount++;
}
exceptionLast = ptr;
throw ptr;
}
function ___cxa_throw(ptr, type, destructor) {
var info = new ExceptionInfo(ptr);
// Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
info.init(type, destructor);
exceptionLast = ptr;
uncaughtExceptionCount++;
throw ptr;
}
function ___cxa_uncaught_exceptions() {
return uncaughtExceptionCount;
}
function setErrNo(value) {
HEAP32[((___errno_location())>>2)] = value;
return value;
}
var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
return splitPathRe.exec(filename).slice(1);
},normalizeArray:(parts, allowAboveRoot) => {
// if the path tries to go above the root, `up` ends up > 0
var up = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var last = parts[i];
if (last === '.') {
parts.splice(i, 1);
} else if (last === '..') {
parts.splice(i, 1);
up++;
} else if (up) {
parts.splice(i, 1);
up--;
}
}
// if the path is allowed to go above the root, restore leading ..s
if (allowAboveRoot) {
for (; up; up--) {
parts.unshift('..');
}
}
return parts;
},normalize:(path) => {
var isAbsolute = PATH.isAbs(path),
trailingSlash = path.substr(-1) === '/';
// Normalize the path
path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
if (!path && !isAbsolute) {
path = '.';
}
if (path && trailingSlash) {
path += '/';
}
return (isAbsolute ? '/' : '') + path;
},dirname:(path) => {
var result = PATH.splitPath(path),
root = result[0],
dir = result[1];
if (!root && !dir) {
// No dirname whatsoever
return '.';
}
if (dir) {
// It has a dirname, strip trailing slash
dir = dir.substr(0, dir.length - 1);
}
return root + dir;
},basename:(path) => {
// EMSCRIPTEN return '/'' for '/', not an empty string
if (path === '/') return '/';
path = PATH.normalize(path);
path = path.replace(/\/$/, "");
var lastSlash = path.lastIndexOf('/');
if (lastSlash === -1) return path;
return path.substr(lastSlash+1);
},join:function() {
var paths = Array.prototype.slice.call(arguments, 0);
return PATH.normalize(paths.join('/'));
},join2:(l, r) => {
return PATH.normalize(l + '/' + r);
}};
function getRandomDevice() {
if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
// for modern web browsers
var randomBuffer = new Uint8Array(1);
return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
} else
if (ENVIRONMENT_IS_NODE) {
// for nodejs with or without crypto support included
try {
var crypto_module = require('crypto');
// nodejs has crypto support
return function() { return crypto_module['randomBytes'](1)[0]; };
} catch (e) {
// nodejs doesn't have crypto support
}
}
// we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
return function() { abort("randomDevice"); };
}
var PATH_FS = {resolve:function() {
var resolvedPath = '',
resolvedAbsolute = false;
for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
var path = (i >= 0) ? arguments[i] : FS.cwd();
// Skip empty and invalid entries
if (typeof path != 'string') {
throw new TypeError('Arguments to path.resolve must be strings');
} else if (!path) {
return ''; // an invalid portion invalidates the whole thing
}
resolvedPath = path + '/' + resolvedPath;
resolvedAbsolute = PATH.isAbs(path);
}
// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)
resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
},relative:(from, to) => {
from = PATH_FS.resolve(from).substr(1);
to = PATH_FS.resolve(to).substr(1);
function trim(arr) {
var start = 0;
for (; start < arr.length; start++) {
if (arr[start] !== '') break;
}
var end = arr.length - 1;
for (; end >= 0; end--) {
if (arr[end] !== '') break;
}
if (start > end) return [];
return arr.slice(start, end - start + 1);
}
var fromParts = trim(from.split('/'));
var toParts = trim(to.split('/'));
var length = Math.min(fromParts.length, toParts.length);
var samePartsLength = length;
for (var i = 0; i < length; i++) {
if (fromParts[i] !== toParts[i]) {
samePartsLength = i;
break;
}
}
var outputParts = [];
for (var i = samePartsLength; i < fromParts.length; i++) {
outputParts.push('..');
}
outputParts = outputParts.concat(toParts.slice(samePartsLength));
return outputParts.join('/');
}};
var TTY = {ttys:[],init:function () {
// https://github.com/emscripten-core/emscripten/pull/1555
// if (ENVIRONMENT_IS_NODE) {
//   // currently, FS.init does not distinguish if process.stdin is a file or TTY
//   // device, it always assumes it's a TTY device. because of this, we're forcing
//   // process.stdin to UTF8 encoding to at least make stdin reading compatible
//   // with text files until FS.init can be refactored.
//   process['stdin']['setEncoding']('utf8');
// }
},shutdown:function() {
// https://github.com/emscripten-core/emscripten/pull/1555
// if (ENVIRONMENT_IS_NODE) {
//   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
//   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
//   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
//   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
//   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
//   process['stdin']['pause']();
// }
},register:function(dev, ops) {
TTY.ttys[dev] = { input: [], output: [], ops: ops };
FS.registerDevice(dev, TTY.stream_ops);
},stream_ops:{open:function(stream) {
var tty = TTY.ttys[stream.node.rdev];
if (!tty) {
throw new FS.ErrnoError(43);
}
stream.tty = tty;
stream.seekable = false;
},close:function(stream) {
// flush any pending line data
stream.tty.ops.flush(stream.tty);
},flush:function(stream) {
stream.tty.ops.flush(stream.tty);
},read:function(stream, buffer, offset, length, pos /* ignored */) {
if (!stream.tty || !stream.tty.ops.get_char) {
throw new FS.ErrnoError(60);
}
var bytesRead = 0;
for (var i = 0; i < length; i++) {
var result;
try {
result = stream.tty.ops.get_char(stream.tty);
} catch (e) {
throw new FS.ErrnoError(29);
}
if (result === undefined && bytesRead === 0) {
throw new FS.ErrnoError(6);
}
if (result === null || result === undefined) break;
bytesRead++;
buffer[offset+i] = result;
}
if (bytesRead) {
stream.node.timestamp = Date.now();
}
return bytesRead;
},write:function(stream, buffer, offset, length, pos) {
if (!stream.tty || !stream.tty.ops.put_char) {
throw new FS.ErrnoError(60);
}
try {
for (var i = 0; i < length; i++) {
stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
}
} catch (e) {
throw new FS.ErrnoError(29);
}
if (length) {
stream.node.timestamp = Date.now();
}
return i;
}},default_tty_ops:{get_char:function(tty) {
if (!tty.input.length) {
var result = null;
if (ENVIRONMENT_IS_NODE) {
// we will read data by chunks of BUFSIZE
var BUFSIZE = 256;
var buf = Buffer.alloc(BUFSIZE);
var bytesRead = 0;
try {
bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
} catch(e) {
// Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
// reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
if (e.toString().includes('EOF')) bytesRead = 0;
else throw e;
}
if (bytesRead > 0) {
result = buf.slice(0, bytesRead).toString('utf-8');
} else {
result = null;
}
} else
if (typeof window != 'undefined' &&
typeof window.prompt == 'function') {
// Browser.
result = window.prompt('Input: ');  // returns null on cancel
if (result !== null) {
result += '\n';
}
} else if (typeof readline == 'function') {
// Command line.
result = readline();
if (result !== null) {
result += '\n';
}
}
if (!result) {
return null;
}
tty.input = intArrayFromString(result, true);
}
return tty.input.shift();
},put_char:function(tty, val) {
if (val === null || val === 10) {
out(UTF8ArrayToString(tty.output, 0));
tty.output = [];
} else {
if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
}
},flush:function(tty) {
if (tty.output && tty.output.length > 0) {
out(UTF8ArrayToString(tty.output, 0));
tty.output = [];
}
}},default_tty1_ops:{put_char:function(tty, val) {
if (val === null || val === 10) {
err(UTF8ArrayToString(tty.output, 0));
tty.output = [];
} else {
if (val != 0) tty.output.push(val);
}
},flush:function(tty) {
if (tty.output && tty.output.length > 0) {
err(UTF8ArrayToString(tty.output, 0));
tty.output = [];
}
}}};
function zeroMemory(address, size) {
HEAPU8.fill(0, address, address + size);
}
function alignMemory(size, alignment) {
return Math.ceil(size / alignment) * alignment;
}
function mmapAlloc(size) {
abort();
}
var MEMFS = {ops_table:null,mount:function(mount) {
return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
},createNode:function(parent, name, mode, dev) {
if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
// no supported
throw new FS.ErrnoError(63);
}
if (!MEMFS.ops_table) {
MEMFS.ops_table = {
dir: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr,
lookup: MEMFS.node_ops.lookup,
mknod: MEMFS.node_ops.mknod,
rename: MEMFS.node_ops.rename,
unlink: MEMFS.node_ops.unlink,
rmdir: MEMFS.node_ops.rmdir,
readdir: MEMFS.node_ops.readdir,
symlink: MEMFS.node_ops.symlink
},
stream: {
llseek: MEMFS.stream_ops.llseek
}
},
file: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr
},
stream: {
llseek: MEMFS.stream_ops.llseek,
read: MEMFS.stream_ops.read,
write: MEMFS.stream_ops.write,
allocate: MEMFS.stream_ops.allocate,
mmap: MEMFS.stream_ops.mmap,
msync: MEMFS.stream_ops.msync
}
},
link: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr,
readlink: MEMFS.node_ops.readlink
},
stream: {}
},
chrdev: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr
},
stream: FS.chrdev_stream_ops
}
};
}
var node = FS.createNode(parent, name, mode, dev);
if (FS.isDir(node.mode)) {
node.node_ops = MEMFS.ops_table.dir.node;
node.stream_ops = MEMFS.ops_table.dir.stream;
node.contents = {};
} else if (FS.isFile(node.mode)) {
node.node_ops = MEMFS.ops_table.file.node;
node.stream_ops = MEMFS.ops_table.file.stream;
node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
// When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
// for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
// penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
node.contents = null; 
} else if (FS.isLink(node.mode)) {
node.node_ops = MEMFS.ops_table.link.node;
node.stream_ops = MEMFS.ops_table.link.stream;
} else if (FS.isChrdev(node.mode)) {
node.node_ops = MEMFS.ops_table.chrdev.node;
node.stream_ops = MEMFS.ops_table.chrdev.stream;
}
node.timestamp = Date.now();
// add the new node to the parent
if (parent) {
parent.contents[name] = node;
parent.timestamp = node.timestamp;
}
return node;
},getFileDataAsTypedArray:function(node) {
if (!node.contents) return new Uint8Array(0);
if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
return new Uint8Array(node.contents);
},expandFileStorage:function(node, newCapacity) {
var prevCapacity = node.contents ? node.contents.length : 0;
if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
// Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
// For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
// avoid overshooting the allocation cap by a very large margin.
var CAPACITY_DOUBLING_MAX = 1024 * 1024;
newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
var oldContents = node.contents;
node.contents = new Uint8Array(newCapacity); // Allocate new storage.
if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
},resizeFileStorage:function(node, newSize) {
if (node.usedBytes == newSize) return;
if (newSize == 0) {
node.contents = null; // Fully decommit when requesting a resize to zero.
node.usedBytes = 0;
} else {
var oldContents = node.contents;
node.contents = new Uint8Array(newSize); // Allocate new storage.
if (oldContents) {
node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
}
node.usedBytes = newSize;
}
},node_ops:{getattr:function(node) {
var attr = {};
// device numbers reuse inode numbers.
attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
attr.ino = node.id;
attr.mode = node.mode;
attr.nlink = 1;
attr.uid = 0;
attr.gid = 0;
attr.rdev = node.rdev;
if (FS.isDir(node.mode)) {
attr.size = 4096;
} else if (FS.isFile(node.mode)) {
attr.size = node.usedBytes;
} else if (FS.isLink(node.mode)) {
attr.size = node.link.length;
} else {
attr.size = 0;
}
attr.atime = new Date(node.timestamp);
attr.mtime = new Date(node.timestamp);
attr.ctime = new Date(node.timestamp);
// NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
//       but this is not required by the standard.
attr.blksize = 4096;
attr.blocks = Math.ceil(attr.size / attr.blksize);
return attr;
},setattr:function(node, attr) {
if (attr.mode !== undefined) {
node.mode = attr.mode;
}
if (attr.timestamp !== undefined) {
node.timestamp = attr.timestamp;
}
if (attr.size !== undefined) {
MEMFS.resizeFileStorage(node, attr.size);
}
},lookup:function(parent, name) {
throw FS.genericErrors[44];
},mknod:function(parent, name, mode, dev) {
return MEMFS.createNode(parent, name, mode, dev);
},rename:function(old_node, new_dir, new_name) {
// if we're overwriting a directory at new_name, make sure it's empty.
if (FS.isDir(old_node.mode)) {
var new_node;
try {
new_node = FS.lookupNode(new_dir, new_name);
} catch (e) {
}
if (new_node) {
for (var i in new_node.contents) {
throw new FS.ErrnoError(55);
}
}
}
// do the internal rewiring
delete old_node.parent.contents[old_node.name];
old_node.parent.timestamp = Date.now()
old_node.name = new_name;
new_dir.contents[new_name] = old_node;
new_dir.timestamp = old_node.parent.timestamp;
old_node.parent = new_dir;
},unlink:function(parent, name) {
delete parent.contents[name];
parent.timestamp = Date.now();
},rmdir:function(parent, name) {
var node = FS.lookupNode(parent, name);
for (var i in node.contents) {
throw new FS.ErrnoError(55);
}
delete parent.contents[name];
parent.timestamp = Date.now();
},readdir:function(node) {
var entries = ['.', '..'];
for (var key in node.contents) {
if (!node.contents.hasOwnProperty(key)) {
continue;
}
entries.push(key);
}
return entries;
},symlink:function(parent, newname, oldpath) {
var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
node.link = oldpath;
return node;
},readlink:function(node) {
if (!FS.isLink(node.mode)) {
throw new FS.ErrnoError(28);
}
return node.link;
}},stream_ops:{read:function(stream, buffer, offset, length, position) {
var contents = stream.node.contents;
if (position >= stream.node.usedBytes) return 0;
var size = Math.min(stream.node.usedBytes - position, length);
if (size > 8 && contents.subarray) { // non-trivial, and typed array
buffer.set(contents.subarray(position, position + size), offset);
} else {
for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
}
return size;
},write:function(stream, buffer, offset, length, position, canOwn) {
// If the buffer is located in main memory (HEAP), and if
// memory can grow, we can't hold on to references of the
// memory buffer, as they may get invalidated. That means we
// need to do copy its contents.
if (buffer.buffer === HEAP8.buffer) {
canOwn = false;
}
if (!length) return 0;
var node = stream.node;
node.timestamp = Date.now();
if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
if (canOwn) {
node.contents = buffer.subarray(offset, offset + length);
node.usedBytes = length;
return length;
} else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
node.contents = buffer.slice(offset, offset + length);
node.usedBytes = length;
return length;
} else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
node.contents.set(buffer.subarray(offset, offset + length), position);
return length;
}
}
// Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
MEMFS.expandFileStorage(node, position+length);
if (node.contents.subarray && buffer.subarray) {
// Use typed array write which is available.
node.contents.set(buffer.subarray(offset, offset + length), position);
} else {
for (var i = 0; i < length; i++) {
node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
}
}
node.usedBytes = Math.max(node.usedBytes, position + length);
return length;
},llseek:function(stream, offset, whence) {
var position = offset;
if (whence === 1) {
position += stream.position;
} else if (whence === 2) {
if (FS.isFile(stream.node.mode)) {
position += stream.node.usedBytes;
}
}
if (position < 0) {
throw new FS.ErrnoError(28);
}
return position;
},allocate:function(stream, offset, length) {
MEMFS.expandFileStorage(stream.node, offset + length);
stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
},mmap:function(stream, address, length, position, prot, flags) {
if (address !== 0) {
// We don't currently support location hints for the address of the mapping
throw new FS.ErrnoError(28);
}
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(43);
}
var ptr;
var allocated;
var contents = stream.node.contents;
// Only make a new copy when MAP_PRIVATE is specified.
if (!(flags & 2) && contents.buffer === buffer) {
// We can't emulate MAP_SHARED when the file is not backed by the buffer
// we're mapping to (e.g. the HEAP buffer).
allocated = false;
ptr = contents.byteOffset;
} else {
// Try to avoid unnecessary slices.
if (position > 0 || position + length < contents.length) {
if (contents.subarray) {
contents = contents.subarray(position, position + length);
} else {
contents = Array.prototype.slice.call(contents, position, position + length);
}
}
allocated = true;
ptr = mmapAlloc(length);
if (!ptr) {
throw new FS.ErrnoError(48);
}
HEAP8.set(contents, ptr);
}
return { ptr: ptr, allocated: allocated };
},msync:function(stream, buffer, offset, length, mmapFlags) {
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(43);
}
if (mmapFlags & 2) {
// MAP_PRIVATE calls need not to be synced back to underlying fs
return 0;
}
var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
// should we check if bytesWritten and length are the same?
return 0;
}}};
/** @param {boolean=} noRunDep */
function asyncLoad(url, onload, onerror, noRunDep) {
var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
readAsync(url, function(arrayBuffer) {
assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
onload(new Uint8Array(arrayBuffer));
if (dep) removeRunDependency(dep);
}, function(event) {
if (onerror) {
onerror();
} else {
throw 'Loading data file "' + url + '" failed.';
}
});
if (dep) addRunDependency(dep);
}
var ERRNO_CODES = {};
var NODEFS = {isWindows:false,staticInit:() => {
NODEFS.isWindows = !!process.platform.match(/^win/);
var flags = process["binding"]("constants");
// Node.js 4 compatibility: it has no namespaces for constants
if (flags["fs"]) {
flags = flags["fs"];
}
NODEFS.flagsForNodeMap = {
"1024": flags["O_APPEND"],
"64": flags["O_CREAT"],
"128": flags["O_EXCL"],
"256": flags["O_NOCTTY"],
"0": flags["O_RDONLY"],
"2": flags["O_RDWR"],
"4096": flags["O_SYNC"],
"512": flags["O_TRUNC"],
"1": flags["O_WRONLY"],
"131072": flags["O_NOFOLLOW"],
};
},convertNodeCode:(e) => {
var code = e.code;
return ERRNO_CODES[code];
},mount:(mount) => {
return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
},createNode:(parent, name, mode, dev) => {
if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
throw new FS.ErrnoError(28);
}
var node = FS.createNode(parent, name, mode);
node.node_ops = NODEFS.node_ops;
node.stream_ops = NODEFS.stream_ops;
return node;
},getMode:(path) => {
var stat;
try {
stat = fs.lstatSync(path);
if (NODEFS.isWindows) {
// Node.js on Windows never represents permission bit 'x', so
// propagate read bits to execute bits
stat.mode = stat.mode | ((stat.mode & 292) >> 2);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
return stat.mode;
},realPath:(node) => {
var parts = [];
while (node.parent !== node) {
parts.push(node.name);
node = node.parent;
}
parts.push(node.mount.opts.root);
parts.reverse();
return PATH.join.apply(null, parts);
},flagsForNode:(flags) => {
flags &= ~2097152; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~2048; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~32768; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~524288; // Some applications may pass it; it makes no sense for a single process.
flags &= ~65536; // Node.js doesn't need this passed in, it errors.
var newFlags = 0;
for (var k in NODEFS.flagsForNodeMap) {
if (flags & k) {
newFlags |= NODEFS.flagsForNodeMap[k];
flags ^= k;
}
}
if (!flags) {
return newFlags;
} else {
throw new FS.ErrnoError(28);
}
},node_ops:{getattr:(node) => {
var path = NODEFS.realPath(node);
var stat;
try {
stat = fs.lstatSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
// node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
// See http://support.microsoft.com/kb/140365
if (NODEFS.isWindows && !stat.blksize) {
stat.blksize = 4096;
}
if (NODEFS.isWindows && !stat.blocks) {
stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
}
return {
dev: stat.dev,
ino: stat.ino,
mode: stat.mode,
nlink: stat.nlink,
uid: stat.uid,
gid: stat.gid,
rdev: stat.rdev,
size: stat.size,
atime: stat.atime,
mtime: stat.mtime,
ctime: stat.ctime,
blksize: stat.blksize,
blocks: stat.blocks
};
},setattr:(node, attr) => {
var path = NODEFS.realPath(node);
try {
if (attr.mode !== undefined) {
fs.chmodSync(path, attr.mode);
// update the common node structure mode as well
node.mode = attr.mode;
}
if (attr.timestamp !== undefined) {
var date = new Date(attr.timestamp);
fs.utimesSync(path, date, date);
}
if (attr.size !== undefined) {
fs.truncateSync(path, attr.size);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},lookup:(parent, name) => {
var path = PATH.join2(NODEFS.realPath(parent), name);
var mode = NODEFS.getMode(path);
return NODEFS.createNode(parent, name, mode);
},mknod:(parent, name, mode, dev) => {
var node = NODEFS.createNode(parent, name, mode, dev);
// create the backing node for this in the fs root as well
var path = NODEFS.realPath(node);
try {
if (FS.isDir(node.mode)) {
fs.mkdirSync(path, node.mode);
} else {
fs.writeFileSync(path, '', { mode: node.mode });
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
return node;
},rename:(oldNode, newDir, newName) => {
var oldPath = NODEFS.realPath(oldNode);
var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
try {
fs.renameSync(oldPath, newPath);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
oldNode.name = newName;
},unlink:(parent, name) => {
var path = PATH.join2(NODEFS.realPath(parent), name);
try {
fs.unlinkSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},rmdir:(parent, name) => {
var path = PATH.join2(NODEFS.realPath(parent), name);
try {
fs.rmdirSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},readdir:(node) => {
var path = NODEFS.realPath(node);
try {
return fs.readdirSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},symlink:(parent, newName, oldPath) => {
var newPath = PATH.join2(NODEFS.realPath(parent), newName);
try {
fs.symlinkSync(oldPath, newPath);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},readlink:(node) => {
var path = NODEFS.realPath(node);
try {
path = fs.readlinkSync(path);
path = nodePath.relative(nodePath.resolve(node.mount.opts.root), path);
return path;
} catch (e) {
if (!e.code) throw e;
// node under windows can return code 'UNKNOWN' here:
// https://github.com/emscripten-core/emscripten/issues/15468
if (e.code === 'UNKNOWN') throw new FS.ErrnoError(28);
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
}},stream_ops:{open:(stream) => {
var path = NODEFS.realPath(stream.node);
try {
if (FS.isFile(stream.node.mode)) {
stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},close:(stream) => {
try {
if (FS.isFile(stream.node.mode) && stream.nfd) {
fs.closeSync(stream.nfd);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},read:(stream, buffer, offset, length, position) => {
// Node.js < 6 compatibility: node errors on 0 length reads
if (length === 0) return 0;
try {
return fs.readSync(stream.nfd, Buffer.from(buffer.buffer), offset, length, position);
} catch (e) {
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},write:(stream, buffer, offset, length, position) => {
try {
return fs.writeSync(stream.nfd, Buffer.from(buffer.buffer), offset, length, position);
} catch (e) {
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
},llseek:(stream, offset, whence) => {
var position = offset;
if (whence === 1) {
position += stream.position;
} else if (whence === 2) {
if (FS.isFile(stream.node.mode)) {
try {
var stat = fs.fstatSync(stream.nfd);
position += stat.size;
} catch (e) {
throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
}
}
}
if (position < 0) {
throw new FS.ErrnoError(28);
}
return position;
},mmap:(stream, address, length, position, prot, flags) => {
if (address !== 0) {
// We don't currently support location hints for the address of the mapping
throw new FS.ErrnoError(28);
}
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(43);
}
var ptr = mmapAlloc(length);
NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
return { ptr: ptr, allocated: true };
},msync:(stream, buffer, offset, length, mmapFlags) => {
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(43);
}
if (mmapFlags & 2) {
// MAP_PRIVATE calls need not to be synced back to underlying fs
return 0;
}
var bytesWritten = NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);
return 0;
}}};
var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {
path = PATH_FS.resolve(FS.cwd(), path);
if (!path) return { path: '', node: null };
var defaults = {
follow_mount: true,
recurse_count: 0
};
opts = Object.assign(defaults, opts)
if (opts.recurse_count > 8) {  // max recursive lookup of 8
throw new FS.ErrnoError(32);
}
// split the path
var parts = PATH.normalizeArray(path.split('/').filter((p) => !!p), false);
// start at the root
var current = FS.root;
var current_path = '/';
for (var i = 0; i < parts.length; i++) {
var islast = (i === parts.length-1);
if (islast && opts.parent) {
// stop resolving
break;
}
current = FS.lookupNode(current, parts[i]);
current_path = PATH.join2(current_path, parts[i]);
// jump to the mount's root node if this is a mountpoint
if (FS.isMountpoint(current)) {
if (!islast || (islast && opts.follow_mount)) {
current = current.mounted.root;
}
}
// by default, lookupPath will not follow a symlink if it is the final path component.
// setting opts.follow = true will override this behavior.
if (!islast || opts.follow) {
var count = 0;
while (FS.isLink(current.mode)) {
var link = FS.readlink(current_path);
current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
current = lookup.node;
if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
throw new FS.ErrnoError(32);
}
}
}
}
return { path: current_path, node: current };
},getPath:(node) => {
var path;
while (true) {
if (FS.isRoot(node)) {
var mount = node.mount.mountpoint;
if (!path) return mount;
return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
}
path = path ? node.name + '/' + path : node.name;
node = node.parent;
}
},hashName:(parentid, name) => {
var hash = 0;
for (var i = 0; i < name.length; i++) {
hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
}
return ((parentid + hash) >>> 0) % FS.nameTable.length;
},hashAddNode:(node) => {
var hash = FS.hashName(node.parent.id, node.name);
node.name_next = FS.nameTable[hash];
FS.nameTable[hash] = node;
},hashRemoveNode:(node) => {
var hash = FS.hashName(node.parent.id, node.name);
if (FS.nameTable[hash] === node) {
FS.nameTable[hash] = node.name_next;
} else {
var current = FS.nameTable[hash];
while (current) {
if (current.name_next === node) {
current.name_next = node.name_next;
break;
}
current = current.name_next;
}
}
},lookupNode:(parent, name) => {
var errCode = FS.mayLookup(parent);
if (errCode) {
throw new FS.ErrnoError(errCode, parent);
}
var hash = FS.hashName(parent.id, name);
for (var node = FS.nameTable[hash]; node; node = node.name_next) {
var nodeName = node.name;
if (node.parent.id === parent.id && nodeName === name) {
return node;
}
}
// if we failed to find it in the cache, call into the VFS
return FS.lookup(parent, name);
},createNode:(parent, name, mode, rdev) => {
var node = new FS.FSNode(parent, name, mode, rdev);
FS.hashAddNode(node);
return node;
},destroyNode:(node) => {
FS.hashRemoveNode(node);
},isRoot:(node) => {
return node === node.parent;
},isMountpoint:(node) => {
return !!node.mounted;
},isFile:(mode) => {
return (mode & 61440) === 32768;
},isDir:(mode) => {
return (mode & 61440) === 16384;
},isLink:(mode) => {
return (mode & 61440) === 40960;
},isChrdev:(mode) => {
return (mode & 61440) === 8192;
},isBlkdev:(mode) => {
return (mode & 61440) === 24576;
},isFIFO:(mode) => {
return (mode & 61440) === 4096;
},isSocket:(mode) => {
return (mode & 49152) === 49152;
},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:(str) => {
var flags = FS.flagModes[str];
if (typeof flags == 'undefined') {
throw new Error('Unknown file open mode: ' + str);
}
return flags;
},flagsToPermissionString:(flag) => {
var perms = ['r', 'w', 'rw'][flag & 3];
if ((flag & 512)) {
perms += 'w';
}
return perms;
},nodePermissions:(node, perms) => {
if (FS.ignorePermissions) {
return 0;
}
// return 0 if any user, group or owner bits are set.
if (perms.includes('r') && !(node.mode & 292)) {
return 2;
} else if (perms.includes('w') && !(node.mode & 146)) {
return 2;
} else if (perms.includes('x') && !(node.mode & 73)) {
return 2;
}
return 0;
},mayLookup:(dir) => {
var errCode = FS.nodePermissions(dir, 'x');
if (errCode) return errCode;
if (!dir.node_ops.lookup) return 2;
return 0;
},mayCreate:(dir, name) => {
try {
var node = FS.lookupNode(dir, name);
return 20;
} catch (e) {
}
return FS.nodePermissions(dir, 'wx');
},mayDelete:(dir, name, isdir) => {
var node;
try {
node = FS.lookupNode(dir, name);
} catch (e) {
return e.errno;
}
var errCode = FS.nodePermissions(dir, 'wx');
if (errCode) {
return errCode;
}
if (isdir) {
if (!FS.isDir(node.mode)) {
return 54;
}
if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
return 10;
}
} else {
if (FS.isDir(node.mode)) {
return 31;
}
}
return 0;
},mayOpen:(node, flags) => {
if (!node) {
return 44;
}
if (FS.isLink(node.mode)) {
return 32;
} else if (FS.isDir(node.mode)) {
if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
(flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
return 31;
}
}
return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
},MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
for (var fd = fd_start; fd <= fd_end; fd++) {
if (!FS.streams[fd]) {
return fd;
}
}
throw new FS.ErrnoError(33);
},getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {
if (!FS.FSStream) {
FS.FSStream = /** @constructor */ function() {
this.shared = { };
};
FS.FSStream.prototype = {
object: {
get: function() { return this.node; },
set: function(val) { this.node = val; }
},
isRead: {
get: function() { return (this.flags & 2097155) !== 1; }
},
isWrite: {
get: function() { return (this.flags & 2097155) !== 0; }
},
isAppend: {
get: function() { return (this.flags & 1024); }
},
flags: {
get: function() { return this.shared.flags; },
set: function(val) { this.shared.flags = val; },
},
position : {
get function() { return this.shared.position; },
set: function(val) { this.shared.position = val; },
},
};
}
// clone it, so we can return an instance of FSStream
stream = Object.assign(new FS.FSStream(), stream);
var fd = FS.nextfd(fd_start, fd_end);
stream.fd = fd;
FS.streams[fd] = stream;
return stream;
},closeStream:(fd) => {
FS.streams[fd] = null;
},chrdev_stream_ops:{open:(stream) => {
var device = FS.getDevice(stream.node.rdev);
// override node's stream ops with the device's
stream.stream_ops = device.stream_ops;
// forward the open call
if (stream.stream_ops.open) {
stream.stream_ops.open(stream);
}
},llseek:() => {
throw new FS.ErrnoError(70);
}},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {
FS.devices[dev] = { stream_ops: ops };
},getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {
var mounts = [];
var check = [mount];
while (check.length) {
var m = check.pop();
mounts.push(m);
check.push.apply(check, m.mounts);
}
return mounts;
},syncfs:(populate, callback) => {
if (typeof populate == 'function') {
callback = populate;
populate = false;
}
FS.syncFSRequests++;
if (FS.syncFSRequests > 1) {
err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
}
var mounts = FS.getMounts(FS.root.mount);
var completed = 0;
function doCallback(errCode) {
FS.syncFSRequests--;
return callback(errCode);
}
function done(errCode) {
if (errCode) {
if (!done.errored) {
done.errored = true;
return doCallback(errCode);
}
return;
}
if (++completed >= mounts.length) {
doCallback(null);
}
};
// sync all mounts
mounts.forEach((mount) => {
if (!mount.type.syncfs) {
return done(null);
}
mount.type.syncfs(mount, populate, done);
});
},mount:(type, opts, mountpoint) => {
var root = mountpoint === '/';
var pseudo = !mountpoint;
var node;
if (root && FS.root) {
throw new FS.ErrnoError(10);
} else if (!root && !pseudo) {
var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
mountpoint = lookup.path;  // use the absolute path
node = lookup.node;
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(10);
}
if (!FS.isDir(node.mode)) {
throw new FS.ErrnoError(54);
}
}
var mount = {
type: type,
opts: opts,
mountpoint: mountpoint,
mounts: []
};
// create a root node for the fs
var mountRoot = type.mount(mount);
mountRoot.mount = mount;
mount.root = mountRoot;
if (root) {
FS.root = mountRoot;
} else if (node) {
// set as a mountpoint
node.mounted = mount;
// add the new mount to the current mount's children
if (node.mount) {
node.mount.mounts.push(mount);
}
}
return mountRoot;
},unmount:(mountpoint) => {
var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
if (!FS.isMountpoint(lookup.node)) {
throw new FS.ErrnoError(28);
}
// destroy the nodes for this mount, and all its child mounts
var node = lookup.node;
var mount = node.mounted;
var mounts = FS.getMounts(mount);
Object.keys(FS.nameTable).forEach((hash) => {
var current = FS.nameTable[hash];
while (current) {
var next = current.name_next;
if (mounts.includes(current.mount)) {
FS.destroyNode(current);
}
current = next;
}
});
// no longer a mountpoint
node.mounted = null;
// remove this mount from the child mounts
var idx = node.mount.mounts.indexOf(mount);
node.mount.mounts.splice(idx, 1);
},lookup:(parent, name) => {
return parent.node_ops.lookup(parent, name);
},mknod:(path, mode, dev) => {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
var name = PATH.basename(path);
if (!name || name === '.' || name === '..') {
throw new FS.ErrnoError(28);
}
var errCode = FS.mayCreate(parent, name);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
if (!parent.node_ops.mknod) {
throw new FS.ErrnoError(63);
}
return parent.node_ops.mknod(parent, name, mode, dev);
},create:(path, mode) => {
mode = mode !== undefined ? mode : 438 /* 0666 */;
mode &= 4095;
mode |= 32768;
return FS.mknod(path, mode, 0);
},mkdir:(path, mode) => {
mode = mode !== undefined ? mode : 511 /* 0777 */;
mode &= 511 | 512;
mode |= 16384;
return FS.mknod(path, mode, 0);
},mkdirTree:(path, mode) => {
var dirs = path.split('/');
var d = '';
for (var i = 0; i < dirs.length; ++i) {
if (!dirs[i]) continue;
d += '/' + dirs[i];
try {
FS.mkdir(d, mode);
} catch(e) {
if (e.errno != 20) throw e;
}
}
},mkdev:(path, mode, dev) => {
if (typeof dev == 'undefined') {
dev = mode;
mode = 438 /* 0666 */;
}
mode |= 8192;
return FS.mknod(path, mode, dev);
},symlink:(oldpath, newpath) => {
if (!PATH_FS.resolve(oldpath)) {
throw new FS.ErrnoError(44);
}
var lookup = FS.lookupPath(newpath, { parent: true });
var parent = lookup.node;
if (!parent) {
throw new FS.ErrnoError(44);
}
var newname = PATH.basename(newpath);
var errCode = FS.mayCreate(parent, newname);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
if (!parent.node_ops.symlink) {
throw new FS.ErrnoError(63);
}
return parent.node_ops.symlink(parent, newname, oldpath);
},rename:(old_path, new_path) => {
var old_dirname = PATH.dirname(old_path);
var new_dirname = PATH.dirname(new_path);
var old_name = PATH.basename(old_path);
var new_name = PATH.basename(new_path);
// parents must exist
var lookup, old_dir, new_dir;
// let the errors from non existant directories percolate up
lookup = FS.lookupPath(old_path, { parent: true });
old_dir = lookup.node;
lookup = FS.lookupPath(new_path, { parent: true });
new_dir = lookup.node;
if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
// need to be part of the same mount
if (old_dir.mount !== new_dir.mount) {
throw new FS.ErrnoError(75);
}
// source must exist
var old_node = FS.lookupNode(old_dir, old_name);
// old path should not be an ancestor of the new path
var relative = PATH_FS.relative(old_path, new_dirname);
if (relative.charAt(0) !== '.') {
throw new FS.ErrnoError(28);
}
// new path should not be an ancestor of the old path
relative = PATH_FS.relative(new_path, old_dirname);
if (relative.charAt(0) !== '.') {
throw new FS.ErrnoError(55);
}
// see if the new path already exists
var new_node;
try {
new_node = FS.lookupNode(new_dir, new_name);
} catch (e) {
// not fatal
}
// early out if nothing needs to change
if (old_node === new_node) {
return;
}
// we'll need to delete the old entry
var isdir = FS.isDir(old_node.mode);
var errCode = FS.mayDelete(old_dir, old_name, isdir);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
// need delete permissions if we'll be overwriting.
// need create permissions if new doesn't already exist.
errCode = new_node ?
FS.mayDelete(new_dir, new_name, isdir) :
FS.mayCreate(new_dir, new_name);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
if (!old_dir.node_ops.rename) {
throw new FS.ErrnoError(63);
}
if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
throw new FS.ErrnoError(10);
}
// if we are going to change the parent, check write permissions
if (new_dir !== old_dir) {
errCode = FS.nodePermissions(old_dir, 'w');
if (errCode) {
throw new FS.ErrnoError(errCode);
}
}
// remove the node from the lookup hash
FS.hashRemoveNode(old_node);
// do the underlying fs rename
try {
old_dir.node_ops.rename(old_node, new_dir, new_name);
} catch (e) {
throw e;
} finally {
// add the node back to the hash (in case node_ops.rename
// changed its name)
FS.hashAddNode(old_node);
}
},rmdir:(path) => {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
var name = PATH.basename(path);
var node = FS.lookupNode(parent, name);
var errCode = FS.mayDelete(parent, name, true);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
if (!parent.node_ops.rmdir) {
throw new FS.ErrnoError(63);
}
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(10);
}
parent.node_ops.rmdir(parent, name);
FS.destroyNode(node);
},readdir:(path) => {
var lookup = FS.lookupPath(path, { follow: true });
var node = lookup.node;
if (!node.node_ops.readdir) {
throw new FS.ErrnoError(54);
}
return node.node_ops.readdir(node);
},unlink:(path) => {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
if (!parent) {
throw new FS.ErrnoError(44);
}
var name = PATH.basename(path);
var node = FS.lookupNode(parent, name);
var errCode = FS.mayDelete(parent, name, false);
if (errCode) {
// According to POSIX, we should map EISDIR to EPERM, but
// we instead do what Linux does (and we must, as we use
// the musl linux libc).
throw new FS.ErrnoError(errCode);
}
if (!parent.node_ops.unlink) {
throw new FS.ErrnoError(63);
}
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(10);
}
parent.node_ops.unlink(parent, name);
FS.destroyNode(node);
},readlink:(path) => {
var lookup = FS.lookupPath(path);
var link = lookup.node;
if (!link) {
throw new FS.ErrnoError(44);
}
if (!link.node_ops.readlink) {
throw new FS.ErrnoError(28);
}
return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
},stat:(path, dontFollow) => {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
var node = lookup.node;
if (!node) {
throw new FS.ErrnoError(44);
}
if (!node.node_ops.getattr) {
throw new FS.ErrnoError(63);
}
return node.node_ops.getattr(node);
},lstat:(path) => {
return FS.stat(path, true);
},chmod:(path, mode, dontFollow) => {
var node;
if (typeof path == 'string') {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(63);
}
node.node_ops.setattr(node, {
mode: (mode & 4095) | (node.mode & ~4095),
timestamp: Date.now()
});
},lchmod:(path, mode) => {
FS.chmod(path, mode, true);
},fchmod:(fd, mode) => {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(8);
}
FS.chmod(stream.node, mode);
},chown:(path, uid, gid, dontFollow) => {
var node;
if (typeof path == 'string') {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(63);
}
node.node_ops.setattr(node, {
timestamp: Date.now()
// we ignore the uid / gid for now
});
},lchown:(path, uid, gid) => {
FS.chown(path, uid, gid, true);
},fchown:(fd, uid, gid) => {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(8);
}
FS.chown(stream.node, uid, gid);
},truncate:(path, len) => {
if (len < 0) {
throw new FS.ErrnoError(28);
}
var node;
if (typeof path == 'string') {
var lookup = FS.lookupPath(path, { follow: true });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(63);
}
if (FS.isDir(node.mode)) {
throw new FS.ErrnoError(31);
}
if (!FS.isFile(node.mode)) {
throw new FS.ErrnoError(28);
}
var errCode = FS.nodePermissions(node, 'w');
if (errCode) {
throw new FS.ErrnoError(errCode);
}
node.node_ops.setattr(node, {
size: len,
timestamp: Date.now()
});
},ftruncate:(fd, len) => {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(8);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(28);
}
FS.truncate(stream.node, len);
},utime:(path, atime, mtime) => {
var lookup = FS.lookupPath(path, { follow: true });
var node = lookup.node;
node.node_ops.setattr(node, {
timestamp: Math.max(atime, mtime)
});
},open:(path, flags, mode) => {
if (path === "") {
throw new FS.ErrnoError(44);
}
flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;
mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
if ((flags & 64)) {
mode = (mode & 4095) | 32768;
} else {
mode = 0;
}
var node;
if (typeof path == 'object') {
node = path;
} else {
path = PATH.normalize(path);
try {
var lookup = FS.lookupPath(path, {
follow: !(flags & 131072)
});
node = lookup.node;
} catch (e) {
// ignore
}
}
// perhaps we need to create the node
var created = false;
if ((flags & 64)) {
if (node) {
// if O_CREAT and O_EXCL are set, error out if the node already exists
if ((flags & 128)) {
throw new FS.ErrnoError(20);
}
} else {
// node doesn't exist, try to create it
node = FS.mknod(path, mode, 0);
created = true;
}
}
if (!node) {
throw new FS.ErrnoError(44);
}
// can't truncate a device
if (FS.isChrdev(node.mode)) {
flags &= ~512;
}
// if asked only for a directory, then this must be one
if ((flags & 65536) && !FS.isDir(node.mode)) {
throw new FS.ErrnoError(54);
}
// check permissions, if this is not a file we just created now (it is ok to
// create and write to a file with read-only permissions; it is read-only
// for later use)
if (!created) {
var errCode = FS.mayOpen(node, flags);
if (errCode) {
throw new FS.ErrnoError(errCode);
}
}
// do truncation if necessary
if ((flags & 512) && !created) {
FS.truncate(node, 0);
}
// we've already handled these, don't pass down to the underlying vfs
flags &= ~(128 | 512 | 131072);
// register the stream with the filesystem
var stream = FS.createStream({
node: node,
path: FS.getPath(node),  // we want the absolute path to the node
flags: flags,
seekable: true,
position: 0,
stream_ops: node.stream_ops,
// used by the file family libc calls (fopen, fwrite, ferror, etc.)
ungotten: [],
error: false
});
// call the new stream's open function
if (stream.stream_ops.open) {
stream.stream_ops.open(stream);
}
if (Module['logReadFiles'] && !(flags & 1)) {
if (!FS.readFiles) FS.readFiles = {};
if (!(path in FS.readFiles)) {
FS.readFiles[path] = 1;
}
}
return stream;
},close:(stream) => {
if (FS.isClosed(stream)) {
throw new FS.ErrnoError(8);
}
if (stream.getdents) stream.getdents = null; // free readdir state
try {
if (stream.stream_ops.close) {
stream.stream_ops.close(stream);
}
} catch (e) {
throw e;
} finally {
FS.closeStream(stream.fd);
}
stream.fd = null;
},isClosed:(stream) => {
return stream.fd === null;
},llseek:(stream, offset, whence) => {
if (FS.isClosed(stream)) {
throw new FS.ErrnoError(8);
}
if (!stream.seekable || !stream.stream_ops.llseek) {
throw new FS.ErrnoError(70);
}
if (whence != 0 && whence != 1 && whence != 2) {
throw new FS.ErrnoError(28);
}
stream.position = stream.stream_ops.llseek(stream, offset, whence);
stream.ungotten = [];
return stream.position;
},read:(stream, buffer, offset, length, position) => {
if (length < 0 || position < 0) {
throw new FS.ErrnoError(28);
}
if (FS.isClosed(stream)) {
throw new FS.ErrnoError(8);
}
if ((stream.flags & 2097155) === 1) {
throw new FS.ErrnoError(8);
}
if (FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(31);
}
if (!stream.stream_ops.read) {
throw new FS.ErrnoError(28);
}
var seeking = typeof position != 'undefined';
if (!seeking) {
position = stream.position;
} else if (!stream.seekable) {
throw new FS.ErrnoError(70);
}
var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
if (!seeking) stream.position += bytesRead;
return bytesRead;
},write:(stream, buffer, offset, length, position, canOwn) => {
if (length < 0 || position < 0) {
throw new FS.ErrnoError(28);
}
if (FS.isClosed(stream)) {
throw new FS.ErrnoError(8);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(8);
}
if (FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(31);
}
if (!stream.stream_ops.write) {
throw new FS.ErrnoError(28);
}
if (stream.seekable && stream.flags & 1024) {
// seek to the end before writing in append mode
FS.llseek(stream, 0, 2);
}
var seeking = typeof position != 'undefined';
if (!seeking) {
position = stream.position;
} else if (!stream.seekable) {
throw new FS.ErrnoError(70);
}
var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
if (!seeking) stream.position += bytesWritten;
return bytesWritten;
},allocate:(stream, offset, length) => {
if (FS.isClosed(stream)) {
throw new FS.ErrnoError(8);
}
if (offset < 0 || length <= 0) {
throw new FS.ErrnoError(28);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(8);
}
if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(43);
}
if (!stream.stream_ops.allocate) {
throw new FS.ErrnoError(138);
}
stream.stream_ops.allocate(stream, offset, length);
},mmap:(stream, address, length, position, prot, flags) => {
// User requests writing to file (prot & PROT_WRITE != 0).
// Checking if we have permissions to write to the file unless
// MAP_PRIVATE flag is set. According to POSIX spec it is possible
// to write to file opened in read-only mode with MAP_PRIVATE flag,
// as all modifications will be visible only in the memory of
// the current process.
if ((prot & 2) !== 0
&& (flags & 2) === 0
&& (stream.flags & 2097155) !== 2) {
throw new FS.ErrnoError(2);
}
if ((stream.flags & 2097155) === 1) {
throw new FS.ErrnoError(2);
}
if (!stream.stream_ops.mmap) {
throw new FS.ErrnoError(43);
}
return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
},msync:(stream, buffer, offset, length, mmapFlags) => {
if (!stream || !stream.stream_ops.msync) {
return 0;
}
return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
},munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {
if (!stream.stream_ops.ioctl) {
throw new FS.ErrnoError(59);
}
return stream.stream_ops.ioctl(stream, cmd, arg);
},readFile:(path, opts = {}) => {
opts.flags = opts.flags || 0;
opts.encoding = opts.encoding || 'binary';
if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
throw new Error('Invalid encoding type "' + opts.encoding + '"');
}
var ret;
var stream = FS.open(path, opts.flags);
var stat = FS.stat(path);
var length = stat.size;
var buf = new Uint8Array(length);
FS.read(stream, buf, 0, length, 0);
if (opts.encoding === 'utf8') {
ret = UTF8ArrayToString(buf, 0);
} else if (opts.encoding === 'binary') {
ret = buf;
}
FS.close(stream);
return ret;
},writeFile:(path, data, opts = {}) => {
opts.flags = opts.flags || 577;
var stream = FS.open(path, opts.flags, opts.mode);
if (typeof data == 'string') {
var buf = new Uint8Array(lengthBytesUTF8(data)+1);
var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
} else if (ArrayBuffer.isView(data)) {
FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
} else {
throw new Error('Unsupported data type');
}
FS.close(stream);
},cwd:() => FS.currentPath,chdir:(path) => {
var lookup = FS.lookupPath(path, { follow: true });
if (lookup.node === null) {
throw new FS.ErrnoError(44);
}
if (!FS.isDir(lookup.node.mode)) {
throw new FS.ErrnoError(54);
}
var errCode = FS.nodePermissions(lookup.node, 'x');
if (errCode) {
throw new FS.ErrnoError(errCode);
}
FS.currentPath = lookup.path;
},createDefaultDirectories:() => {
FS.mkdir('/tmp');
FS.mkdir('/home');
FS.mkdir('/home/web_user');
},createDefaultDevices:() => {
// create /dev
FS.mkdir('/dev');
// setup /dev/null
FS.registerDevice(FS.makedev(1, 3), {
read: () => 0,
write: (stream, buffer, offset, length, pos) => length,
});
FS.mkdev('/dev/null', FS.makedev(1, 3));
// setup /dev/tty and /dev/tty1
// stderr needs to print output using err() rather than out()
// so we register a second tty just for it.
TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
FS.mkdev('/dev/tty', FS.makedev(5, 0));
FS.mkdev('/dev/tty1', FS.makedev(6, 0));
// setup /dev/[u]random
var random_device = getRandomDevice();
FS.createDevice('/dev', 'random', random_device);
FS.createDevice('/dev', 'urandom', random_device);
// we're not going to emulate the actual shm device,
// just create the tmp dirs that reside in it commonly
FS.mkdir('/dev/shm');
FS.mkdir('/dev/shm/tmp');
},createSpecialDirectories:() => {
// create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
// name of the stream for fd 6 (see test_unistd_ttyname)
FS.mkdir('/proc');
var proc_self = FS.mkdir('/proc/self');
FS.mkdir('/proc/self/fd');
FS.mount({
mount: () => {
var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
node.node_ops = {
lookup: (parent, name) => {
var fd = +name;
var stream = FS.getStream(fd);
if (!stream) throw new FS.ErrnoError(8);
var ret = {
parent: null,
mount: { mountpoint: 'fake' },
node_ops: { readlink: () => stream.path },
};
ret.parent = ret; // make it look like a simple root node
return ret;
}
};
return node;
}
}, {}, '/proc/self/fd');
},createStandardStreams:() => {
// TODO deprecate the old functionality of a single
// input / output callback and that utilizes FS.createDevice
// and instead require a unique set of stream ops
// by default, we symlink the standard streams to the
// default tty devices. however, if the standard streams
// have been overwritten we create a unique device for
// them instead.
if (Module['stdin']) {
FS.createDevice('/dev', 'stdin', Module['stdin']);
} else {
FS.symlink('/dev/tty', '/dev/stdin');
}
if (Module['stdout']) {
FS.createDevice('/dev', 'stdout', null, Module['stdout']);
} else {
FS.symlink('/dev/tty', '/dev/stdout');
}
if (Module['stderr']) {
FS.createDevice('/dev', 'stderr', null, Module['stderr']);
} else {
FS.symlink('/dev/tty1', '/dev/stderr');
}
// open default streams for the stdin, stdout and stderr devices
var stdin = FS.open('/dev/stdin', 0);
var stdout = FS.open('/dev/stdout', 1);
var stderr = FS.open('/dev/stderr', 1);
},ensureErrnoError:() => {
if (FS.ErrnoError) return;
FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
this.node = node;
this.setErrno = /** @this{Object} */ function(errno) {
this.errno = errno;
};
this.setErrno(errno);
this.message = 'FS error';
};
FS.ErrnoError.prototype = new Error();
FS.ErrnoError.prototype.constructor = FS.ErrnoError;
// Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
[44].forEach((code) => {
FS.genericErrors[code] = new FS.ErrnoError(code);
FS.genericErrors[code].stack = '<generic error, no stack>';
});
},staticInit:() => {
FS.ensureErrnoError();
FS.nameTable = new Array(4096);
FS.mount(MEMFS, {}, '/');
FS.createDefaultDirectories();
FS.createDefaultDevices();
FS.createSpecialDirectories();
FS.filesystems = {
'MEMFS': MEMFS,
'NODEFS': NODEFS,
};
},init:(input, output, error) => {
FS.init.initialized = true;
FS.ensureErrnoError();
// Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
Module['stdin'] = input || Module['stdin'];
Module['stdout'] = output || Module['stdout'];
Module['stderr'] = error || Module['stderr'];
FS.createStandardStreams();
},quit:() => {
FS.init.initialized = false;
// Call musl-internal function to close all stdio streams, so nothing is
// left in internal buffers.
// close all of our streams
for (var i = 0; i < FS.streams.length; i++) {
var stream = FS.streams[i];
if (!stream) {
continue;
}
FS.close(stream);
}
},getMode:(canRead, canWrite) => {
var mode = 0;
if (canRead) mode |= 292 | 73;
if (canWrite) mode |= 146;
return mode;
},findObject:(path, dontResolveLastLink) => {
var ret = FS.analyzePath(path, dontResolveLastLink);
if (ret.exists) {
return ret.object;
} else {
return null;
}
},analyzePath:(path, dontResolveLastLink) => {
// operate from within the context of the symlink's target
try {
var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
path = lookup.path;
} catch (e) {
}
var ret = {
isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
parentExists: false, parentPath: null, parentObject: null
};
try {
var lookup = FS.lookupPath(path, { parent: true });
ret.parentExists = true;
ret.parentPath = lookup.path;
ret.parentObject = lookup.node;
ret.name = PATH.basename(path);
lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
ret.exists = true;
ret.path = lookup.path;
ret.object = lookup.node;
ret.name = lookup.node.name;
ret.isRoot = lookup.path === '/';
} catch (e) {
ret.error = e.errno;
};
return ret;
},createPath:(parent, path, canRead, canWrite) => {
parent = typeof parent == 'string' ? parent : FS.getPath(parent);
var parts = path.split('/').reverse();
while (parts.length) {
var part = parts.pop();
if (!part) continue;
var current = PATH.join2(parent, part);
try {
FS.mkdir(current);
} catch (e) {
// ignore EEXIST
}
parent = current;
}
return current;
},createFile:(parent, name, properties, canRead, canWrite) => {
var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
var mode = FS.getMode(canRead, canWrite);
return FS.create(path, mode);
},createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {
var path = name;
if (parent) {
parent = typeof parent == 'string' ? parent : FS.getPath(parent);
path = name ? PATH.join2(parent, name) : parent;
}
var mode = FS.getMode(canRead, canWrite);
var node = FS.create(path, mode);
if (data) {
if (typeof data == 'string') {
var arr = new Array(data.length);
for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
data = arr;
}
// make sure we can write to the file
FS.chmod(node, mode | 146);
var stream = FS.open(node, 577);
FS.write(stream, data, 0, data.length, 0, canOwn);
FS.close(stream);
FS.chmod(node, mode);
}
return node;
},createDevice:(parent, name, input, output) => {
var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
var mode = FS.getMode(!!input, !!output);
if (!FS.createDevice.major) FS.createDevice.major = 64;
var dev = FS.makedev(FS.createDevice.major++, 0);
// Create a fake device that a set of stream ops to emulate
// the old behavior.
FS.registerDevice(dev, {
open: (stream) => {
stream.seekable = false;
},
close: (stream) => {
// flush any pending line data
if (output && output.buffer && output.buffer.length) {
output(10);
}
},
read: (stream, buffer, offset, length, pos /* ignored */) => {
var bytesRead = 0;
for (var i = 0; i < length; i++) {
var result;
try {
result = input();
} catch (e) {
throw new FS.ErrnoError(29);
}
if (result === undefined && bytesRead === 0) {
throw new FS.ErrnoError(6);
}
if (result === null || result === undefined) break;
bytesRead++;
buffer[offset+i] = result;
}
if (bytesRead) {
stream.node.timestamp = Date.now();
}
return bytesRead;
},
write: (stream, buffer, offset, length, pos) => {
for (var i = 0; i < length; i++) {
try {
output(buffer[offset+i]);
} catch (e) {
throw new FS.ErrnoError(29);
}
}
if (length) {
stream.node.timestamp = Date.now();
}
return i;
}
});
return FS.mkdev(path, mode, dev);
},forceLoadFile:(obj) => {
if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
if (typeof XMLHttpRequest != 'undefined') {
throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
} else if (read_) {
// Command-line.
try {
// WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
//          read() will try to parse UTF8.
obj.contents = intArrayFromString(read_(obj.url), true);
obj.usedBytes = obj.contents.length;
} catch (e) {
throw new FS.ErrnoError(29);
}
} else {
throw new Error('Cannot load without read() or XMLHttpRequest.');
}
},createLazyFile:(parent, name, url, canRead, canWrite) => {
// Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
/** @constructor */
function LazyUint8Array() {
this.lengthKnown = false;
this.chunks = []; // Loaded chunks. Index is the chunk number
}
LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
if (idx > this.length-1 || idx < 0) {
return undefined;
}
var chunkOffset = idx % this.chunkSize;
var chunkNum = (idx / this.chunkSize)|0;
return this.getter(chunkNum)[chunkOffset];
};
LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
this.getter = getter;
};
LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
// Find length
var xhr = new XMLHttpRequest();
xhr.open('HEAD', url, false);
xhr.send(null);
if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
var datalength = Number(xhr.getResponseHeader("Content-length"));
var header;
var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
var chunkSize = 1024*1024; // Chunk size in bytes
if (!hasByteServing) chunkSize = datalength;
// Function to get a range from the remote URL.
var doXHR = (from, to) => {
if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
// TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
// Some hints to the browser that we want binary data.
xhr.responseType = 'arraybuffer';
if (xhr.overrideMimeType) {
xhr.overrideMimeType('text/plain; charset=x-user-defined');
}
xhr.send(null);
if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
if (xhr.response !== undefined) {
return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
} else {
return intArrayFromString(xhr.responseText || '', true);
}
};
var lazyArray = this;
lazyArray.setDataGetter((chunkNum) => {
var start = chunkNum * chunkSize;
var end = (chunkNum+1) * chunkSize - 1; // including this byte
end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
lazyArray.chunks[chunkNum] = doXHR(start, end);
}
if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
return lazyArray.chunks[chunkNum];
});
if (usesGzip || !datalength) {
// if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
datalength = this.getter(0).length;
chunkSize = datalength;
out("LazyFiles on gzip forces download of the whole file when length is accessed");
}
this._length = datalength;
this._chunkSize = chunkSize;
this.lengthKnown = true;
};
if (typeof XMLHttpRequest != 'undefined') {
if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
var lazyArray = new LazyUint8Array();
Object.defineProperties(lazyArray, {
length: {
get: /** @this{Object} */ function() {
if (!this.lengthKnown) {
this.cacheLength();
}
return this._length;
}
},
chunkSize: {
get: /** @this{Object} */ function() {
if (!this.lengthKnown) {
this.cacheLength();
}
return this._chunkSize;
}
}
});
var properties = { isDevice: false, contents: lazyArray };
} else {
var properties = { isDevice: false, url: url };
}
var node = FS.createFile(parent, name, properties, canRead, canWrite);
// This is a total hack, but I want to get this lazy file code out of the
// core of MEMFS. If we want to keep this lazy file concept I feel it should
// be its own thin LAZYFS proxying calls to MEMFS.
if (properties.contents) {
node.contents = properties.contents;
} else if (properties.url) {
node.contents = null;
node.url = properties.url;
}
// Add a function that defers querying the file size until it is asked the first time.
Object.defineProperties(node, {
usedBytes: {
get: /** @this {FSNode} */ function() { return this.contents.length; }
}
});
// override each stream op with one that tries to force load the lazy file first
var stream_ops = {};
var keys = Object.keys(node.stream_ops);
keys.forEach((key) => {
var fn = node.stream_ops[key];
stream_ops[key] = function forceLoadLazyFile() {
FS.forceLoadFile(node);
return fn.apply(null, arguments);
};
});
// use a custom read function
stream_ops.read = (stream, buffer, offset, length, position) => {
FS.forceLoadFile(node);
var contents = stream.node.contents;
if (position >= contents.length)
return 0;
var size = Math.min(contents.length - position, length);
if (contents.slice) { // normal array
for (var i = 0; i < size; i++) {
buffer[offset + i] = contents[position + i];
}
} else {
for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
buffer[offset + i] = contents.get(position + i);
}
}
return size;
};
node.stream_ops = stream_ops;
return node;
},createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
// TODO we should allow people to just pass in a complete filename instead
// of parent and name being that we just join them anyways
var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
function processData(byteArray) {
function finish(byteArray) {
if (preFinish) preFinish();
if (!dontCreateFile) {
FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
}
if (onload) onload();
removeRunDependency(dep);
}
if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
if (onerror) onerror();
removeRunDependency(dep);
})) {
return;
}
finish(byteArray);
}
addRunDependency(dep);
if (typeof url == 'string') {
asyncLoad(url, (byteArray) => processData(byteArray), onerror);
} else {
processData(url);
}
},indexedDB:() => {
return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
},DB_NAME:() => {
return 'EM_FS_' + window.location.pathname;
},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths, onload, onerror) => {
onload = onload || (() => {});
onerror = onerror || (() => {});
var indexedDB = FS.indexedDB();
try {
var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
} catch (e) {
return onerror(e);
}
openRequest.onupgradeneeded = () => {
out('creating db');
var db = openRequest.result;
db.createObjectStore(FS.DB_STORE_NAME);
};
openRequest.onsuccess = () => {
var db = openRequest.result;
var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
var files = transaction.objectStore(FS.DB_STORE_NAME);
var ok = 0, fail = 0, total = paths.length;
function finish() {
if (fail == 0) onload(); else onerror();
}
paths.forEach((path) => {
var putRequest = files.put(FS.analyzePath(path).object.contents, path);
putRequest.onsuccess = () => { ok++; if (ok + fail == total) finish() };
putRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
});
transaction.onerror = onerror;
};
openRequest.onerror = onerror;
},loadFilesFromDB:(paths, onload, onerror) => {
onload = onload || (() => {});
onerror = onerror || (() => {});
var indexedDB = FS.indexedDB();
try {
var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
} catch (e) {
return onerror(e);
}
openRequest.onupgradeneeded = onerror; // no database to load from
openRequest.onsuccess = () => {
var db = openRequest.result;
try {
var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
} catch(e) {
onerror(e);
return;
}
var files = transaction.objectStore(FS.DB_STORE_NAME);
var ok = 0, fail = 0, total = paths.length;
function finish() {
if (fail == 0) onload(); else onerror();
}
paths.forEach((path) => {
var getRequest = files.get(path);
getRequest.onsuccess = () => {
if (FS.analyzePath(path).exists) {
FS.unlink(path);
}
FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
ok++;
if (ok + fail == total) finish();
};
getRequest.onerror = () => { fail++; if (ok + fail == total) finish() };
});
transaction.onerror = onerror;
};
openRequest.onerror = onerror;
}};
var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {
if (PATH.isAbs(path)) {
return path;
}
// relative path
var dir;
if (dirfd === -100) {
dir = FS.cwd();
} else {
var dirstream = FS.getStream(dirfd);
if (!dirstream) throw new FS.ErrnoError(8);
dir = dirstream.path;
}
if (path.length == 0) {
if (!allowEmpty) {
throw new FS.ErrnoError(44);;
}
return dir;
}
return PATH.join2(dir, path);
},doStat:function(func, path, buf) {
try {
var stat = func(path);
} catch (e) {
if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
// an error occurred while trying to look up the path; we should just report ENOTDIR
return -54;
}
throw e;
}
HEAP32[((buf)>>2)] = stat.dev;
HEAP32[(((buf)+(4))>>2)] = 0;
HEAP32[(((buf)+(8))>>2)] = stat.ino;
HEAP32[(((buf)+(12))>>2)] = stat.mode;
HEAP32[(((buf)+(16))>>2)] = stat.nlink;
HEAP32[(((buf)+(20))>>2)] = stat.uid;
HEAP32[(((buf)+(24))>>2)] = stat.gid;
HEAP32[(((buf)+(28))>>2)] = stat.rdev;
HEAP32[(((buf)+(32))>>2)] = 0;
(tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
HEAP32[(((buf)+(48))>>2)] = 4096;
HEAP32[(((buf)+(52))>>2)] = stat.blocks;
HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
HEAP32[(((buf)+(60))>>2)] = 0;
HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
HEAP32[(((buf)+(68))>>2)] = 0;
HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
HEAP32[(((buf)+(76))>>2)] = 0;
(tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
return 0;
},doMsync:function(addr, stream, len, flags, offset) {
var buffer = HEAPU8.slice(addr, addr + len);
FS.msync(stream, buffer, offset, len, flags);
},varargs:undefined,get:function() {
SYSCALLS.varargs += 4;
var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
return ret;
},getStr:function(ptr) {
var ret = UTF8ToString(ptr);
return ret;
},getStreamFromFD:function(fd) {
var stream = FS.getStream(fd);
if (!stream) throw new FS.ErrnoError(8);
return stream;
}};
function ___syscall_fcntl64(fd, cmd, varargs) {
SYSCALLS.varargs = varargs;
try {
var stream = SYSCALLS.getStreamFromFD(fd);
switch (cmd) {
case 0: {
var arg = SYSCALLS.get();
if (arg < 0) {
return -28;
}
var newStream;
newStream = FS.createStream(stream, arg);
return newStream.fd;
}
case 1:
case 2:
return 0;  // FD_CLOEXEC makes no sense for a single process.
case 3:
return stream.flags;
case 4: {
var arg = SYSCALLS.get();
stream.flags |= arg;
return 0;
}
case 5:
/* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
var arg = SYSCALLS.get();
var offset = 0;
// We're always unlocked.
HEAP16[(((arg)+(offset))>>1)] = 2;
return 0;
}
case 6:
case 7:
/* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
/* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
return 0; // Pretend that the locking is successful.
case 16:
case 8:
return -28; // These are for sockets. We don't have them fully implemented yet.
case 9:
// musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
setErrNo(28);
return -1;
default: {
return -28;
}
}
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_fstat64(fd, buf) {
try {
var stream = SYSCALLS.getStreamFromFD(fd);
return SYSCALLS.doStat(FS.stat, stream.path, buf);
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_ioctl(fd, op, varargs) {
SYSCALLS.varargs = varargs;
try {
var stream = SYSCALLS.getStreamFromFD(fd);
switch (op) {
case 21509:
case 21505: {
if (!stream.tty) return -59;
return 0;
}
case 21510:
case 21511:
case 21512:
case 21506:
case 21507:
case 21508: {
if (!stream.tty) return -59;
return 0; // no-op, not actually adjusting terminal settings
}
case 21519: {
if (!stream.tty) return -59;
var argp = SYSCALLS.get();
HEAP32[((argp)>>2)] = 0;
return 0;
}
case 21520: {
if (!stream.tty) return -59;
return -28; // not supported
}
case 21531: {
var argp = SYSCALLS.get();
return FS.ioctl(stream, op, argp);
}
case 21523: {
// TODO: in theory we should write to the winsize struct that gets
// passed in, but for now musl doesn't read anything on it
if (!stream.tty) return -59;
return 0;
}
case 21524: {
// TODO: technically, this ioctl call should change the window size.
// but, since emscripten doesn't have any concept of a terminal window
// yet, we'll just silently throw it away as we do TIOCGWINSZ
if (!stream.tty) return -59;
return 0;
}
default: abort('bad ioctl syscall ' + op);
}
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_lstat64(path, buf) {
try {
path = SYSCALLS.getStr(path);
return SYSCALLS.doStat(FS.lstat, path, buf);
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_newfstatat(dirfd, path, buf, flags) {
try {
path = SYSCALLS.getStr(path);
var nofollow = flags & 256;
var allowEmpty = flags & 4096;
flags = flags & (~4352);
path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_openat(dirfd, path, flags, varargs) {
SYSCALLS.varargs = varargs;
try {
path = SYSCALLS.getStr(path);
path = SYSCALLS.calculateAt(dirfd, path);
var mode = varargs ? SYSCALLS.get() : 0;
return FS.open(path, flags, mode).fd;
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function ___syscall_stat64(path, buf) {
try {
path = SYSCALLS.getStr(path);
return SYSCALLS.doStat(FS.stat, path, buf);
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return -e.errno;
}
}
function __emscripten_date_now() {
return Date.now();
}
function __localtime_js(time, tmPtr) {
var date = new Date(HEAP32[((time)>>2)]*1000);
HEAP32[((tmPtr)>>2)] = date.getSeconds();
HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();
HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();
HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();
HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();
HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;
HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();
var start = new Date(date.getFullYear(), 0, 1);
var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
HEAP32[(((tmPtr)+(28))>>2)] = yday;
HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);
// Attention: DST is in December in South, and some regions don't have DST at all.
var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
var winterOffset = start.getTimezoneOffset();
var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
HEAP32[(((tmPtr)+(32))>>2)] = dst;
}
function _tzset_impl(timezone, daylight, tzname) {
var currentYear = new Date().getFullYear();
var winter = new Date(currentYear, 0, 1);
var summer = new Date(currentYear, 6, 1);
var winterOffset = winter.getTimezoneOffset();
var summerOffset = summer.getTimezoneOffset();
// Local standard timezone offset. Local standard time is not adjusted for daylight savings.
// This code uses the fact that getTimezoneOffset returns a greater value during Standard Time versus Daylight Saving Time (DST).
// Thus it determines the expected output during Standard Time, and it compares whether the output of the given date the same (Standard) or less (DST).
var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
// timezone is specified as seconds west of UTC ("The external variable
// `timezone` shall be set to the difference, in seconds, between
// Coordinated Universal Time (UTC) and local standard time."), the same
// as returned by stdTimezoneOffset.
// See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
HEAP32[((timezone)>>2)] = stdTimezoneOffset * 60;
HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
function extractZone(date) {
var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
return match ? match[1] : "GMT";
};
var winterName = extractZone(winter);
var summerName = extractZone(summer);
var winterNamePtr = allocateUTF8(winterName);
var summerNamePtr = allocateUTF8(summerName);
if (summerOffset < winterOffset) {
// Northern hemisphere
HEAP32[((tzname)>>2)] = winterNamePtr;
HEAP32[(((tzname)+(4))>>2)] = summerNamePtr;
} else {
HEAP32[((tzname)>>2)] = summerNamePtr;
HEAP32[(((tzname)+(4))>>2)] = winterNamePtr;
}
}
function __tzset_js(timezone, daylight, tzname) {
// TODO: Use (malleable) environment variables instead of system settings.
if (__tzset_js.called) return;
__tzset_js.called = true;
_tzset_impl(timezone, daylight, tzname);
}
function _abort() {
abort('');
}
var readAsmConstArgsArray = [];
function readAsmConstArgs(sigPtr, buf) {
;
readAsmConstArgsArray.length = 0;
var ch;
// Most arguments are i32s, so shift the buffer pointer so it is a plain
// index into HEAP32.
buf >>= 2;
while (ch = HEAPU8[sigPtr++]) {
// Floats are always passed as doubles, and doubles and int64s take up 8
// bytes (two 32-bit slots) in memory, align reads to these:
buf += (ch != 105) & buf;
readAsmConstArgsArray.push(
ch == 105/*i*/ ? HEAP32[buf] :
HEAPF64[buf++ >> 1]
);
++buf;
}
return readAsmConstArgsArray;
}
function _emscripten_asm_const_int(code, sigPtr, argbuf) {
var args = readAsmConstArgs(sigPtr, argbuf);
return ASM_CONSTS[code].apply(null, args);
}
function _emscripten_get_heap_max() {
// Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate
// full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side
// for any code that deals with heap sizes, which would require special
// casing all heap size related code to treat 0 specially.
return 2147483648;
}
function emscripten_realloc_buffer(size) {
try {
// round size grow request up to wasm page size (fixed 64KB per spec)
wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
updateGlobalBufferAndViews(wasmMemory.buffer);
return 1 /*success*/;
} catch(e) {
}
// implicit 0 return to save code size (caller will cast "undefined" into 0
// anyhow)
}
function _emscripten_resize_heap(requestedSize) {
var oldSize = HEAPU8.length;
requestedSize = requestedSize >>> 0;
// With multithreaded builds, races can happen (another thread might increase the size
// in between), so return a failure, and let the caller retry.
// Memory resize rules:
// 1.  Always increase heap size to at least the requested size, rounded up
//     to next page multiple.
// 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap
//     geometrically: increase the heap size according to
//     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most
//     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
// 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap
//     linearly: increase the heap size by at least
//     MEMORY_GROWTH_LINEAR_STEP bytes.
// 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by
//     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
// 4.  If we were unable to allocate as much memory, it may be due to
//     over-eager decision to excessively reserve due to (3) above.
//     Hence if an allocation fails, cut down on the amount of excess
//     growth, in an attempt to succeed to perform a smaller allocation.
// A limit is set for how much we can grow. We should not exceed that
// (the wasm binary specifies it, so if we tried, we'd fail anyhow).
var maxHeapSize = _emscripten_get_heap_max();
if (requestedSize > maxHeapSize) {
return false;
}
let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;
// Loop through potential heap size increases. If we attempt a too eager
// reservation that fails, cut down on the attempted size and reserve a
// smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
// but limit overreserving (default to capping at +96MB overgrowth at most)
overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
var replacement = emscripten_realloc_buffer(newSize);
if (replacement) {
return true;
}
}
return false;
}
function _exit(status) {
// void _exit(int status);
// http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
exit(status);
}
function _fd_close(fd) {
try {
var stream = SYSCALLS.getStreamFromFD(fd);
FS.close(stream);
return 0;
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return e.errno;
}
}
/** @param {number=} offset */
function doReadv(stream, iov, iovcnt, offset) {
var ret = 0;
for (var i = 0; i < iovcnt; i++) {
var ptr = HEAPU32[((iov)>>2)];
var len = HEAPU32[(((iov)+(4))>>2)];
iov += 8;
var curr = FS.read(stream, HEAP8,ptr, len, offset);
if (curr < 0) return -1;
ret += curr;
if (curr < len) break; // nothing more to read
}
return ret;
}
function _fd_read(fd, iov, iovcnt, pnum) {
try {
var stream = SYSCALLS.getStreamFromFD(fd);
var num = doReadv(stream, iov, iovcnt);
HEAP32[((pnum)>>2)] = num;
return 0;
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return e.errno;
}
}
function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
try {
var stream = SYSCALLS.getStreamFromFD(fd);
var HIGH_OFFSET = 0x100000000; // 2^32
// use an unsigned operator on low and shift high by 32-bits
var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
var DOUBLE_LIMIT = 0x20000000000000; // 2^53
// we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
return 61;
}
FS.llseek(stream, offset, whence);
(tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
return 0;
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return e.errno;
}
}
/** @param {number=} offset */
function doWritev(stream, iov, iovcnt, offset) {
var ret = 0;
for (var i = 0; i < iovcnt; i++) {
var ptr = HEAPU32[((iov)>>2)];
var len = HEAPU32[(((iov)+(4))>>2)];
iov += 8;
var curr = FS.write(stream, HEAP8,ptr, len, offset);
if (curr < 0) return -1;
ret += curr;
}
return ret;
}
function _fd_write(fd, iov, iovcnt, pnum) {
try {
;
var stream = SYSCALLS.getStreamFromFD(fd);
var num = doWritev(stream, iov, iovcnt);
HEAP32[((pnum)>>2)] = num;
return 0;
} catch (e) {
if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;
return e.errno;
}
}
function _getTempRet0() {
return getTempRet0();
}
function _llvm_eh_typeid_for(type) {
return type;
}
function _setTempRet0(val) {
setTempRet0(val);
}
function __isLeapYear(year) {
return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
}
function __arraySum(array, index) {
var sum = 0;
for (var i = 0; i <= index; sum += array[i++]) {
// no-op
}
return sum;
}
var __MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];
var __MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];
function __addDays(date, days) {
var newDate = new Date(date.getTime());
while (days > 0) {
var leap = __isLeapYear(newDate.getFullYear());
var currentMonth = newDate.getMonth();
var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
if (days > daysInCurrentMonth-newDate.getDate()) {
// we spill over to next month
days -= (daysInCurrentMonth-newDate.getDate()+1);
newDate.setDate(1);
if (currentMonth < 11) {
newDate.setMonth(currentMonth+1)
} else {
newDate.setMonth(0);
newDate.setFullYear(newDate.getFullYear()+1);
}
} else {
// we stay in current month
newDate.setDate(newDate.getDate()+days);
return newDate;
}
}
return newDate;
}
function _strftime(s, maxsize, format, tm) {
// size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
// http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
var tm_zone = HEAP32[(((tm)+(40))>>2)];
var date = {
tm_sec: HEAP32[((tm)>>2)],
tm_min: HEAP32[(((tm)+(4))>>2)],
tm_hour: HEAP32[(((tm)+(8))>>2)],
tm_mday: HEAP32[(((tm)+(12))>>2)],
tm_mon: HEAP32[(((tm)+(16))>>2)],
tm_year: HEAP32[(((tm)+(20))>>2)],
tm_wday: HEAP32[(((tm)+(24))>>2)],
tm_yday: HEAP32[(((tm)+(28))>>2)],
tm_isdst: HEAP32[(((tm)+(32))>>2)],
tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
};
var pattern = UTF8ToString(format);
// expand format
var EXPANSION_RULES_1 = {
'%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
'%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
'%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
'%h': '%b',                       // Equivalent to %b
'%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
'%R': '%H:%M',                    // Replaced by the time in 24-hour notation
'%T': '%H:%M:%S',                 // Replaced by the time
'%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
'%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
// Modified Conversion Specifiers
'%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
'%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
'%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
'%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
'%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
'%EY': '%Y',                      // Replaced by the full alternative year representation.
'%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
'%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
'%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
'%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
'%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
'%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
'%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
'%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
'%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
'%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
'%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
'%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
'%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
};
for (var rule in EXPANSION_RULES_1) {
pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
}
var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
function leadingSomething(value, digits, character) {
var str = typeof value == 'number' ? value.toString() : (value || '');
while (str.length < digits) {
str = character[0]+str;
}
return str;
}
function leadingNulls(value, digits) {
return leadingSomething(value, digits, '0');
}
function compareByDay(date1, date2) {
function sgn(value) {
return value < 0 ? -1 : (value > 0 ? 1 : 0);
}
var compare;
if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
compare = sgn(date1.getDate()-date2.getDate());
}
}
return compare;
}
function getFirstWeekStartDate(janFourth) {
switch (janFourth.getDay()) {
case 0: // Sunday
return new Date(janFourth.getFullYear()-1, 11, 29);
case 1: // Monday
return janFourth;
case 2: // Tuesday
return new Date(janFourth.getFullYear(), 0, 3);
case 3: // Wednesday
return new Date(janFourth.getFullYear(), 0, 2);
case 4: // Thursday
return new Date(janFourth.getFullYear(), 0, 1);
case 5: // Friday
return new Date(janFourth.getFullYear()-1, 11, 31);
case 6: // Saturday
return new Date(janFourth.getFullYear()-1, 11, 30);
}
}
function getWeekBasedYear(date) {
var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
// this date is after the start of the first week of this year
if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
return thisDate.getFullYear()+1;
} else {
return thisDate.getFullYear();
}
} else {
return thisDate.getFullYear()-1;
}
}
var EXPANSION_RULES_2 = {
'%a': function(date) {
return WEEKDAYS[date.tm_wday].substring(0,3);
},
'%A': function(date) {
return WEEKDAYS[date.tm_wday];
},
'%b': function(date) {
return MONTHS[date.tm_mon].substring(0,3);
},
'%B': function(date) {
return MONTHS[date.tm_mon];
},
'%C': function(date) {
var year = date.tm_year+1900;
return leadingNulls((year/100)|0,2);
},
'%d': function(date) {
return leadingNulls(date.tm_mday, 2);
},
'%e': function(date) {
return leadingSomething(date.tm_mday, 2, ' ');
},
'%g': function(date) {
// %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
// In this system, weeks begin on a Monday and week 1 of the year is the week that includes
// January 4th, which is also the week that includes the first Thursday of the year, and
// is also the first week that contains at least four days in the year.
// If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
// the last week of the preceding year; thus, for Saturday 2nd January 1999,
// %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
// or 31st is a Monday, it and any following days are part of week 1 of the following year.
// Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
return getWeekBasedYear(date).toString().substring(2);
},
'%G': function(date) {
return getWeekBasedYear(date);
},
'%H': function(date) {
return leadingNulls(date.tm_hour, 2);
},
'%I': function(date) {
var twelveHour = date.tm_hour;
if (twelveHour == 0) twelveHour = 12;
else if (twelveHour > 12) twelveHour -= 12;
return leadingNulls(twelveHour, 2);
},
'%j': function(date) {
// Day of the year (001-366)
return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
},
'%m': function(date) {
return leadingNulls(date.tm_mon+1, 2);
},
'%M': function(date) {
return leadingNulls(date.tm_min, 2);
},
'%n': function() {
return '\n';
},
'%p': function(date) {
if (date.tm_hour >= 0 && date.tm_hour < 12) {
return 'AM';
} else {
return 'PM';
}
},
'%S': function(date) {
return leadingNulls(date.tm_sec, 2);
},
'%t': function() {
return '\t';
},
'%u': function(date) {
return date.tm_wday || 7;
},
'%U': function(date) {
var days = date.tm_yday + 7 - date.tm_wday;
return leadingNulls(Math.floor(days / 7), 2);
},
'%V': function(date) {
// Replaced by the week number of the year (Monday as the first day of the week)
// as a decimal number [01,53]. If the week containing 1 January has four
// or more days in the new year, then it is considered week 1.
// Otherwise, it is the last week of the previous year, and the next week is week 1.
// Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7 ) / 7);
// If 1 Jan is just 1-3 days past Monday, the previous week
// is also in this year.
if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {
val++;
}
if (!val) {
val = 52;
// If 31 December of prev year a Thursday, or Friday of a
// leap year, then the prev year has 53 weeks.
var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;
if (dec31 == 4 || (dec31 == 5 && __isLeapYear(date.tm_year%400-1))) {
val++;
}
} else if (val == 53) {
// If 1 January is not a Thursday, and not a Wednesday of a
// leap year, then this year has only 52 weeks.
var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;
if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date.tm_year)))
val = 1;
}
return leadingNulls(val, 2);
},
'%w': function(date) {
return date.tm_wday;
},
'%W': function(date) {
var days = date.tm_yday + 7 - ((date.tm_wday + 6) % 7);
return leadingNulls(Math.floor(days / 7), 2);
},
'%y': function(date) {
// Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
return (date.tm_year+1900).toString().substring(2);
},
'%Y': function(date) {
// Replaced by the year as a decimal number (for example, 1997). [ tm_year]
return date.tm_year+1900;
},
'%z': function(date) {
// Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
// For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
var off = date.tm_gmtoff;
var ahead = off >= 0;
off = Math.abs(off) / 60;
// convert from minutes into hhmm format (which means 60 minutes = 100 units)
off = (off / 60)*100 + (off % 60);
return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
},
'%Z': function(date) {
return date.tm_zone;
},
'%%': function() {
return '%';
}
};
// Replace %% with a pair of NULLs (which cannot occur in a C string), then
// re-inject them after processing.
pattern = pattern.replace(/%%/g, '\0\0')
for (var rule in EXPANSION_RULES_2) {
if (pattern.includes(rule)) {
pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
}
}
pattern = pattern.replace(/\0\0/g, '%')
var bytes = intArrayFromString(pattern, false);
if (bytes.length > maxsize) {
return 0;
}
writeArrayToMemory(bytes, s);
return bytes.length-1;
}
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
if (!parent) {
parent = this;  // root node sets parent to itself
}
this.parent = parent;
this.mount = parent.mount;
this.mounted = null;
this.id = FS.nextInode++;
this.name = name;
this.mode = mode;
this.node_ops = {};
this.stream_ops = {};
this.rdev = rdev;
};
var readMode = 292/*292*/ | 73/*73*/;
var writeMode = 146/*146*/;
Object.defineProperties(FSNode.prototype, {
read: {
get: /** @this{FSNode} */function() {
return (this.mode & readMode) === readMode;
},
set: /** @this{FSNode} */function(val) {
val ? this.mode |= readMode : this.mode &= ~readMode;
}
},
write: {
get: /** @this{FSNode} */function() {
return (this.mode & writeMode) === writeMode;
},
set: /** @this{FSNode} */function(val) {
val ? this.mode |= writeMode : this.mode &= ~writeMode;
}
},
isFolder: {
get: /** @this{FSNode} */function() {
return FS.isDir(this.mode);
}
},
isDevice: {
get: /** @this{FSNode} */function() {
return FS.isChrdev(this.mode);
}
}
});
FS.FSNode = FSNode;
FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { requireNodeFS(); NODEFS.staticInit(); };
ERRNO_CODES = {
'EPERM': 63,
'ENOENT': 44,
'ESRCH': 71,
'EINTR': 27,
'EIO': 29,
'ENXIO': 60,
'E2BIG': 1,
'ENOEXEC': 45,
'EBADF': 8,
'ECHILD': 12,
'EAGAIN': 6,
'EWOULDBLOCK': 6,
'ENOMEM': 48,
'EACCES': 2,
'EFAULT': 21,
'ENOTBLK': 105,
'EBUSY': 10,
'EEXIST': 20,
'EXDEV': 75,
'ENODEV': 43,
'ENOTDIR': 54,
'EISDIR': 31,
'EINVAL': 28,
'ENFILE': 41,
'EMFILE': 33,
'ENOTTY': 59,
'ETXTBSY': 74,
'EFBIG': 22,
'ENOSPC': 51,
'ESPIPE': 70,
'EROFS': 69,
'EMLINK': 34,
'EPIPE': 64,
'EDOM': 18,
'ERANGE': 68,
'ENOMSG': 49,
'EIDRM': 24,
'ECHRNG': 106,
'EL2NSYNC': 156,
'EL3HLT': 107,
'EL3RST': 108,
'ELNRNG': 109,
'EUNATCH': 110,
'ENOCSI': 111,
'EL2HLT': 112,
'EDEADLK': 16,
'ENOLCK': 46,
'EBADE': 113,
'EBADR': 114,
'EXFULL': 115,
'ENOANO': 104,
'EBADRQC': 103,
'EBADSLT': 102,
'EDEADLOCK': 16,
'EBFONT': 101,
'ENOSTR': 100,
'ENODATA': 116,
'ETIME': 117,
'ENOSR': 118,
'ENONET': 119,
'ENOPKG': 120,
'EREMOTE': 121,
'ENOLINK': 47,
'EADV': 122,
'ESRMNT': 123,
'ECOMM': 124,
'EPROTO': 65,
'EMULTIHOP': 36,
'EDOTDOT': 125,
'EBADMSG': 9,
'ENOTUNIQ': 126,
'EBADFD': 127,
'EREMCHG': 128,
'ELIBACC': 129,
'ELIBBAD': 130,
'ELIBSCN': 131,
'ELIBMAX': 132,
'ELIBEXEC': 133,
'ENOSYS': 52,
'ENOTEMPTY': 55,
'ENAMETOOLONG': 37,
'ELOOP': 32,
'EOPNOTSUPP': 138,
'EPFNOSUPPORT': 139,
'ECONNRESET': 15,
'ENOBUFS': 42,
'EAFNOSUPPORT': 5,
'EPROTOTYPE': 67,
'ENOTSOCK': 57,
'ENOPROTOOPT': 50,
'ESHUTDOWN': 140,
'ECONNREFUSED': 14,
'EADDRINUSE': 3,
'ECONNABORTED': 13,
'ENETUNREACH': 40,
'ENETDOWN': 38,
'ETIMEDOUT': 73,
'EHOSTDOWN': 142,
'EHOSTUNREACH': 23,
'EINPROGRESS': 26,
'EALREADY': 7,
'EDESTADDRREQ': 17,
'EMSGSIZE': 35,
'EPROTONOSUPPORT': 66,
'ESOCKTNOSUPPORT': 137,
'EADDRNOTAVAIL': 4,
'ENETRESET': 39,
'EISCONN': 30,
'ENOTCONN': 53,
'ETOOMANYREFS': 141,
'EUSERS': 136,
'EDQUOT': 19,
'ESTALE': 72,
'ENOTSUP': 138,
'ENOMEDIUM': 148,
'EILSEQ': 25,
'EOVERFLOW': 61,
'ECANCELED': 11,
'ENOTRECOVERABLE': 56,
'EOWNERDEAD': 62,
'ESTRPIPE': 135,
};;
var ASSERTIONS = false;
/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
var u8array = new Array(len);
var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
if (dontAddNull) u8array.length = numBytesWritten;
return u8array;
}
function intArrayToString(array) {
var ret = [];
for (var i = 0; i < array.length; i++) {
var chr = array[i];
if (chr > 0xFF) {
if (ASSERTIONS) {
assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
}
chr &= 0xFF;
}
ret.push(String.fromCharCode(chr));
}
return ret.join('');
}
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149
// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com
/**
* Decodes a base64 string.
* @param {string} input The string to decode.
*/
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var output = '';
var chr1, chr2, chr3;
var enc1, enc2, enc3, enc4;
var i = 0;
// remove all characters that are not A-Z, a-z, 0-9, +, /, or =
input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
do {
enc1 = keyStr.indexOf(input.charAt(i++));
enc2 = keyStr.indexOf(input.charAt(i++));
enc3 = keyStr.indexOf(input.charAt(i++));
enc4 = keyStr.indexOf(input.charAt(i++));
chr1 = (enc1 << 2) | (enc2 >> 4);
chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
chr3 = ((enc3 & 3) << 6) | enc4;
output = output + String.fromCharCode(chr1);
if (enc3 !== 64) {
output = output + String.fromCharCode(chr2);
}
if (enc4 !== 64) {
output = output + String.fromCharCode(chr3);
}
} while (i < input.length);
return output;
};
// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
var buf = Buffer.from(s, 'base64');
return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
}
try {
var decoded = decodeBase64(s);
var bytes = new Uint8Array(decoded.length);
for (var i = 0 ; i < decoded.length ; ++i) {
bytes[i] = decoded.charCodeAt(i);
}
return bytes;
} catch (_) {
throw new Error('Converting base64 string to bytes failed.');
}
}
// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
if (!isDataURI(filename)) {
return;
}
return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
var asmLibraryArg = {
"__cxa_allocate_exception": ___cxa_allocate_exception,
"__cxa_begin_catch": ___cxa_begin_catch,
"__cxa_end_catch": ___cxa_end_catch,
"__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2,
"__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3,
"__cxa_find_matching_catch_5": ___cxa_find_matching_catch_5,
"__cxa_free_exception": ___cxa_free_exception,
"__cxa_rethrow": ___cxa_rethrow,
"__cxa_throw": ___cxa_throw,
"__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
"__resumeException": ___resumeException,
"__syscall_fcntl64": ___syscall_fcntl64,
"__syscall_fstat64": ___syscall_fstat64,
"__syscall_ioctl": ___syscall_ioctl,
"__syscall_lstat64": ___syscall_lstat64,
"__syscall_newfstatat": ___syscall_newfstatat,
"__syscall_openat": ___syscall_openat,
"__syscall_stat64": ___syscall_stat64,
"_emscripten_date_now": __emscripten_date_now,
"_localtime_js": __localtime_js,
"_tzset_js": __tzset_js,
"abort": _abort,
"emscripten_asm_const_int": _emscripten_asm_const_int,
"emscripten_resize_heap": _emscripten_resize_heap,
"exit": _exit,
"fd_close": _fd_close,
"fd_read": _fd_read,
"fd_seek": _fd_seek,
"fd_write": _fd_write,
"getTempRet0": getTempRet0,
"invoke_fi": invoke_fi,
"invoke_fii": invoke_fii,
"invoke_fiif": invoke_fiif,
"invoke_i": invoke_i,
"invoke_ii": invoke_ii,
"invoke_iif": invoke_iif,
"invoke_iifff": invoke_iifff,
"invoke_iiffff": invoke_iiffff,
"invoke_iii": invoke_iii,
"invoke_iiif": invoke_iiif,
"invoke_iiifffffff": invoke_iiifffffff,
"invoke_iiifffi": invoke_iiifffi,
"invoke_iiii": invoke_iiii,
"invoke_iiiif": invoke_iiiif,
"invoke_iiiii": invoke_iiiii,
"invoke_iiiiid": invoke_iiiiid,
"invoke_iiiiii": invoke_iiiiii,
"invoke_iiiiiii": invoke_iiiiiii,
"invoke_iiiiiiiiiiiiiiii": invoke_iiiiiiiiiiiiiiii,
"invoke_v": invoke_v,
"invoke_vi": invoke_vi,
"invoke_vif": invoke_vif,
"invoke_vifi": invoke_vifi,
"invoke_vifiii": invoke_vifiii,
"invoke_vii": invoke_vii,
"invoke_viifi": invoke_viifi,
"invoke_viii": invoke_viii,
"invoke_viiii": invoke_viiii,
"invoke_viiiii": invoke_viiiii,
"invoke_viiiiii": invoke_viiiiii,
"invoke_viiiiiiff": invoke_viiiiiiff,
"invoke_viiiiiii": invoke_viiiiiii,
"invoke_viiiiiiii": invoke_viiiiiiii,
"llvm_eh_typeid_for": _llvm_eh_typeid_for,
"memory": wasmMemory,
"setTempRet0": setTempRet0,
"strftime": _strftime
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenInit = Module["_animgenInit"] = function() {
return (_animgenInit = Module["_animgenInit"] = Module["asm"]["animgenInit"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenAllocate = Module["_animgenAllocate"] = function() {
return (_animgenAllocate = Module["_animgenAllocate"] = Module["asm"]["animgenAllocate"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenSetOutput = Module["_animgenSetOutput"] = function() {
return (_animgenSetOutput = Module["_animgenSetOutput"] = Module["asm"]["animgenSetOutput"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenSetAvatar = Module["_animgenSetAvatar"] = function() {
return (_animgenSetAvatar = Module["_animgenSetAvatar"] = Module["asm"]["animgenSetAvatar"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenSetSequence = Module["_animgenSetSequence"] = function() {
return (_animgenSetSequence = Module["_animgenSetSequence"] = Module["asm"]["animgenSetSequence"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenGenerateFrames = Module["_animgenGenerateFrames"] = function() {
return (_animgenGenerateFrames = Module["_animgenGenerateFrames"] = Module["asm"]["animgenGenerateFrames"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenDeAllocate = Module["_animgenDeAllocate"] = function() {
return (_animgenDeAllocate = Module["_animgenDeAllocate"] = Module["asm"]["animgenDeAllocate"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _animgenTerminate = Module["_animgenTerminate"] = function() {
return (_animgenTerminate = Module["_animgenTerminate"] = Module["asm"]["animgenTerminate"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
return (_setThrew = Module["_setThrew"] = Module["asm"]["setThrew"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
return (___cxa_can_catch = Module["___cxa_can_catch"] = Module["asm"]["__cxa_can_catch"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
return (___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = Module["asm"]["__cxa_is_pointer_type"]).apply(null, arguments);
};
/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};
function invoke_ii(index,a1) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iii(index,a1,a2) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiif(index,a1,a2,a3) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiifffffff(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiii(index,a1,a2,a3) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_vii(index,a1,a2) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viii(index,a1,a2,a3) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_vi(index,a1) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_v(index) {
var sp = stackSave();
try {
getWasmTableEntry(index)();
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiii(index,a1,a2,a3,a4) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiif(index,a1,a2,a3,a4) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiiiiiff(index,a1,a2,a3,a4,a5,a6,a7,a8) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_vif(index,a1,a2) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_i(index) {
var sp = stackSave();
try {
return getWasmTableEntry(index)();
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_fiif(index,a1,a2,a3) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iifff(index,a1,a2,a3,a4) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiffff(index,a1,a2,a3,a4,a5) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiii(index,a1,a2,a3,a4) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iif(index,a1,a2) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_fi(index,a1) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_vifiii(index,a1,a2,a3,a4,a5) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_fii(index,a1,a2) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiifffi(index,a1,a2,a3,a4,a5,a6) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viifi(index,a1,a2,a3,a4) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_vifi(index,a1,a2,a3) {
var sp = stackSave();
try {
getWasmTableEntry(index)(a1,a2,a3);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
var sp = stackSave();
try {
return getWasmTableEntry(index)(a1,a2,a3,a4,a5);
} catch(e) {
stackRestore(sp);
if (e !== e+0) throw e;
_setThrew(1, 0);
}
}
// === Auto-generated postamble setup entry stuff ===
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["UTF8ToString"] = UTF8ToString;
var calledRun;
/**
* @constructor
* @this {ExitStatus}
*/
function ExitStatus(status) {
this.name = "ExitStatus";
this.message = "Program terminated with exit(" + status + ")";
this.status = status;
}
var calledMain = false;
dependenciesFulfilled = function runCaller() {
// If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
if (!calledRun) run();
if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};
/** @type {function(Array=)} */
function run(args) {
args = args || arguments_;
if (runDependencies > 0) {
return;
}
preRun();
// a preRun added a dependency, run will be called later
if (runDependencies > 0) {
return;
}
function doRun() {
// run may have just been called through dependencies being fulfilled just in this very frame,
// or while the async setStatus time below was happening
if (calledRun) return;
calledRun = true;
Module['calledRun'] = true;
if (ABORT) return;
initRuntime();
if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
postRun();
}
if (Module['setStatus']) {
Module['setStatus']('Running...');
setTimeout(function() {
setTimeout(function() {
Module['setStatus']('');
}, 1);
doRun();
}, 1);
} else
{
doRun();
}
}
Module['run'] = run;
/** @param {boolean|number=} implicit */
function exit(status, implicit) {
EXITSTATUS = status;
procExit(status);
}
function procExit(code) {
EXITSTATUS = code;
if (!keepRuntimeAlive()) {
if (Module['onExit']) Module['onExit'](code);
ABORT = true;
}
quit_(code, new ExitStatus(code));
}
if (Module['preInit']) {
if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
while (Module['preInit'].length > 0) {
Module['preInit'].pop()();
}
}
run();
// -------- pretty-data-fix.js --------
/**
* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.
*  
* Version - 0.40.0
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/pretty-data/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*	pd.xml(data ) - pretty print XML;
*	pd.json(data) - pretty print JSON;
*	pd.css(data ) - pretty print CSS;
*	pd.sql(data)  - pretty print SQL;
*
*	pd.xmlmin(data [, preserveComments] ) - minify XML; 
*	pd.jsonmin(data)                      - minify JSON; 
*	pd.cssmin(data [, preserveComments] ) - minify CSS; 
*	pd.sqlmin(data)                       - minify SQL; 
*
* PARAMETERS:
*
*	@data  			- String; XML, JSON, CSS or SQL text to beautify;
* 	@preserveComments	- Bool (optional, used in minxml and mincss only); 
*				  Set this flag to true to prevent removing comments from @text; 
*	@Return 		- String;
*	
* USAGE:
*	
*	var pd  = require('pretty-data').pd;
*
*	var xml_pp   = pd.xml(xml_text);
*	var xml_min  = pd.xmlmin(xml_text [,true]);
*	var json_pp  = pd.json(json_text);
*	var json_min = pd.jsonmin(json_text);
*	var css_pp   = pd.css(css_text);
*	var css_min  = pd.cssmin(css_text [, true]);
*	var sql_pp   = pd.sql(sql_text);
*	var sql_min  = pd.sqlmin(sql_text);
*
* TEST:
*	comp-name:pretty-data$ node ./test/test_xml
*	comp-name:pretty-data$ node ./test/test_json
*	comp-name:pretty-data$ node ./test/test_css
*	comp-name:pretty-data$ node ./test/test_sql
*/
function pp() {
this.shift = ['\n']; // array of shifts
this.step = '  '; // 2 spaces
var maxdeep = 100, // nesting level
ix = 0;
// initialize array with shifts //
for(ix=0;ix<maxdeep;ix++){
this.shift.push(this.shift[ix]+this.step); 
}
};	
// ----------------------- XML section ----------------------------------------------------
pp.prototype.xml = function(text, preserveComments) {
var strg = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
var ar = strg.replace(/>\s{0,}</g,"><")
.replace(/</g,"~::~<")
.replace(/xmlns\:/g,"~::~xmlns:")
.replace(/xmlns\=/g,"~::~xmlns=")
.split('~::~'),
len = ar.length,
inComment = false,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
// start comment or <![CDATA[...]]> or <!DOCTYPE //
if(ar[ix].search(/<!/) > -1) { 
str += this.shift[deep]+ar[ix];
inComment = true; 
// end comment  or <![CDATA[...]]> //
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
inComment = false; 
}
} else 
// end comment  or <![CDATA[...]]> //    find --> or ]>
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
str += ar[ix];
inComment = false; 
} else 
// <elm></elm> //    find prev <tag and this <\tag    but now not prev \>
if( ar[ix-1] != null && ar[ix-1].search(/\/>/) == -1 && /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
// Omits indentation
// str += ar[ix];
// No longer omits indentation: For compatibility with Java PP routine
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
// if(!inComment) deep--;
} else
// <elm> //
//    find <tag but not </ or />
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
str = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];
} else 
// <elm>...</elm> //    find <tag and </    not sure how both can be on one line
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// </elm> //    find </
if(ar[ix].search(/<\//) > -1) { 
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
} else 
// <elm/> //    find />
if(ar[ix].search(/\/>/) > -1 ) { 
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// <? xml ... ?> //
if(ar[ix].search(/<\?/) > -1) { 
str += this.shift[deep]+ar[ix];
} else 
// xmlns //
if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
str += this.shift[deep]+ar[ix];
} 
else {
str += ar[ix];
}
}
return  (str[0] == '\n') ? str.slice(1) : str;
}
// ----------------------- JSON section ----------------------------------------------------
pp.prototype.json = function(text) {
if ( typeof text === "string" ) {
return JSON.stringify(JSON.parse(text), null, this.step);
}
if ( typeof text === "object" ) {
return JSON.stringify(text, null, this.step);
}
return null;
}
// ----------------------- CSS section ----------------------------------------------------
pp.prototype.css = function(text) {
var ar = text.replace(/\s{1,}/g,' ')
.replace(/\{/g,"{~::~")
.replace(/\}/g,"~::~}~::~")
.replace(/\;/g,";~::~")
.replace(/\/\*/g,"~::~/*")
.replace(/\*\//g,"*/~::~")
.replace(/~::~\s{0,}~::~/g,"~::~")
.split('~::~'),
len = ar.length,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if( /\{/.exec(ar[ix]))  { 
str += this.shift[deep++]+ar[ix];
} else 
if( /\}/.exec(ar[ix]))  { 
str += this.shift[--deep]+ar[ix];
} else
if( /\*\\/.exec(ar[ix]))  { 
str += this.shift[deep]+ar[ix];
}
else {
str += this.shift[deep]+ar[ix];
}
}
return str.replace(/^\n{1,}/,'');
}
// ----------------------- SQL section ----------------------------------------------------
function isSubquery(str, parenthesisLevel) {
return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}
function split_sql(str, tab) {
return str.replace(/\s{1,}/g," ")
.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
.replace(/ CASE /ig,"~::~"+tab+"CASE ")
.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
.replace(/ END /ig,"~::~"+tab+"END ")
.replace(/ FROM /ig,"~::~FROM ")
.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
.replace(/ HAVING /ig,"~::~HAVING ")
//.replace(/ IN /ig,"~::~"+tab+"IN ")
.replace(/ IN /ig," IN ")
.replace(/ JOIN /ig,"~::~JOIN ")
.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
.replace(/ ON /ig,"~::~"+tab+"ON ")
.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
.replace(/ OVER /ig,"~::~"+tab+"OVER ")
.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
.replace(/ THEN /ig," THEN~::~"+tab+"")
.replace(/ UNION /ig,"~::~UNION~::~")
.replace(/ USING /ig,"~::~USING ")
.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
.replace(/ WHERE /ig,"~::~WHERE ")
.replace(/ WITH /ig,"~::~WITH ")
//.replace(/\,\s{0,}\(/ig,",~::~( ")
//.replace(/\,/ig,",~::~"+tab+tab+"")
.replace(/ ALL /ig," ALL ")
.replace(/ AS /ig," AS ")
.replace(/ ASC /ig," ASC ") 
.replace(/ DESC /ig," DESC ") 
.replace(/ DISTINCT /ig," DISTINCT ")
.replace(/ EXISTS /ig," EXISTS ")
.replace(/ NOT /ig," NOT ")
.replace(/ NULL /ig," NULL ")
.replace(/ LIKE /ig," LIKE ")
.replace(/\s{0,}SELECT /ig,"SELECT ")
.replace(/~::~{1,}/g,"~::~")
.split('~::~');
}
pp.prototype.sql = function(text) {
var ar_by_quote = text.replace(/\s{1,}/g," ")
.replace(/\'/ig,"~::~\'")
.split('~::~'),
len = ar_by_quote.length,
ar = [],
deep = 0,
tab = this.step,//+this.step,
inComment = true,
inQuote = false,
parenthesisLevel = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if(ix%2) {
ar = ar.concat(ar_by_quote[ix]);
} else {
ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
}
}
len = ar.length;
for(ix=0;ix<len;ix++) {
parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);
if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
} 
if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
deep++;
str += this.shift[deep]+ar[ix];
} else 
if( /\'/.exec(ar[ix]) )  { 
if(parenthesisLevel<1 && deep) {
deep--;
}
str += ar[ix];
}
else  { 
str += this.shift[deep]+ar[ix];
if(parenthesisLevel<1 && deep) {
deep--;
}
} 
}
str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
return str;
}
// ----------------------- min section ----------------------------------------------------
pp.prototype.xmlmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
return  str.replace(/>\s{0,}</g,"><"); 
}
pp.prototype.jsonmin = function(text) {
return  text.replace(/\s{0,}\{\s{0,}/g,"{")
.replace(/\s{0,}\[$/g,"[")
.replace(/\[\s{0,}/g,"[")
.replace(/:\s{0,}\[/g,':[')
.replace(/\s{0,}\}\s{0,}/g,"}")
.replace(/\s{0,}\]\s{0,}/g,"]")
.replace(/\"\s{0,}\,/g,'",')
.replace(/\,\s{0,}\"/g,',"')
.replace(/\"\s{0,}:/g,'":')
.replace(/:\s{0,}\"/g,':"')
.replace(/:\s{0,}\[/g,':[')
.replace(/\,\s{0,}\[/g,',[')
.replace(/\,\s{2,}/g,', ')
.replace(/\]\s{0,},\s{0,}\[/g,'],[');   
}
pp.prototype.cssmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;
return str.replace(/\s{1,}/g,' ')
.replace(/\{\s{1,}/g,"{")
.replace(/\}\s{1,}/g,"}")
.replace(/\;\s{1,}/g,";")
.replace(/\/\*\s{1,}/g,"/*")
.replace(/\*\/\s{1,}/g,"*/");
}	
pp.prototype.sqlmin = function(text) {
return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}
// --------------------------------------------------------------------------------------------
// this.Pretty = new pp;	
this.getCWAEnv().add(new pp, "Pretty");
// -------- Access.Node.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Access.Node.coffee
// Data transfers using node.js fs and xmldom modules
var Access, FS, Logger, Node, XMLSerialize, cwaenv, lggr, xmlDOM;
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
FS = require("fs");
xmlDOM = require("xmldom");
XMLSerialize = new xmlDOM.XMLSerializer();
Node = {
ELEMENT_NODE: 1,
TEXT_NODE: 3,
PROCESSING_INSTRUCTION_NODE: 7,
COMMENT_NODE: 8,
DOCUMENT_NODE: 9,
DOCUMENT_TYPE_NODE: 10
};
Access = (function() {
class Access {
// Static
static _DOMerr(level, msg) {
if (Access._DOMerrCB) {
return Access._DOMerrCB(level, msg);
} else {
return lggr.warn(`Access.Node: DOM Error (${level}) ${msg}`);
}
}
// Convert XML text to DOM
static toDOM(theXML, errCB = null) {
// Handles DOCTYPE badly
Access._DOMerrCB = errCB;
return Access._DOMParse.parseFromString(theXML, "text/xml");
}
// Get a file or return null. Errors reported via callback.
static fetchURI(theURI, theCB, form = null) {
var doData;
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: Fetching ${theURI}`);
}
doData = (err, data) => {
var errMsg;
if (err) {
if (err.code === "ENOENT") {
errMsg = `fetchURI: ${theURI} does not exist`;
} else {
errMsg = `fetchURI: Error ${err.code} for ${theURI}`;
}
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: ${errMsg}`);
}
// Probably return null partial data
return theCB(null, 1, errMsg, data);
} else {
// Deal with potential newline issue but probably should only be for text files
data = (data.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: Fetched ${theURI}`);
}
return theCB(data, 0, null, data);
}
};
// Read the URI
return FS.readFile(theURI, "utf-8", doData);
}
};
Access._DOMParse = new xmlDOM.DOMParser({
locator: {},
errorHandler: Access._DOMerr
});
return Access;
}).call(this);
// Export
cwaenv.add(Access, "Access");
cwaenv.add(XMLSerialize, "XMLSerialize");
cwaenv.add(Node, "Node");
// Provide console as expected by Coffee code
// @console = console # Now in setup-emcc-node.js JRWG
// (End Access.Node.coffee)
}).call(this);
// -------- Data.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//	Data.coffee
// Common data access and manipulation routines building on Access class
var Access, Data, Logger, Pretty, XMLSerialize, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Access = cwaenv.get("Access");
Pretty = cwaenv.get("Pretty");
XMLSerialize = cwaenv.get("XMLSerialize");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
Data = (function() {
class Data {
// Construct return value
static result(val, errCount, errText, partVal) {
return {
value: val,
errCount: errCount,
errText: errText,
partVal: partVal
};
}
// Parse to JSON safely
static parseJSON(jstr) {
if (typeof lggr.trace === "function") {
lggr.trace(`JSON.parse for \"${jstr}\"`);
}
if ((jstr != null) && jstr.length > 0) {
return JSON.parse(jstr);
} else {
lggr.warn(`JSON.parse failed for \"${jstr}\"`);
return null;
}
}
// Chain callbacks
static tee(cbA, cbB) {
return () => {
cbA();
return cbB();
};
}
// ---------- Pretty Print routines -------------- #
// Pretty Print JSON object or text
static ppJSON(theJSON) {
return Pretty.json(theJSON);
}
// Minimal JSON object or text
static mnJSON(theJSON) {
if (typeof theJSON === "object") {
theJSON = JSON.stringify(theJSON);
}
return Pretty.jsonmin(theJSON);
}
// Pretty Print XML text
static ppXML(theXML, pres = true) {
return Pretty.xml(theXML, pres);
}
// Minimal XML from XML text
static mnXML(theXML, pres = false) {
return Pretty.xmlmin(theXML, pres);
}
// Pretty Print XML from DOM
static ppDOM(theDOM, pres = true) {
return Pretty.xml(XMLSerialize.serializeToString(theDOM), pres);
}
// Minimal XML from DOM
static mnDOM(theDOM, pres = false) {
return Pretty.xmlmin(XMLSerialize.serializeToString(theDOM), pres);
}
// ---------- URI normalisation routines --------- #
// Splits a URI into components
static splitURI(uri) {
var matches, pattern;
// lggr.trace? "Splitting #{uri}"
pattern = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
matches = uri.match(pattern);
return {
scheme: matches[2],
authority: matches[4],
path: matches[5],
query: matches[7],
fragment: matches[9]
};
}
// Rebuild absolute URI string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
// Omit scheme and authority if not given
static stringURI(uriobj) {
var res;
res = uriobj.path;
if (uriobj != null ? uriobj.authority : void 0) {
res = "//" + uriobj.authority + res;
}
if (uriobj != null ? uriobj.scheme : void 0) {
res = uriobj.scheme + ":" + res;
}
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
// Rebuild URI path string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
static stringURIPath(uriobj) {
var res;
res = uriobj.path;
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
static absoluteSplitURI(uri, base) {
var basedir, baseobj, ref, uriobj;
uriobj = Data.splitURI(uri);
baseobj = Data.splitURI(base);
basedir = baseobj.path.substr(0, (baseobj.path.lastIndexOf("/")) + 1);
return {
scheme: uriobj.scheme || baseobj.scheme,
authority: uriobj.authority || baseobj.authority,
path: ((ref = uriobj.path) != null ? ref.charAt(0) : void 0) === "/" ? uriobj.path : basedir + uriobj.path,
query: uriobj.query || baseobj.query,
fragment: uriobj.fragment || baseobj.fragment
};
}
static absoluteURI(uri, base) {
if (typeof lggr.trace === "function") {
lggr.trace(`uri = ${uri} = ${JSON.stringify(Data.splitURI(uri))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`base = ${base} = ${JSON.stringify(Data.splitURI(base))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`res = ${Data.stringURI(Data.absoluteSplitURI(uri, base))} ${JSON.stringify(Data.absoluteSplitURI(uri, base))}`);
}
return Data.stringURI(Data.absoluteSplitURI(uri, base));
}
static asDir(uri) {
if (uri.endsWith("/")) {
return uri;
} else {
return uri + "/";
}
}
// Tests whether the given URL is a "data:" URL
static isDataURL(url) {
if (url) {
return (url.substring(0, 5)) === "data:";
} else {
return false;
}
}
// Get a URI as text
static fetchText(theURI, theCB, form) {
var textCB;
textCB = (val, errC, errT, part) => {
if (errC === 0) {
val = (val.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
}
return theCB(val, errC, errT, part);
};
return Data.fetchURI(theURI, textCB, form);
}
// Get a URI as JSON
static fetchJSON(theURI, theCB, form) {
var JSONCB;
JSONCB = (val, errC, errT, part) => {
var err, newJSON;
if (errC > 0 || val.length === 0) {
return theCB(val, errC, errT, part);
} else if (val.length === 0) {
return theCB(null, 1, "No JSON data found", val);
} else {
try {
newJSON = Data.parseJSON(val);
return theCB(newJSON, 0, null, newJSON);
} catch (error) {
err = error;
return theCB(null, 1, err, val);
}
}
};
return Data.fetchURI(theURI, JSONCB, form);
}
// Return a Promise for a fetched URI
//   Currently Builds on Data.fetchURI
//   Later add JSON extensions
//   Currently eager but later could be lazy
//   Currently uncached
static promiseURI(theURI, form) {
return new Promise((resolve, reject) => {
var theCB;
theCB = (val, errC, errT, part) => {
if (errC > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`promiseURI ${theURI} rejecting ${errT}`);
}
return reject(new Error(JSON.stringify([errC, errT, part])));
} else {
if (typeof lggr.trace === "function") {
lggr.trace(`promiseURI ${theURI} resolving`);
}
return resolve(val);
}
};
return Data.fetchURI(theURI, theCB, form);
});
}
// Return a Promise for a fetched URI as Text
//   Later combine in cache to keep Text Promise
static promiseURIText(theURI, form) {
return (Data.promiseURI(theURI, form)).then(function(res) {
return (res.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
});
}
// Identify function for use in then for Promises
static id(arg) {
return arg;
}
};
//---------
// Might need a constructor for some configuration uses
// "Static" members.
// ---------- Utility routines ------------------- #
// Linked to Access for now
Data.toDOM = Access.toDOM;
// ---------- Data fetching routines ------------- #
// Get raw data from URI
Data.fetchURI = Access.fetchURI;
return Data;
}).call(this);
// Export
cwaenv.add(Data, "Data");
// cwaenv.add Sync, "Sync"
// (End Data.coffee)
}).call(this);
// -------- AnimgenInstance.js --------
// Generated by CoffeeScript 2.6.1
(function() {
var AGI, AsyncQueue, AvCache, Config, Data, HtoG, Logger, allg, cwaenv, document, lggr, theConfig;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
AvCache = cwaenv.get("AvCache");
Config = cwaenv.get("Config");
HtoG = cwaenv.get("HtoG");
AsyncQueue = cwaenv.get("AsyncQueue");
Logger = cwaenv.get("Logger");
lggr = Logger.get("AGI", "debug"); // , "force" # JRWG
allg = Logger.get("AGLite", "debug"); // , "force" # JRWG
document = this.document;
theConfig = Config != null ? Config.theConfig : void 0;
AGI = (function() {
//--------
class AGI {
// Redundant - or should be JRWG
static Init() {
var e, initted;
if (typeof lggr.debug === "function") {
lggr.debug("Init: Called");
}
if (typeof Module === "undefined" || Module === null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module undefined");
}
}
if (Module.cwrap == null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module.cwrap undefined");
}
}
if (Module["cwrap"] == null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module.cwrap undefined");
}
}
// if Module?
//   for nom, val of Module
//     lggr.debug? "Module has #{nom}"
if (typeof Module === "undefined" || Module === null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module undefined");
}
}
if (Module.cwrap == null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module.cwrap undefined");
}
}
if (Module["cwrap"] == null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module.cwrap undefined");
}
}
if (AGI.animInit == null) {
if (typeof lggr.debug === "function") {
lggr.debug("animInit undefined");
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug("animInit defined");
}
}
if (Module.asm == null) {
if (typeof lggr.debug === "function") {
lggr.debug("Module.asm undefined");
}
}
initted = false;
try {
initted = AGI.animInit();
} catch (error) {
e = error;
lggr.error(`Failed call to animInit : ${e.stack}`);
}
if (initted) {
// Set up callbacks
Module.CB_SeqStart = function(jagid, status, nframes) {
return (AGI.Get(jagid)).SeqStart(status, nframes);
};
Module.CB_SignStart = function(jagid, gloss, signIx, frameIx) {
return (AGI.Get(jagid)).SignStart(gloss, signIx, frameIx);
};
Module.CB_SeqEnd = (jagid) => {
return (AGI.Get(jagid)).SeqEnd();
};
Module.CB_FrameStart = (jagid, nmorphs, nbones, time, duration) => {
return (AGI.Get(jagid)).FrameStart(nmorphs, nbones, time, duration);
};
Module.CB_Morph = function(jagid, morph) {
return (AGI.Get(jagid)).Morph(morph);
};
Module.CB_Bone = function(jagid, bone) {
return (AGI.Get(jagid)).Bone(bone);
};
// Try without separate callbacks
// Module.RT_Init = (jagid, status) -> (AGI.Get jagid).DoneInit status
// Module.RT_SetAvatar = (jagid, status) -> (AGI.Get jagid).DoneSetAvatar status
// Module.RT_GenerateFrames = (jagid, status) -> (AGI.Get jagid).DoneGenerateFrames status
// Module.RT_DeAlloc = (jagid, status) -> # (AGI.Get jagid).DoneDeAlloc status
Module.Util_Debug = function(msg) {
return typeof allg.debug === "function" ? allg.debug(msg) : void 0;
};
return true;
} else {
lggr.warn("Init: Failed to initialise");
return false;
}
}
static Valid(id) {
return id >= 0 && id < AGI.MAX;
}
static Get(id) {
return AGI.instances[id] || null;
}
static Terminate() {
if (typeof lggr.debug === "function") {
lggr.debug("Terminate: Called");
}
if (AGI.isInitialised) {
AGI.isInitialised = false;
if (AGI.animTerm()) {
return true;
} else {
lggr.warn("Terminate: Failed to terminate");
return false;
}
} else {
lggr.warn("Terminate: Not running");
return false;
}
}
static Alloc(errPath = null, errAppend = false, errNoErr = true) {
var id, newAGI;
if (typeof lggr.debug === "function") {
lggr.debug("Alloc: Called");
}
newAGI = null;
if (AGI.isInitialised) {
id = 0;
while ((AGI.Valid(id)) && (AGI.Get(id)) !== null) {
id++;
}
if (AGI.Valid(id)) {
if (typeof lggr.debug === "function") {
lggr.debug(`Alloc: Unallocated instance ${id}`);
}
if (AGI.animAlloc(id, errPath, errAppend, errNoErr)) {
newAGI = AGI.instances[id] = new AGI(id);
if (typeof lggr.debug === "function") {
lggr.debug(`Alloc: Allocated instance ${id}`);
}
} else {
lggr.warn(`Alloc: Failed to allocate instance ${id}`);
}
} else {
lggr.warn("Alloc: All Instances already allocated");
}
} else {
lggr.warn("Alloc: Animgen failed to initialise");
}
return newAGI;
}
constructor(jagid1) {
this.jagid = jagid1;
//----------
this.state = AGI.STATE.Alloc;
this.doneProm = null;
this.doneResolve = null;
this.avatar = null;
this.guiPanel = null;
this.fps = theConfig != null ? theConfig.animgenFPS : void 0;
this.sigmlSigns = null; // Not sure this is used (as opposed to a static sigmlSigns)
this.seqFrames = 0;
this.currSigns = null;
this.currFrames = this.currGloss = this.currSignIx = this.currFrameIx = null;
this.frameMorphs = this.frameBones = this.frameTime = this.frameDur = null;
}
// "Instance" members.
SetAvatar(newAv, avXMLs, gui) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetAvatar ${newAv}: Called for instance ${this.jagid} (${this.state}) gui ${gui}`);
}
if (this.state === AGI.STATE.Alloc) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> ???`);
}
// Note order of XMLs puts COMMON config second
if (AGI.animSetAvatar(this.jagid, newAv, avXMLs[1], avXMLs[0], avXMLs[2], avXMLs[3])) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> true`);
}
this.avatar = newAv;
this.guiPanel = gui;
this.state = AGI.STATE.AvatarSet;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> false`);
}
lggr.warn(`SetAvatar ${newAv}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetAvatar ${newAv}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
SetSequence(fps) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetSequence ${fps}: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> ???`);
}
if (AGI.animSetSequence(this.jagid, fps)) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> true`);
}
this.fps = fps;
this.state = AGI.STATE.SeqReady;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> false`);
}
lggr.warn(`SetSequence ${fps}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetSequence ${fps}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
EndSequence() {
if (typeof lggr.debug === "function") {
lggr.debug(`EndSequence: Called for instance ${this.jagid} (${this.state})`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.AvatarSet;
if (this.doneResolve != null) {
if (typeof lggr.debug === "function") {
lggr.debug("EndSequence: Calling doneResolve");
}
}
if (typeof this.doneResolve === "function") {
this.doneResolve(null);
}
return true;
} else {
lggr.warn(`EndSequence: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
// Without @casCB callback, signs are accumulated in @currSigns by SignStart and SeqEnd CB via _endSign
GenerateFrames(sigml, casCB = null) {
var res, theSigns;
this.casCB = casCB;
if (typeof lggr.debug === "function") {
lggr.debug(`GenerateFrames: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.SeqInProgress;
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ???`);
}
res = AGI.animGenerateFrames(this.jagid, sigml);
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ` + (res ? "true" : "false"));
}
if (!res) {
lggr.warn(`GenerateFrames: Failed for instance ${this.jagid}`);
}
// Assumes only returns when completed
this.state = AGI.STATE.SeqReady;
theSigns = this.currSigns;
this.currSigns = null;
return theSigns;
} else {
lggr.warn(`GenerateFrames: Wrong state for instance ${this.jagid} (${this.state})`);
return null;
}
}
DeAlloc() {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Called for instance ${this.jagid} (${this.state})`);
}
// Check in state to be closed down
if (this.state === AGI.STATE.Alloc || this.state === AGI.STATE.AvatarSet) {
// Deallocate instance
this.state = AGI.STATE.Terminated;
AGI.instances[this.jagid] = null;
if (AGI.animDeAlloc(this.jagid)) {
return true;
} else {
lggr.warn(`DeAlloc: Could not release instance ${this.jagid}`);
return false;
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Wrong state for instance ${this.jagid} (${this.state})`);
}
return false;
}
}
// Callbacks from GenerateFrames
SeqStart(status, nframes) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SeqStart ${this.jagid}: status ${status}. frames ${nframes}`);
}
this.seqFrames = nframes;
return this.currSigns = [];
}
_endFrame() {
var newFrame;
if (this.frameBones) {
newFrame = {
time: this.frameTime,
duration: this.frameDur,
morphs: this.frameMorphs,
bones: this.frameBones
};
this.currFrames.push(newFrame);
return this.frameMorphs = this.frameBones = null;
}
}
FrameStart(nmorphs, nbones, time, duration) {
this._endFrame();
this.frameTime = time;
this.frameDur = duration;
this.frameMorphs = [];
return this.frameBones = [];
}
Morph(newMorph) {
return this.frameMorphs.push(newMorph);
}
Bone(newBone) {
return this.frameBones.push(newBone);
}
_endSign() {
var newSign;
if (this.currFrames) {
this._endFrame();
newSign = {
type: AGI.CB.Sign,
signIndex: this.currSignIx,
gloss: this.currGloss,
baseFrameIndex: this.currFrameIx,
frames: this.currFrames
};
if (this.casCB) {
this.casCB(newSign);
} else {
this.currSigns.push(newSign);
}
return this.currFrames = this.currGloss = null;
}
}
SignStart(gloss, signIx, frameIx) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SignStart ${this.jagid}: gloss ${gloss}. signIx ${signIx}. frameIx ${frameIx}`);
}
this._endSign();
this.currGloss = gloss;
this.currSignIx = signIx;
this.currFrameIx = frameIx;
return this.currFrames = [];
}
SeqEnd() {
if (typeof lggr.debug === "function") {
lggr.debug(`Animgen: SeqEnd ${this.jagid}: Called`);
}
return this._endSign();
}
static PrepInstance(av, gui) {
return new Promise((resolve, reject) => {
var makeNewAGI, theAGI, waitAGIDone;
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Called for ${av}/${gui}`);
}
// Singleton currently
theAGI = AGI.Get(0);
if ((theAGI != null ? theAGI.avatar : void 0) === av && (theAGI != null ? theAGI.guiPanel : void 0) === gui) {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Finds ${av}/${gui}`);
}
return resolve(theAGI);
} else {
if (theAGI != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Needs new ${av}/${gui} but finds ${theAGI != null ? theAGI.avatar : void 0}/${theAGI != null ? theAGI.guiPanel : void 0}`);
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Needs new ${av}/${gui} but no Animgen instance set`);
}
}
makeNewAGI = () => {
var avC, cmC, newAGI;
// Deallocate current Instance
// Was: do (AGI.Get 0)?.DeAlloc
// Fails: do theAGI?.DeAlloc
// Fails: do theAGI.DeAlloc?
// Fails: do theAGI?.DeAlloc?
// Works" theAGI?.DeAlloc "" # Fake argument: These days used f() for do f
if (theAGI != null) {
theAGI.DeAlloc();
}
// No logging for now
newAGI = AGI.Alloc();
if (newAGI == null) {
reject(`PrepInstance: Cannot allocate AnimgenInstance for ${av}/${gui}`);
}
cmC = AvCache.get("COMMON");
avC = AvCache.get(av);
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Awaits ZIP entries to SetAvatar ${av}/${gui}`);
}
return Promise.all([cmC.getZIPEnt("config"), avC.getZIPEnt("config"), avC.getZIPEnt("asd"), avC.getZIPEnt("nonManuals")]).catch((err) => {
lggr.warn(`Prepinstance: Configuration unavailable for ${av}/${gui}: ${err}`);
return reject(`SetAvatar failed for ${av}/${gui} with ${err}`);
}).then((XMLs) => {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance: Calls SetAvatar ${av}/${gui}`);
}
if (newAGI.SetAvatar(av, XMLs, gui)) {
return resolve(newAGI);
} else {
newAGI.DeAlloc();
return reject(`PrepInstance: SetAvatar failed for ${av}/${gui}`);
}
});
};
waitAGIDone = () => {
theAGI = AGI.Get(0);
if (!AGI.isInitialised) {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone finds Animgen not running");
}
return reject(`waitAGIDone failed for ${av}/${gui}`);
} else if ((theAGI != null) && theAGI.state !== AGI.STATE.AvatarSet) {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone Promise " + (this.doneProm != null ? "exists" : "needed"));
}
if (theAGI.doneProm == null) {
theAGI.doneProm = new Promise((resolveDone, rejectDone) => {
if (typeof lggr.trace === "function") {
lggr.trace("waitAGIDone creating promise");
}
return theAGI.doneResolve = resolveDone;
});
}
return theAGI.doneProm.then(() => {
return waitAGIDone();
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone state OK");
}
return makeNewAGI();
}
};
return waitAGIDone();
}
});
}
static delayTime(fps, speed, tag = "") {
var delay, elapsed, target;
elapsed = Date.now() - this.startTime;
// Assumes a playing rate haigher than effective fps
target = this.totFrames * 700 / (fps * speed);
// Minimum delay 20. Maximum delay 500
delay = Math.min(Math.max(20, target - elapsed), 500);
if (typeof lggr.debug === "function") {
lggr.debug(`${tag} Elapsed ${elapsed} Frames ${this.totFrames} Delay ${delay}`);
}
return delay;
}
// Static Driving routine: Omit SetSequence to add more SiGML
static SiGMLToCAS(sigml, av, gui, fps, speedFun, H2G, CB, drainFun) {
if (typeof lggr.info === "function") {
lggr.info(`SiGMLToCAS: Started for ${av} panel ${gui} FPS ${fps}`);
}
// Maybe! JRWG
AGI.Initted.then(() => {});
(AGI.PrepInstance(av, gui)).then((theAGI) => {
var genFrames, gloss, i, len, nd, nn, okSigns, procHtoGSiGML, ref, ref1, sigDoc;
this.startTime = Date.now();
this.totFrames = 0;
this.sigmlSigns = 0;
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Started");
}
// Create SiGML Queue
this.sigmlQueue = new AsyncQueue("HorG-SiGML");
sigDoc = Data.toDOM(sigml, function(err, msg) {
return typeof lggr.debug === "function" ? lggr.debug(`Animgen: SiGML malformed: ${err}`) : void 0;
});
ref = (sigDoc != null ? sigDoc.documentElement.childNodes : void 0) || [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
nn = nd != null ? nd.nodeName : void 0;
if (nn === "hamgestural_sign" || nn === "hns_sign") {
gloss = (ref1 = nd.attributes.getNamedItem("gloss")) != null ? ref1.value : void 0;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGML XML has: ${gloss}`);
}
this.sigmlQueue.put({
type: nn,
gloss: gloss,
sigml: "<sigml>" + (Data.mnDOM(nd)) + "</sigml>"
});
}
}
if (this.sigmlQueue.putLen === 0) {
if (typeof lggr.debug === "function") {
lggr.debug("SiGMLToCAS: No valid signs");
}
CB({
type: AGI.CB.Fail,
err: `No valid signs for ${av}`
});
} else {
// Terminate SiGMLQueue
this.sigmlQueue.put(null);
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Ended");
}
// Create GSiGML Queue after completion of SiGML Queue
this.gSigmlQueue = new AsyncQueue("G-SiGML");
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGMLToCAS ${theAGI.jagid} call SetSequence ${av}/${gui} fps ${fps}`);
}
theAGI.SetSequence(fps);
okSigns = 0;
// Process HtoG Queue
procHtoGSiGML = (sign) => {
var procHtoGSign;
procHtoGSign = () => {
var entry;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\" start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\"skipped as draining`);
}
} else {
if (sign.type === "hns_sign") {
entry = new Promise((resolve, reject) => {
var h2gCB;
h2gCB = (res) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applied HtoG`);
}
if (res.errCount > 0 || !res.sigDoc) {
lggr.warn(`SiGMLToCAS: HtoG Errors:\n${res.errText}`);
CB({
type: AGI.CB.Skip,
err: "SiGML invalid HNS sign"
});
return resolve({
gloss: sign.gloss
});
} else {
return resolve({
gloss: sign.gloss,
sigml: Data.mnDOM(res.sigDoc)
});
}
};
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applying HtoG`);
}
// setTimeout (=> H2G.parseHtoGText sign.sigml, h2gCB), 20 # Try without JRWG
return H2G.parseHtoGText(sign.sigml, h2gCB);
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} transferred`);
}
entry = sign;
}
this.gSigmlQueue.put(entry);
}
return this.sigmlQueue.get(procHtoGSiGML);
};
// Delay as appropriate
if (sign != null) {
// No delay if draining
if (drainFun()) {
return procHtoGSign();
} else {
return setTimeout(procHtoGSign, this.delayTime(fps, speedFun(), "HtoG"));
}
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Ended");
}
return this.gSigmlQueue.put(null);
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Started");
}
this.sigmlQueue.get(procHtoGSiGML);
// Process G-SiGML Queue
genFrames = (sign) => {
var nSigns;
if (sign != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} skipped as draining`);
}
} else {
// Check for valid SiGML after H to G
if (sign.sigml != null) {
nSigns = 1;
if (theAGI.GenerateFrames(sign.sigml, CB)) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} generated ${theAGI.seqFrames} frames`);
}
this.totFrames += theAGI.seqFrames;
okSigns += nSigns;
} else {
CB({
type: AGI.CB.Skip,
err: "SiGML invalid sign"
});
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} has no SiGML`);
}
}
}
// Get next sign
return this.gSigmlQueue.get(genFrames); // No delay here JRWG
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Ended");
}
// Indicate end by sending CB.Done
if (okSigns > 0) {
theAGI.EndSequence();
CB({
type: AGI.CB.Done
});
} else {
CB({
type: AGI.CB.Fail,
err: "SiGML invalid"
});
}
return typeof lggr.info === "function" ? lggr.info(`SiGMLToCAS: SiGMLToCAS for ${av} panel ${gui} Ended. Signs ${okSigns}. Frames ${this.totFrames}`) : void 0;
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Started");
}
this.gSigmlQueue.get(genFrames);
}
return null;
}).catch((msg) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: PrepInstance failed: ${msg}`);
}
return CB({
type: AGI.CB.Fail,
err: `Cannot process SiGML for ${av}`
});
});
return void 0;
}
};
//--------
// "Static" members.
// @static
// Fully serialise for now
AGI.MAX = 1;
AGI.STATE = {
Failed: 0,
Running: 1,
Alloc: 2,
AvatarSet: 3,
SeqReady: 4,
SeqInProgress: 5,
Terminated: 6
};
AGI.CB = {
Unset: 0,
Sign: 1,
Skip: 2,
Done: 3,
Fail: 4
};
// Test for successful initialisation. Possibly unnecessary but could guard calls
AGI.isInitialised = false;
// Initialisation folowing EMCC initialisation
(function() {
var promres;
promres = null;
AGI.Initted = new Promise(function(resolve, reject) {
promres = resolve;
return typeof lggr.trace === "function" ? lggr.trace("AGI: Promise created") : void 0;
});
return Module.EMCCInitialised.then(function() {
var e, initted;
if (typeof lggr.debug === "function") {
lggr.debug("AGI: Initialisation");
}
// Wrap C++ functions
AGI.animInit = Module.cwrap('animgenInit', ['number'], []);
AGI.animAlloc = Module.cwrap('animgenAllocate', ['number'], ['number', 'string', 'number', 'number']);
AGI.animSetOutput = Module.cwrap('animgenSetOutput', ['number'], ['number', 'string']);
AGI.animSetAvatar = Module.cwrap('animgenSetAvatar', ['number'], ['number', 'string', 'string', 'string', 'string', 'string']);
AGI.animSetSequence = Module.cwrap('animgenSetSequence', ['number'], ['number', 'number']);
AGI.animGenerateFrames = Module.cwrap('animgenGenerateFrames', ['number'], ['number', 'string']);
AGI.animDeAlloc = Module.cwrap('animgenDeAllocate', ['number'], ['number']);
AGI.animTerm = Module.cwrap('animgenTerminate', ['number'], []);
if (typeof lggr.trace === "function") {
lggr.trace("Init: Called");
}
// Set up callbacks
Module.CB_SeqStart = function(jagid, status, nframes) {
return (AGI.Get(jagid)).SeqStart(status, nframes);
};
Module.CB_SignStart = function(jagid, gloss, signIx, frameIx) {
return (AGI.Get(jagid)).SignStart(gloss, signIx, frameIx);
};
Module.CB_SeqEnd = (jagid) => {
return (AGI.Get(jagid)).SeqEnd();
};
Module.CB_FrameStart = (jagid, nmorphs, nbones, time, duration) => {
return (AGI.Get(jagid)).FrameStart(nmorphs, nbones, time, duration);
};
Module.CB_Morph = function(jagid, morph) {
return (AGI.Get(jagid)).Morph(morph);
};
Module.CB_Bone = function(jagid, bone) {
return (AGI.Get(jagid)).Bone(bone);
};
Module.Util_Debug = function(msg) {
return typeof allg.debug === "function" ? allg.debug(msg) : void 0;
};
// Over cautious now
initted = false;
try {
AGI.isInitialised = AGI.animInit();
} catch (error) {
e = error;
lggr.error(`Failed call to animInit : ${e.stack}`);
}
if (initted) {
true;
}
if (!AGI.isInitialised) {
lggr.warn("Failed to initialise");
false;
}
// AGI initialisation done
promres();
return typeof lggr.trace === "function" ? lggr.trace("AGI: Promise resolve called") : void 0;
});
})();
AGI.Initted.then(() => {
return typeof lggr.trace === "function" ? lggr.trace("AGI: Promise resolve detected") : void 0;
});
// Initialise during setup
AGI.instances = [];
return AGI;
}).call(this);
// Export
cwaenv.add(AGI, "AGI");
// (End AnimgenInstance.coffee)
}).call(this);
// -------- Animgen.main.js --------
// Generated by CoffeeScript 2.6.1
(function() {
//   Driver for Node Animgenlite test applications
var AGI, Data, FS, Logger, argIx, argv, argvLen, avXMLs, avasd, avasdProm, avatardir, avcfg, avcfgProm, avdir, avnmn, avnmnProm, cmcfg, cmcfgProm, cmdir, cwaenv, floatDP, lggr, outFD, outfil, parms, prtArr, prtBone, prtBones, prtFrame, prtFrames, prtMorph, prtMorphs, prtSign, prtSigns, runAnimgen, sigfil, sigflProm, stem, workdir;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
AGI = cwaenv.get("AGI");
FS = require("fs");
argv = process.argv;
argvLen = argv.length;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animgan"); // , "trace", "force" # JRWG
// Utility Functions
outFD = process.stdout.fd;
floatDP = 5;
prtArr = function(arr) {
var el, i, len, res, tag;
tag = "[";
res = "";
for (i = 0, len = arr.length; i < len; i++) {
el = arr[i];
res += tag + (el.toFixed(floatDP));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtBone = function(bone) {
return `\{\"id4cc\":\"${bone.id4cc}\",\"trans\":${prtArr(bone.trans)},\"rot\":${prtArr(bone.rot)}\}`;
};
prtBones = function(bones) {
var bone, i, len, res, tag;
tag = "[";
res = "";
for (i = 0, len = bones.length; i < len; i++) {
bone = bones[i];
res += tag + (prtBone(bone));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtMorph = function(morph) {
return `\{\"id4cc\":\"${morph.id4cc}\",\"amount\":${morph.amount.toFixed(floatDP)}\}`;
};
prtMorphs = function(morphs) {
var i, len, morph, res, tag;
tag = "[";
res = "";
for (i = 0, len = morphs.length; i < len; i++) {
morph = morphs[i];
res += tag + (prtMorph(morph));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtFrame = (tag, frame) => {
var res;
res = `${tag}\n\{\"time\":${frame.time.toFixed(0)},\"duration\":${frame.duration}`;
FS.writeSync(outFD, `${res},\"morphs\":${prtMorphs(frame.morphs)}`);
return FS.writeSync(outFD, `,\"bones\":${prtBones(frame.bones)}\}`);
};
prtFrames = (frames) => {
var frame, i, len, tag;
tag = "[";
for (i = 0, len = frames.length; i < len; i++) {
frame = frames[i];
prtFrame(tag, frame);
tag = ",";
}
return FS.writeSync(outFD, (tag === "[" ? tag : "") + "]");
};
prtSign = (tag, sign) => {
var res;
res = `${tag}{\"signIndex\":${sign.signIndex},\"gloss\":\"${sign.gloss}\",\"baseFrameIndex\":${sign.baseFrameIndex}`;
FS.writeSync(outFD, res + ",\"frames\":");
prtFrames(sign.frames);
return FS.writeSync(outFD, "}");
};
prtSigns = (signs) => {
var i, len, sign, tag;
tag = "[";
for (i = 0, len = signs.length; i < len; i++) {
sign = signs[i];
prtSign(tag, sign);
tag = ",\n";
}
return FS.writeSync(outFD, (tag === "[" ? tag : "") + "]\n");
};
if (typeof lggr.debug === "function") {
lggr.debug(`Args [${argv}] Length ${argvLen}`);
}
stem = argv[1].substr(0, argv[1].lastIndexOf("/"));
if (stem.length > 0) {
stem += "/";
}
if (typeof lggr.trace === "function") {
lggr.trace(`Stem is ${stem}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`Module: ${Object.keys(Module)}`);
}
argIx = 2;
parms = {};
// Where parameters take arguments check arguments are available
// JRWG List of argumentless parameters is probably incomplete
// JRWG Some parameters can be repeated and should be handled specially
while (argIx < argvLen) {
switch (argv[argIx]) {
case "-noerr":
case "-appenderr":
// Parameters without arguments
parms[argv[argIx].slice(1)] = true;
argIx++;
break;
default:
// Parameters with arguments
if (argIx + 1 < argvLen) {
if (typeof lggr.trace === "function") {
lggr.trace(`Parm: ${argv[argIx]} Value: ${argv[argIx + 1]}`);
}
parms[argv[argIx].slice(1)] = argv[argIx + 1];
argIx += 2;
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`Parm: ${argv[argIx]} has no value and is ignored`);
}
argIx++;
}
}
}
if (typeof lggr.trace === "function") {
lggr.trace(`Parameters: ${JSON.stringify(parms)}`);
}
// JRWG Actually animgenlite seems to specify CAS
if (parms.interface !== "CAS2.1" || parms.filetype !== "JSON") {
lggr.warn("Expecting CAS2.1 format for JSON");
}
// Filenames for configuration data
if ((parms != null ? parms.avatardir : void 0) && (parms != null ? parms.avatar : void 0)) {
avatardir = Data.asDir(Data.absoluteURI(parms.avatardir, stem));
avdir = Data.asDir(Data.absoluteURI(parms.avatar, avatardir));
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar directory: ${avdir}`);
}
cmdir = Data.asDir(Data.absoluteURI("COMMON", avatardir));
if (typeof lggr.debug === "function") {
lggr.debug(`Common directory: ${cmdir}`);
}
avcfg = Data.absoluteURI("config.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar config: ${avcfg}`);
}
cmcfg = Data.absoluteURI("config.xml", cmdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Common config: ${cmcfg}`);
}
avasd = Data.absoluteURI("asd.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar ASD: ${avasd}`);
}
avnmn = Data.absoluteURI("nonmanuals.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar nonmanuals: ${avnmn}`);
}
} else {
lggr.warn("Valid -avatar and -avatardir needed");
}
workdir = Data.asDir(Data.absoluteURI(parms.workdir, stem));
if (typeof lggr.debug === "function") {
lggr.debug(`Work dir: ${workdir}`);
}
sigfil = Data.absoluteURI(`${parms.p}.sigml`, workdir);
if (typeof lggr.debug === "function") {
lggr.debug(`SiGML file: ${sigfil}`);
}
if (parms != null ? parms.floatdp : void 0) {
floatDP = parms.floatdp;
}
if (parms != null ? parms.output : void 0) {
outfil = Data.absoluteURI(`${parms.output}.cas.json`, stem);
outFD = FS.openSync(outfil, "w");
if (typeof lggr.debug === "function") {
lggr.debug(`Output file: ${outfil}`);
}
} else {
outfil = null;
}
avXMLs = {};
runAnimgen = (sigml) => {
return AGI.Initted.then(() => {
var errAppend, errNoErr, errPath, signs, stat, theAGI;
// Needs error checking
errPath = parms.E || parms['errors-to'] || null;
if (typeof lggr.debug === "function") {
lggr.debug(`Error path: ${errPath}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar: ${parms.avatar}`);
}
errAppend = parms.appenderr || false;
errNoErr = parms.noerr || false;
// Initialisation now done during loading
if (AGI.isInitialised) {
if (typeof lggr.debug === "function") {
lggr.debug("Animgen Running");
}
} else {
lggr.warn("Animgen not Running");
}
if (typeof lggr.trace === "function") {
lggr.trace(`AGI.Alloc ${errPath}, ${errAppend}, ${errNoErr} -> ???`);
}
theAGI = AGI.Alloc(errPath, errAppend, errNoErr);
if (typeof lggr.debug === "function") {
lggr.debug(`AGI.Alloc ${errPath}, ${errAppend}, ${errNoErr} -> ${theAGI} (${theAGI != null ? theAGI.jagid : void 0})`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`theAGI.SetAvatar ${parms.avatar}, ... -> ???`);
}
stat = theAGI.SetAvatar(parms.avatar, avXMLs);
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetAvatar ${parms.avatar}, ... -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetSequence ${parms.fps} -> ???`);
}
stat = theAGI.SetSequence(parms.fps);
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetSequence ${parms.fps} -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.GenerateFrames [sigml] -> ???");
}
signs = theAGI.GenerateFrames(sigml);
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.GenerateFrames [sigml] -> [signs]");
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.EndSequence -> ???");
}
stat = theAGI.EndSequence();
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.EndSequence -> ${stat}`);
}
prtSigns(signs);
if (outfil) {
FS.closeSync(outFD);
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.DeAlloc -> ???");
}
stat = theAGI.DeAlloc();
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.DeAlloc -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug("AGI.Terminate -> ???");
}
stat = AGI.Terminate();
return typeof lggr.debug === "function" ? lggr.debug(`AGI.Terminate -> ${stat}`) : void 0;
});
};
// Trigger avatar file loading using Promises
cmcfgProm = Data.promiseURIText(cmcfg).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Common config: ${msg}`);
throw err;
});
avcfgProm = Data.promiseURIText(avcfg).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar config: ${msg}`);
throw err;
});
avasdProm = Data.promiseURIText(avasd).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar ASD: ${msg}`);
throw err;
});
avnmnProm = Data.promiseURIText(avnmn).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar nonmanuals: ${msg}`);
throw err;
});
// Fetch SiGML file
sigflProm = Data.promiseURIText(sigfil).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`SiGML file: ${msg}`);
throw err;
});
Promise.all([cmcfgProm, avcfgProm, avasdProm, avnmnProm]).catch(function(err) {
lggr.warn(`${err}`);
throw err;
}).then((XMLs) => {
avXMLs = XMLs;
return sigflProm.then((sigmldoc) => {
return runAnimgen(sigmldoc);
});
});
// (End Animgen.main.coffee)
}).call(this);
// --------  END  --------
